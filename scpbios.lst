     1                                  [map all scpbios.map]
     2                                  ;-----------------------------------SCPBIOS-----------------------------------
     3                                  %include "./Include/equates.inc"
     4                              <1> ;------------------------------------Equates------------------------------------
     5                              <1> permissionflags equ 003h    ;Page table Permission flags
     6                              <1> codedescriptor     equ 0008h
     7                              <1> 
     8                              <1> BIOSStartAddr   equ 00110000h   ;Start just after HMA + 16 bytes
     9                              <1> BIOSInitAddr    equ 800h
    10                              <1> 
    11                              <1> e820Seg         equ 1000h
    12                              <1> e820SizeOff     equ 0000h    ;First word is # of entries
    13                              <1> e820BaseOff     equ e820SizeOff + 2
    14                              <1> e820SizeAddr    equ (e820Seg<<4) + e820SizeOff
    15                              <1> ;---------------------PIC Chip IO values---------------------
    16                              <1> pic1command     equ 020h        ;Command port
    17                              <1> pic2command     equ 0A0h        ;Command port
    18                              <1> pic1data        equ 021h        ;Data port
    19                              <1> pic2data        equ 0A1h        ;Data port
    20                              <1> ;------------------------------------------------------------
    21                              <1> ;-----------------PS/2 IO port commands----------------------
    22                              <1> ps2command      equ 64h            ;Command Port (write)
    23                              <1> ps2status       equ 64h            ;Status Port  (read)
    24                              <1> ps2data         equ 60h           ;Data Port     (read/write)
    25                              <1> ;------------------------------------------------------------
    26                              <1> ;--------------------Serial port equates---------------------
    27                              <1> com1_base       equ 03F8h
    28                              <1> com2_base       equ 02F8h
    29                              <1> com3_base       equ 03E8h
    30                              <1> com4_base       equ 02E8h
    31                              <1> ;------------------------------------------------------------
    32                              <1> ;---------------------PIT port equates-----------------------
    33                              <1> PITbase         equ 40h
    34                              <1> PIT0            equ PITbase
    35                              <1> PIT1            equ PITbase + 1
    36                              <1> PIT2            equ PITbase + 2
    37                              <1> PITcommand      equ PITbase + 3
    38                              <1> ;------------------------------------------------------------
    39                              <1> ;---------------------CMOS port equates----------------------
    40                              <1> cmos_base        equ 70h
    41                              <1> cmos_data        equ 71h
    42                              <1> ;------------------------------------------------------------
    43                              <1> ;--------------------Keyboard equates------------------------
    44                              <1> kb_flag_rshift   equ    01h    ;Right Shift is being held
    45                              <1> kb_flag_lshift   equ    02h    ;Left Shift is being held
    46                              <1> kb_flag_ctrl     equ    04h    ;Ctrl is being held
    47                              <1> kb_flag_alt      equ    08h    ;Alt is being held
    48                              <1> kb_flag_scrlset  equ    10h    ;Scroll lock is set
    49                              <1> kb_flag_numset   equ    20h    ;Num lock is set
    50                              <1> kb_flag_capsset  equ    40h    ;Caps lock is set
    51                              <1> kb_flag_insset   equ    80h    ;Insert mode is set
    52                              <1> 
    53                              <1> kb_flag2_e1      equ    01h    ;0E1h scancode procedure being processed
    54                              <1> kb_flag2_e0      equ    02h    ;0E0h scancode procedure being processed
    55                              <1> ;------------------------------------------------------------
    56                              <1> ;--------------------Screen equates--------------------------
    57                              <1> vga_index        equ    03D4h
    58                              <1> vga_data         equ    03D5h
    59                              <1> ;---------------- New Equates ----------------
    60                              <1> vga_aindex       equ    03B4h    ;Alt (MDA) IO Base
    61                              <1> vga_adata        equ    03B5h
    62                              <1> ;These equates are SEGMENTS, need to be SHL 4 to become addrs
    63                              <1> vga_bpage0       equ    0A0000h
    64                              <1> vga_bpage1       equ    0B0000h
    65                              <1> vga_bpage2       equ    0B8000h
    66                              <1> ;------------------------------------------------------------
    67                              <1> ;----------------------PCI equates---------------------------
    68                              <1> pci_index        equ    0CF8h
    69                              <1> pci_data         equ    0CFCh
    70                              <1> ;------------------------------------------------------------
    71                              <1> ;----------------------USB equates---------------------------
    72                              <1> usb_class        equ    0Ch    ;pci class
    73                              <1> usb_subclass     equ    03h    ;pci subclase
    74                              <1> uhci_interface   equ    00h    ;usb 1.0
    75                              <1> uhcimask         equ    10h
    76                              <1> ohci_interface   equ    10h    ;usb 1.0 alt
    77                              <1> ohcimask         equ    20h
    78                              <1> ehci_interface   equ    20h    ;usb 2.0
    79                              <1> ehcimask         equ    40h
    80                              <1> xhci_interface   equ    30h    ;usb 3.0
    81                              <1> xhcimask         equ    80h
    82                              <1> lousbtablesize   equ    0000E000h    ;Location of the table size, uword
    83                              <1> lousbtablebase   equ    lousbtablesize + 2 ;base of the table, tword entries
    84                              <1> debounceperiod   equ 200 ;double 200ms as per Windows, for inaccuracies
    85                              <1> ;                ------EHCI equates------
    86                              <1> ehcicaplength    equ    00h    ;Add this to base addr in table to find opparams
    87                              <1> ehciversion      equ    02h    ;Interface Version number
    88                              <1> ehcistrucparams  equ    04h    ;Structural Parameters
    89                              <1> ehcihccparams    equ    08h    ;Capability Parameters
    90                              <1> ehciportroute    equ    0Ch    ;Companion Port Route Description (v1 ignore)
    91                              <1> 
    92                              <1> ;Operational registers below
    93                              <1> 
    94                              <1> ehcicmd          equ    00h    ;USB command register
    95                              <1> ehcists          equ    04h    ;USB status register
    96                              <1> ehciintr         equ    08h    ;USB Interrupt Enable
    97                              <1> ehcifrindex      equ    0Ch    ;USB Frame Index
    98                              <1> ehcictrlseg      equ    10h    ;4Gb Segment Selector
    99                              <1> ehciperiodbase   equ    14h    ;Frame List Base Address
   100                              <1> ehciasyncaddr    equ    18h    ;Next Asynchronus List Address
   101                              <1> ehciconfigflag   equ    40h    ;Configured Flag Register
   102                              <1> ehciportsc       equ    44h    ;Read = 1 - # of ports, Write = port ctrl
   103                              <1> ;                ------------------------
   104                              <1> ;                -------MSD equates------
   105                              <1> setupReset       equ 0FFh
   106                              <1> setupGetMaxLUN   equ 0FEh
   107                              <1> ;                ------------------------
   108                              <1> ;                ------Bulk Storage equates------
   109                              <1> CBWSig           equ    043425355h
   110                              <1> CSWSig           equ 053425355h
   111                              <1> CBWFlagOut       equ    00h    ;Switch to send to device
   112                              <1> CBWFlagIn        equ    80h    ;Switch to recieve from
   113                              <1> bCSWPassed       equ    00h
   114                              <1> bCSWFailed       equ    01h
   115                              <1> bCSWPhase        equ    02h
   116                              <1> ;                ------------------------
   117                              <1> ;------------------USB Device table entry sizes------------------
   118                              <1> msdDevTblEntrySize    equ 10h
   119                              <1> hubDevTblEntrySize    equ 8h
   120                              <1> usbDevTblEntrySize    equ 3h
   121                              <1> usbMaxDevices         equ 10
   122                              <1> ;                ------------------------
   123                              <1> ;------------------EHCI Transfer Descriptor size------------------
   124                              <1> ehciSizeOfQH    equ 60h
   125                              <1> ehciSizeOfTD    equ 40h
   126                              <1> ;------------------------------------------------------------
   127                              <1> ;----------------------ATA equates---------------------------
   128                              <1> ata0_base       equ    1F0h
   129                              <1> ata0_ctrl       equ    3F6h
   130                              <1> ata1_base       equ    170h
   131                              <1> ata1_ctrl       equ    376h
   132                              <1> 
   133                              <1> msd_class       equ    01h
   134                              <1> ide_subclass    equ    01h
   135                              <1> sata_subclass   equ    06h
   136                              <1> ;------------------------------------------------------------
   137                              <1> ;----------------------IDE equates---------------------------
   138                              <1> ideTableEntrySize     equ 10h
   139                              <1> ;----------------------FDD equates---------------------------
   140                              <1> fdd_base        equ    3F0h
   141                              <1> ;----------------------Int 33h Equates-----------------------
   142                              <1> fdiskTableEntrySize   equ 10h
   143                              <1> int33TblEntrySize     equ 10h
   144                              <1> ;------------------------------------------------------------
   145                              <1> ;------------------------------------------------------------
   146                              <1> ;------------------------Misc--------------------------------
   147                              <1> port61h         equ 61h         ;I/O port 61h
   148                              <1> EOI             equ 20h         ;End of interrupt signal
   149                              <1> waitp           equ 80h         ;debug port used to wait for io cycles
   150                              <1> bochsout        equ 0E9h        ;Emulator debug port
   151                              <1> BREAKPOINT      equ 0CCh        ;Use to manually encode breakpoints in program
   152                              <1> sizeOfMCPAlloc  equ 800h        ;2Kb allocated space
   153                              <1> ;------------------------------------------------------------
     4                                  ;----------------------------------------------------------------
     5                                  ;                 BIOS SYSTEM TABLE AREA                        :
     6                                  ;----------------------------------------------------------------
     7                                  Segment BIOSTables nobits start=BIOSStartAddr align=1
     8                                  %include "./BSS/gtables.asm"
     9                              <1> ;Global Data BIOS tables
    10 00000000 <res 1000h>         <1> BIOSIDTable     resq 2*256  ;256 paragraph entries reserved for IDT
    11 00001000 <res 6000h>         <1> BIOSPageTbl     resq 0C00h  ;6000 bytes for page tables
    12 00007000 <res 18h>           <1> BIOSGDTable     resq 3      ;3 entries in basic GDT
    13 00007018 ????????????????    <1>                 resq 1      ;Alignment qword
     9                                  ;----------------------------------------------------------------
    10                                  ;                    BIOS DATA AREA STARTS HERE                 :
    11                                  ;----------------------------------------------------------------
    12                                  Segment data nobits follows=BIOSTables align=1 
    13                                  %include "./BSS/bda.asm"
    14                              <1> ;Refer to MEMMAP.TXT for memory address reference!
    15                              <1> ;If Interrupt call is faulty, Carry will be set AND either:
    16                              <1> ;                    ah=80h => Invalid function.
    17                              <1> ;                    ah=86h => Not (yet) supported.
    18                              <1> ;------------------------------Data Area-------------------------
    19 00000000 ????                <1> IDTlength       resw 1 ;Maximum number of Interrupts is 256
    20                              <1> IDTpointer:
    21 00000002 ????                <1> .Limit          resw 1
    22 00000004 ????????????????    <1> .Base           resq 1
    23                              <1> 
    24 0000000C ????                <1> GDTlength       resw 1
    25                              <1> GDTpointer:
    26 0000000E ????                <1> .Limit          resw 1
    27 00000010 ????????????????    <1> .Base           resq 1
    28                              <1> 
    29 00000018 ????????????????    <1> pageTablePtr:   resq 1
    30                              <1> ;----------------------------------------
    31                              <1> ;       Spurious Interrupt counter      :
    32                              <1> ;----------------------------------------
    33 00000020 ??                  <1> spurint1        resb 1    ;Keep track of how many spur ints on pic1
    34 00000021 ??                  <1> spurint2        resb 1    ;pic 2
    35                              <1> ;----------------------------------------
    36                              <1> ;            Keyboard Data Area         :
    37                              <1> ;----------------------------------------
    38 00000022 <res 20h>           <1> kb_buffer       resw 10h
    39 00000042 ????????????????    <1> kb_buf_head     resq 1    ;Pointer to Keyboard buffer head
    40 0000004A ????????????????    <1> kb_buf_tail     resq 1    ;Pointer to Keyboard buffer tail 
    41 00000052 ????????????????    <1> kb_buf_start    resq 1    ;Pointer for circular buffer start
    42 0000005A ????????????????    <1> kb_buf_end      resq 1    ;Ditto..., for end
    43 00000062 ??                  <1> kb_flags        resb 1    ;Keyboard state flags
    44 00000063 ??                  <1> kb_flags_1      resb 1    ;Extended flags, empty for now
    45 00000064 ??                  <1> kb_flags_2      resb 1    ;Bit 0 = E1 present, Bit 1 = E0 present
    46 00000065 ??                  <1> break_flag      resb 1    ;Well, its not for the Print Screen key
    47                              <1> ;----------------------------------------
    48                              <1> ;            Serial Data Area           :
    49                              <1> ;----------------------------------------
    50 00000066 ??                  <1> numCOM          resb 1  ;Number of Serial Ports
    51 00000067 ????????????????    <1> com_addresses   resw 4     ;Space for 4 IO addresses
    52                              <1> 
    53                              <1> comX_buffer:
    54 0000006F <res 10h>           <1> com1_buffer     resb 10h 
    55 0000007F <res 10h>           <1> com2_buffer     resb 10h
    56 0000008F <res 10h>           <1> com3_buffer     resb 10h
    57 0000009F <res 10h>           <1> com4_buffer     resb 10h
    58                              <1> 
    59                              <1> comX_buf_head:
    60 000000AF ????????????????    <1> com1_buf_head   resq 1
    61 000000B7 ????????????????    <1> com2_buf_head   resq 1
    62 000000BF ????????????????    <1> com3_buf_head   resq 1
    63 000000C7 ????????????????    <1> com4_buf_head   resq 1
    64                              <1> 
    65                              <1> comX_buf_tail:
    66 000000CF ????????????????    <1> com1_buf_tail   resq 1
    67 000000D7 ????????????????    <1> com2_buf_tail   resq 1
    68 000000DF ????????????????    <1> com3_buf_tail   resq 1
    69 000000E7 ????????????????    <1> com4_buf_tail   resq 1
    70                              <1> 
    71                              <1> comX_buf_start:
    72 000000EF ????????????????    <1> com1_buf_start  resq 1
    73 000000F7 ????????????????    <1> com2_buf_start  resq 1
    74 000000FF ????????????????    <1> com3_buf_start  resq 1
    75 00000107 ????????????????    <1> com4_buf_start  resq 1
    76                              <1> 
    77                              <1> comX_buf_end:
    78 0000010F ????????????????    <1> com1_buf_end    resq 1
    79 00000117 ????????????????    <1> com2_buf_end    resq 1
    80 0000011F ????????????????    <1> com3_buf_end    resq 1
    81 00000127 ????????????????    <1> com4_buf_end    resq 1
    82                              <1> 
    83                              <1> ;----------------------------------------
    84                              <1> ;            Printer Data Area          :
    85                              <1> ;----------------------------------------
    86 0000012F ????????????        <1> prt_addresses   resw 3    ;Space for 3 IO addresses
    87                              <1> ;----------------------------------------
    88                              <1> ;            Timer Data Area            :
    89                              <1> ;----------------------------------------
    90 00000135 ????                <1> pit_divisor     resw 1
    91 00000137 ????????            <1> pit_ticks       resd 1    ;Similar to IBM PC, only with default divisor
    92                              <1> ;[31]=OF cnt, [30:21]=Res [20:16]=Hi cnt, [15,0]=Lo cnt
    93 0000013B ????????????????    <1> rtc_ticks       resq 1
    94                              <1> ;----------------------------------------
    95                              <1> ;            Screen Data Area           :
    96                              <1> ;----------------------------------------
    97 00000143 <res 10h>           <1> scr_curs_pos    resw 8    ;Cursor pos, hi byte = row / lo byte = column
    98 00000153 ??                  <1> scr_cols        resb 1    ;80 Cols
    99 00000154 ??                  <1> scr_rows        resb 1    ;25 Rows
   100 00000155 ????                <1> scr_curs_shape  resw 1    ;Packed start/end scan line
   101 00000157 ??                  <1> scr_char_attr   resb 1    ;Grey text on black background
   102 00000158 ??                  <1> scr_mode        resb 1    ;80x25, 16 colours default
   103 00000159 ??                  <1> scr_active_page resb 1    ;Mode dependent
   104 0000015A ????                <1> scr_crtc_base   resw 1    ;03D4h for Graphics, 03B4h for MDA
   105 0000015C ????????            <1> scr_page_addr   resd 1    ;CRTC Register 12 changes base address accessed
   106 00000160 ????????????????    <1> scr_mode_params resq 1    ;Stub pointer location for future mode parameters
   107 00000168 <res 40h>           <1> scr_vga_ptrs    resq 8  ;VGA pointers
   108                              <1> ;----------------------------------------
   109                              <1> ;       Mass storage Data Area          :
   110                              <1> ;----------------------------------------
   111 000001A8 ??                  <1> i33Devices      resb 1  ;Number of devices Int 33h is aware of
   112 000001A9 ??                  <1> msdStatus       resb 1  ;Status byte. Used by BIOS for all transfers with MSD.
   113 000001AA ??                  <1> fdiskNum        resb 1  ;Number of fixed disks
   114 000001AB ??                  <1> ir14_mutex      resb 1
   115 000001AC ??                  <1> ir14_status     resb 1
   116 000001AD ??                  <1> ir15_mutex      resb 1
   117 000001AE ??                  <1> ir15_status     resb 1
   118 000001AF ????????????????    <1> diskDptPtr      resq 1
   119 000001B7 ????????????????    <1> fdiskDptPtr     resq 1
   120                              <1> ;----------------------------------------
   121                              <1> ;            SysInit Data Area          :
   122                              <1> ;----------------------------------------
   123 000001BF ????????????????    <1> nextFilePtr     resq 1  ;Pointer to next file to load
   124 000001C7 ????                <1> numSectors      resw 1  ;Number of sectors to copy 
   125                              <1> ;----------------------------------------
   126                              <1> ;            Memory Data Area           :
   127                              <1> ;----------------------------------------
   128 000001C9 ????                <1> MachineWord     resw 1    ;Really Legacy Hardware Bitfield
   129 000001CB ????                <1> convRAM         resw 1  ;Conventional memory word
   130 000001CD ????????????????    <1> userBase        resq 1    ;Start address of the user space
   131 000001D5 ??                  <1> bigmapSize      resb 1    ;First byte, in units of 24 bytes
   132 000001D6 ????????????????    <1> srData          resw 4  ;4 words for memory64MB word 0 is ax word 1 is bx etc.
   133 000001DE ????                <1> srData1         resw 1  ;Reserve 1 word for memory16MB
   134 000001E0 ????????????????    <1> sysMem          resq 1  ;Size of usable system RAM (without SCP/BIOS)
   135 000001E8 ????????            <1> scpSize         resd 1  ;Size of SCP/BIOS allocation
   136                              <1> ;----------------------------------------
   137                              <1> ;            MCP Data Area              :
   138                              <1> ;----------------------------------------
   139 000001EC ????????????????    <1> mcpUserBase     resq 1  ;Pointer to register save space
   140 000001F4 ????????????????    <1> mcpUserRip      resq 1  ;Save the custom user RIP for new jumps
   141 000001FC ????????????????    <1> mcpUserkeybf    resq 1  ;Pointer to the keyboard buffer
   142 00000204 ????????????????    <1> mcpUserRaxStore resq 1  ;Temp rax save space
   143 0000020C ????????????????    <1> mcpStackPtr     resq 1  ;Address of base of user Stack Pointer
   144                              <1> ;----------------------------------------
   145                              <1> ;            USB Data Area              :
   146                              <1> ;----------------------------------------
   147 00000214 ??                  <1> eControllers    resb 1    ;Number of EHCI controllers
   148 00000215 <res 20h>           <1> eControllerList resq 4    ;Entry = PCI space addr|MMIO addrs
   149 00000235 ??                  <1> usbDevices      resb 1    ;Max value, 10 for now!
   150 00000236 ????????????????    <1> eHCErrorHandler resq 1  ;Address of default error handler
   151                              <1> ;----------------------------------------
   152                              <1> ;            EHCI Async Area            :
   153                              <1> ;----------------------------------------
   154 0000023E ????????????????    <1> eCurrAsyncHead  resq 1      ;Point to the current head of the async list
   155 00000246 ??                  <1> eNewBus         resb 1      ;Default to 0, if 1, a new bus was selected
   156 00000247 ??                  <1> eActiveCtrlr    resb 1        ;Current working controller (default -1)
   157 00000248 ??                  <1> eActiveInt      resb 1        ;Gives a copy of the usbsts intr bits
   158 00000249 ??                  <1> eAsyncMutex     resb 1    
   159                              <1>     ;Mutex, x1b=data NOT ready, wait. x0b=ready, data ready to access.
   160                              <1>     ;        1xb=Internal buffer. 0xb=user provided buffer.
   161                              <1>     ;        bits [7:2], number of interrupts to ignore (if any)
   162                              <1>     ;            a value of 0 means dont ignore
   163                              <1> ;----------------------------------------
   164                              <1> ;            MSD Data Area              :
   165                              <1> ;----------------------------------------
   166 0000024A ??                  <1> cbwTag          resb 1        ;cbw transaction unique id (inc post use)
   167 0000024B ??                  <1> numMSD          resb 1        ;Number of MSD devices
   168                              <1> ;----------------------------------------
   169                              <1> ;           USB Tables                  :
   170                              <1> ;----------------------------------------
   171 0000024C <res 1Eh>           <1> usbDevTbl       resb 10*usbDevTblEntrySize
   172                              <1> usbDevTblEnd    equ $
   173                              <1> usbDevTblE      equ ($ - usbDevTbl)/usbDevTblEntrySize ;Number of Entries
   174                              <1> ;Byte 0 = Dev Addr, Byte 1 = Root hub, Byte 2 = Class Code (USB standard)
   175                              <1> ; i.e. 08h=MSD, 09h=Hub
   176 0000026A <res 50h>           <1> hubDevTbl       resb 10*hubDevTblEntrySize
   177                              <1> hubDevTblEnd    equ $
   178                              <1> hubDevTblE      equ ($ - hubDevTbl)/hubDevTblEntrySize
   179                              <1> ;bAddress - The assigned device address
   180                              <1> ;bBus - Host Bus [Root hub]
   181                              <1> ;bHostHub - Address of Hub we are attached to or 0 for Root
   182                              <1> ;bHubPort - Port number we are inserted in
   183                              <1> ;bMaxPacketSize0 - Max packet size to endpoint 0
   184                              <1> ;bNumPorts - Number of downstream ports on hub
   185                              <1> ;bPowerOn2PowerGood - Time in units of 2ms for device on port to turn on
   186                              <1> ;bRes- Endpoint address, for when we add interrupt eps
   187                              <1> ;   If bNumPorts=0 => Hub needs to undergo Hub Config
   188 000002BA <res A0h>           <1> msdDevTbl       resb 10*msdDevTblEntrySize
   189                              <1> msdDevTblEnd    equ $
   190                              <1> msdDevTblE      equ    ($ - msdDevTbl)/msdDevTblEntrySize
   191                              <1> ;bAddress - The assigned device address [+ 0]
   192                              <1> ;bBus - Host Bus [Root hub] [+ 1]
   193                              <1> ;bHostHub - Address of Hub we are attached to or 0 for Root [+ 2]
   194                              <1> ;bHubPort - Port number we are inserted in  [+ 3]
   195                              <1> ;bInerfaceNumber - Interface number being used  [+ 4]
   196                              <1> ;bInterfaceSubclass - 00h (defacto SCSI), 06h (SCSI), 04h (UFI)     [+ 5]
   197                              <1> ;bInterfaceProtocol - 50h (BBB), 00h (CBI), 01h (CBI w/o interrupt) [+ 6]
   198                              <1> ;bMaxPacketSize0 - Max packet size to endpoint 0                    [+ 7]
   199                              <1> ;bEndpointInAddress - 4 bit address of IN EP                        [+ 8]
   200                              <1> ;wMaxPacketSizeIn - Max packet size to chosen In endpoint           [+ 9]
   201                              <1> ;bEndpointOutAddress - 4 bit address of OUT EP                      [+ 11]
   202                              <1> ;wMaxPacketSizeOut - Max packet size to OUT endpoint                [+ 12]
   203                              <1> ;bInEPdt - In Endpoints' dt bit                                     [+ 14]
   204                              <1> ;bOutEPdt - Out Endpoints' dt bit                                   [+ 15]
   205                              <1> ;These past two bytes are temporarily kept separate! Will bitstuff later
   206                              <1> ;----------------------------------------
   207                              <1> ;           IDE Tables                  :
   208                              <1> ;----------------------------------------
   209                              <1> ;Support up to two IDE controllers
   210 0000035A ??                  <1> ideNumberOfControllers: resb 1
   211 0000035B <res 20h>           <1> ideControllerTable:     resb  2*ideTableEntrySize ;Max 2 controllers
   212                              <1> ;dPCIAddress   - PCI IO address of controller   [+0]
   213                              <1> ;dPCIBAR4 - PCI BAR4, the Bus Mastery address [+4]
   214                              <1> ; Note that this address is given with the bottom nybble indicating
   215                              <1> ; if the address is IO or MMIO. Bit set => IO
   216                              <1> ;----------------------------------------
   217                              <1> ;           ATA Tables                  :
   218                              <1> ;----------------------------------------
   219 0000037B <res 40h>           <1> fdiskTable:     resb 4*fdiskTableEntrySize  ;Max 4 fixed disks
   220                              <1> ; - BIOS address of device
   221                              <1> ;----------------------------------------
   222                              <1> ;            Int33h Table Area          :
   223                              <1> ;----------------------------------------
   224 000003BB <res A0h>           <1> diskDevices:    resb 10*int33TblEntrySize
   225                              <1> diskDevicesE    equ ($ - diskDevices)/int33TblEntrySize
   226                              <1> ;bDevType - 0 = Unasigned, 1 = MSD EHCI, 2 = MSD xHCI, 3 = Floppy Physical,
   227                              <1> ;           4 = ATA device, 5 = ATAPI device   [+ 0]
   228                              <1> ;wDeviceAddress - USB Address/Bus pair OR local device table address  [+ 1]
   229                              <1> ;dBlockSize - Dword size of LBA block (should be 512 for remdev) [+ 3]
   230                              <1> ;qLastLBANum - Last LBA address (OS MAY minus 1 to avoid crashing device) [+ 7]
   231                              <1> ;bEPSize - 1 = 64 byte, 2 = 512 byte (EP size for sector transfer)  [+ 15]
   232                              <1> ;NOTE: LBA SECTOR 0 IS CHS SECTOR 0,0,1 !!
   233                              <1> ;----------------------------------------------------------------
    14                                  ;----------------------------------------------------------------
    15                                  ;                   MCP Transaction area                        :
    16                                  ;----------------------------------------------------------------
    17                                  Segment MCPseg nobits follows=codeResident align=1
    18 00000000 <res 800h>                              resb sizeOfMCPAlloc   ;2KB space
    19                                  MCPsegEnd:  ;Pointer to the end of the segment
    20                                  ;----------------------------------------------------------------
    21                                  ;                  BIOS Transaction area                        :
    22                                  ;                                                               :
    23                                  ;                   Must be the last segment                    :
    24                                  ;----------------------------------------------------------------
    25                                  Segment xdata nobits follows=MCPseg align=40h    ;eXtra data seg
    26                                  %include "./BSS/xbda.asm"
    27                              <1> ;eXtended BDA area for data transfers
    28                              <1> 
    29                              <1> ;This segment comes after the resident code and is the transaction
    30                              <1> ;area. The ehci async schedule (and eventually periodic) live here.
    31                              <1> ;They are BOTH always postfixed by the big memory map.
    32                              <1> ehciAschedule:                  ;Static label for head of the asyncschedule
    33 00000000 <res 60h>           <1> ehciQHead0      resb ehciSizeOfQH ;96 bytes, for address 0 device only
    34 00000060 <res 20h>           <1>     alignb 40h
    35 00000080 <res 60h>           <1> ehciQHead1      resb ehciSizeOfQH ;Used for cmds with an addressed usb device
    36 000000E0 <res 20h>           <1>     alignb 40h
    37 00000100 <res 280h>          <1> ehciTDSpace     resb 10*ehciSizeOfTD   ;640 bytes of transfer space
    38                              <1>     alignb 40h
    39 00000380 <res 20h>           <1> ehciDataOut     resb 20h               ;32 bytes
    40 000003A0 <res 20h>           <1>     alignb 40h
    41                              <1> sectorbuffer:                       ;Same buffer for multiple purposes
    42 000003C0 <res 200h>          <1> ehciDataIn      resb 200h           ;512 bytes, to get as much data as needed
    43                              <1>     alignb 40h
    44 000005C0 <res 10h>           <1> msdCSW          resb 10h                
    45                              <1> ;13 bytes, special, to be saved after each transfer
    46 000005D0 <res 10h>           <1>     alignb 20h      
    47 000005E0 <res 10h>           <1> prdt:           resq 2      ;2 entries in the prdt
    48                              <1> bigmapptr:                        ;Pointer to big mem map
    27                                  ;----------------------------------------------------------------
    28                                  ;                      SysInit Table                            :
    29                                  ;----------------------------------------------------------------
    30                                  Segment SysInitParams   nobits start=600h
    31                                  ;Use the bootsector reload space (600h-800h) as a temporary stack
    32                                  ; and a storage space for the SysInit table
    33                                  SysInitTable:
    34 00000000 ????                    .numSecW        resw 1
    35 00000002 ????????????????        .FileLBA        resq 1
    36 0000000A ????                    loMachineWord   resw 1
    37                                  ;----------------------------------------------------------------
    38                                  ;                      Real Mode Stack                          :
    39                                  ;----------------------------------------------------------------
    40                                  Segment lowStack    nobits  start=700h
    41 00000000 <res 100h>                              resb 100h
    42                                  lowStackPtr:
    43                                  ;----------------------------------------------------------------
    44                                  ORG 800h
    45                                  ;----------------------------------------------------------------
    46                                  ;                    INIT CODE STARTS HERE                      :
    47                                  ;----------------------------------------------------------------
    48                                  Segment codeInit start=BIOSInitAddr align=1
    49                                  BITS 16
    50                                  %include "./Init/RealInit.asm"
    51                              <1> ;First set stack and save the SysInit Ptr, then set A20, check CPUID and 
    52                              <1> ; exended features. Then tell BIOS that we are going long and perhaps 
    53                              <1> ; protected then get the Int 11h word, store at 0:800h
    54                              <1> realInit:
    55                              <1> ;The Caller Far Jumps to set cs to 0
    56 00000000 FA                  <1>     cli     ;Stop interrupts as we dont know where the stack is
    57 00000001 31C0                <1>     xor ax, ax
    58 00000003 8ED8                <1>     mov ds, ax
    59 00000005 8ED0                <1>     mov ss, ax
    60 00000007 BC[0001]            <1>     mov sp, lowStackPtr ;Set up stack pointer
    61 0000000A FB                  <1>     sti
    62 0000000B 26803F0C            <1>     cmp byte [es:bx], 0Ch   ;Check length
    63 0000000F 0F85ED00            <1>     jne .fail   ;If thats not it, error 0
    64 00000013 268B4701            <1>     mov ax, word [es:bx + 1]    ;Get number of sectors into ax 
    65 00000017 B92A00              <1>     mov cx, 42  ;42 sectors maximum
    66 0000001A 39C8                <1>     cmp ax, cx
    67 0000001C 0F43C1              <1>     cmovnb ax, cx
    68 0000001F A3[0000]            <1>     mov word [SysInitTable.numSecW], ax
    69 00000022 26668B4704          <1>     mov eax, dword [es:bx + 4]      ;Get low dword
    70 00000027 66A3[0200]          <1>     mov dword [SysInitTable.FileLBA], eax
    71 0000002B 26668B4708          <1>     mov eax, dword [es:bx + 8]      ;Get high dword
    72 00000030 66A3[0600]          <1>     mov dword [SysInitTable.FileLBA + 4], eax
    73 00000034 06                  <1>     push es
    74                              <1> .a20Proc:
    75 00000035 50                  <1>     push ax
    76 00000036 51                  <1>     push cx ;preserve ax and cx
    77 00000037 31C9                <1>     xor cx, cx ;clear to use as a timeout counter
    78                              <1>     
    79                              <1> .a20FastEnable:
    80 00000039 E492                <1>     in al, 92h
    81 0000003B A802                <1>     test al, 2
    82 0000003D 750B                <1>     jnz .no92
    83 0000003F 0C02                <1>     or al, 2
    84 00000041 24FE                <1>     and al, 0FEh
    85 00000043 E692                <1>     out 92h, al
    86                              <1>     
    87 00000045 FEC1                <1>     inc cl    ;increments the time out counter
    88 00000047 E94900              <1>     jmp .a20Check
    89                              <1>     
    90                              <1> .no92:
    91 0000004A B104                <1>     mov cl, 4
    92 0000004C E96A00              <1>     jmp .a20Fail
    93                              <1>     
    94                              <1> .a20KeybEnable: ;communicating with the keyboard controller
    95 0000004F FA                  <1>     cli
    96                              <1>  
    97 00000050 E83200              <1>     call .a20wait
    98 00000053 B0AD                <1>     mov al,0ADh
    99 00000055 E664                <1>     out 64h,al ;disable the keyboard
   100 00000057 E82B00              <1>     call .a20wait
   101 0000005A B0D0                <1>     mov al,0D0h
   102 0000005C E664                <1>     out 64h,al ;read from the keyboard input
   103 0000005E E82B00              <1>     call .a20wait2
   104 00000061 E460                <1>     in al,60h
   105 00000063 6650                <1>     push eax    ;get the keyboard data and push it to the stack
   106 00000065 E81D00              <1>     call .a20wait
   107 00000068 B0D1                <1>     mov al,0D1h
   108 0000006A E664                <1>     out 64h,al    ;output the command to prep to go a20 
   109 0000006C E81600              <1>     call .a20wait
   110 0000006F 6658                <1>     pop eax    ;need this be eax and not just ax?
   111 00000071 0C02                <1>     or  al,2
   112 00000073 E660                <1>     out 60h,al    ;output to go a20
   113 00000075 E80D00              <1>     call .a20wait
   114 00000078 B0AE                <1>     mov al,0AEh
   115 0000007A E664                <1>     out 64h,al    ;reenable keyboard
   116 0000007C E80600              <1>     call .a20wait    ;done!
   117 0000007F FB                  <1>     sti
   118                              <1> 
   119 00000080 FEC1                <1>     inc cl    ;increments the time out counter
   120 00000082 E90E00              <1>     jmp .a20Check
   121                              <1>     
   122                              <1> .a20wait:
   123 00000085 E464                <1>     in al,64h
   124 00000087 A802                <1>     test al,2
   125 00000089 75FA                <1>     jnz .a20wait
   126 0000008B C3                  <1>     ret
   127                              <1>  
   128                              <1> .a20wait2: 
   129 0000008C E464                <1>     in al,64h
   130 0000008E A801                <1>     test al,1
   131 00000090 74FA                <1>     jz .a20wait2
   132 00000092 C3                  <1>     ret
   133                              <1> 
   134                              <1> .a20Check:
   135 00000093 B8FFFF              <1>     mov ax, 0FFFFh
   136 00000096 50                  <1>     push ax
   137 00000097 07                  <1>     pop es ;es to FFFF
   138 00000098 BF1000              <1>     mov di, 0010h ;FFFF:0010 == 0000:0000
   139 0000009B 31F6                <1>     xor si, si    ;remember ds = 0000
   140 0000009D 268A05              <1>     mov al, byte [es:di]
   141 000000A0 3E3804              <1>     cmp byte [ds:si], al
   142 000000A3 7414                <1>     je .a20Fail
   143 000000A5 FEC0                <1>     inc al    ;make change to al
   144 000000A7 3E8804              <1>     mov byte [ds:si], al ;al is now incremented and saved at address 0000:0000
   145 000000AA 263805              <1>     cmp byte [es:di], al ;check against overflown version
   146 000000AD 740A                <1>     je .a20Fail
   147                              <1>     
   148                              <1> .a20Pass:
   149 000000AF FEC8                <1>     dec al    ;return al to its original value
   150 000000B1 3E8804              <1>     mov byte [ds:si], al ;return to original position
   151                              <1>     
   152 000000B4 59                  <1>     pop cx
   153 000000B5 58                  <1>     pop ax
   154 000000B6 07                  <1>     pop es
   155 000000B7 EB11                <1>     jmp short .a20Exit
   156                              <1>     
   157                              <1> .a20Fail:
   158 000000B9 80F903              <1>     cmp cl, 3
   159 000000BC 0F8E79FF            <1>     jle .a20FastEnable
   160 000000C0 80F906              <1>     cmp cl, 6
   161 000000C3 7E8A                <1>     jle .a20KeybEnable
   162                              <1>     
   163 000000C5 59                  <1>     pop cx
   164 000000C6 58                  <1>     pop ax
   165 000000C7 07                  <1>     pop es
   166 000000C8 EB2E                <1>     jmp short .noa20
   167                              <1> 
   168                              <1> .a20Exit:
   169 000000CA 669C                <1>     pushfd
   170 000000CC 6658                <1>     pop eax
   171 000000CE 6689C1              <1>     mov ecx, eax ;save original flag state for later
   172 000000D1 663500002000        <1>     xor eax, 00200000h ;21st bit - CPUID bit, switch it!!
   173 000000D7 6650                <1>     push eax
   174 000000D9 669D                <1>     popfd
   175                              <1>     
   176 000000DB 669C                <1>     pushfd
   177 000000DD 6658                <1>     pop eax
   178 000000DF 6685C8              <1>     test eax, ecx ; compare the registers. If they are the same
   179 000000E2 7416                <1>     je .noCPUID
   180 000000E4 6651                <1>     push ecx
   181 000000E6 669D                <1>     popfd
   182                              <1> 
   183                              <1> .extCheck:
   184 000000E8 66B800000080        <1>     mov eax, 80000000h
   185 000000EE 0FA2                <1>     cpuid
   186 000000F0 663D01000080        <1>     cmp eax, 80000001h ;If this is true, CPU supports extended functionality
   187 000000F6 733C                <1>     jae tellBIOS
   188                              <1> .noa20:
   189 000000F8 B401                <1>     mov ah, 1    ;noa20 error code
   190                              <1> .noCPUID:
   191 000000FA B402                <1>     mov ah, 2    ;noCPUID error code
   192 000000FC EB02                <1>     jmp short .fail
   193 000000FE B403                <1>     mov ah, 3    ;no Extended functionality error code
   194                              <1> .fail:
   195 00000100 88E2                <1>     mov dl, ah    ;store ax to get error code printed
   196 00000102 BE[2801]            <1>     mov si, .msg
   197 00000105 E81100              <1>     call .write
   198 00000108 88D0                <1>     mov al, dl
   199 0000010A BB0700              <1>     mov bx, 0007h    ;Attribs
   200 0000010D B40E                <1>     mov ah, 0Eh        ;TTY print char
   201 0000010F 0430                <1>     add al, 30h        ;add '0' to digit
   202 00000111 CD10                <1>     int 10h
   203 00000113 31C0                <1>     xor ax, ax
   204 00000115 CD16                <1>     int 16h    ;await keystroke
   205 00000117 CD18                <1>     int 18h
   206                              <1> ;Error codes: 
   207                              <1> ;   00h - Bad SysInit Data
   208                              <1> ;   01h - No A20 Line
   209                              <1> ;   02h - No CPUID 
   210                              <1> ;   03h - No Extended Functionality
   211                              <1> .write: ;destroys registers ax and bx
   212 00000119 AC                  <1>     lodsb
   213 0000011A 3C00                <1>     cmp al, 0 ;check for zero
   214 0000011C 7409                <1>     je .return
   215 0000011E B40E                <1>     mov ah, 0Eh    ;TTY output
   216 00000120 BB0700              <1>     mov bx, 0007h ;colour
   217 00000123 CD10                <1>     int 10h
   218 00000125 EBF2                <1>     jmp short .write
   219                              <1> .return:
   220 00000127 C3                  <1>     ret
   221 00000128 426F6F74206572726F- <1> .msg: db 'Boot error:',0
   221 00000131 723A00              <1>
   222                              <1> tellBIOS:
   223 00000134 66B800EC0000        <1>     mov eax, 0EC00h ;Tell BIOS we are going long
   224 0000013A B303                <1>     mov bl, 03h     ;Both Long and Protected modes
   225 0000013C CD15                <1>     int 15h         ;Ignore response
   226 0000013E CD11                <1>     int 11h
   227 00000140 A3[0A00]            <1>     mov word [loMachineWord], ax
   228                              <1> ;Getting Memory Map
   229                              <1> rmE820Map:
   230 00000143 06                  <1>     push es
   231 00000144 1E                  <1>     push ds
   232 00000145 B80010              <1>     mov ax, e820Seg
   233 00000148 8ED8                <1>     mov ds, ax
   234 0000014A 8EC0                <1>     mov es, ax
   235 0000014C BF0200              <1>     mov di,    e820BaseOff
   236 0000014F 6631DB              <1>     xor ebx, ebx
   237 00000152 31ED                <1>     xor bp,bp
   238 00000154 66BA50414D53        <1>     mov edx, 0534D4150h    ;Magic dword
   239 0000015A 66B820E80000        <1>     mov eax, 0E820h
   240 00000160 2666C7451401000000  <1>     mov dword [es:di + 20], 1
   241 00000169 66B918000000        <1>     mov ecx, 24            ;Get 24 bytes
   242 0000016F CD15                <1>     int 15h
   243 00000171 7257                <1>     jc .mapfail            ;Carry set => Fail
   244 00000173 66BA50414D53        <1>     mov edx, 0534D4150h    ;Magic dword
   245 00000179 6639D0              <1>     cmp eax, edx        ;Must be equal on success
   246 0000017C 754C                <1>     jne .mapfail
   247 0000017E 6685DB              <1>     test ebx, ebx         ;One table entry, bad
   248 00000181 7447                <1>     jz .mapfail
   249 00000183 EB1F                <1>     jmp short .map1
   250                              <1> .map0:
   251 00000185 66B820E80000        <1>     mov eax, 0E820h
   252 0000018B 2666C7451401000000  <1>     mov dword  [es:di + 20], 1
   253 00000194 66B918000000        <1>     mov ecx, 24
   254 0000019A CD15                <1>     int 15h
   255 0000019C 722C                <1>     jc .mapexit
   256 0000019E 66BA50414D53        <1>     mov edx, 0534D4150h
   257                              <1> .map1:
   258 000001A4 E31D                <1>     jcxz .map3
   259 000001A6 80F914              <1>     cmp cl, 20
   260 000001A9 7607                <1>     jbe .map2
   261 000001AB 26F6451401          <1>     test byte [es:di + 20], 1
   262 000001B0 7411                <1>     je .map3
   263                              <1> .map2:
   264 000001B2 26668B4D08          <1>     mov ecx, dword [es:di + 8]
   265 000001B7 26660B4D0C          <1>     or ecx, [es:di + 12]
   266 000001BC 7405                <1>     jz .map3
   267 000001BE 45                  <1>     inc bp
   268 000001BF 81C71800            <1>     add di, 24
   269                              <1> .map3:
   270 000001C3 6685DB              <1>     test ebx, ebx
   271 000001C6 75BD                <1>     jne .map0
   272 000001C8 EB00                <1>     jmp short .mapexit
   273                              <1> .mapfail:
   274                              <1> .mapexit:
   275 000001CA 26892E0000          <1>     mov word [es:e820SizeOff], bp  ;Num entries in var space (3 qwords/entry)
   276                              <1> ;Second memory test
   277 000001CF 31C9                <1>     xor cx, cx
   278 000001D1 31D2                <1>     xor dx, dx
   279 000001D3 B801E8              <1>     mov ax, 0E801h
   280 000001D6 CD15                <1>     int 15h
   281 000001D8 7216                <1>     jc .badmem2
   282 000001DA 80FC86              <1>     cmp ah, 86h    ;unsupported command
   283 000001DD 7411                <1>     je .badmem2
   284 000001DF 3D8000              <1>     cmp ax, 80h    ;invalid command
   285 000001E2 740C                <1>     je .badmem2
   286                              <1> .mem2write:
   287 000001E4 AB                  <1>     stosw
   288 000001E5 89D8                <1>     mov ax, bx
   289 000001E7 AB                  <1>     stosw
   290 000001E8 89C8                <1>     mov ax, cx
   291 000001EA AB                  <1>     stosw
   292 000001EB 89D0                <1>     mov ax, dx
   293 000001ED AB                  <1>     stosw
   294 000001EE EB0B                <1>     jmp short .mem3test
   295                              <1> .badmem2:
   296 000001F0 31C0                <1>     xor ax, ax
   297 000001F2 31DB                <1>     xor bx, bx
   298 000001F4 31C9                <1>     xor cx, cx
   299 000001F6 31D2                <1>     xor dx, dx
   300 000001F8 E9E9FF              <1>     jmp .mem2write
   301                              <1> .mem3test:
   302 000001FB F8                  <1>     clc
   303 000001FC B488                <1>     mov ah, 88h
   304 000001FE CD15                <1>     int 15h
   305 00000200 31DB                <1>     xor bx, bx 
   306 00000202 0F42C3              <1>     cmovc ax, bx    ;if error, store zero
   307 00000205 3D8600              <1>     cmp ax, 86h
   308 00000208 0F44C3              <1>     cmovz ax, bx
   309 0000020B 3D8000              <1>     cmp ax, 80h
   310 0000020E 0F44C3              <1>     cmovz ax, bx
   311 00000211 AB                  <1>     stosw
   312                              <1> .finalmemtest:
   313 00000212 F8                  <1>     clc
   314 00000213 CD12                <1>     int 12h
   315 00000215 0F42C3              <1>     cmovc ax, bx    ;If carry on, store a zero
   316 00000218 AB                  <1>     stosw    ;Store the word
   317                              <1> rmGetFontPointers:
   318                              <1> ;Get ROM Font Pointers, immediately after Memory map
   319                              <1> ;Each entry is 8 bytes long: es=Seg, bp=Off, cx=bytes/char, dx=# of rows - 1
   320 00000219 31DB                <1>     xor bx, bx         ;Clear bh
   321                              <1> .gfp1:    
   322                              <1> ;Over protective routine in the event that the BIOS routine clobbers registers
   323 0000021B BE0010              <1>     mov si, 1000h    ;Save segment loader
   324 0000021E 31C9                <1>     xor cx, cx
   325 00000220 31D2                <1>     xor dx, dx
   326 00000222 31ED                <1>     xor bp, bp
   327 00000224 53                  <1>     push bx            ;Save bx
   328                              <1> 
   329 00000225 B83011              <1>     mov ax, 1130h    ;Get font pointer function
   330 00000228 CD10                <1>     int 10h
   331                              <1> 
   332 0000022A 8CC0                <1>     mov ax, es        ;Get segment into ax to store
   333 0000022C 8EC6                <1>     mov es, si        ;Reload segment for stos to work
   334 0000022E AB                  <1>     stosw
   335 0000022F 89E8                <1>     mov ax, bp        ;Get offset
   336 00000231 AB                  <1>     stosw
   337 00000232 89C8                <1>     mov ax, cx        ;bytes/char
   338 00000234 AB                  <1>     stosw
   339 00000235 88D0                <1>     mov al, dl        ;dl contains # of rows, but zero extended for alignment
   340 00000237 30E4                <1>     xor ah, ah
   341 00000239 AB                  <1>     stosw
   342 0000023A 5B                  <1>     pop bx            ;Get the count back
   343 0000023B FEC7                <1>     inc bh
   344 0000023D 80FF07              <1>     cmp bh, 7
   345 00000240 76D9                <1>     jbe .gfp1        ;Once above 7, fall through
   346                              <1> 
   347 00000242 1F                  <1>     pop ds
   348 00000243 07                  <1>     pop es    ;Bring back original es value
   349                              <1> rmSetTables:
   350                              <1> ;Memory tables live in 0:8000h - 0:E000h range
   351 00000244 66BF00800000        <1>     mov edi, 8000h
   352 0000024A 0F22DF              <1>     mov cr3, edi    ;Cannot lsh cr3
   353 0000024D B90030              <1>     mov cx, 3000h    ;6000h bytes (6x4Kb) of zero to clear table area
   354 00000250 57                  <1>     push di
   355 00000251 31C0                <1>     xor ax, ax
   356 00000253 F3AB                <1>     rep stosw        ;Store 3000h words of zero
   357                              <1> 
   358 00000255 5F                  <1>     pop di            ;Return zero to the head of the table, at 08000h
   359 00000256 B80390              <1>     mov ax, 9000h|permissionflags    ;9000h is the low word of the address.
   360 00000259 AB                  <1>     stosw    ;store the low word of the address
   361 0000025A 81C7FE0F            <1>     add di, 0FFEh
   362 0000025E B90400              <1>     mov cx, 4
   363                              <1> rmUtables:            ;di should point to 8000h
   364 00000261 050010              <1>     add ax, 1000h
   365 00000264 AB                  <1>     stosw    ;ax is now A003h,B003h,C003h,D003h
   366 00000265 81C70600            <1>     add di, 6    ;qword alignment
   367 00000269 49                  <1>     dec cx
   368 0000026A 75F5                <1>     jnz rmUtables
   369                              <1> 
   370 0000026C B90008              <1>     mov cx, 800h    ;4x512 consecutive entries
   371 0000026F 31C0                <1>     xor ax, ax
   372 00000271 50                  <1>     push ax            ;push for algorithm to work
   373 00000272 BF00A0              <1>     mov di, 0A000h
   374                              <1> rmPDTentries:
   375 00000275 B88300              <1>     mov ax, 83h        ;bit 7|permission flags
   376 00000278 AB                  <1>     stosw            ;di incremented twice
   377 00000279 58                  <1>     pop ax            ;get current address
   378 0000027A AB                  <1>     stosw            ;di incremented twice. store the address
   379 0000027B 052000              <1>     add ax, 20h        ;add the offset to the next page
   380 0000027E 50                  <1>     push ax            ;push current address into memory
   381 0000027F 81C70400            <1>     add di, 4        ;qword Align
   382 00000283 49                  <1>     dec cx
   383 00000284 75EF                <1>     jnz rmPDTentries
   384                              <1> 
   385 00000286 0F20E0              <1>     mov eax, cr4                 
   386 00000289 660DA0000000        <1>     or eax, 0A0h ;Set PAE and PGE, for glbl page and physical page extensions
   387 0000028F 0F22E0              <1>     mov cr4, eax 
   388                              <1>     
   389 00000292 66B9800000C0        <1>     mov ecx, 0C0000080h    ;Read EFER MSD into EDX:EAX
   390 00000298 0F32                <1>     rdmsr    ; Read information from the msr.
   391 0000029A 660D00010000        <1>     or eax, 00000100h ; Set the Long mode bit!
   392 000002A0 0F30                <1>     wrmsr  ; Write the data back
   393                              <1>     
   394 000002A2 FA                  <1>     cli
   395 000002A3 B0FF                <1>     mov al, 0FFh             ; Out 0xFF to 0xA1 and 0x21 to disable all IRQs.
   396 000002A5 E6A1                <1>     out 0A1h, al
   397 000002A7 E621                <1>     out 21h, al
   398                              <1> 
   399 000002A9 0F0116[DA02]        <1>     lgdt [GDT.Pointer] ;Load the Global Descriptor Table pointer
   400                              <1> 
   401 000002AE 0F20C0              <1>     mov eax, cr0
   402 000002B1 660D01000080        <1>     or eax, 80000001h ;Set the Paging and Protected Mode bits (Bits 31 and 0)
   403 000002B7 0F22C0              <1>     mov cr0, eax  ;write it back!
   404 000002BA EA[E402]0800        <1>     jmp GDT.Code:longmode_ep
   405                              <1> 
   406                              <1> GDT:                    ;Global Descriptor Table (64-bit).
   407                              <1> .Null: equ $ - GDT      ;The null descriptor.
   408 000002BF 0000000000000000    <1>     dq 0
   409                              <1> .Code: equ $ - GDT      ;The 32-bit code descriptor. Limit = FFFFFh, Base=0
   410 000002C7 FFFF                <1>     dw 0FFFFh           ;Limit 0:15
   411 000002C9 0000                <1>     dw 00000h           ;Base 0:15
   412 000002CB 00                  <1>     db 00h              ;Base 16:23
   413 000002CC 9A                  <1>     db 09Ah             ;Access Byte
   414 000002CD 3F                  <1>     db 03Fh             ;Limit 16:19
   415 000002CE 00                  <1>     db 00b              ;Base 24:31
   416                              <1> 
   417                              <1> .Data: equ $ - GDT      ;The 32-bit data descriptor. 
   418 000002CF FFFF                <1>     dw 0FFFFh           ;Limit 0:15
   419 000002D1 0000                <1>     dw 00000h           ;Base 0:15
   420 000002D3 00                  <1>     db 0h               ;Base 16:23
   421 000002D4 92                  <1>     db 092h             ;Access Byte
   422 000002D5 1F                  <1>     db 01Fh             ;Limit 16:19 then Flags
   423 000002D6 00                  <1>     db 00h              ;Base 24:31
   424 000002D7 90                  <1> ALIGN 4
   425 000002D8 0000                <1>     dw 0
   426 000002DA 1A00                <1> .Pointer    dw $ - GDT - 1      ; GDT pointer.
   427 000002DC [BF02000000000000]  <1> .Base       dq GDT                 ; GDT offset.
   428                              <1> ;----------------------------------------------------------------
    51                                  BITS 64
    52                                  %include "./Init/LongInit.asm"
    53                              <1> ;----------------------------------------------------------------
    54                              <1> ;                    Long Mode Initialisation                   :
    55                              <1> ;----------------------------------------------------------------
    56                              <1> ;----------------------------------------------------------------
    57                              <1> ; Sets up Segment registers, copies the resident portion of SCPBIOS
    58                              <1> ; high, initialises the BDA, copies data from real mode BIOS to 
    59                              <1> ; SCPBIOS internal area, Identity maps the first 4 Gb, creates 
    60                              <1> ; an IVT and moves the GDT to its final resting place,
    61                              <1> ; and directs cr3, gdtr and idtr to the BDA vars and reinits the video
    62                              <1> ; to VGA Mode 3. Finish by printing boot message and memory sizes.
    63                              <1> ;----------------------------------------------------------------
    64                              <1> longmode_ep:
    65 000002E4 66B81000            <1>     mov ax, 10h
    66 000002E8 668ED8              <1>     mov ds, ax
    67 000002EB 668EC0              <1>     mov es, ax
    68 000002EE 668EE0              <1>     mov fs, ax
    69 000002F1 668EE8              <1>     mov gs, ax
    70 000002F4 668ED0              <1>     mov ss, ax
    71                              <1> ;-----------------Write BDA constants-----------------
    72 000002F7 48BF-               <1>     mov rdi, section.data.start
    72 000002F9 [0000000000000000]  <1>
    73 00000301 66B80001            <1>     mov ax, 100h
    74 00000305 66AB                <1>     stosw            ;IDT Length
    75 00000307 66B8FF0F            <1>     mov ax, (100h*10h) - 1    ;IDT Limit
    76 0000030B 66AB                <1>     stosw
    77 0000030D 48B8-               <1>     mov rax, BIOSIDTable    ;IDT Base
    77 0000030F [0000000000000000]  <1>
    78 00000317 48AB                <1>     stosq
    79 00000319 66B80300            <1>     mov ax, 3h
    80 0000031D 66AB                <1>     stosw
    81 0000031F 66B81700            <1>     mov ax, (3h*8h)-1
    82 00000323 66AB                <1>     stosw
    83 00000325 48B8-               <1>     mov rax, BIOSGDTable
    83 00000327 [0070000000000000]  <1>
    84 0000032F 48AB                <1>     stosq
    85 00000331 48B8-               <1>     mov rax, BIOSPageTbl
    85 00000333 [0010000000000000]  <1>
    86 0000033B 48AB                <1>     stosq
    87 0000033D 31C0                <1>     xor eax, eax    ;Clears upper dword too
    88                              <1> ;Clear spur int counters
    89 0000033F 66AB                <1>     stosw
    90                              <1> ;Keyboard area
    91 00000341 B904000000          <1>     mov ecx, 4h
    92 00000346 F348AB              <1>     rep stosq    ;Clear kb buffer for 16 words
    93 00000349 48B8-               <1>     mov rax, kb_buffer
    93 0000034B [2200000000000000]  <1>
    94 00000353 66B90300            <1>     mov cx, 3h    ;Circular pointers
    95 00000357 F348AB              <1>     rep stosq
    96 0000035A 480520000000        <1>     add rax, 20h    ;End of buffer pointer
    97 00000360 48AB                <1>     stosq
    98 00000362 31C0                <1>     xor eax, eax
    99 00000364 AB                  <1>     stosd    ;Store keyboard flags bytes
   100                              <1> ;Serial Area
   101 00000365 AA                  <1>     stosb   ;Clear number of COM devices byte
   102 00000366 48AB                <1>     stosq    ;Clear com_addresses (4 words)
   103 00000368 66B90800            <1>     mov cx, 8
   104 0000036C F348AB              <1>     rep stosq    ;Store 8 qwords for COM buffers
   105                              <1> ;Buffer heads
   106 0000036F 48B8-               <1>     mov rax, com1_buffer
   106 00000371 [6F00000000000000]  <1>
   107 00000379 48AB                <1>     stosq
   108 0000037B 480510000000        <1>     add rax, 10h    ;Com2
   109 00000381 48AB                <1>     stosq
   110 00000383 480510000000        <1>     add rax, 10h    ;Com3
   111 00000389 48AB                <1>     stosq
   112 0000038B 480510000000        <1>     add rax, 10h    ;Com4
   113 00000391 48AB                <1>     stosq
   114                              <1> ;Buffer Tails
   115 00000393 482D30000000        <1>     sub rax, 30h
   116 00000399 48AB                <1>     stosq
   117 0000039B 480510000000        <1>     add rax, 10h    ;Com2
   118 000003A1 48AB                <1>     stosq
   119 000003A3 480510000000        <1>     add rax, 10h    ;Com3
   120 000003A9 48AB                <1>     stosq
   121 000003AB 480510000000        <1>     add rax, 10h    ;Com4
   122 000003B1 48AB                <1>     stosq
   123                              <1> ;Buffer start
   124 000003B3 482D30000000        <1>     sub rax, 30h
   125 000003B9 48AB                <1>     stosq
   126 000003BB 480510000000        <1>     add rax, 10h    ;Com2
   127 000003C1 48AB                <1>     stosq
   128 000003C3 480510000000        <1>     add rax, 10h    ;Com3
   129 000003C9 48AB                <1>     stosq
   130 000003CB 480510000000        <1>     add rax, 10h    ;Com4
   131 000003D1 48AB                <1>     stosq
   132                              <1> ;Buffer end
   133 000003D3 482D20000000        <1>     sub rax, 20h
   134 000003D9 48AB                <1>     stosq
   135 000003DB 480510000000        <1>     add rax, 10h    ;Com2
   136 000003E1 48AB                <1>     stosq
   137 000003E3 480510000000        <1>     add rax, 10h    ;Com3
   138 000003E9 48AB                <1>     stosq
   139 000003EB 480510000000        <1>     add rax, 10h    ;Com4
   140 000003F1 48AB                <1>     stosq
   141                              <1> ;Printer area
   142 000003F3 31C0                <1>     xor eax, eax
   143 000003F5 66B90300            <1>     mov cx, 3h
   144 000003F9 F366AB              <1>     rep stosw
   145                              <1> ;Timers area
   146 000003FC 66AB                <1>     stosw   ;Default pit_divisor, 0 = 65536
   147 000003FE AB                  <1>     stosd    ;pit_ticks
   148 000003FF 48AB                <1>     stosq    ;rtc_ticks
   149                              <1> ;Screen area
   150 00000401 66B90200            <1>     mov cx, 2h
   151 00000405 F348AB              <1>     rep stosq    ;rax, is 0
   152 00000408 66B85000            <1>     mov ax, 50h
   153 0000040C AA                  <1>     stosb
   154 0000040D 66B81900            <1>     mov ax, 19h
   155 00000411 AA                  <1>     stosb
   156 00000412 6631C0              <1>     xor ax, ax
   157 00000415 66AB                <1>     stosw
   158 00000417 66B80700            <1>     mov ax, 07
   159 0000041B AA                  <1>     stosb
   160 0000041C 66B80300            <1>     mov ax, 03
   161 00000420 AA                  <1>     stosb
   162 00000421 6631C0              <1>     xor ax, ax
   163 00000424 AA                  <1>     stosb
   164 00000425 66B8D403            <1>     mov ax, vga_index
   165 00000429 66AB                <1>     stosw
   166 0000042B B800800B00          <1>     mov eax, vga_bpage2
   167 00000430 AB                  <1>     stosd
   168 00000431 31C0                <1>     xor eax, eax    ;zero rax
   169                              <1> ;Store scr_mode_params and scr_vga_ptrs
   170 00000433 B909000000          <1>     mov ecx, 9
   171 00000438 F348AB              <1>     rep stosq
   172                              <1> ;HDD/FDD data area
   173 0000043B 31C0                <1>     xor eax, eax
   174 0000043D 66AB                <1>     stosw   ;Int 33h entries and msdStatus
   175 0000043F AA                  <1>     stosb   ;Fixed disk entries
   176 00000440 AB                  <1>     stosd   ;Hard drive status entries
   177 00000441 48B8-               <1>     mov rax, diskdpt
   177 00000443 [711A000000000000]  <1>
   178 0000044B 48AB                <1>     stosq   ;Store the address of the default remdev format table
   179 0000044D 48B8-               <1>     mov rax, fdiskdpt
   179 0000044F [7C1A000000000000]  <1>
   180 00000457 48AB                <1>     stosq
   181 00000459 31C0                <1>     xor eax, eax
   182                              <1> ;SysInit area
   183 0000045B 488B0425[02000000]  <1>     mov rax, qword [SysInitTable.FileLBA]
   184 00000463 48AB                <1>     stosq   ;NextFileLBA
   185 00000465 0FB70425[00000000]  <1>     movzx eax, word [SysInitTable.numSecW] 
   186 0000046D 66AB                <1>     stosw   ;numSectors Word
   187 0000046F 31C0                <1>     xor eax, eax
   188                              <1> ;Memory Data area
   189 00000471 AB                  <1>     stosd    ;0 MachineWord and convRAM 
   190 00000472 48AB                <1>     stosq   ;0 userBase
   191 00000474 AA                  <1>     stosb    ;0 bigmapSize
   192 00000475 48AB                <1>     stosq   ;0 srData, 4 words
   193 00000477 66AB                <1>     stosw   ;0 srData1, 1 word
   194 00000479 48AB                <1>     stosq   ;0 sysMem, 1 qword
   195 0000047B AB                  <1>     stosd   ;0 scpSize, 1 dword
   196                              <1> ;MCP data area
   197 0000047C 48C70425[EC010000]- <1>     mov qword [mcpUserBase], section.MCPseg.start
   197 00000484 [00000000]          <1>
   198 00000488 48C70425[F4010000]- <1>     mov qword [mcpUserRip], section.MCPseg.start + 180h
   198 00000490 [80010000]          <1>
   199 00000494 48C70425[FC010000]- <1>     mov qword [mcpUserkeybf], section.MCPseg.start + 100h
   199 0000049C [00010000]          <1>
   200 000004A0 48C70425[0C020000]- <1>     mov qword [mcpStackPtr], MCPsegEnd
   200 000004A8 [00080000]          <1>
   201 000004AC 48C70425[04020000]- <1>     mov qword [mcpUserRaxStore], 0
   201 000004B4 00000000            <1>
   202 000004B8 4881C728000000      <1>     add rdi, 5*8    ;Go forwards by 5 entries
   203                              <1> ;USB Area
   204 000004BF AA                  <1>     stosb
   205 000004C0 66B90400            <1>     mov cx, 4
   206 000004C4 F348AB              <1>     rep stosq    ;eControllerList
   207 000004C7 AA                  <1>     stosb
   208 000004C8 48B8-               <1>     mov rax, USB.ehciCriticalErrorHandler ;Get the critical error handler ptr
   208 000004CA [8932000000000000]  <1>
   209 000004D2 48AB                <1>     stosq       ;Install eHCErrorHandler
   210 000004D4 31C0                <1>     xor eax, eax    ;Rezero rax
   211 000004D6 66FFC8              <1>     dec ax
   212 000004D9 48AB                <1>     stosq       ;eCurrAsyncHead
   213 000004DB AA                  <1>     stosb       ;eActiveAddr
   214 000004DC AA                  <1>     stosb        ;eActiveCtrlr
   215 000004DD 66FFC0              <1>     inc ax
   216 000004E0 AB                  <1>     stosd
   217                              <1> ;USB Tables
   218 000004E1 66B91E00            <1>     mov cx, 10*usbDevTblEntrySize
   219 000004E5 F3AA                <1>     rep stosb
   220 000004E7 66B95000            <1>     mov cx, 10*hubDevTblEntrySize
   221 000004EB F3AA                <1>     rep stosb
   222 000004ED 66B9A000            <1>     mov cx, 10*msdDevTblEntrySize
   223 000004F1 F3AA                <1>     rep stosb
   224                              <1> ;IDE and Int 33h stuff
   225 000004F3 AA                  <1>     stosb       ;ideNumberOfControllers
   226 000004F4 66B92000            <1>     mov cx, 2*ideTableEntrySize ;ideControllerTable
   227 000004F8 F3AA                <1>     rep stosb
   228 000004FA 66B94000            <1>     mov cx, 4*fdiskTableEntrySize
   229 000004FE F3AA                <1>     rep stosb
   230 00000500 66B9A000            <1>     mov cx, 10*int33TblEntrySize
   231 00000504 F3AA                <1>     rep stosb
   232                              <1> ;End of BDA variable init
   233                              <1> 
   234                              <1> ;Copy the resident portion of SCPBIOS.SYS to its offset
   235                              <1> Relocate:
   236 00000506 48BE-               <1>     mov rsi, section.codeResident.start
   236 00000508 [0000000000000000]  <1>
   237 00000510 48BF-               <1>     mov rdi, section.codeResident.vstart    ;address for the end of the section
   237 00000512 [0000000000000000]  <1>
   238 0000051A 48B9090A0000000000- <1>     mov rcx, (residentLength/8) + 1
   238 00000523 00                  <1>
   239 00000524 F348A5              <1>     rep movsq    ;Copy resident portion high
   240                              <1> 
   241                              <1> ;Copy machine word into var from 600h
   242 00000527 668B0425[0A000000]  <1>     mov ax, word [loMachineWord]
   243 0000052F 66890425[C9010000]  <1>     mov word [MachineWord], ax
   244                              <1> 
   245                              <1> ;Copy Memory Maps DIRECTLY after USB dynamic space.
   246 00000537 48BF-               <1>     mov rdi, bigmapptr
   246 00000539 [F005000000000000]  <1>
   247                              <1> .move820_0:    ;Add to the end
   248 00000541 48BE00000100000000- <1>     mov rsi, e820SizeAddr
   248 0000054A 00                  <1>
   249 0000054B 66AD                <1>     lodsw    ;Get number of entries for big map
   250 0000054D 480FB6C0            <1>     movzx rax, al    ;zero extend
   251 00000551 488D0C40            <1>     lea rcx, qword [rax + 2*rax]    ;Save 3*#of entries for countdown loop
   252                              <1> .mv0:
   253 00000555 F348A5              <1>     rep movsq    ;Transfer 3*al qwords
   254 00000558 0402                <1>     add al, 2    ;Two more entries for BIOS
   255 0000055A 880425[D5010000]    <1>     mov byte [bigmapSize], al    ;Save entries in al
   256                              <1> ;Compute the size of BIOS allocation + space for two more entries up to next KB
   257 00000561 4881C718000000      <1>     add rdi, 3*8 ;rdi now points to start of last allocated entry (added)
   258 00000568 4889FB              <1>     mov rbx, rdi 
   259 0000056B 4881C318000000      <1>     add rbx, 3*8h   ;Add size of last new entry
   260                              <1> ;Round to nearest KB
   261 00000572 4881E300FCFFFF      <1>     and rbx, ~3FFh
   262 00000579 4881C300040000      <1>     add rbx, 400h
   263 00000580 48891C25[CD010000]  <1>     mov qword [userBase], rbx    ;Save userbase
   264 00000588 4881EB00001100      <1>     sub rbx, BIOSStartAddr 
   265 0000058F 891C25[E8010000]    <1>     mov dword [scpSize], ebx    ;Save Size
   266                              <1> ;Calculate amount of system RAM available
   267                              <1> .readSystemSize:
   268 00000596 48BB-               <1>     mov rbx, bigmapptr
   268 00000598 [F005000000000000]  <1>
   269 000005A0 48BA01000000010000- <1>     mov rdx, 0000000100000001h      ;Valid entry signature
   269 000005A9 00                  <1>
   270 000005AA 0FB6C8              <1>     movzx ecx, al       ;Get the number of 24 byte entries
   271 000005AD 81E902000000        <1>     sub ecx, 2          ;Remove the allocated entries from the count
   272 000005B3 31C0                <1>     xor eax, eax                    ;Zero rax, use to hold cumulative sum
   273                              <1> .rss1:
   274 000005B5 48395310            <1>     cmp qword [rbx + 2*8], rdx   ;Check valid entry
   275 000005B9 7504                <1>     jnz .rss2
   276 000005BB 48034308            <1>     add rax, qword [rbx + 8]    ;Add size to rax
   277                              <1> .rss2:
   278 000005BF 4881C318000000      <1>     add rbx, 3*8                ;Goto next entry
   279 000005C6 FFC9                <1>     dec ecx                     ;Decrement count
   280 000005C8 75EB                <1>     jnz .rss1                   ;Not at zero, keep going
   281 000005CA 48890425[E0010000]  <1>     mov qword [sysMem], rax
   282                              <1> ;Create and insert new entry. If no space found for new, just add to end
   283                              <1> .addEntry:
   284 000005D2 0FB60C25[D5010000]  <1>     movzx ecx, byte [bigmapSize]
   285 000005DA 81E902000000        <1>     sub ecx, 2          ;Remove the allocated entries from the count   
   286 000005E0 31D2                <1>     xor edx, edx    ;Use as index pointer
   287                              <1> .ae0:
   288 000005E2 4881BA[F0050000]00- <1>     cmp qword [bigmapptr+rdx], 100000h    ;Start of extended memory
   288 000005EA 001000              <1>
   289 000005ED 7438                <1>     je .ae1
   290 000005EF 4881C218000000      <1>     add rdx, 18h    ;Go to next entry
   291 000005F6 FFC9                <1>     dec ecx 
   292 000005F8 75E8                <1>     jnz .ae0
   293                              <1> ;If address not found, just add it to the end, deal with that here
   294                              <1> ;Ignore the extra calculated allocated entry
   295                              <1> ;rdi points to last new entry, so sub rdi to point to second to last entry
   296 000005FA 4881EF18000000      <1>     sub rdi, 3*8h
   297 00000601 48C70700001100      <1>     mov qword [rdi], BIOSStartAddr
   298 00000608 488B0425[E8010000]  <1>     mov rax, qword [scpSize]
   299 00000610 48894708            <1>     mov qword [rdi + 8h], rax
   300 00000614 48B802000000010000- <1>     mov rax, 100000002h
   300 0000061D 00                  <1>
   301 0000061E 48894708            <1>     mov qword [rdi + 8h], rax
   302 00000622 E99F000000          <1>     jmp .altRAM
   303                              <1> .ae1:
   304                              <1> ;Address found, add new entry
   305                              <1> ;ecx contains number of entries that need to be shifted + 1
   306 00000627 56                  <1>     push rsi
   307 00000628 57                  <1>     push rdi
   308 00000629 4889FE              <1>     mov rsi, rdi
   309 0000062C 4881EE30000000      <1>     sub rsi, 2*18h
   310 00000633 FFC9                <1>     dec ecx
   311 00000635 89C8                <1>     mov eax, ecx    ;Use eax as row counter
   312                              <1> .ae2:
   313 00000637 B903000000          <1>     mov ecx, 3      ;3 8 byte entries
   314 0000063C F348A5              <1>     rep movsq
   315 0000063F 4881EE30000000      <1>     sub rsi, 2*18h
   316 00000646 4881EF30000000      <1>     sub rdi, 2*18h
   317 0000064D FFC8                <1>     dec eax
   318 0000064F 75E6                <1>     jnz .ae2
   319 00000651 5F                  <1>     pop rdi
   320 00000652 5E                  <1>     pop rsi
   321                              <1> ;Values copied, time to change values
   322                              <1> ;Change HMA entry
   323 00000653 4881C2[F0050000]    <1>     add rdx, bigmapptr    ;Add offset into table to rdx
   324 0000065A 488B4A08            <1>     mov rcx, qword [rdx + 8h]       ;Save size from entry into rax
   325 0000065E 48C7420800000100    <1>     mov qword [rdx + 8h], 10000h    ;Free 64Kb entry (HMA)
   326 00000666 4881C218000000      <1>     add rdx, 3*8h   ;Move to new SCP reserved entry
   327                              <1> ;Now Create the SCPBIOS Space Entry
   328 0000066D 48C70200001100      <1>     mov qword [rdx], BIOSStartAddr
   329 00000674 31DB                <1>     xor ebx, ebx
   330 00000676 8B1C25[E8010000]    <1>     mov ebx, dword [scpSize]
   331 0000067D 48895A08            <1>     mov qword [rdx + 8h], rbx
   332 00000681 48BB02000000010000- <1>     mov rbx, 100000002h
   332 0000068A 00                  <1>
   333 0000068B 48895A10            <1>     mov qword [rdx + 10h], rbx  ;Reserved flags
   334 0000068F 4881C218000000      <1>     add rdx, 3*8h
   335                              <1> ;Now modify the Free space entry
   336 00000696 488B0425[CD010000]  <1>     mov rax, qword [userBase]
   337 0000069E 488902              <1>     mov qword [rdx], rax
   338 000006A1 31C0                <1>     xor eax, eax
   339 000006A3 8B0425[E8010000]    <1>     mov eax, dword [scpSize]
   340 000006AA 4829C1              <1>     sub rcx, rax
   341 000006AD 4881E900000100      <1>     sub rcx, 10000h ;Sub HMA size
   342 000006B4 48894A08            <1>     mov qword [rdx + 8h], rcx    ;Put entry back
   343 000006B8 48BB01000000010000- <1>     mov rbx, 100000001h
   343 000006C1 00                  <1>
   344 000006C2 48895A10            <1>     mov qword [rdx + 10h], rbx  ;Free flags
   345                              <1> .altRAM:
   346                              <1> ;Copy Alt RAM values
   347 000006C6 8B1C25[E8010000]    <1>     mov ebx, dword [scpSize]
   348 000006CD C1EB0A              <1>     shr ebx, 0Ah    ;Rescale from byts to KB
   349 000006D0 81C340000000        <1>     add ebx, 40h    ;Add the HMA (64Kb)
   350 000006D6 48BF-               <1>     mov rdi, srData    ;Save qword in srData ah=E801h
   350 000006D8 [D601000000000000]  <1>
   351 000006E0 48AD                <1>     lodsq    ;Get into rax, inc rsi
   352 000006E2 6629D8              <1>     sub ax, bx      ;bx preserved, contains number of KB's plus 1
   353 000006E5 48C1C820            <1>     ror rax, 20h    ;Rotate over 32 bits
   354 000006E9 6629D8              <1>     sub ax, bx
   355 000006EC 48C1C820            <1>     ror rax, 20h    ;Rotate over 32 bits again
   356 000006F0 48AB                <1>     stosq            ;Save, inc rdi
   357 000006F2 48BF-               <1>     mov rdi, srData1    ;Save word for ah=88h
   357 000006F4 [DE01000000000000]  <1>
   358 000006FC 66A5                <1>     movsw    ;Save value, then reduce by BIOS size
   359 000006FE 66295FFE            <1>     sub word [rdi - 2], bx    ;Reduce the size of the previous stored val
   360 00000702 48BF-               <1>     mov rdi, convRAM    ;Int 12h value
   360 00000704 [CB01000000000000]  <1>
   361 0000070C 66A5                <1>     movsw
   362                              <1> ;Copy VGA fonts to Internal Int 30h area
   363 0000070E 48BF-               <1>     mov rdi, scr_vga_ptrs
   363 00000710 [6801000000000000]  <1>
   364 00000718 48B908000000000000- <1>     mov rcx, 8
   364 00000721 00                  <1>
   365 00000722 F348A5              <1>     rep movsq
   366                              <1> ;-----------------Write Long Mode Page Tables-----------------
   367                              <1> ;Creates a 4Gb ID mapped page 
   368 00000725 48BF-               <1>     mov rdi, BIOSPageTbl
   368 00000727 [0010000000000000]  <1>
   369 0000072F 57                  <1>     push rdi
   370                              <1> Ptablefinal:
   371 00000730 48B9000C0000000000- <1>     mov rcx, 6000h/8;6000h bytes (6x4Kb) of zero to clear table area
   371 00000739 00                  <1>
   372 0000073A 57                  <1>     push rdi
   373 0000073B 4831C0              <1>     xor rax, rax
   374 0000073E F348AB              <1>     rep stosq        ;Clear the space
   375                              <1> 
   376 00000741 5F                  <1>     pop rdi            ;Return zero to the head of the table, at 08000h
   377 00000742 4889F8              <1>     mov rax, rdi    ;Load rax with the PML4 table location
   378 00000745 480500100000        <1>     add rax, 1000h  ;Move rax to point to PDPT
   379 0000074B 480D03000000        <1>     or rax, permissionflags    ;Write the PDPT entry as present and r/w
   380 00000751 48AB                <1>     stosq    ;store the low word of the address
   381 00000753 4881C7F80F0000      <1>     add rdi, 0FF8h
   382 0000075A B904000000          <1>     mov ecx, 4
   383                              <1> .utables:
   384 0000075F 480500100000        <1>     add rax, 1000h  ;Write four entries in PDPT for each GB range
   385 00000765 48AB                <1>     stosq
   386 00000767 FFC9                <1>     dec ecx
   387 00000769 75F4                <1>     jnz .utables
   388                              <1> 
   389 0000076B 4881C7E00F0000      <1>     add rdi, 0FE0h  ;rdi points to the new page tables, copy!
   390 00000772 48BE00A00000000000- <1>     mov rsi, 0A000h ;Get the first Page table
   390 0000077B 00                  <1>
   391 0000077C B900080000          <1>     mov ecx, 4000h/8 ;Number of bytes to copy 
   392 00000781 F348A5              <1>     rep movsq       ;Get the 4Gb tables into place
   393 00000784 5F                  <1>     pop rdi            ;Bring back Table base
   394 00000785 0F22DF              <1>     mov cr3, rdi    ;Finalise change in paging address
   395                              <1> 
   396                              <1> ;----------------------Write Interrupts----------------------
   397 00000788 48B900010000000000- <1>     mov rcx, 0100h    ;256 entries
   397 00000791 00                  <1>
   398 00000792 48B8-               <1>     mov rax, dummy_return_64
   398 00000794 [1550000000000000]  <1>
   399 0000079C BB08000000          <1>     mov ebx, codedescriptor
   400 000007A1 31F6                <1>     xor esi, esi
   401 000007A3 66BA008F            <1>     mov dx, 8F00h    
   402                              <1>     ;Toggle attribs. 8F = Interrupt Present, accessable from ring 0 and greater,
   403                              <1>     ;0 (so collectively 08h) and gate type 0Fh (64-bit trap gate (gate which 
   404                              <1>     ;leaves interrupts on))
   405                              <1> idtFillDummy:
   406 000007A7 E8(CB000000)        <1>     call idtWriteEntry
   407 000007AC 66FFC9              <1>     dec cx
   408 000007AF 75F6                <1>     jnz idtFillDummy
   409                              <1> 
   410 000007B1 31F6                <1>     xor esi, esi
   411 000007B3 48B940000000000000- <1>     mov rcx, ((IDT_TABLE_Length >> 3))
   411 000007BC 00                  <1>
   412 000007BD 48BD-               <1>     mov rbp, IDT_TABLE
   412 000007BF [2918000000000000]  <1>
   413                              <1> idtLoop:
   414 000007C7 488B44F500          <1>     mov rax, qword [rbp+(rsi*8)]
   415 000007CC E8(CB000000)        <1>     call idtWriteEntry
   416 000007D1 48FFC9              <1>     dec rcx
   417 000007D4 75F1                <1>     jnz idtLoop
   418                              <1> 
   419 000007D6 48BC00000800000000- <1>     mov rsp, 80000h    ;Realign stack pointer
   419 000007DF 00                  <1>
   420                              <1> ;Reload the interrupt table
   421 000007E0 0F011C25[02000000]  <1>     lidt [IDTpointer]
   422                              <1> ;Write GDT to its final High location
   423 000007E8 48BE-               <1>     mov rsi, GDT
   423 000007EA [BF02000000000000]  <1>
   424 000007F2 48BF-               <1>     mov rdi, BIOSGDTable
   424 000007F4 [0070000000000000]  <1>
   425 000007FC 48B903000000000000- <1>     mov rcx, 3
   425 00000805 00                  <1>
   426 00000806 F348A5              <1>     rep movsq    ;copy the three descriptors high
   427                              <1> ;Reload the GDT Pointer
   428 00000809 0F011425[0E000000]  <1>     lgdt [GDTpointer]
   429                              <1> 
   430                              <1> ;Video Initialisation: VGA mode, CRTC at 3D4h, Mode 03h, 128k VRAM
   431                              <1> ;For now, only unlock upper WO CRTC registers, by using undocumented 
   432                              <1> ; CRTC register 11h.
   433 00000811 668B1425[5A010000]  <1>     mov dx, word [scr_crtc_base]    ;Get current set CRTC index register
   434 00000819 B011                <1>     mov al, 11h     ;Register 11
   435 0000081B 88D8                <1>     mov al, bl
   436 0000081D EE                  <1>     out dx, al
   437 0000081E E680                <1>     out waitp, al   ;Wait an I/O cycle
   438 00000820 66FFC2              <1>     inc dx  ;Point to data register
   439 00000823 EC                  <1>     in al, dx   ;get register 11h
   440 00000824 247F                <1>     and al, 7Fh ;Clear upper bit
   441 00000826 86C3                <1>     xchg al, bl ;Get address back into al, save new register value in bl  
   442 00000828 66FFCA              <1>     dec dx  ;Return to index
   443 0000082B EE                  <1>     out dx, al
   444 0000082C FEC2                <1>     inc dl
   445 0000082E 86C3                <1>     xchg al, bl
   446 00000830 EE                  <1>     out dx, al  ;Output new byte, unlock upper WO CRTC registers for use!
   447                              <1> ;Boot message/Verification of successful VGA card reset!
   448                              <1> ;Print Boot Message
   449 00000831 66B80413            <1>     mov ax, 1304h
   450 00000835 48BD-               <1>     mov rbp, startboot
   450 00000837 [7E15000000000000]  <1>
   451 0000083F CD30                <1>     int 30h
   452                              <1> 
   453 00000841 E8110E0000          <1>     call memprint    ;Print Memory status
   454                              <1> 
   455                              <1> ;----------------------------------------------------------------
   456                              <1> ;                        End of Initialisation                  :
   457                              <1> ;----------------------------------------------------------------
    53                                  %include "./Init/Hardware/PIC/picinit.asm"
    54                              <1> ;----------------------------------------------------------------
    55                              <1> ;                PIC Initialisation procedure                   :
    56                              <1> ;----------------------------------------------------------------
    57                              <1> ;Remapping the IO ports to Interrupt 0x40
    58                              <1> PICremap:
    59 00000846 B011                <1>     mov al, 11h        ;bit 10h and 1h = Start initialisation
    60 00000848 E620                <1>     out pic1command, al
    61 0000084A E680                <1>     out waitp, al    
    62 0000084C E6A0                <1>     out pic2command, al
    63 0000084E E680                <1>     out waitp, al    
    64                              <1>     
    65 00000850 B020                <1>     mov al, 20h       ;PIC1 to take Int 20h - 27h
    66 00000852 E621                <1>     out pic1data, al
    67 00000854 E680                <1>     out waitp, al    
    68 00000856 0408                <1>     add al, 8        ;PIC2 to take Int 28h - 2Fh
    69 00000858 E6A1                <1>     out pic2data, al 
    70 0000085A E680                <1>     out waitp, al    
    71                              <1>     
    72 0000085C B004                <1>     mov al, 4
    73 0000085E E621                <1>     out pic1data, al    ;Tell PIC 1 that there is a PIC 2 at IRQ2 (00000100)
    74 00000860 E680                <1>     out waitp, al    
    75 00000862 FEC8                <1>     dec al
    76 00000864 FEC8                <1>     dec al
    77 00000866 E6A1                <1>     out pic2data, al    ;Tell PIC 2 its cascade identity (00000010)
    78 00000868 E680                <1>     out waitp, al
    79                              <1>     
    80 0000086A B001                <1>     mov al, 01h        ;Initialise in 8086 mode
    81 0000086C E621                <1>     out pic1data, al
    82 0000086E E680                <1>     out waitp, al    
    83 00000870 E6A1                <1>     out pic2data, al
    84 00000872 E680                <1>     out waitp, al    
    85                              <1>     
    86 00000874 B0FF                <1>     mov al, 0FFh    ;Mask all interrupts 
    87 00000876 E621                <1>     out pic1data, al
    88 00000878 E6A1                <1>     out pic2data, al
    89                              <1> 
    90                              <1> ;Ensure that interrupts are still masked
    91                              <1> ;----------------------------------------------------------------
    92                              <1> ;                        End of Initialisation                  :
    93                              <1> ;----------------------------------------------------------------
    54                                  %include "./Init/Hardware/PCI/init.asm"
    55                              <1> ;----------------------------------------------------------------
    56                              <1> ;                            PCI Enumeration                    :
    57                              <1> ;----------------------------------------------------------------
    58                              <1> ; This proc enumerates only the PCI devices we care for
    59                              <1> ;----------------------------------------------------------------
    60 0000087A 4831ED              <1>     xor rbp, rbp
    61 0000087D 66892C2500E00000    <1>     mov word [lousbtablesize], bp
    62 00000885 4889E9              <1>     mov rcx, rbp    ;reset cx now too, for below
    63                              <1> pci_scan:    ;Enumerate PCI devices (formerly, USB devices)
    64 00000888 4831DB              <1>     xor rbx, rbx       ;Used to save the value of eax temporarily
    65 0000088B 48B808000081000000- <1>     mov rax, 81000008h ;Set bit 31 and lower byte to 2, for register 2/offset 8
    65 00000894 00                  <1>
    66                              <1>                        ;also make it the largest register so that we enumerate 
    67                              <1>                        ;backwards and set up USB controllers in order from 
    68                              <1>                        ;newest to oldest.
    69                              <1> .u1:
    70 00000895 2D00010000          <1>     sub eax, 100h      ;mov eax into valid PCI range, go to next device
    71 0000089A 66BAF80C            <1>     mov dx, pci_index  ;PCI index register
    72 0000089E EF                  <1>     out dx, eax   ;output the next packed bus,device,function,register combo
    73                              <1> 
    74 0000089F 89C3                <1>     mov ebx, eax       ;save to be used later, to access PCI BARS
    75                              <1>     
    76 000008A1 66BAFC0C            <1>     mov dx, pci_data   ;PCI data register
    77 000008A5 ED                  <1>     in eax, dx    ;Get Class, subclass and interface value in upper three bytes
    78                              <1>     
    79 000008A6 C1E808              <1>     shr eax, 8                ;shift down the details by a byte
    80                              <1> ;IF any of these are satisfied, remember ebx has the device index
    81 000008A9 3D00030C00          <1>     cmp eax, ((usb_class << 16) +(usb_subclass << 8)+uhci_interface)
    82 000008AE 0F8446010000        <1>     je .uhci_found
    83 000008B4 3D10030C00          <1>     cmp eax, ((usb_class << 16) +(usb_subclass << 8)+ohci_interface)
    84 000008B9 0F847D010000        <1>     je .ohci_found
    85 000008BF 3D20030C00          <1>     cmp eax, ((usb_class << 16) +(usb_subclass << 8)+ehci_interface)
    86 000008C4 0F847C010000        <1>     je .ehci_found
    87 000008CA 3D30030C00          <1>     cmp eax, ((usb_class << 16) +(usb_subclass << 8)+xhci_interface)
    88 000008CF 0F84D0010000        <1>     je .xhci_found
    89 000008D5 50                  <1>     push rax
    90 000008D6 C1E808              <1>     shr eax, 8              ;roll over rid of function number
    91 000008D9 3D01010000          <1>     cmp eax, (msd_class << 8) + (ide_subclass)
    92 000008DE 7452                <1>     je .idePCIEnum
    93 000008E0 3D06010000          <1>     cmp eax, (msd_class << 8) + (sata_subclass)
    94 000008E5 7414                <1>     je .sataPCIEnum
    95 000008E7 58                  <1>     pop rax
    96                              <1> .u11:    ;After a device found, jump here to continue enumeration
    97 000008E8 6681E50F00          <1>     and bp, 000Fh       ;Zero the upper nybble again.
    98 000008ED 89D8                <1>     mov eax, ebx        ;Return pci value into eax
    99 000008EF 3D08000080          <1>     cmp eax, 80000008h  ;The lowest value
   100 000008F4 7F9F                <1>     jg .u1
   101 000008F6 E9A9040000          <1>     jmp pciExit
   102                              <1> .sataPCIEnum:
   103 000008FB 58                  <1>     pop rax
   104 000008FC 50                  <1>     push rax
   105 000008FD 55                  <1>     push rbp
   106 000008FE 66B80413            <1>     mov ax, 1304h
   107 00000902 48BD-               <1>     mov rbp, .spemsg
   107 00000904 [1509000000000000]  <1>
   108 0000090C CD30                <1>     int 30h
   109 0000090E 5D                  <1>     pop rbp
   110 0000090F 58                  <1>     pop rax
   111 00000910 E9D3FFFFFF          <1>     jmp .u11
   112 00000915 0A0D41484349205341- <1> .spemsg: db 0Ah, 0Dh, "AHCI SATA controller found", 0
   112 0000091E 544120636F6E74726F- <1>
   112 00000927 6C6C657220666F756E- <1>
   112 00000930 6400                <1>
   113                              <1> .idePCIEnum:
   114 00000932 58                  <1>     pop rax
   115 00000933 50                  <1>     push rax
   116 00000934 55                  <1>     push rbp
   117 00000935 66B80413            <1>     mov ax, 1304h
   118 00000939 48BD-               <1>     mov rbp, .ipemsg
   118 0000093B [A809000000000000]  <1>
   119 00000943 CD30                <1>     int 30h
   120 00000945 5D                  <1>     pop rbp
   121 00000946 58                  <1>     pop rax
   122 00000947 50                  <1>     push rax
   123 00000948 B404                <1>     mov ah, 04h
   124 0000094A CD30                <1>     int 30h
   125 0000094C 58                  <1>     pop rax
   126                              <1> ;If function is 80h, then it will respond to default IO addresses
   127 0000094D A880                <1>     test al, 80h ;Check if bus mastery is enabled. Only support DMA transfers
   128 0000094F 7497                <1>     jz .u11      ;Exit if not enabled
   129 00000951 3C80                <1>     cmp al, 80h  ;If 80h, device hardwired bus master legacy mode, all good.
   130 00000953 742B                <1>     je .ipeWriteTable
   131                              <1> ;Bit bash, and reread, if it works, yay, if not, fail cancel
   132 00000955 66BAF80C            <1>     mov dx, pci_index
   133 00000959 89D8                <1>     mov eax, ebx
   134 0000095B EF                  <1>     out dx, eax     ;Register offset 8
   135 0000095C 6681C20400          <1>     add dx, 4       ;Point to pci_data
   136 00000961 25FFFAFFFF          <1>     and eax, 0FFFFFAFFh     ;Zero bits 0 and 2 of nybble 3
   137 00000966 EF                  <1>     out dx, eax
   138 00000967 6681EA0400          <1>     sub dx, 4
   139 0000096C 89D8                <1>     mov eax, ebx
   140 0000096E EF                  <1>     out dx, eax
   141 0000096F 6681C20400          <1>     add dx, 4
   142 00000974 ED                  <1>     in eax, dx
   143 00000975 A900050000          <1>     test eax, 00000500h  ;Test bits 0 and 2 of nybble 3 have been zeroed
   144 0000097A 0F8568FFFFFF        <1>     jnz .u11    ;IF not, fail
   145                              <1> .ipeWriteTable:
   146                              <1> ;Now the controller and devices have been set to legacy, they should
   147                              <1> ; respond to the default IO addresses and IRQ. Save BAR 5 for Bus mastering.
   148 00000980 50                  <1>     push rax
   149 00000981 55                  <1>     push rbp
   150 00000982 48BD-               <1>     mov rbp, .ipemsg2
   150 00000984 [CB09000000000000]  <1>
   151 0000098C 66B80413            <1>     mov ax, 1304h
   152 00000990 CD30                <1>     int 30h
   153 00000992 5D                  <1>     pop rbp
   154 00000993 58                  <1>     pop rax
   155 00000994 89D8                <1>     mov eax, ebx    
   156 00000996 B020                <1>     mov al, 20h ;BAR4 Address
   157 00000998 66BAF80C            <1>     mov dx, pci_index
   158 0000099C EF                  <1>     out dx, eax
   159 0000099D 6681C20400          <1>     add dx, 4
   160 000009A2 ED                  <1>     in eax, dx  ;Get BAR 4 address
   161                              <1>     ;call IDE.addControllerTable
   162                              <1>     ;jc .u11     ;If this fails, exit gracefully
   163 000009A3 E940FFFFFF          <1>     jmp .u11
   164 000009A8 0A0D49444520415441- <1> .ipemsg:    db 0Ah, 0Dh,"IDE ATA Controller found. Type: ", 0
   164 000009B1 20436F6E74726F6C6C- <1>
   164 000009BA 657220666F756E642E- <1>
   164 000009C3 20547970653A2000    <1>
   165 000009CB 0A0D49444520415441- <1> .ipemsg2:   db 0Ah, 0Dh, "IDE ATA Controller set to compatibility mode",0
   165 000009D4 20436F6E74726F6C6C- <1>
   165 000009DD 65722073657420746F- <1>
   165 000009E6 20636F6D7061746962- <1>
   165 000009EF 696C697479206D6F64- <1>
   165 000009F8 6500                <1>
   166                              <1> ;bp lo = status register, 
   167                              <1> ;bp hi = controller being serviced (ie 1000xxxx => xHCI being serviced)
   168                              <1> .uhci_found:
   169 000009FA 6681CD1100          <1>     or bp, 00010001b    ;set bit 0/mask = 1
   170 000009FF 55                  <1>     push rbp
   171 00000A00 50                  <1>     push rax
   172 00000A01 53                  <1>     push rbx
   173 00000A02 66B80413            <1>     mov ax, 1304h
   174 00000A06 30FF                <1>     xor bh, bh
   175 00000A08 48BD-               <1>     mov rbp, .uhci_succ
   175 00000A0A [1C0A000000000000]  <1>
   176 00000A12 CD30                <1>     int 30h
   177 00000A14 5B                  <1>     pop rbx
   178 00000A15 58                  <1>     pop rax
   179 00000A16 5D                  <1>     pop rbp
   180 00000A17 E9A6000000          <1>     jmp .controlController
   181 00000A1C 0A0D5548434920636F- <1> .uhci_succ:    db    0Ah, 0Dh,'UHCI controller found on IRQ ', 0
   181 00000A25 6E74726F6C6C657220- <1>
   181 00000A2E 666F756E64206F6E20- <1>
   181 00000A37 4952512000          <1>
   182                              <1> .ohci_found:
   183 00000A3C 6681CD2200          <1>     or bp, 00100010b    ;set bit 1/mask = 2
   184 00000A41 E9A2FEFFFF          <1>     jmp .u11
   185                              <1> .ehci_found:
   186 00000A46 6681CD4400          <1>     or bp, 01000100b    ;set bit 2/mask = 4
   187 00000A4B 55                  <1>     push rbp
   188 00000A4C 50                  <1>     push rax
   189 00000A4D 53                  <1>     push rbx
   190 00000A4E 66B80413            <1>     mov ax, 1304h
   191 00000A52 30FF                <1>     xor bh, bh
   192 00000A54 48BD-               <1>     mov rbp, .ehci_succ
   192 00000A56 [650A000000000000]  <1>
   193 00000A5E CD30                <1>     int 30h
   194 00000A60 5B                  <1>     pop rbx
   195 00000A61 58                  <1>     pop rax
   196 00000A62 5D                  <1>     pop rbp
   197 00000A63 EB5D                <1>     jmp short .controlController
   198 00000A65 0A0D4548434920636F- <1> .ehci_succ:    db    0Ah, 0Dh,'EHCI controller found on IRQ ', 0
   198 00000A6E 6E74726F6C6C657220- <1>
   198 00000A77 666F756E64206F6E20- <1>
   198 00000A80 4952512000          <1>
   199 00000A85 0A0D7848434920636F- <1> .xhci_succ:    db    0Ah, 0Dh,'xHCI controller found on IRQ ', 0
   199 00000A8E 6E74726F6C6C657220- <1>
   199 00000A97 666F756E64206F6E20- <1>
   199 00000AA0 4952512000          <1>
   200                              <1> .xhci_found:
   201 00000AA5 55                  <1>     push rbp
   202 00000AA6 50                  <1>     push rax
   203 00000AA7 53                  <1>     push rbx
   204 00000AA8 66B80413            <1>     mov ax, 1304h
   205 00000AAC 30FF                <1>     xor bh, bh
   206 00000AAE 48BD-               <1>     mov rbp, .xhci_succ
   206 00000AB0 [850A000000000000]  <1>
   207 00000AB8 CD30                <1>     int 30h
   208 00000ABA 5B                  <1>     pop rbx
   209 00000ABB 58                  <1>     pop rax
   210 00000ABC 5D                  <1>     pop rbp
   211 00000ABD 6681CD8800          <1>     or bp, 10001000b    ;set bit 3/mask = 8
   212                              <1> 
   213                              <1> .controlController:
   214                              <1> ;This for now will get the IRQ line for all controllers,
   215                              <1> ;and install a USB handler there, then disabling the HC rather than just the 
   216                              <1> ;legacy support.
   217                              <1> ;EAX doesnt need to be saved since the first instruction of .u11 is to move the 
   218                              <1> ;value of ebx back into eax.
   219                              <1> ;EDX doesnt need to be saved since the port data gets loaded in the proc above
   220                              <1> ;DO NOT MODIFY EBX
   221 00000AC2 31D2                <1>     xor edx, edx
   222 00000AC4 89D8                <1>     mov eax, ebx    ;Move a copy of ebx, the PCI config space device address
   223 00000AC6 B03C                <1>     mov al, 3Ch     ;offset 3C has interrupt masks in lower word
   224 00000AC8 66BAF80C            <1>     mov dx, pci_index
   225 00000ACC EF                  <1>     out dx, eax       ;set to give interrupt masks
   226 00000ACD 66BAFC0C            <1>     mov dx, pci_data
   227 00000AD1 ED                  <1>     in eax, dx        ;Get info into eax (formally, al)
   228 00000AD2 50                  <1>     push rax
   229 00000AD3 240F                <1>     and al, 0Fh
   230 00000AD5 B404                <1>     mov ah, 04h
   231 00000AD7 CD30                <1>     int 30h
   232 00000AD9 58                  <1>     pop rax
   233 00000ADA 66F7C54000          <1>     test bp, 40h      ;Check if EHCI
   234 00000ADF 0F8490000000        <1>     jz .cc1           ;Skip mapping
   235 00000AE5 240F                <1>     and al, 0Fh       ;Clear upper nybble for good measure
   236 00000AE7 3C10                <1>     cmp al, 10h
   237 00000AE9 0F8786000000        <1>     ja .cc1           ;Cant map it
   238 00000AEF 3C08                <1>     cmp al, 08h        
   239 00000AF1 733E                <1>     jae .cc0
   240 00000AF3 56                  <1>     push rsi
   241 00000AF4 52                  <1>     push rdx
   242 00000AF5 50                  <1>     push rax
   243 00000AF6 53                  <1>     push rbx
   244 00000AF7 480FB6F0            <1>     movzx rsi, al
   245 00000AFB 81C620000000        <1>     add esi, 20h
   246 00000B01 66BA008F            <1>     mov dx, 8F00h
   247 00000B05 48B8-               <1>     mov rax, ehci_IRQ.pic1    ;PIC1 ep
   247 00000B07 [FC0A000000000000]  <1>
   248 00000B0F BB08000000          <1>     mov ebx, codedescriptor
   249 00000B14 E8(CB000000)        <1>     call idtWriteEntry
   250 00000B19 5B                  <1>     pop rbx
   251 00000B1A 58                  <1>     pop rax
   252 00000B1B 5A                  <1>     pop rdx
   253 00000B1C 5E                  <1>     pop rsi
   254 00000B1D 51                  <1>     push rcx
   255 00000B1E 88C1                <1>     mov cl, al
   256 00000B20 B001                <1>     mov al, 1
   257 00000B22 D2E0                <1>     shl al, cl          ;Shift bit to appropriate position
   258 00000B24 F6D0                <1>     not al              ;Turn into a bitmask
   259 00000B26 88C4                <1>     mov ah, al          ;Save in ah
   260 00000B28 E421                <1>     in al, pic1data
   261 00000B2A 20E0                <1>     and al, ah          ;Add bitmask to current mask
   262 00000B2C E621                <1>     out pic1data, al    ;Unmask this line
   263 00000B2E 59                  <1>     pop rcx
   264 00000B2F EB44                <1>     jmp short .cc1
   265                              <1> .cc0:
   266 00000B31 56                  <1>     push rsi
   267 00000B32 52                  <1>     push rdx
   268 00000B33 50                  <1>     push rax
   269 00000B34 53                  <1>     push rbx
   270 00000B35 480FB6F0            <1>     movzx rsi, al
   271 00000B39 81C620000000        <1>     add esi, 20h    ;Start of PIC range
   272 00000B3F 66BA008F            <1>     mov dx, 8F00h
   273 00000B43 48B8-               <1>     mov rax, ehci_IRQ
   273 00000B45 [F50A000000000000]  <1>
   274 00000B4D BB08000000          <1>     mov ebx, codedescriptor
   275 00000B52 E8(CB000000)        <1>     call idtWriteEntry
   276 00000B57 5B                  <1>     pop rbx
   277 00000B58 58                  <1>     pop rax
   278 00000B59 5A                  <1>     pop rdx
   279 00000B5A 5E                  <1>     pop rsi
   280 00000B5B 51                  <1>     push rcx
   281 00000B5C 2C08                <1>     sub al, 8
   282 00000B5E 88C1                <1>     mov cl, al
   283 00000B60 E421                <1>     in al, pic1data
   284 00000B62 24FB                <1>     and al, 0FBh  ;Clear Cascade bit
   285 00000B64 E621                <1>     out pic1data, al
   286 00000B66 B001                <1>     mov al, 1
   287 00000B68 D2E0                <1>     shl al, cl    ;Shift bit to appropriate position
   288 00000B6A F6D0                <1>     not al        ;Turn into a bitmask
   289 00000B6C 88C4                <1>     mov ah, al    ;Save in ah
   290 00000B6E E4A1                <1>     in al, pic2data
   291 00000B70 20E0                <1>     and al, ah    ;Add bitmask to current mask
   292 00000B72 E6A1                <1>     out pic2data, al    ;Unmask this line
   293 00000B74 59                  <1>     pop rcx
   294                              <1> .cc1:
   295 00000B75 89D8                <1>     mov eax, ebx    ;Bring back a copy of ebx, the PCI config space addr to eax
   296 00000B77 B010                <1>     mov al, 10h     ;Change the register from Class code to BAR0
   297                              <1>     
   298 00000B79 66BAF80C            <1>     mov dx, pci_index
   299 00000B7D EF                  <1>     out dx, eax        ;Set to give BAR0
   300 00000B7E 66BAFC0C            <1>     mov dx, pci_data
   301 00000B82 ED                  <1>     in eax, dx        ;get unrefined BAR0/BASE pointer into eax
   302                              <1> 
   303 00000B83 2500FFFFFF          <1>     and eax, 0FFFFFF00h    ;refine eax into an mmio register
   304 00000B88 50                  <1>     push rax    ;push BASE pointer onto stack
   305                              <1> 
   306                              <1> ;Write USB controller table:
   307                              <1> ;Each table entry (tword), as follows:
   308                              <1> ;Offset:
   309                              <1> ; 00h - hci type (bp) [word]
   310                              <1> ; 02h - PCI address (ebx) [dword]
   311                              <1> ; 06h - MMIO address (eax) [dword]
   312                              <1> ;ALL REGISTERS PRESERVED, data stored at usbtablebase, size at usbtablesize
   313 00000B89 56                  <1>     push rsi
   314 00000B8A 51                  <1>     push rcx
   315 00000B8B 0FB70C2500E00000    <1>     movzx ecx, word [lousbtablesize]    ;get number of table entries
   316 00000B93 89CE                <1>     mov esi, ecx
   317 00000B95 D1E1                <1>     shl ecx, 1    ;Multiply by 2
   318 00000B97 678DB4F102E00000    <1>     lea esi, [8*esi + ecx + lousbtablebase] 
   319                              <1>     ;multiply esi by 10 to get table offset & add to table base
   320                              <1>     ;store table offset back in esi
   321 00000B9F 6667892E            <1>     mov word [esi], bp    ;Store controller type
   322 00000BA3 81C602000000        <1>     add esi, 2
   323 00000BA9 67891E              <1>     mov dword [esi], ebx    
   324                              <1>         ;Store PCI device config space address (set to register 2)
   325 00000BAC 81C604000000        <1>     add esi, 4
   326 00000BB2 678906              <1>     mov dword [esi], eax    ;Store device MMIO Address (refined BAR0 value)
   327 00000BB5 59                  <1>     pop rcx
   328 00000BB6 5E                  <1>     pop rsi
   329 00000BB7 66FF042500E00000    <1>     inc word [lousbtablesize]
   330                              <1> 
   331 00000BBF 6681FD8000          <1>     cmp bp, 80h    ;Are we servicing xHCI, EHCI or UHCI?
   332 00000BC4 7D7A                <1>     jge .controlxHCI
   333 00000BC6 6681FD4000          <1>     cmp bp, 40h    ;Are we servicing EHCI or UHCI? 
   334 00000BCB 0F8DC9000000        <1>     jge .controlEHCI
   335                              <1> ;If neither of these, collapse into UHCI
   336                              <1> .controlUHCI:
   337                              <1> ;eax points to the refined base pointer
   338 00000BD1 53                  <1>     push rbx                    ;temp stack save 
   339 00000BD2 89D8                <1>     mov eax, ebx     ;get the current packed bus,device,function,register combo
   340 00000BD4 2500F8FFFF          <1>     and eax, 0FFFFF800h         ;Clear bottom 10 bytes.
   341 00000BD9 0DC0020000          <1>     or eax, 2C0h                ;Function 2, register offset C0h
   342                              <1> 
   343 00000BDE 50                  <1>     push rax                    ;temp save address value on stack
   344                              <1> 
   345 00000BDF 66BAF80C            <1>     mov dx, pci_index
   346 00000BE3 EF                  <1>     out dx, eax
   347 00000BE4 80C204              <1>     add dl, 4                   ;dx now points to pci_index
   348 00000BE7 ED                  <1>     in eax, dx                  ;Bring register value into eax
   349                              <1> 
   350 00000BE8 66B8008F            <1>     mov ax, 8F00h               ;Clear all SMI bits (no SMI pls)
   351 00000BEC 89C3                <1>     mov ebx, eax                ;save temporarily in ebx
   352                              <1> 
   353 00000BEE 58                  <1>     pop rax                     ;bring back address value from stack
   354                              <1> 
   355 00000BEF 80EA04              <1>     sub dl, 4                   ;put dx back to pci_index
   356 00000BF2 EF                  <1>     out dx, eax                 ;select legsup register
   357                              <1> 
   358 00000BF3 80C204              <1>     add dl, 4                   ;aim dx back to pci_data
   359 00000BF6 89D8                <1>     mov eax, ebx                ;bring back new legsup value
   360 00000BF8 EF                  <1>     out dx, eax                 ;send it back!
   361                              <1> 
   362                              <1> ;Now set bit 6 of the command register to 1 (semaphore)
   363 00000BF9 5B                  <1>     pop rbx                     ;Return original ebx value
   364 00000BFA 89D8                <1>     mov eax, ebx  ;Move a copy of ebx, PCI config space device address (index)
   365 00000BFC B020                <1>     mov al, 20h                 ;Change the register from Class code to BAR4 
   366 00000BFE 6681EA0400          <1>     sub dx, 4                   ;Point dx back to pci_index
   367 00000C03 EF                  <1>     out dx, eax                 ;Get the data we want!
   368 00000C04 6681C20400          <1>     add dx, 4
   369 00000C09 ED                  <1>     in eax, dx              ;Bring the value of BAR4 into eax, to add to BASE
   370 00000C0A 25FCFFFFFF          <1>     and eax, 0FFFFFFFCh         ;Refine the IO address that we got
   371 00000C0F 6689C2              <1>     mov dx, ax                  ;Mov the base IO address into dx
   372                              <1> ;dx contains the base io address!
   373 00000C12 66B80200            <1>     mov ax, 0002h               ;Reset the HC
   374 00000C16 66EF                <1>     out dx, ax
   375 00000C18 51                  <1>     push rcx
   376                              <1> .cu0:
   377 00000C19 4831C9              <1>     xor rcx, rcx
   378 00000C1C FEC9                <1>     dec cl
   379                              <1> .cu1:
   380 00000C1E E2FE                <1>     loop .cu1    ;wait
   381                              <1> 
   382 00000C20 66ED                <1>     in ax, dx    ;Bring value in
   383 00000C22 66250200            <1>     and ax, 0002h
   384 00000C26 75F1                <1>     jnz .cu0     ;Reset still in progress, loop again
   385 00000C28 59                  <1>     pop rcx
   386                              <1> 
   387 00000C29 6631C0              <1>     xor ax, ax
   388 00000C2C 6681C20400          <1>     add dx, 4   ;point to USBINTR
   389 00000C31 66EF                <1>     out dx, ax
   390 00000C33 6681EA0400          <1>     sub dx, 4   ;return to cmd
   391 00000C38 66EF                <1>     out dx, ax  ;zero everything.
   392                              <1> 
   393 00000C3A 58                  <1>     pop rax     ;Get BASE (dereferenced BAR0) value back (stack align)
   394 00000C3B E9A8FCFFFF          <1>     jmp .u11                     ;return
   395                              <1> ;End UHCI
   396                              <1> 
   397                              <1> .controlxHCI:
   398                              <1> ;mov HCCPARAMS1 into edx, eax contains BASE pointer from BAR0 (offset 10h for 
   399                              <1> ; register)
   400 00000C40 678B5010            <1>     mov edx, dword [eax + 10h]    
   401 00000C44 81E20000FFFF        <1>     and edx, 0FFFF0000h
   402                              <1> ;mov hi word into lo word and shl by 2 to adjust that we are in units of DWORDS
   403 00000C4A C1EA0E              <1>     shr edx, 0Eh            
   404 00000C4D 01D0                <1>     add eax, edx            ;add offset from base onto base
   405                              <1>                             ;eax now pointing at USBLEGSUP
   406                              <1> .suohoc0: 
   407 00000C4F 678B10              <1>     mov edx, dword [eax]    ;store upper byte of USBLEGSUP into dl
   408 00000C52 81CA00000001        <1>     or edx, (1<<24)         ;Set the HCOSSEM Semaphore
   409 00000C58 678910              <1>     mov dword [eax], edx    ;replace the upper byte with HCOSSEM set
   410                              <1> 
   411 00000C5B 51                  <1>     push rcx                ;push poll counter
   412 00000C5C 4831C9              <1>     xor rcx, rcx            
   413                              <1> .suohoc1:    ;Remove control from BIOS and check for confirmation
   414 00000C5F 66FFC9              <1>     dec cx                  ;drop counter by one
   415 00000C62 0F84DE000000        <1>     jz .weirdEHCI1          ;temporary label
   416 00000C68 F390                <1>     pause                   ;wait
   417 00000C6A 678B10              <1>     mov edx, dword [eax]    ;Check if owned by BIOS
   418 00000C6D 81E200000100        <1>     and edx, (1<<16)
   419 00000C73 75EA                <1>     jnz .suohoc1            ;not zero, keep polling
   420                              <1> 
   421 00000C75 66B9FFFF            <1>     mov cx, 0FFFFh
   422                              <1> .suohoc2:    ;Check if control to OS has been given
   423 00000C79 66FFC9              <1>     dec cx
   424 00000C7C 740D                <1>     jz .suohoc21            ;timeout, assume it has.
   425 00000C7E F390                <1>     pause                
   426 00000C80 678B10              <1>     mov edx, dword [eax]
   427 00000C83 81E200000001        <1>     and edx, (1<<24)
   428 00000C89 74EE                <1>     jz .suohoc2             ;if zero, keep polling until bit set => owned by OS
   429                              <1> .suohoc21:    ;Check for legsup being present, assume for now.
   430 00000C8B 59                  <1>     pop rcx                   ;return poll counter
   431                              <1> .suohoc3:
   432 00000C8C 67C7400400000000    <1>     mov dword [eax + 4], 0    ;Set all SMI bytes to 0 so no SMIs will be set.
   433 00000C94 58                  <1>     pop rax                   ;Bring back BAR0 into eax
   434 00000C95 E94EFCFFFF          <1>     jmp .u11                  ;return
   435                              <1> 
   436                              <1> .controlEHCI:
   437 00000C9A 678B5008            <1>     mov edx, dword [eax + 8h]
   438 00000C9E 81E200FF0000        <1>     and edx, 0000FF00h
   439 00000CA4 66C1EA08            <1>     shr dx, 8
   440 00000CA8 81FA40000000        <1>     cmp edx, 40h        
   441 00000CAE 7C05                <1>     jl .ce0            ;No EECP pointer present, skip BIOS/OS EHCI handover
   442 00000CB0 E81B000000          <1>     call .ehcieecpsetup
   443                              <1> .ce0:
   444 00000CB5 31D2                <1>     xor edx, edx       ;clear edx
   445 00000CB7 58                  <1>     pop rax            ;Bring back refined base into eax
   446 00000CB8 678B10              <1>     mov edx, dword [eax]
   447 00000CBB 81E2FF000000        <1>     and edx, 000000FFh
   448 00000CC1 01D0                <1>     add eax, edx
   449 00000CC3 67816040FEFFFFFF    <1>     and dword [eax + 40h], 0FFFFFFFEh
   450                              <1>                             ;located at offset 40 of the opregs.
   451                              <1> 
   452 00000CCB E918FCFFFF          <1>     jmp .u11                ;return
   453                              <1> .ehcieecpsetup:
   454                              <1> ;eax has hccparams
   455                              <1> ;ebx has pci register, to get class code
   456 00000CD0 50                  <1>     push rax
   457 00000CD1 52                  <1>     push rdx
   458 00000CD2 53                  <1>     push rbx
   459 00000CD3 51                  <1>     push rcx
   460 00000CD4 88D3                <1>     mov bl, dl       ;Move EECP pointer into low byte of PCI address
   461 00000CD6 89D8                <1>     mov eax, ebx     ;Move this address to eax
   462 00000CD8 66BAF80C            <1>     mov dx, pci_index
   463 00000CDC EF                  <1>     out dx, eax      ;Return EHCI EECP register
   464 00000CDD 66BAFC0C            <1>     mov dx, pci_data
   465 00000CE1 ED                  <1>     in eax, dx       ;Get this register into eax
   466 00000CE2 0D00000001          <1>     or eax, 1000000h ;Set bit 24, to tell bios to give up control!
   467 00000CE7 93                  <1>     xchg eax, ebx    ;Swap these two temporarily
   468 00000CE8 66BAF80C            <1>     mov dx, pci_index
   469 00000CEC EF                  <1>     out dx, eax
   470 00000CED 93                  <1>     xchg eax, ebx    ;Bring back out value to eax
   471 00000CEE 66BAFC0C            <1>     mov dx, pci_data
   472 00000CF2 EF                  <1>     out dx, eax      ;Tell BIOS who is boss of the EHCI controller
   473                              <1>     
   474 00000CF3 4831C9              <1>     xor rcx, rcx
   475 00000CF6 89D8                <1>     mov eax, ebx     ;Get address back into eax
   476                              <1> .ees1:
   477 00000CF8 66FFC9              <1>     dec cx
   478 00000CFB 7449                <1>     jz .weirdEHCI1
   479 00000CFD E680                <1>     out waitp, al    ;Wait a bit, for device to process request
   480                              <1> 
   481 00000CFF 66BAF80C            <1>     mov dx, pci_index
   482 00000D03 EF                  <1>     out dx, eax
   483 00000D04 66BAFC0C            <1>     mov dx, pci_data
   484 00000D08 ED                  <1>     in eax, dx       ;Get word back into eax
   485 00000D09 2500000100          <1>     and eax, 10000h  ;BIOS should set this bit to zero
   486 00000D0E 75E8                <1>     jnz .ees1        ;Not zero yet, try again!
   487                              <1> 
   488 00000D10 4831C9              <1>     xor rcx, rcx
   489 00000D13 89D8                <1>     mov eax, ebx    ;Get address back into eax    
   490                              <1> .ees2:
   491 00000D15 66FFC9              <1>     dec cx
   492 00000D18 742C                <1>     jz .weirdEHCI1
   493 00000D1A E680                <1>     out waitp, al    ;Wait a bit, for device to process request
   494                              <1> 
   495 00000D1C 66BAF80C            <1>     mov dx, pci_index
   496 00000D20 EF                  <1>     out dx, eax
   497 00000D21 66BAFC0C            <1>     mov dx, pci_data
   498 00000D25 ED                  <1>     in eax, dx        ;Get word back into eax
   499 00000D26 2500000001          <1>     and eax, 1000000h    ;This should set this bit to one now (OS control)
   500 00000D2B 74E8                <1>     jz .ees2        ;Not set yet, try again!
   501                              <1> ;Now we have control! :D Finally, now lets clear SMI bits
   502 00000D2D 81C304000000        <1>     add ebx, 4h
   503 00000D33 89D8                <1>     mov eax, ebx
   504 00000D35 66BAF80C            <1>     mov dx, pci_index
   505 00000D39 EF                  <1>     out dx, eax
   506 00000D3A 31C0                <1>     xor eax, eax
   507 00000D3C 66BAFC0C            <1>     mov dx, pci_data
   508 00000D40 EF                  <1>     out dx, eax        ;NO MORE SMI INTERRUPTS
   509                              <1> 
   510 00000D41 59                  <1>     pop rcx
   511 00000D42 5B                  <1>     pop rbx
   512 00000D43 5A                  <1>     pop rdx
   513 00000D44 58                  <1>     pop rax
   514 00000D45 C3                  <1>     ret
   515                              <1> 
   516                              <1> .weirdEHCI1:
   517 00000D46 48B804130000000000- <1>     mov rax, 1304h
   517 00000D4F 00                  <1>
   518 00000D50 48BB07000000000000- <1>     mov rbx, 0007h
   518 00000D59 00                  <1>
   519 00000D5A 48B931000000000000- <1>     mov rcx, failmsglen
   519 00000D63 00                  <1>
   520 00000D64 48BD-               <1>     mov rbp, .failmsg
   520 00000D66 [730D000000000000]  <1>
   521 00000D6E CD30                <1>     int 30h    ; write strng
   522 00000D70 F390                <1>     pause
   523 00000D72 F4                  <1>     hlt
   524 00000D73 0A0D78484349206F72- <1> .failmsg: db 0Ah,0Dh,"xHCI or EHCI controller fail, halting system", 0Ah, 0Dh, 0
   524 00000D7C 204548434920636F6E- <1>
   524 00000D85 74726F6C6C65722066- <1>
   524 00000D8E 61696C2C2068616C74- <1>
   524 00000D97 696E67207379737465- <1>
   524 00000DA0 6D0A0D00            <1>
   525                              <1> failmsglen    equ    $ - .failmsg
   526                              <1> 
   527                              <1> pciExit:
   528                              <1> ;----------------------------------------------------------------
   529                              <1> ;                            End Proc                           :
   530                              <1> ;----------------------------------------------------------------
    55                                  %include "./Init/Hardware/Timers/pitinit.asm"
    56                              <1> ;----------------------------------------------------------------
    57                              <1> ;                PIT Initialisation procedure                   :
    58                              <1> ;----------------------------------------------------------------
    59                              <1> PITreset:       ;Set Timer 0 to trigger every 55ms
    60 00000DA4 B036                <1>     mov al, 36h    ;Set bitmap for frequency write to channel 0 of pit
    61 00000DA6 E643                <1>     out PITcommand, al    ;43h = PIT command register
    62 00000DA8 668B0425[35010000]  <1>     mov ax, word [pit_divisor]
    63 00000DB0 E640                <1>     out PIT0, al    ;mov low byte into divisor register
    64 00000DB2 88E0                <1>     mov al, ah      ;bring hi byte into low byte
    65 00000DB4 E640                <1>     out PIT0, al    ;mov hi byte into divisor register
    66                              <1> ;PIT unmasked below
    67                              <1> ;----------------------------------------------------------------
    68                              <1> ;                     End of Initialisation                     :
    69                              <1> ;----------------------------------------------------------------
    56                                  %include "./Init/Hardware/Timers/rtcinit.asm"
    57                              <1> ;----------------------------------------------------------------
    58                              <1> ;                RTC Initialisation procedure                   :
    59                              <1> ;----------------------------------------------------------------
    60                              <1> rtc_init:
    61                              <1> ;Set tick rate to 1024Hz and ensure RTC doesnt generate IRQ8
    62 00000DB6 66B88A8A            <1>     mov ax, 8A8Ah    ;Status A register with NMI disable
    63 00000DBA E670                <1>     out cmos_base, al
    64 00000DBC E680                <1>     out waitp, al    ;Latch wait
    65 00000DBE EB00                <1>     jmp short $+2
    66 00000DC0 B026                <1>     mov al, 00100110b ;32KHz timebase, 1024Hz square wave output
    67 00000DC2 E671                <1>     out cmos_data, al
    68                              <1> ;Now ensure NO interrupts are cooked
    69 00000DC4 FEC4                <1>     inc ah    ;ah=8Bh
    70 00000DC6 88E0                <1>     mov al, ah
    71 00000DC8 E670                <1>     out cmos_base, al
    72 00000DCA E680                <1>     out waitp, al  ;Latch wait
    73 00000DCC EB00                <1>     jmp short $+2
    74 00000DCE B002                <1>     mov al, 02h    ;Zero all int bits, time: BCD, 24hr, Daylight saving off
    75 00000DD0 E671                <1>     out cmos_data, al
    76                              <1> ;Clear any cooked IRQs
    77 00000DD2 FEC4                <1>     inc ah    ;ah=8Ch
    78 00000DD4 88E0                <1>     mov al, ah
    79 00000DD6 E670                <1>     out cmos_base, al
    80 00000DD8 E680                <1>     out waitp, al    ;Latch wait
    81 00000DDA EB00                <1>     jmp short $+2
    82 00000DDC E471                <1>     in al, cmos_data
    83                              <1> ;Get final CMOS RAM status byte
    84 00000DDE B00D                <1>     mov al, 0Dh     ;Status D register with NMI enable
    85 00000DE0 E670                <1>     out cmos_base, al
    86 00000DE2 E680                <1>     out waitp, al    ;Latch wait
    87 00000DE4 EB00                <1>     jmp short $+2
    88 00000DE6 E471                <1>     in al, cmos_data
    89                              <1> ;Unmask RTC and PIT here!
    90 00000DE8 E4A1                <1>     in al, pic2data    ;Get current state
    91 00000DEA 24FE                <1>     and al, 0FEh    ;Unmask RTC
    92 00000DEC E6A1                <1>     out pic2data, al
    93 00000DEE E421                <1>     in al, pic1data
    94 00000DF0 24FA                <1>     and al, 0FAh    ;Unmask PIT and Cascade
    95 00000DF2 E621                <1>     out pic1data, al
    96 00000DF4 FB                  <1>     sti             ;Enable maskable interrupts
    97                              <1> ;----------------------------------------------------------------
    98                              <1> ;                     End of Initialisation                     :
    99                              <1> ;----------------------------------------------------------------
    57                                  %include "./Init/Hardware/Timers/beepOK.asm"
    58                              <1>     ;This is a short routine to just confirm 
    59                              <1>     ;that the timer initialisation worked fine
    60 00000DF5 48B9C8000000000000- <1>     mov rcx, 200    ;Beep for a 200ms
    60 00000DFE 00                  <1>
    61 00000DFF BBA9040000          <1>     mov ebx, 04A9h  ;Frequency divisor for 1000Hz tone
    62 00000E04 66B800C5            <1>     mov ax, 0C500h
    63 00000E08 CD35                <1>     int 35h
    58                                  %include "./Init/Hardware/Serial/rs232ini.asm"
    59                              <1> ;----------------------------------------------------------------
    60                              <1> ;                Serial Port Initialisation procedure           :
    61                              <1> ;----------------------------------------------------------------
    62                              <1> ;Initial init procedure, check which ports exist and 
    63                              <1> ; write the address to Data area
    64 00000E0A 66B85A5A            <1>     mov ax, 5A5Ah
    65 00000E0E 4831C9              <1>     xor rcx, rcx
    66 00000E11 48BD-               <1>     mov rbp, com_addresses
    66 00000E13 [6700000000000000]  <1>
    67                              <1> checkCOM:
    68 00000E1B 668B9409[A41A0000]  <1>     mov dx, word [serial_abt + rcx*2]    ;Multiplied by 2 for word offsets
    69 00000E23 6681C20700          <1>     add dx, 7    ;Scratch register
    70 00000E28 EE                  <1>     out dx, al    ;Output
    71 00000E29 EB00                <1>     jmp short $ + 2
    72 00000E2B EC                  <1>     in al, dx    ;Read the value
    73 00000E2C 38C4                <1>     cmp ah, al   ;Check if theyre the same 
    74 00000E2E 7514                <1>     jne COMinitproceed ;Scratch register non-existant, IO registers not present
    75 00000E30 6681EA0700          <1>     sub dx, 7    ;point dx back to base
    76 00000E35 66899409[67000000]  <1>     mov word [com_addresses + rcx*2], dx    ;Save dx into data area table
    77 00000E3D FEC1                <1>     inc cl
    78 00000E3F 80F904              <1>     cmp cl, 4
    79 00000E42 75D7                <1>     jne checkCOM    ;Keep looping
    80                              <1> COMinitproceed:
    81                              <1> ;Sets all active COM ports to 2400,N,8,1, FIFO on, hware handshaking
    82 00000E44 880C25[66000000]    <1>     mov byte [numCOM], cl
    83 00000E4B 30C9                <1>     xor cl, cl
    84                              <1> serialinit:
    85 00000E4D 668B9409[67000000]  <1>     mov dx, word [com_addresses + rcx*2]  ;get the serial port base addr in dx
    86 00000E55 6685D2              <1>     test dx, dx
    87 00000E58 743E                <1>     jz COMinitexit    ;invalid address, port doesnt exist, init complete
    88                              <1> ;Disable interrupts
    89 00000E5A 66FFC2              <1>     inc dx        ;point at base + 1
    90 00000E5D 30C0                <1>     xor al, al    ;get zero to out it to the interrupt register
    91 00000E5F EE                  <1>     out dx, al    ;Disable all interrupts
    92                              <1> ;Set DLAB
    93 00000E60 6681C20200          <1>     add dx, 2    ;point dx to the Line Control register (LCR)
    94 00000E65 EC                  <1>     in al, dx    ;get the LCR byte into al
    95 00000E66 0C80                <1>     or al, 10000000b    ;set bit 7, DLAB bit on
    96 00000E68 EE                  <1>     out dx, al    ;output the set bit
    97                              <1> ;Set baud rate
    98 00000E69 6681EA0300          <1>     sub dx, 3    ;word of baud divisor
    99 00000E6E 66B83000            <1>     mov ax, 0030h    ;the divisor for 2400 baud (cf table below)
   100 00000E72 66EF                <1>     out dx, ax    ;out put the divisor word
   101                              <1> ;Clear DLAB, set the parity, break stop and word length
   102 00000E74 6681C20300          <1>     add dx, 3    ;repoint at LCR (base + 3)
   103 00000E79 B003                <1>     mov al, 00000011b  ;DLAB off, 8,n,1, no break, no stick
   104 00000E7B EE                  <1>     out dx, al    ;out that byte
   105                              <1> ;Clear FIFO
   106 00000E7C 66FFCA              <1>     dec dx        ;base + 2, FIFO register
   107 00000E7F B006                <1>     mov al, 00000110b    ;Clear FIFO, set char mode
   108 00000E81 EE                  <1>     out dx, al    ;out that stuff
   109                              <1> ;Enable interrupts and RTS/DTR
   110 00000E82 66FFCA              <1>     dec dx        ;base + 1, Interrupt Enable Register
   111 00000E85 B001                <1>     mov al, 1     ;ONLY set the data receive interrupt, none of the other 
   112                              <1>                   ; status or transmit type interrupts
   113 00000E87 EE                  <1>     out dx, al
   114                              <1> 
   115 00000E88 6681C20300          <1>     add dx, 3    ;base + 4, Modem control register
   116 00000E8D EC                  <1>     in al, dx    ;preserve reserved upper bits
   117 00000E8E 24E0                <1>     and al, 11100000b
   118 00000E90 0C0B                <1>     or al, 00001011b    ;Set OUT2 (ie IRQ enable), set RTS/DTR.
   119 00000E92 EE                  <1>     out dx, al
   120 00000E93 66FFC1              <1>     inc cx
   121 00000E96 EBB5                <1>     jmp short serialinit
   122                              <1> COMinitexit:
   123                              <1> ;Unmask com ports here!
   124 00000E98 E421                <1>     in al, pic1data
   125 00000E9A 24E7                <1>     and al, 0E7h    ;Unmask Com lines 1 and 2 (bits 3 and 4)
   126 00000E9C E621                <1>     out pic1data, al
   127                              <1> ;----------------------------------------------------------------
   128                              <1> ;                     End of Initialisation                     :
   129                              <1> ;----------------------------------------------------------------
    59                                  %include "./Init/Hardware/PS2/ps2init.asm"
    60                              <1> ;----------------------------------------------------------------
    61                              <1> ;             PS/2 Keyboard Initialisation procedure            :
    62                              <1> ;----------------------------------------------------------------
    63                              <1> keybsetup:    ;proc near
    64 00000E9E 66B80A0E            <1>     mov ax, 0E0Ah
    65 00000EA2 CD30                <1>     int 30h
    66 00000EA4 66B80D0E            <1>     mov ax, 0E0Dh
    67 00000EA8 CD30                <1>     int 30h    ;Send a crlf to con
    68                              <1> 
    69 00000EAA 66B80413            <1>     mov ax, 1304h
    70 00000EAE 30FF                <1>     xor bh, bh
    71 00000EB0 48BD-               <1>     mov rbp, ps2stage.startMsg ;Prompt to strike a key
    71 00000EB2 [DB11000000000000]  <1>
    72 00000EBA CD30                <1>     int 30h
    73                              <1> 
    74 00000EBC B05F                <1>     mov al, 05Fh        ;PS/2 Stage signature
    75 00000EBE E680                <1>     out waitp, al
    76 00000EC0 E6E9                <1>     out bochsout, al    
    77                              <1> 
    78 00000EC2 4D31C0              <1>     xor r8, r8          ;use as an stage counter 
    79 00000EC5 E926000000          <1>     jmp .step1
    80                              <1> .kbscdetermine:
    81 00000ECA B0F0                <1>     mov al, 0F0h    
    82 00000ECC E8C5020000          <1>     call ps2talk.p3
    83 00000ED1 E8AB020000          <1>     call ps2talk.p1
    84 00000ED6 3CFA                <1>     cmp al, 0FAh        ;ACK?
    85 00000ED8 75F0                <1>     jne .kbscdetermine  ;Not ack, try again
    86                              <1> .pt1:
    87 00000EDA 30C0                <1>     xor al, al
    88 00000EDC E8B5020000          <1>     call ps2talk.p3
    89 00000EE1 E89B020000          <1>     call ps2talk.p1     ;Get ack into al, 
    90 00000EE6 3CFA                <1>     cmp al, 0FAh
    91 00000EE8 75F0                <1>     jne .pt1
    92 00000EEA E892020000          <1>     call ps2talk.p1     ;Get scancode into al
    93 00000EEF C3                  <1>     ret
    94                              <1> 
    95                              <1> ;----------------------------------------------------------------
    96                              <1> ;Do all writes using ps2talk:
    97                              <1> ;    ah = 0 - Read Status port into al
    98                              <1> ;    ah = 1 - Read Data port into al
    99                              <1> ;    ah = 2 - Write al into Command port 
   100                              <1> ;    ah = 3 - Write al into Data port
   101                              <1> ;----------------------------------------------------------------
   102                              <1> ; Step 1) Disable ps2 port 1 using command word ADh and port 2 using command 
   103                              <1> ;  word A7h.
   104                              <1> ; Step 2) Flush buffer and check bit 2 is set (else fail)
   105                              <1> ; Step 3) Read controller configuration byte (command word 20h)
   106                              <1> ; Step 4) Disable IRQs bits 0,1 (clear bit 0,1) [and manually disable second 
   107                              <1> ;  ps2 port (bit 5 set)]
   108                              <1> ; Step 5) Write controller config byte back (command word 60h)
   109                              <1> ; Step 6) Test controller using AAh command word. Return 55h or fail.
   110                              <1> ; Step 7) Test ps2 port 1 using ABh command word. Return 00h or fail.
   111                              <1> ; Step 8) Enable ps2 port 1 using AEh command word. Enable IRQ by setting bit 0 
   112                              <1> ;  of the config byte.
   113                              <1> ; Step 9) Reset ps2 port 1 device using FFh data word. If AAh returned, 
   114                              <1> ;  proceed, else if ACK (FAh), await AAh. FCh and FDh indicate fail. FEh = 
   115                              <1> ;  resend command.
   116                              <1> ; Step 10) Reset scan code set to 1 using F0h data word with 01h data word. If 
   117                              <1> ;  ACK (FAh) proceed, if RESEND (FEh), resend 10h tries.
   118                              <1> ; Setp 11) Enable scanning (ie keyboard sends scan codes) using data word F4h.
   119                              <1> ;----------------------------------------------------------------
   120                              <1> ;Step 1
   121                              <1> .step1:
   122 00000EF0 B0AD                <1>     mov al, 0ADh
   123 00000EF2 E897020000          <1>     call ps2talk.p2
   124 00000EF7 B0A7                <1>     mov al, 0A7h        ;Cancel second interface if it exists (DO NOT REENABLE)
   125 00000EF9 E890020000          <1>     call ps2talk.p2
   126                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   127 00000EFE 49FFC0              <1>     inc r8           ;Checkpoint 1
   128 00000F01 E8CB020000          <1>     call ps2stage    ;print which stage is complete
   129                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   130                              <1> ;Step 2
   131                              <1> 
   132 00000F06 E460                <1>     in al, ps2data     ;manually flush ps2data port
   133                              <1>     
   134                              <1> ;Step 3
   135                              <1> keyb0:
   136 00000F08 B020                <1>     mov al, 20h
   137 00000F0A E87F020000          <1>     call ps2talk.p2    ;out ps2command, al
   138 00000F0F E86D020000          <1>     call ps2talk.p1    ;Read config byte into al
   139                              <1> ;Step 4
   140 00000F14 88C3                <1>     mov bl, al         ;copy al into bl to check for bit 2
   141 00000F16 80E3BC              <1>     and bl, 10111100b  ;Disable translation, enable later if needed
   142                              <1> ;Step 5
   143 00000F19 B060                <1>     mov al, 60h
   144 00000F1B E86E020000          <1>     call ps2talk.p2    ;Write config byte command
   145 00000F20 88D8                <1>     mov al, bl
   146 00000F22 E86F020000          <1>     call ps2talk.p3    ;Out new config byte
   147                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   148 00000F27 49FFC0              <1>     inc r8             ;Checkpoint 2
   149 00000F2A E8A2020000          <1>     call ps2stage      ;print which stage is complete
   150                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   151                              <1> ;Step 6
   152 00000F2F B0AA                <1>     mov al, 0AAh ;Can reset the config byte, out bl to ps2data at end of stage
   153 00000F31 E858020000          <1>     call ps2talk.p2
   154 00000F36 E846020000          <1>     call ps2talk.p1
   155 00000F3B 3C55                <1>     cmp al, 55h
   156 00000F3D 0F855B020000        <1>     jne ps2error
   157                              <1>     
   158 00000F43 B060                <1>     mov al, 60h  ;Previous code may have reset our new config byte, resend it!
   159 00000F45 E844020000          <1>     call ps2talk.p2            ;Write config byte command
   160 00000F4A 88D8                <1>     mov al, bl
   161 00000F4C E845020000          <1>     call ps2talk.p3            ;Out new config byte
   162                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   163 00000F51 49FFC0              <1>     inc r8             ;Checkpoint 3
   164 00000F54 E878020000          <1>     call ps2stage      ;print which stage is complete
   165                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   166                              <1> ;Step 7
   167 00000F59 B0AB                <1>     mov al, 0ABh            ;Test controller 1
   168 00000F5B E82E020000          <1>     call ps2talk.p2
   169 00000F60 E81C020000          <1>     call ps2talk.p1
   170 00000F65 84C0                <1>     test al, al                ;Check al is zero
   171 00000F67 0F8531020000        <1>     jnz ps2error
   172                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   173 00000F6D 49FFC0              <1>     inc r8             ;Checkpoint 4
   174 00000F70 E85C020000          <1>     call ps2stage      ;print which stage is complete
   175                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   176                              <1> ;Step 8
   177 00000F75 B0AE                <1>     mov al, 0AEh
   178 00000F77 E812020000          <1>     call ps2talk.p2
   179                              <1> 
   180                              <1> ;Set IRQ 1 to connect to port 1
   181 00000F7C B020                <1>     mov al, 20h
   182 00000F7E E80B020000          <1>     call ps2talk.p2        ;Write
   183 00000F83 E8F9010000          <1>     call ps2talk.p1        ;Read
   184 00000F88 0C01                <1>     or al, 00000001b    ;Set bit 0
   185 00000F8A 24EF                <1>     and al, 11101111b    ;Zero bit 4, First port Clock
   186 00000F8C 88C3                <1>     mov bl, al
   187 00000F8E B060                <1>     mov al, 60h
   188 00000F90 E8F9010000          <1>     call ps2talk.p2
   189 00000F95 88D8                <1>     mov al, bl
   190 00000F97 E8FA010000          <1>     call ps2talk.p3
   191                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   192 00000F9C 49FFC0              <1>     inc r8           ;Checkpoint 5
   193 00000F9F E82D020000          <1>     call ps2stage    ;print which stage is complete
   194                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   195                              <1> ;Step 9
   196 00000FA4 6631C9              <1>     xor cx, cx
   197                              <1> keyb1:
   198 00000FA7 66FFC9              <1>     dec cx ;timeout counter
   199 00000FAA 0F84EE010000        <1>     jz ps2error
   200 00000FB0 B0FF                <1>     mov al, 0FFh
   201 00000FB2 E8DF010000          <1>     call ps2talk.p3
   202                              <1> .k1:
   203 00000FB7 E8C5010000          <1>     call ps2talk.p1 ;read from ps2data
   204 00000FBC 3CAA                <1>     cmp al, 0AAh    ;success
   205 00000FBE 7409                <1>     je keyb20
   206 00000FC0 3CFA                <1>     cmp al, 0FAh    ;ACK    
   207 00000FC2 74F3                <1>     je .k1          ;Loop if ACK recieved, just read ps2data
   208 00000FC4 E9DEFFFFFF          <1>     jmp keyb1       ;Else, loop whole thing (assume fail recieved)
   209                              <1> ;Step 10
   210                              <1> keyb20:
   211                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   212 00000FC9 49FFC0              <1>     inc r8           ;Checkpoint 6
   213 00000FCC E800020000          <1>     call ps2stage    ;print which stage is complete
   214                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   215 00000FD1 31C9                <1>     xor ecx, ecx
   216                              <1> keyb2:
   217 00000FD3 FFC9                <1>     dec ecx
   218 00000FD5 0F84C3010000        <1>     jz ps2error
   219                              <1> .k0:
   220 00000FDB B0F0                <1>     mov al, 0F0h
   221 00000FDD E8B4010000          <1>     call ps2talk.p3
   222                              <1>     
   223 00000FE2 B401                <1>     mov ah, 01h
   224 00000FE4 E898010000          <1>     call ps2talk.p1
   225 00000FE9 3CFE                <1>     cmp al, 0FEh    ;Did we recieve an resend?
   226 00000FEB 74EE                <1>     je .k0          ;Resend the data!
   227 00000FED 3CFA                <1>     cmp al, 0FAh    ;Compare to Ack?
   228 00000FEF 75E2                <1>     jne keyb2       ;If not equal, dec one from the loop counter and try again
   229                              <1>     
   230 00000FF1 B001                <1>     mov al, 01h     ;write 01 to data port (set scan code set 1)
   231 00000FF3 E89E010000          <1>     call ps2talk.p3
   232                              <1> .k1:
   233 00000FF8 E884010000          <1>     call ps2talk.p1    ;read data port for ACK or resend response
   234 00000FFD 3CFA                <1>     cmp al, 0FAh
   235 00000FFF 7407                <1>     je keyb30    ;IF ack revieved, scancode set, advance.
   236 00001001 E2F5                <1>     loop .k1     ;Keep polling port
   237 00001003 E9CBFFFFFF          <1>     jmp keyb2
   238                              <1> ;Step 11
   239                              <1> keyb30:
   240                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   241 00001008 49FFC0              <1>     inc r8           ;Checkpoint 7
   242 0000100B E8C1010000          <1>     call ps2stage    ;print which stage is complete
   243                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   244 00001010 31C9                <1>     xor ecx, ecx
   245                              <1> keyb3:
   246 00001012 66FFC9              <1>     dec cx
   247 00001015 0F8483010000        <1>     jz ps2error
   248                              <1>     
   249 0000101B B0F4                <1>     mov al, 0F4h
   250 0000101D E874010000          <1>     call ps2talk.p3
   251                              <1> .k1:
   252 00001022 E85A010000          <1>     call ps2talk.p1 ;read data port for ACK or resend response
   253 00001027 3CFA                <1>     cmp al, 0FAh
   254 00001029 7407                <1>     je keyb40
   255 0000102B E2F5                <1>     loop .k1        ;Keep polling port
   256 0000102D E9E0FFFFFF          <1>     jmp keyb3       ;Fail, retry the whole process
   257                              <1>     
   258                              <1> ;Step 12
   259                              <1> keyb40:
   260                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   261 00001032 49FFC0              <1>     inc r8           ;Checkpoint 8
   262 00001035 E897010000          <1>     call ps2stage    ;print which stage is complete
   263                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   264                              <1> keyb4:
   265 0000103A B0ED                <1>     mov al, 0EDh     ;Set lights
   266 0000103C E855010000          <1>     call ps2talk.p3
   267 00001041 E83B010000          <1>     call ps2talk.p1  ;get response, remember ps2talk does its own timeout
   268 00001046 3CFA                <1>     cmp al, 0FAh
   269 00001048 75F0                <1>     jne keyb4        ;No ack, try again.
   270                              <1> .k1:
   271 0000104A B000                <1>     mov al, 00h        ;Flash lock on and off
   272 0000104C E845010000          <1>     call ps2talk.p3
   273 00001051 E82B010000          <1>     call ps2talk.p1    ;flush, remember ps2talk does its own timeout
   274                              <1>     
   275                              <1> ;End Proc
   276                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   277 00001056 49FFC0              <1>     inc r8           ;Checkpoint 9
   278 00001059 E873010000          <1>     call ps2stage    ;print which stage is complete
   279                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   280                              <1> 
   281                              <1> keyb5:
   282 0000105E B0EE                <1>     mov al, 0EEh     ;Echo command
   283 00001060 E831010000          <1>     call ps2talk.p3
   284 00001065 30C0                <1>     xor al, al       ;Zero al to ensure that the result is EEh
   285                              <1> .k1:
   286 00001067 E815010000          <1>     call ps2talk.p1
   287 0000106C 3CEE                <1>     cmp al, 0EEh
   288 0000106E 7429                <1>     je .k2           ;If equal, continue
   289 00001070 48BD-               <1>     mov rbp, .noecho
   289 00001072 [8610000000000000]  <1>
   290 0000107A 66B80413            <1>     mov ax, 1304h
   291 0000107E 30FF                <1>     xor bh, bh
   292 00001080 CD30                <1>     int 30h
   293 00001082 F390                <1>     pause
   294 00001084 EB13                <1>     jmp short .k2
   295 00001086 4E6F204563686F2072- <1> .noecho:        db    "No Echo recieved", 0Ah, 0Dh, 0
   295 0000108F 656369657665640A0D- <1>
   295 00001098 00                  <1>
   296                              <1> .k2:
   297                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   298 00001099 49FFC0              <1>     inc r8           ;Checkpoint 0Ah
   299 0000109C E830010000          <1>     call ps2stage    ;print which stage is complete
   300                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   301                              <1> keyb6:    ;Set typematic rate/delay, 250ms, 30 reports/second
   302 000010A1 B0F3                <1>     mov al, 0F3h     ;Set typematic rate
   303 000010A3 E8EE000000          <1>     call ps2talk.p3
   304 000010A8 30C0                <1>     xor al, al       ;Set rate
   305 000010AA E8E7000000          <1>     call ps2talk.p3
   306 000010AF 6631C9              <1>     xor cx, cx
   307                              <1> .k1:
   308 000010B2 66FFC9              <1>     dec cx
   309 000010B5 0F84E3000000        <1>     jz ps2error
   310 000010BB E8C1000000          <1>     call ps2talk.p1
   311 000010C0 3CFA                <1>     cmp al, 0FAh    ;Ack?
   312 000010C2 75EE                <1>     jnz .k1
   313                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   314 000010C4 49FFC0              <1>     inc r8           ;Checkpoint 0Bh
   315 000010C7 E805010000          <1>     call ps2stage    ;print which stage is complete
   316                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   317                              <1> scancode_faff:
   318 000010CC B020                <1>     mov al, 20h      ;Get command byte from command port
   319 000010CE E8BB000000          <1>     call ps2talk.p2  ;al should contain command byte
   320 000010D3 88C4                <1>     mov ah, al       ;temp save cmd byte in ah
   321                              <1> 
   322 000010D5 31C9                <1>     xor ecx, ecx
   323                              <1> .p1:
   324 000010D7 66FFC9              <1>     dec cx
   325 000010DA 7439                <1>     jz keybflushe
   326 000010DC E8E9FDFFFF          <1>     call keybsetup.kbscdetermine ;Get the current scancode set id
   327 000010E1 80CC01              <1>     or ah, 00000001b    ;Do basic or, ie set IRQ for port 1
   328                              <1> 
   329                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   330 000010E4 49FFC0              <1>     inc r8           ;Checkpoint 0Ch
   331 000010E7 E8E5000000          <1>     call ps2stage    ;print which stage is complete
   332                              <1> ;<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
   333                              <1> 
   334 000010EC 3C43                <1>     cmp al, 43h      ;43h is sc1 signature
   335 000010EE 740B                <1>     je .writeback
   336 000010F0 3C01                <1>     cmp al, 01h      ;Untranslated value
   337 000010F2 7407                <1>     je .writeback
   338 000010F4 3CFA                <1>     cmp al, 0FAh     ;Got an ACK for some reason, manually get next byte
   339 000010F6 7416                <1>     je .get_next_byte
   340                              <1> 
   341 000010F8 80CC40              <1>     or ah, 01000000b    ;Neither value passed the test, invoke translation
   342                              <1> .writeback:
   343 000010FB 4989C7              <1>     mov r15, rax     ;Save the scancode value to print later
   344 000010FE B060                <1>     mov al, 60h
   345 00001100 E889000000          <1>     call ps2talk.p2
   346 00001105 88E0                <1>     mov al, ah       ;return command byte
   347 00001107 E88A000000          <1>     call ps2talk.p3
   348 0000110C EB0B                <1>     jmp short keybflush
   349                              <1> .get_next_byte:
   350 0000110E E86E000000          <1>     call ps2talk.p1  ;Get the byte safely into al!
   351 00001113 EBC2                <1>     jmp short .p1    ;Recheck the scancode signature
   352                              <1> 
   353                              <1> keybflushe:
   354 00001115 4180CFF0            <1>     or r15b,0F0h    ;Add signature to scancode value denoting error
   355                              <1> keybflush:    ;Flush internal ram of random bytes before enabling IRQ1
   356 00001119 66B91000            <1>     mov cx, 10h
   357                              <1> .kbf1:
   358 0000111D 66FFC9              <1>     dec cx
   359 00001120 7404                <1>     jz keybinitend
   360 00001122 E460                <1>     in al, ps2data        ;Read 16 bytes out (even if empty) and discard
   361 00001124 EBF7                <1>     jmp short .kbf1
   362                              <1> 
   363                              <1> keybinitend:
   364 00001126 30FF                <1>     xor bh, bh  ;We are on page 0
   365 00001128 B403                <1>     mov ah, 03h ;Get current cursor row number in dh 
   366 0000112A CD30                <1>     int 30h
   367 0000112C B211                <1>     mov dl, 17  ;End of PS/2 Keyboard message at column 17
   368 0000112E 30FF                <1>     xor bh, bh  ;Page 0
   369 00001130 B402                <1>     mov ah, 02h ;Set cursor
   370 00001132 CD30                <1>     int 30h
   371                              <1> 
   372 00001134 52                  <1>     push rdx    ;Save row/column in dx on stack
   373 00001135 B91B000000          <1>     mov ecx, 27 ;27 chars in keystrike message
   374                              <1> .kbe0:
   375 0000113A B8200E0000          <1>     mov eax, 0E20h 
   376 0000113F CD30                <1>     int 30h
   377 00001141 E2F7                <1>     loop .kbe0
   378                              <1> 
   379 00001143 5A                  <1>     pop rdx
   380 00001144 30FF                <1>     xor bh, bh  ;Page 0
   381 00001146 B402                <1>     mov ah, 02h ;Set cursor
   382 00001148 CD30                <1>     int 30h
   383                              <1> 
   384 0000114A 48BD-               <1>     mov rbp, ps2stage.okMsg
   384 0000114C [0A12000000000000]  <1>
   385 00001154 48B804130000000000- <1>     mov rax, 1304h    ;print 0 terminated string
   385 0000115D 00                  <1>
   386 0000115E 30FF                <1>     xor bh, bh
   387 00001160 CD30                <1>     int 30h
   388                              <1> 
   389                              <1> ;Unmask IRQ1 here
   390 00001162 E421                <1>     in al, pic1data
   391 00001164 24FD                <1>     and al, 0FDh    ;Unmask bit 1
   392 00001166 E621                <1>     out pic1data, al
   393                              <1> 
   394 00001168 E9A0000000          <1>     jmp endPS2Init
   395                              <1> ;Relevant Procs for PS/2 keyboard setup
   396                              <1> ps2talk:
   397                              <1> ;   ah = 0 - Read Status port into al
   398                              <1> ;   ah = 1 - Read Data port into al
   399                              <1> ;   ah = 2 - Write al into Command port 
   400                              <1> ;   ah = 3 - Write al into Data port
   401 0000116D 84E4                <1>     test ah, ah
   402 0000116F 740D                <1>     jz .p0
   403 00001171 FECC                <1>     dec ah
   404 00001173 740C                <1>     jz .p1
   405 00001175 FECC                <1>     dec ah
   406 00001177 7415                <1>     jz .p2
   407 00001179 E918000000          <1>     jmp .p3
   408                              <1> .p0:
   409 0000117E E464                <1>     in al, ps2status
   410 00001180 C3                  <1>     ret
   411                              <1> .p1:
   412 00001181 EB00                <1>     jmp short $ + 2
   413 00001183 E464                <1>     in al, ps2status
   414 00001185 A801                <1>     test al, 1    ;Can something be read from KB?
   415 00001187 74F8                <1>     jz .p1        ;Zero if no. Not zero = read.
   416 00001189 EB00                <1>     jmp short $ + 2
   417 0000118B E460                <1>     in al, ps2data  ;Read it in
   418 0000118D C3                  <1>     ret
   419                              <1> .p2:
   420 0000118E E8(B6000000)        <1>     call ps2wait    ;preserves ax
   421 00001193 E664                <1>     out ps2command, al
   422 00001195 C3                  <1>     ret
   423                              <1> .p3:
   424 00001196 E8(B6000000)        <1>     call ps2wait
   425 0000119B E660                <1>     out ps2data, al
   426 0000119D C3                  <1>     ret
   427                              <1> ps2error:
   428 0000119E 48BD-               <1>     mov rbp, .ps2errormsg
   428 000011A0 [B411000000000000]  <1>
   429 000011A8 66B80413            <1>     mov ax, 1304h
   430 000011AC 30FF                <1>     xor bh, bh
   431 000011AE CD30                <1>     int 30h
   432                              <1> .loop:
   433 000011B0 F390                <1>     pause
   434 000011B2 EBFC                <1>     jmp short .loop
   435 000011B4 0A0D50532F32207374- <1> .ps2errormsg: db 0Ah, 0Dh,"PS/2 stage init error...", 0Ah, 0Dh, 0
   435 000011BD 61676520696E697420- <1>
   435 000011C6 6572726F722E2E2E0A- <1>
   435 000011CF 0D00                <1>
   436                              <1> 
   437                              <1> ps2stage:
   438                              <1> ;Outputs r8b to waitport and Bochs out
   439 000011D1 50                  <1>     push rax
   440 000011D2 4488C0              <1>     mov al, r8b
   441 000011D5 E680                <1>     out waitp, al
   442 000011D7 E6E9                <1>     out bochsout, al
   443 000011D9 58                  <1>     pop rax
   444 000011DA C3                  <1>     ret
   445 000011DB 0A0D50532F32204B65- <1> .startMsg db 0Ah, 0Dh,'PS/2 Keyboard... Strike a key to continue...',0 
   445 000011E4 79626F6172642E2E2E- <1>
   445 000011ED 20537472696B652061- <1>
   445 000011F6 206B657920746F2063- <1>
   445 000011FF 6F6E74696E75652E2E- <1>
   445 00001208 2E00                <1>
   446 0000120A 4F4B00              <1> .okMsg db 'OK', 0 ;This should go 17 chars in
   447                              <1> endPS2Init:
   448                              <1> ;----------------------------------------------------------------
   449                              <1> ;                      End of Initialisation                    :
   450                              <1> ;----------------------------------------------------------------
    60                                  %include "./Sysdebug/init.asm"
    61                              <1> ;----------------------------------------------------------------
    62                              <1> ;              Debugger Initialisation procedures               :
    63                              <1> ;----------------------------------------------------------------
    64                              <1> debuggerInit:
    65                              <1> ;Int 40h can be used by the Debugger to return to it or if a DOS present, 
    66                              <1> ; to return to DOS.
    67 0000120D 48B8-               <1>     mov rax, MCP_int ;The application return point
    67 0000120F [DF20000000000000]  <1>
    68 00001217 48BE40000000000000- <1>     mov rsi, 40h
    68 00001220 00                  <1>
    69 00001221 66BA008F            <1>     mov dx, 8F00h    ;Attribs
    70 00001225 BB08000000          <1>     mov ebx, codedescriptor
    71 0000122A E8(CB000000)        <1>     call idtWriteEntry    
    61                                  ;----------------------------------------------------------------
    62                                  ;              Drive Enum and Initialisation procedures         :
    63                                  ;----------------------------------------------------------------
    64                                  %include "./Init/Hardware/IDE/ideinit.asm"
    65                              <1> ideInitialisation:
    66                              <1> ;This is truly read once code
    67                              <1> ;Check primary and secondary bus for master and slave drives
    68                              <1> ; Maximum of 4 "fixed" ATA drives
    69                              <1> ;Use PIO for identification of drives on bus
    70 0000122F EB15                <1>     jmp short .ideInitEnd
    71 00001231 B0A0                <1>     mov al, 0A0h
    72 00001233 66BAF001            <1>     mov dx, ata0_base
    73 00001237 48BF-               <1>     mov rdi, sectorbuffer
    73 00001239 [C003000000000000]  <1>
    74 00001241 E8(2D320000)        <1>     call IDE.identifyDevice
    75                              <1> .ideInitEnd:
    65                                  %include "./Init/Hardware/USB/EHCI/ehciinit.asm"
    66                              <1> ;            ------------USB section below------------
    67                              <1> ;                   ---- PCI table parse ----
    68                              <1> ;Parse the PCI tables for ehci controllers
    69                              <1> hciParse:
    70 00001246 C60425[4B020000]00  <1>     mov byte [numMSD], 0
    71 0000124E 4C0FB70C2500E00000  <1>     movzx r9, word [lousbtablesize]
    72 00001257 BE02E00000          <1>     mov esi, lousbtablebase
    73 0000125C BF[15020000]        <1>     mov edi, eControllerList
    74                              <1> .hcip1:
    75 00001261 6667F7064000        <1>     test word [esi], ehcimask    ;check if we at a ehci mask
    76 00001267 7418                <1>     jz .hcip2   ;If not, skip adding to ehci table
    77                              <1>     ;First catch all clause (temporary for version 1 of BIOS with max 4 
    78                              <1>     ; controllers)
    79 00001269 803C25[14020000]04  <1>     cmp byte [eControllers], 4
    80 00001271 7430                <1>     je .pr0    ;escape this whole setup proc if at 4 controllers
    81 00001273 67488B4602          <1>     mov rax, qword [esi + 2]    ;take pci and mmio address into rax
    82 00001278 48AB                <1>     stosq                        ;store into rdi and inc rdi by 8 to next entry
    83 0000127A FE0425[14020000]    <1>     inc byte [eControllers]    ;increase the number of controllers variable
    84                              <1> .hcip2:
    85                              <1> ;Any additional data saving occurs here
    86 00001281 81C60A000000        <1>     add esi, 10    ;Goto next table entry
    87 00001287 41FEC9              <1>     dec r9b     ;Once all table entries exhausted, fall through
    88 0000128A 75D5                <1>     jnz .hcip1
    89                              <1>     
    90                              <1> ;               ---- EHCI controller enumeration ----
    91                              <1> ;Enumerate each ehci ctrlr root hub for valid usb devices (hubs and valid MSD)
    92 0000128C 8A0C25[14020000]    <1>     mov cl, byte [eControllers]
    93 00001293 66B80413            <1>     mov ax, 1304h
    94 00001297 48BD-               <1>     mov rbp, .echiInitMsg
    94 00001299 [1813000000000000]  <1>
    95 000012A1 CD30                <1>     int 30h
    96                              <1> .pr0:   ;If ctrlr failure or ports exhausted, ret to here for next ctrlr
    97 000012A3 84C9                <1>     test cl, cl
    98 000012A5 0F8403020000        <1>     jz end    ;No EHCI controllers or last controler? Exit
    99 000012AB FEC9                <1>     dec cl    ;Undo the absolute count from above
   100 000012AD 88C8                <1>     mov al, cl
   101 000012AF E8(BD320000)        <1>     call USB.setupEHCIcontroller
   102 000012B4 72ED                <1>     jc .pr0    ;Continue to next controller
   103 000012B6 E8(38340000)        <1>     call USB.ehciRunCtrlr       ;Activate online controller
   104 000012BB 72E6                <1>     jc .pr0
   105 000012BD E8(99340000)        <1>     call USB.ehciAdjustAsyncSchedCtrlr ;Start schedule and lock ctrlr as online
   106 000012C2 72DF                <1>     jc .pr0
   107 000012C4 E8(16350000)        <1>     call USB.ehciCtrlrGetNumberOfPorts
   108 000012C9 88C2                <1>     mov dl, al      ;Save the number of ports in dl
   109 000012CB 8A3425[47020000]    <1>     mov dh, byte [eActiveCtrlr]    ;Save current active ctrlr in dh
   110 000012D2 4D31D2              <1>     xor r10, r10    ;Host hub 0 [ie Root Hub enum only] (for enum)
   111                              <1> .pr1:
   112 000012D5 FECA                <1>     dec dl
   113 000012D7 49BC03000000000000- <1>     mov r12, 3      ;Attempt three times to enumerate
   113 000012E0 00                  <1>
   114                              <1> .pr11:
   115 000012E1 E8(B2380000)        <1>     call USB.ehciEnumerateRootPort
   116 000012E6 7413                <1>     jz .pr2
   117 000012E8 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h  ;General Controller Failure
   118 000012F0 0F84(82320000)      <1>     je USB.ehciCriticalErrorWrapper
   119 000012F6 49FFCC              <1>     dec r12
   120 000012F9 75E6                <1>     jnz .pr11
   121                              <1> .pr2:
   122 000012FB 84D2                <1>     test dl, dl
   123 000012FD 75D6                <1>     jnz .pr1
   124 000012FF 84C9                <1>     test cl, cl ;Once cl is zero we have gone through all controllers
   125 00001301 75A0                <1>     jnz .pr0
   126                              <1> 
   127 00001303 B804130000          <1>     mov eax, 1304h
   128 00001308 48BD-               <1>     mov rbp, remDevInit.ok  ;Reuse the OK from the other proc
   128 0000130A [1914000000000000]  <1>
   129 00001312 30FF                <1>     xor bh, bh
   130 00001314 CD30                <1>     int 30h
   131 00001316 EB29                <1>     jmp short .exit
   132 00001318 0A0D496E697469616C- <1> .echiInitMsg db 0Ah,0Dh,"Initialising USB and EHCI root hubs...",0
   132 00001321 6973696E6720555342- <1>
   132 0000132A 20616E642045484349- <1>
   132 00001333 20726F6F7420687562- <1>
   132 0000133C 732E2E2E00          <1>
   133                              <1> .exit:
    66                                  %include "./Init/Hardware/USB/MSD/msdinit.asm"
    67                              <1> remDevInit:
    68                              <1> ;Devices on root hubs have been enumerated, and added to tables,
    69                              <1> ;Now we reset them (in the case of MSD) and enumerate further (on Hubs)
    70 00001341 66B80413            <1>     mov ax, 1304h
    71 00001345 80F70B              <1>     xor bh, 0bh
    72 00001348 48BD-               <1>     mov rbp, .rmhmsg
    72 0000134A [FD13000000000000]  <1>
    73 00001352 CD30                <1>     int 30h
    74                              <1> .hubs_init:
    75 00001354 48BE-               <1>     mov rsi, hubDevTbl
    75 00001356 [6A02000000000000]  <1>
    76                              <1> ;First we scan for hubs only
    77                              <1> .redi1:
    78 0000135E 803E00              <1>     cmp byte [rsi], 0   ;Not an entry
    79 00001361 7417                <1>     jz .hubnextentry
    80 00001363 807E0500            <1>     cmp byte [rsi + 5], 0   ;If number of ports on hub is 0, dev uncofigured
    81 00001367 7511                <1>     jnz .hubnextentry  ;Device must be already enumerated
    82                              <1> 
    83 00001369 8A4601              <1>     mov al, byte [rsi + 1]  ;Get bus number into al
    84                              <1> 
    85 0000136C E8(99340000)        <1>     call USB.ehciAdjustAsyncSchedCtrlr
    86 00001371 7207                <1>     jc .hubnextentry
    87                              <1> 
    88 00001373 E8(013F0000)        <1>     call USB.ehciDevSetupHub  ;Only needs a valid device in rsi
    89 00001378 7200                <1>     jc .hubnextentry
    90                              <1> .hubnextentry:
    91 0000137A 4881C608000000      <1>     add rsi, hubDevTblEntrySize ;Goto next table entry
    92 00001381 4881FE[BA020000]    <1>     cmp rsi, hubDevTbl + 10*hubDevTblEntrySize  ;End of table address
    93 00001388 72D4                <1>     jb .redi1  ;We are still in table
    94                              <1> .hub_rescan:
    95                              <1> ;Now we check that all hubs are initialised
    96 0000138A 48BE-               <1>     mov rsi, hubDevTbl  ;Return to head of table
    96 0000138C [6A02000000000000]  <1>
    97                              <1> ;Leave as a stub for now. Dont support deeper than 1 level of devices
    98                              <1> ;The specification allows for a maximum of 7 levels of depth.
    99                              <1> .msds_init:
   100 00001394 66B80413            <1>     mov ax, 1304h
   101 00001398 80F70B              <1>     xor bh, 0bh
   102 0000139B 48BD-               <1>     mov rbp, .ok
   102 0000139D [1914000000000000]  <1>
   103 000013A5 CD30                <1>     int 30h
   104 000013A7 66B80413            <1>     mov ax, 1304h
   105 000013AB 80F70B              <1>     xor bh, 0bh
   106 000013AE 48BD-               <1>     mov rbp, .msdmsg
   106 000013B0 [1D14000000000000]  <1>
   107 000013B8 CD30                <1>     int 30h
   108 000013BA 48BE-               <1>     mov rsi, msdDevTbl
   108 000013BC [BA02000000000000]  <1>
   109                              <1> .msd1:
   110 000013C4 803E00              <1>     cmp byte [rsi], 0   ;Not an entry
   111 000013C7 740F                <1>     jz .msdNextEntry
   112 000013C9 E8(90420000)        <1>     call USB.ehciMsdInitialise
   113 000013CE 7308                <1>     jnc .msdNextEntry
   114 000013D0 FEC8                <1>     dec al
   115 000013D2 0F84(82320000)      <1>     jz USB.ehciCriticalErrorWrapper ;al = 1 => Host error, 
   116                              <1> ;                                    al = 2 => Bad dev, removed from MSD tables
   117                              <1> .msdNextEntry:
   118 000013D8 4881C610000000      <1>     add rsi, msdDevTblEntrySize ;Goto next entry
   119 000013DF 4881FE[5A030000]    <1>     cmp rsi, msdDevTbl + 10*msdDevTblEntrySize
   120 000013E6 75DC                <1>     jne .msd1
   121                              <1> .rediexit:
   122 000013E8 66B80413            <1>     mov ax, 1304h
   123 000013EC 80F70B              <1>     xor bh, 0bh
   124 000013EF 48BD-               <1>     mov rbp, .ok
   124 000013F1 [1914000000000000]  <1>
   125 000013F9 CD30                <1>     int 30h
   126 000013FB EB3E                <1>     jmp short .exit
   127 000013FD 0A0D496E697469616C- <1> .rmhmsg db 0Ah,0Dh,"Initialising USB ports...",0
   127 00001406 6973696E6720555342- <1>
   127 0000140F 20706F7274732E2E2E- <1>
   127 00001418 00                  <1>
   128 00001419 204F4B00            <1> .ok db " OK",0
   129 0000141D 0A0D496E697469616C- <1> .msdmsg db 0Ah,0Dh,"Initialising MSD devices...",0
   129 00001426 6973696E67204D5344- <1>
   129 0000142F 20646576696365732E- <1>
   129 00001438 2E2E00              <1>
   130                              <1> .exit:
    67                                  %include "./Init/Hardware/MSD/i33init.asm"
    68                              <1> ;----------------------------------------------------------------
    69                              <1> ;                      Int 33h Initialisation                   :
    70                              <1> ;----------------------------------------------------------------    
    71                              <1> int33hinit:
    72                              <1> ;Create Int 33h data table entry for each MSD/floppy device using steps 1-3.
    73                              <1> ;Go through MSD table and add devices to diskDevices
    74 0000143B 48BD-               <1>     mov rbp, usbDevTbl
    74 0000143D [4C02000000000000]  <1>
    75 00001445 48BF-               <1>     mov rdi, diskDevices
    75 00001447 [BB03000000000000]  <1>
    76                              <1> .i33i1:
    77 0000144F 807D0208            <1>     cmp byte [rbp + 2], 08h ;MSD USB Class code
    78 00001453 7525                <1>     jne .i33proceed
    79                              <1> ;Successfully found a valid MSD device. Talk to it
    80 00001455 668B4500            <1>     mov ax, word [rbp]  ;Get address/bus pair
    81 00001459 E8(6A3D0000)        <1>     call USB.ehciGetDevicePtr    ;Get pointer to MSD dev in rsi
    82 0000145E E8(DD190000)        <1>     call disk_io.deviceInit
    83 00001463 3C01                <1>     cmp al, 1   ;Critical error
    84 00001465 0F84(82320000)      <1>     je USB.ehciCriticalErrorWrapper
    85 0000146B 3C02                <1>     cmp al, 2   ;Device stopped responding, remove from USB data tables
    86 0000146D 7420                <1>     je .i33ibad 
    87 0000146F 3C03                <1>     cmp al, 3   ;Device not added to data tables
    88 00001471 7407                <1>     je .i33proceed
    89                              <1> ;Valid device added, increment rdi to next diskDevices table entry
    90 00001473 4881C710000000      <1>     add rdi, int33TblEntrySize
    91                              <1> .i33proceed:
    92 0000147A 4881FD[6A020000]    <1>     cmp rbp, usbDevTblEnd
    93 00001481 741D                <1>     je .i33iend
    94 00001483 4881C503000000      <1>     add rbp, usbDevTblEntrySize
    95 0000148A E9C0FFFFFF          <1>     jmp .i33i1
    96                              <1> .i33ibad:   ;If it goes here, clear table entry
    97 0000148F 48C70700000000      <1>     mov qword [rdi], 0  ;Remove from diskDevice table
    98 00001496 668B06              <1>     mov ax, word [rsi]
    99 00001499 E8(F53B0000)        <1>     call USB.ehciRemoveDevFromTables    ;Remove from USB tables
   100 0000149E EBDA                <1>     jmp short .i33proceed ;Goto next device
   101                              <1> .i33iend:
   102 000014A0 8A0425[4B020000]    <1>     mov al, byte [numMSD]
   103 000014A7 000425[A8010000]    <1>     add byte [i33Devices], al   ;Add the number of MSD devices to Int 33h total
    68                                  ;----------------------------------------------------------------
    69                                  ;                         End of Enum                           :
    70                                  ;----------------------------------------------------------------    
    71                                  %include "./Init/InitEnd.asm"
    72                              <1> ;----------------------------------------------------------------
    73                              <1> ;                End of Enum and Initialisation                 :
    74                              <1> ;----------------------------------------------------------------   
    75                              <1> end:
    76 000014AE 66B80413            <1>     mov ax, 1304h
    77 000014B2 48BD-               <1>     mov rbp, dbgmsg
    77 000014B4 [2416000000000000]  <1>
    78 000014BC CD30                <1>     int 30h
    79 000014BE 8A0425[4B020000]    <1>     mov al, byte [numMSD]
    80 000014C5 B404                <1>     mov ah, 04h
    81 000014C7 CD30                <1>     int 30h
    82                              <1> 
    83 000014C9 66B80413            <1>     mov ax, 1304h
    84 000014CD 48BD-               <1>     mov rbp, dbgmsg2
    84 000014CF [3516000000000000]  <1>
    85 000014D7 CD30                <1>     int 30h
    86 000014D9 8A0425[A8010000]    <1>     mov al, byte [i33Devices]
    87 000014E0 B404                <1>     mov ah, 04h
    88 000014E2 CD30                <1>     int 30h
    89                              <1> 
    90 000014E4 66B80413            <1>     mov ax, 1304h
    91 000014E8 48BD-               <1>     mov rbp, dbgmsg3
    91 000014EA [4916000000000000]  <1>
    92 000014F2 CD30                <1>     int 30h
    93 000014F4 8A0425[66000000]    <1>     mov al, byte [numCOM]
    94 000014FB B404                <1>     mov ah, 04h
    95 000014FD CD30                <1>     int 30h
    96                              <1> 
    97 000014FF 803C25[A8010000]00  <1>     cmp byte [i33Devices], 0    ;If there are no i33 devices, skip bootstrap
    98 00001507 740C                <1>     jz endNoDevFound
    99                              <1> 
   100 00001509 66C70425FE7D000000- <1>     mov word [7DFEh], 0 ;Clear out the old bootloader signature
   100 00001512 00                  <1>
   101 00001513 CD39                <1>     int 39h             ;Bootstrap loader
   102                              <1> endNoDevFound:
   103 00001515 48BD-               <1>     mov rbp, endboot
   103 00001517 [9415000000000000]  <1>
   104 0000151F 66B80413            <1>     mov ax, 1304h
   105 00001523 CD30                <1>     int 30h
   106                              <1>     
   107 00001525 6631C0              <1>     xor ax, ax  ;Pause for any key
   108 00001528 CD36                <1>     int 36h
   109                              <1> 
   110 0000152A 66BB0700            <1>     mov bx, 0007h    ;cls attribs
   111 0000152E E8(F7000000)        <1>     call cls
   112                              <1> 
   113 00001533 6631C9              <1>     xor cx, cx
   114 00001536 6631D2              <1>     xor dx, dx
   115 00001539 B402                <1>     mov ah, 2
   116 0000153B 30FF                <1>     xor bh, bh
   117 0000153D CD30                <1>     int 30h 
   118                              <1> 
   119 0000153F 66B80413            <1>     mov ax, 1304h
   120 00001543 48BD-               <1>     mov rbp, endboot2
   120 00001545 [0416000000000000]  <1>
   121 0000154D CD30                <1>     int 30h
   122                              <1> 
   123 0000154F 4831C0              <1>     xor rax, rax
   124 00001552 4831DB              <1>     xor rbx, rbx
   125 00001555 4831C9              <1>     xor rcx, rcx
   126 00001558 4831D2              <1>     xor rdx, rdx
   127 0000155B 4831F6              <1>     xor rsi, rsi
   128 0000155E 4831FF              <1>     xor rdi, rdi
   129 00001561 4831ED              <1>     xor rbp, rbp
   130 00001564 4D31C0              <1>     xor r8, r8
   131 00001567 4D31C9              <1>     xor r9, r9
   132 0000156A 4D31D2              <1>     xor r10, r10
   133 0000156D 4D31DB              <1>     xor r11, r11
   134 00001570 4D31E4              <1>     xor r12, r12
   135 00001573 4D31ED              <1>     xor r13, r13
   136 00001576 4D31F6              <1>     xor r14, r14
   137 00001579 4D31FF              <1>     xor r15, r15
   138                              <1> 
   139 0000157C CD38                <1>     int 38h
   140                              <1> 
   141                              <1> 
   142 0000157E 4C6F6164696E672053- <1> startboot:  db "Loading SCP/BIOS...", 0Ah, 0Dh, 0
   142 00001587 43502F42494F532E2E- <1>
   142 00001590 2E0A0D00            <1>
   143 00001594 0A0D5343502F42494F- <1> endboot:    db    0Ah,0Dh,"SCP/BIOS system initialisation complete", 0Ah, 0Dh 
   143 0000159D 532073797374656D20- <1>
   143 000015A6 696E697469616C6973- <1>
   143 000015AF 6174696F6E20636F6D- <1>
   143 000015B8 706C6574650A0D      <1>
   144 000015BF 4E6F204F7065726174- <1>         db "No Operating System detected. Strike any key to launch SYSDEBUG."
   144 000015C8 696E67205379737465- <1>
   144 000015D1 6D2064657465637465- <1>
   144 000015DA 642E20537472696B65- <1>
   144 000015E3 20616E79206B657920- <1>
   144 000015EC 746F206C61756E6368- <1>
   144 000015F5 205359534445425547- <1>
   144 000015FE 2E                  <1>
   145 000015FF 2E2E0A0D00          <1>             db "..",0Ah, 0Dh,0
   146 00001604 5374617274696E6720- <1> endboot2:   db "Starting SCP/BIOS SYSDEBUG...",0Ah,0Dh,0
   146 0000160D 5343502F42494F5320- <1>
   146 00001616 53595344454255472E- <1>
   146 0000161F 2E2E0A0D00          <1>
   147 00001624 0A0A0D4D5344206465- <1> dbgmsg:     db 0Ah,0Ah,0Dh,"MSD devices: ",0
   147 0000162D 76696365733A2000    <1>
   148 00001635 0A0D496E7420333368- <1> dbgmsg2:    db 0Ah,0Dh,"Int 33h devices: ",0
   148 0000163E 20646576696365733A- <1>
   148 00001647 2000                <1>
   149 00001649 0A0D434F4D20706F72- <1> dbgmsg3:    db 0Ah,0Dh,"COM ports: ",0
   149 00001652 74733A2000          <1>
   150                              <1> memprint:
   151                              <1> ;Simple proc to print memory status
   152 00001657 6631DB              <1>     xor bx, bx 
   153 0000165A 48BD-               <1>     mov rbp, .convmemmsg
   153 0000165C [B017000000000000]  <1>
   154 00001664 66B80413            <1>     mov ax, 1304h
   155 00001668 CD30                <1>     int 30h
   156 0000166A CD32                <1>     int 32h    ;Get conv Size
   157 0000166C 25FFFF0000          <1>     and eax, 0FFFFh ;Clear upper bits
   158 00001671 E8F4000000          <1>     call .printdecimalword
   159 00001676 48BD-               <1>     mov rbp, .kb
   159 00001678 [2718000000000000]  <1>
   160 00001680 66B80413            <1>     mov ax, 1304h
   161 00001684 CD30                <1>     int 30h
   162                              <1> 
   163 00001686 66B801E8            <1>     mov ax, 0E801h
   164 0000168A CD35                <1>     int 35h
   165 0000168C 25FFFF0000          <1>     and eax, 0FFFFh
   166 00001691 81E3FFFF0000        <1>     and ebx, 0FFFFh
   167 00001697 81E1FFFF0000        <1>     and ecx, 0FFFFh
   168 0000169D 81E2FFFF0000        <1>     and edx, 0FFFFh
   169 000016A3 53                  <1>     push rbx
   170 000016A4 52                  <1>     push rdx
   171 000016A5 4839C8              <1>     cmp rax, rcx
   172 000016A8 740C                <1>     je .sense1    ;Sensible
   173 000016AA 4885C0              <1>     test rax, rax
   174 000016AD 480F44C1            <1>     cmovz rax, rcx
   175 000016B1 4885C0              <1>     test rax, rax
   176 000016B4 7427                <1>     jz .pt2
   177                              <1> .sense1:
   178 000016B6 50                  <1>     push rax
   179 000016B7 48BD-               <1>     mov rbp, .extmemmsg
   179 000016B9 [CD17000000000000]  <1>
   180 000016C1 66B80413            <1>     mov ax, 1304h
   181 000016C5 CD30                <1>     int 30h
   182 000016C7 58                  <1>     pop rax
   183 000016C8 E89D000000          <1>     call .printdecimalword
   184 000016CD 48BD-               <1>     mov rbp, .kb
   184 000016CF [2718000000000000]  <1>
   185 000016D7 66B80413            <1>     mov ax, 1304h
   186 000016DB CD30                <1>     int 30h
   187                              <1> .pt2:
   188 000016DD 58                  <1>     pop rax
   189 000016DE 59                  <1>     pop rcx
   190 000016DF 4839C8              <1>     cmp rax, rcx
   191 000016E2 740C                <1>     je .sense2    ;Sensible
   192 000016E4 4885C0              <1>     test rax, rax
   193 000016E7 480F44C1            <1>     cmovz rax, rcx
   194 000016EB 4885C0              <1>     test rax, rax
   195 000016EE 742B                <1>     jz .pt3
   196                              <1> .sense2:
   197 000016F0 50                  <1>     push rax
   198 000016F1 48BD-               <1>     mov rbp, .extmemmsg2
   198 000016F3 [EB17000000000000]  <1>
   199 000016FB 66B80413            <1>     mov ax, 1304h
   200 000016FF CD30                <1>     int 30h
   201 00001701 58                  <1>     pop rax
   202                              <1> 
   203 00001702 48C1E006            <1>     shl rax, 6    ;Turn 64Kb into Kb
   204 00001706 E85F000000          <1>     call .printdecimalword
   205 0000170B 48BD-               <1>     mov rbp, .kb
   205 0000170D [2718000000000000]  <1>
   206 00001715 66B80413            <1>     mov ax, 1304h
   207 00001719 CD30                <1>     int 30h
   208                              <1> .pt3:   ;Read total free size from big map
   209 0000171B 50                  <1>     push rax
   210 0000171C 48BD-               <1>     mov rbp, .totalmem
   210 0000171E [0A18000000000000]  <1>
   211 00001726 B804130000          <1>     mov eax, 1304h
   212 0000172B CD30                <1>     int 30h
   213 0000172D 58                  <1>     pop rax
   214 0000172E 488B0425[E0010000]  <1>     mov rax, qword [sysMem]
   215 00001736 31DB                <1>     xor ebx, ebx
   216 00001738 8B1C25[E8010000]    <1>     mov ebx, dword [scpSize]
   217 0000173F 4829D8              <1>     sub rax, rbx
   218 00001742 48C1E80A            <1>     shr rax, 0Ah                ;Get number of Kb's free
   219 00001746 E81F000000          <1>     call .printdecimalword  
   220 0000174B 48BD-               <1>     mov rbp, .kb
   220 0000174D [2718000000000000]  <1>
   221 00001755 66B80413            <1>     mov ax, 1304h
   222 00001759 CD30                <1>     int 30h
   223                              <1> 
   224 0000175B B80A0E0000          <1>     mov eax, 0E0Ah
   225 00001760 CD30                <1>     int 30h
   226 00001762 B80D0E0000          <1>     mov eax, 0E0Dh   ;CR/LF
   227 00001767 CD30                <1>     int 30h
   228                              <1> 
   229 00001769 C3                  <1>     ret
   230                              <1> 
   231                              <1> .printdecimalword:
   232                              <1> ;Takes the qword in rax and prints its decimal representation
   233 0000176A 52                  <1>     push rdx
   234 0000176B 51                  <1>     push rcx
   235 0000176C 53                  <1>     push rbx
   236 0000176D 50                  <1>     push rax
   237 0000176E 55                  <1>     push rbp
   238 0000176F 4831C9              <1>     xor rcx, rcx
   239 00001772 6631ED              <1>     xor bp, bp    ;Use bp as #of digits counter
   240 00001775 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   240 0000177E 00                  <1>
   241                              <1> .pdw0:
   242 0000177F FFC5                <1>     inc ebp
   243 00001781 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   244 00001785 31D2                <1>     xor edx, edx
   245 00001787 48F7F3              <1>     div rbx
   246 0000178A 80C230              <1>     add dl, '0'
   247 0000178D 80FA39              <1>     cmp dl, '9'
   248 00001790 7603                <1>     jbe .pdw1
   249 00001792 80C207              <1>     add dl, 'A'-'0'-10
   250                              <1> .pdw1:
   251 00001795 88D1                <1>     mov cl, dl    ;Save remainder byte
   252 00001797 4885C0              <1>     test rax, rax
   253 0000179A 75E3                <1>     jnz .pdw0
   254                              <1> .pdw2:
   255 0000179C 88C8                <1>     mov al, cl    ;Get most sig digit into al
   256 0000179E 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   257 000017A2 B40E                <1>     mov ah, 0Eh
   258 000017A4 CD30                <1>     int 30h
   259 000017A6 FFCD                <1>     dec ebp
   260 000017A8 75F2                <1>     jnz .pdw2
   261                              <1> 
   262 000017AA 5D                  <1>     pop rbp
   263 000017AB 58                  <1>     pop rax
   264 000017AC 5B                  <1>     pop rbx
   265 000017AD 59                  <1>     pop rcx
   266 000017AE 5A                  <1>     pop rdx
   267 000017AF C3                  <1>     ret
   268 000017B0 0A0D4672656520436F- <1> .convmemmsg:        db 0Ah,0Dh,"Free Conventional Memory: ",0
   268 000017B9 6E76656E74696F6E61- <1>
   268 000017C2 6C204D656D6F72793A- <1>
   268 000017CB 2000                <1>
   269 000017CD 0A0D546F74616C204C- <1> .extmemmsg:         db 0Ah,0Dh,"Total Low Extended Memory: ",0    
   269 000017D6 6F7720457874656E64- <1>
   269 000017DF 6564204D656D6F7279- <1>
   269 000017E8 3A2000              <1>
   270 000017EB 0A0D546F74616C2048- <1> .extmemmsg2:        db 0Ah,0Dh,"Total High Extended Memory: ",0
   270 000017F4 69676820457874656E- <1>
   270 000017FD 646564204D656D6F72- <1>
   270 00001806 793A2000            <1>
   271 0000180A 0A0D546F74616C2046- <1> .totalmem:          db 0Ah,0Dh,"Total Free System Memory: ",0
   271 00001813 726565205379737465- <1>
   271 0000181C 6D204D656D6F72793A- <1>
   271 00001825 2000                <1>
   272 00001827 4B00                <1> .kb:                db "K",0
    72                                  %include "./Init/IntTable.asm"
    73                              <1> ;----------------------Interrupt Tables--------------------------
    74                              <1> IDT_TABLE:
    75                              <1> CPU_IDT:
    76 00001829 [F64B000000000000]  <1>     dq i0
    77 00001831 [FE4B000000000000]  <1>     dq i1
    78 00001839 [0D4C000000000000]  <1>     dq i2
    79 00001841 [1C4C000000000000]  <1>     dq i3
    80 00001849 [2B4C000000000000]  <1>     dq i4
    81 00001851 [3A4C000000000000]  <1>     dq i5
    82 00001859 [494C000000000000]  <1>     dq i6
    83 00001861 [584C000000000000]  <1>     dq i7
    84 00001869 [674C000000000000]  <1>     dq i8
    85 00001871 [764C000000000000]  <1>     dq i9
    86 00001879 [854C000000000000]  <1>     dq i10
    87 00001881 [944C000000000000]  <1>     dq i11
    88 00001889 [A34C000000000000]  <1>     dq i12
    89 00001891 [B24C000000000000]  <1>     dq i13
    90 00001899 [BE4C000000000000]  <1>     dq i14
    91 000018A1 [CA4C000000000000]  <1>     dq i15
    92 000018A9 [D64C000000000000]  <1>     dq i16
    93 000018B1 [E24C000000000000]  <1>     dq i17
    94 000018B9 [EE4C000000000000]  <1>     dq i18
    95 000018C1 [FA4C000000000000]  <1>     dq i19
    96 000018C9 [064D000000000000]  <1>     dq i20
    97 000018D1 [124D000000000000]  <1>     dq i21
    98 000018D9 [1550000000000000]- <1>     times 0Ah dq dummy_return_64    ;just return, reserved interrupts!
    98 000018D9 <rep Ah>            <1>
    99                              <1> HW_IDT:
   100                              <1> ;--------PIC1--------:    ;Int 20h-27h
   101 00001929 [0F01000000000000]  <1>     dq timer_IRQ0
   102 00001931 [4F01000000000000]  <1>     dq kb_IRQ1
   103 00001939 [0F50000000000000]  <1>     dq dummy_interrupt.pic1
   104 00001941 [CF09000000000000]  <1>     dq ser_IRQ3
   105 00001949 [E109000000000000]  <1>     dq ser_IRQ4
   106 00001951 [0F50000000000000]  <1>     dq dummy_interrupt.pic1
   107 00001959 [AA0A000000000000]  <1>     dq fdd_IRQ6
   108 00001961 [770B000000000000]  <1>     dq default_IRQ7
   109                              <1> ;--------PIC2--------:    ;Int 28h-2Fh
   110 00001969 [B20A000000000000]  <1>     dq rtc_IRQ8
   111 00001971 [0850000000000000]  <1>     dq dummy_interrupt.pic2
   112 00001979 [0850000000000000]  <1>     dq dummy_interrupt.pic2
   113 00001981 [0850000000000000]  <1>     dq dummy_interrupt.pic2
   114 00001989 [0850000000000000]  <1>     dq dummy_interrupt.pic2
   115 00001991 [0850000000000000]  <1>     dq dummy_interrupt.pic2
   116 00001999 [E50A000000000000]  <1>     dq hdd_IRQ14
   117 000019A1 [970B000000000000]  <1>     dq default_IRQ15
   118                              <1> SW_IDT:    ;Int 30h onwards!
   119 000019A9 [6B0C000000000000]  <1>     dq scr_io            ;Int 30h, VGA Screen drawing/TTY functions
   120 000019B1 [F512000000000000]  <1>     dq machineWord_io    ;Int 31h, Give the BIOS hardware bitfield
   121 000019B9 [2C13000000000000]  <1>     dq convRAM_io        ;Int 32h, Give conv memory available
   122 000019C1 [4F13000000000000]  <1>     dq disk_io           ;Int 33h, Storage device Functions
   123 000019C9 [AC1A000000000000]  <1>     dq serial_io         ;Int 34h, Serial Port Functions
   124 000019D1 [1A1C000000000000]  <1>     dq misc_io           ;Int 35h, Misc functions
   125 000019D9 [BC1F000000000000]  <1>     dq kb_io             ;Int 36h, Keyboard functions
   126 000019E1 [3E20000000000000]  <1>     dq printer_io        ;Int 37h, Reserved [Who uses parallel anymore?]
   127 000019E9 [DF20000000000000]  <1>     dq MCP_int           ;Int 38h, launch MCP, and install its "API" handle
   128 000019F1 [D72E000000000000]  <1>     dq bootstrapInt      ;Int 39h, restart the PC using an interrupt
   129 000019F9 [542F000000000000]  <1>     dq timerInt          ;Int 3Ah, Time of day
   130 00001A01 [BF31000000000000]  <1>     dq ctrlbreak_io      ;Int 3Bh, user Break
   131 00001A09 [1550000000000000]  <1>     dq dummy_return_64   ;Int 3Ch, user IRQ0 hook
   132 00001A11 [C131000000000000]  <1>     dq scr_params_io     ;Int 3Dh, Screen Mode parameters return function
   133 00001A19 [CD31000000000000]  <1>     dq disk_params_io    ;Int 3Eh, disk parameters return function
   134 00001A21 [DF31000000000000]  <1>     dq cga_ret_io        ;Int 3Fh, video extention return function
   135                              <1> IDT_TABLE_Length equ $ - IDT_TABLE
    73                                  seg0len equ ($ - $$)
    74                                  
    75                                  ;----------------------------------------------------------------
    76                                  ;                BIOS RESIDENT CODE AREA STARTS HERE            :
    77                                  ;----------------------------------------------------------------
    78                                  Segment codeResident follows=codeInit vfollows=data align=1 valign=1
    79                                  %include "./Resident/Misc/Procs/common.asm"
    80                              <1> ;A file containing common procs
    81                              <1> 
    82                              <1> ;---------------------------------Procs--------------------------
    83                              <1> e820print:
    84 00000000 56                  <1>     push rsi
    85 00000001 52                  <1>     push rdx
    86 00000002 51                  <1>     push rcx
    87 00000003 53                  <1>     push rbx
    88 00000004 50                  <1>     push rax
    89 00000005 48BE-               <1>     mov rsi, bigmapptr
    89 00000007 [F005000000000000]  <1>
    90 0000000F 480FB61425-         <1>     movzx rdx, byte [bigmapSize]    ;Get the number of 24 byte entries
    90 00000014 [D5010000]          <1>
    91                              <1> .e0:
    92 00000018 48AD                <1>     lodsq
    93 0000001A E82D000000          <1>     call .printqword
    94 0000001F E845000000          <1>     call .printpipe
    95 00000024 48AD                <1>     lodsq
    96 00000026 E821000000          <1>     call .printqword
    97 0000002B E839000000          <1>     call .printpipe
    98 00000030 48AD                <1>     lodsq   
    99 00000032 E815000000          <1>     call .printqword
   100 00000037 E844000000          <1>     call .printcrlf
   101 0000003C 6631C0              <1>     xor ax, ax
   102 0000003F CD36                <1>     int 36h
   103 00000041 48FFCA              <1>     dec rdx
   104 00000044 75D2                <1>     jnz .e0
   105 00000046 58                  <1>     pop rax
   106 00000047 5B                  <1>     pop rbx
   107 00000048 59                  <1>     pop rcx
   108 00000049 5A                  <1>     pop rdx
   109 0000004A 5E                  <1>     pop rsi
   110 0000004B C3                  <1>     ret
   111                              <1> .printqword:
   112 0000004C 4889C3              <1>     mov rbx, rax
   113 0000004F 480FCB              <1>     bswap rbx
   114 00000052 48B908000000000000- <1>     mov rcx, 8
   114 0000005B 00                  <1>
   115                              <1> .pq1:
   116 0000005C 88D8                <1>     mov al, bl
   117 0000005E B404                <1>     mov ah, 04h
   118 00000060 CD30                <1>     int 30h
   119 00000062 48C1EB08            <1>     shr rbx, 8
   120 00000066 E2F4                <1>     loop .pq1
   121 00000068 C3                  <1>     ret
   122                              <1> .printpipe:
   123 00000069 55                  <1>     push rbp
   124 0000006A 48BD-               <1>     mov rbp, .pipestr
   124 0000006C [7C00000000000000]  <1>
   125 00000074 66B80413            <1>     mov ax, 1304h
   126 00000078 CD30                <1>     int 30h
   127 0000007A 5D                  <1>     pop rbp
   128 0000007B C3                  <1>     ret
   129 0000007C 207C2000            <1> .pipestr:   db " | ",0
   130                              <1> .printcrlf:
   131 00000080 55                  <1>     push rbp
   132 00000081 48BD-               <1>     mov rbp, .crlfstr
   132 00000083 [9300000000000000]  <1>
   133 0000008B 66B80413            <1>     mov ax, 1304h
   134 0000008F CD30                <1>     int 30h
   135 00000091 5D                  <1>     pop rbp
   136 00000092 C3                  <1>     ret
   137 00000093 0A0D00              <1> .crlfstr: db 0Ah,0Dh, 0
   138                              <1> beep:
   139                              <1> ;Destroys old PIT2 divisor.
   140                              <1> ;Input: 
   141                              <1> ;   bx = Frequency divisor to use for tone
   142                              <1> ;   rcx = # of ms to beep for
   143                              <1> ;All registers preserved
   144 00000096 50                  <1>     push rax
   145 00000097 B0B6                <1>     mov al, 0B6h ;Get PIT command bitfield, PIT2, lo/hi, Mode 3, Binary
   146 00000099 E643                <1>     out PITcommand, al
   147                              <1> 
   148 0000009B 6689D8              <1>     mov ax, bx       ;Move frequency divisor into ax
   149 0000009E E642                <1>     out PIT2, al     ;Output lo byte of divisor
   150 000000A0 88E0                <1>     mov al, ah
   151 000000A2 E642                <1>     out PIT2, al     ;Output hi byte of divisor
   152                              <1> 
   153 000000A4 E461                <1>     in al, port61h  ;Save original state of port 61h in ah
   154 000000A6 0C03                <1>     or al, 3        ;Set bits 0 and 1 to turn on the speaker
   155 000000A8 E661                <1>     out port61h, al
   156                              <1> 
   157 000000AA B486                <1>     mov ah, 86h     ;Wait for beep to complete
   158 000000AC CD35                <1>     int 35h
   159                              <1> 
   160 000000AE E461                <1>     in al, port61h    ;Read state of port 61h afresh
   161 000000B0 24FC                <1>     and al, ~3        ;Clear bits 0 and 1 to turn off the speaker
   162 000000B2 E661                <1>     out port61h, al
   163                              <1> 
   164 000000B4 58                  <1>     pop rax
   165 000000B5 C3                  <1>     ret
   166                              <1> 
   167                              <1> ps2wait:
   168 000000B6 50                  <1>     push rax
   169                              <1> .wnok:
   170 000000B7 EB00                <1>     jmp short $ + 2
   171 000000B9 E464                <1>     in al, ps2status
   172 000000BB A801                <1>     test al, 1    ;Can something be read from KB?
   173 000000BD 7406                <1>     jz .wok       ;Zero = no, so loop back. Not zero = proceed to check if 
   174                              <1>                   ; something can be written
   175 000000BF EB00                <1>     jmp short $ + 2
   176 000000C1 E460                <1>     in al, ps2data    ;Read it in
   177 000000C3 EBF2                <1>     jmp short .wnok
   178                              <1> .wok:
   179 000000C5 A802                <1>     test al, 2   ;Can something be written to KB?
   180 000000C7 75EE                <1>     jnz .wnok    ;Zero if yes and proceed.
   181 000000C9 58                  <1>     pop rax
   182 000000CA C3                  <1>     ret
   183                              <1>     
   184                              <1> idtWriteEntry:
   185                              <1> ;----------------------------------------------------------------
   186                              <1> ;This proc writes an interrupt handler to a particular IDT entry.
   187                              <1> ; rax = Interrupt handler ptr    (qword)
   188                              <1> ; rsi = Interrupt Number         (qword)
   189                              <1> ; dx = Attributes word           (word)
   190                              <1> ; bx = Segment selector          (word)
   191                              <1> ;On return:
   192                              <1> ; rsi incremented by 1
   193                              <1> ; Entry written
   194                              <1> ;----------------------------------------------------------------
   195 000000CB 56                  <1>     push rsi
   196 000000CC 48C1E604            <1>     shl rsi, 4h     ;Multiply IDT entry number by 16
   197 000000D0 48033425[04000000]  <1>     add rsi, qword [IDTpointer.Base]    ;rsx points to IDT entry
   198 000000D8 668906              <1>     mov word [rsi], ax  ;Get low word into offset 15...0
   199 000000DB 66895E02            <1>     mov word [rsi + 2], bx  ;Move segment selector into place
   200 000000DF 66895604            <1>     mov word [rsi + 4], dx  ;Move attribute word into place
   201 000000E3 48C1E810            <1>     shr rax, 10h    ;Bring next word low
   202 000000E7 66894606            <1>     mov word [rsi + 6], ax  ;Get low word into offset 31...16
   203 000000EB 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
   204 000000EF 894608              <1>     mov dword [rsi + 8], eax
   205 000000F2 5E                  <1>     pop rsi
   206 000000F3 48FFC6              <1>     inc rsi         ;rsi contains number of next interrupt handler
   207 000000F6 C3                  <1>     ret
   208                              <1>     
   209                              <1> cls:    ;Clear the screen, bl attrib, always clear active scr
   210 000000F7 50                  <1>     push rax
   211 000000F8 52                  <1>     push rdx
   212 000000F9 B40F                <1>     mov ah, 0Fh
   213 000000FB CD30                <1>     int 30h ;Get current active page
   214                              <1> 
   215 000000FD B402                <1>     mov ah, 02h    ;Set cursor pos
   216 000000FF 6631D2              <1>     xor dx, dx
   217 00000102 CD30                <1>     int 30h
   218 00000104 88DF                <1>     mov bh, bl
   219                              <1> ;No need for coordinates since al=00 means reset fullscreen
   220 00000106 66B80006            <1>     mov ax, 0600h
   221 0000010A CD30                <1>     int 30h    ;scroll page with grey on black
   222 0000010C 5A                  <1>     pop rdx
   223 0000010D 58                  <1>     pop rax
   224 0000010E C3                  <1>     ret
    80                                  ;--------------------Interrupt Service routines------------------
    81                                  
    82                                  ;======================HARDWARE INTERRUPTS=======================
    83                                  %include "./Resident/Hardware/Timers/pitInt.asm"
    84                              <1> ;----------------Timer Interrupt IRQ 0/Int 20h-------------------
    85                              <1> ;This interrupt simply increments an internal timer and 
    86                              <1> ; calls a software interrupt (5Ch) which can be used by user 
    87                              <1> ; applications.
    88                              <1> ;----------------------------------------------------------------
    89                              <1> timer_IRQ0:
    90 0000010F FB                  <1>     sti    
    91 00000110 50                  <1>     push rax
    92 00000111 FF0425[37010000]    <1>     inc dword [pit_ticks]
    93 00000118 8B0425[37010000]    <1>     mov eax, dword [pit_ticks]
    94 0000011F 25FFFF1F00          <1>     and eax, 1FFFFFh    ;Clear OF bit [mask on bits 20:0]
    95 00000124 3DB0001800          <1>     cmp eax, 1800B0h    ;Ticks in one full day
    96 00000129 7519                <1>     jnz .tret            ;Not quite there
    97 0000012B 66C70425[37010000]- <1>     mov word [pit_ticks], 0     ;Zero lo count
    97 00000133 0000                <1>
    98 00000135 C60425[39010000]00  <1>     mov byte [pit_ticks + 2], 0    ;Zero hi count
    99 0000013D FE0425[3A010000]    <1>     inc byte [pit_ticks + 3]    ;Increment day OF counter    
   100                              <1> .tret:
   101 00000144 CD3C                <1>     int 3Ch        ;Call user handler
   102                              <1> 
   103 00000146 B020                <1>     mov al, EOI
   104 00000148 E620                <1>     out pic1command, al
   105 0000014A E680                <1>     out waitp, al    ;allow one io cycle to run
   106                              <1> 
   107 0000014C 58                  <1>     pop rax
   108 0000014D 48CF                <1>     iretq
   109                              <1> ;-------------------------End of Interrupt-----------------------
    84                                  %include "./Resident/Hardware/PS2/keybInt.asm"
    85                              <1> ;----------------Keyboard Interrupt IRQ 1/Int 21h----------------
    86                              <1> ;This interrupt takes scancodes from the PC keyboard, translates 
    87                              <1> ; them into scancode/ASCII char pair and stores the pair into 
    88                              <1> ; the buffer for the software keyboard interrupt to use.
    89                              <1> ;----------------------------------------------------------------
    90                              <1> kb_IRQ1:
    91 0000014F FB                  <1>     sti        ;Reenable interrupts
    92 00000150 50                  <1>     push rax
    93 00000151 53                  <1>     push rbx
    94 00000152 51                  <1>     push rcx
    95 00000153 57                  <1>     push rdi
    96 00000154 4831C0              <1>     xor rax, rax
    97                              <1> 
    98                              <1> .k0:
    99 00000157 E460                <1>     in al, ps2data    ;Get the scancode (Set 1)
   100 00000159 4885C0              <1>     test rax, rax    ;Check to see if we got an error code from the keyboard.
   101 0000015C 0F84A0020000        <1>     jz .kb_error
   102 00000162 483D80000000        <1>     cmp rax, 80h
   103 00000168 0F8ED8000000        <1>     jle .basickey    ;A normal keypress, nothing too magical.
   104 0000016E 483DE0000000        <1>     cmp rax, 0E0h    ;Compare against special keys
   105 00000174 7472                <1>     je .special_keys
   106 00000176 483DE1000000        <1>     cmp rax, 0E1h    ;Pause
   107 0000017C 747D                <1>     je .pause
   108 0000017E 483DAA000000        <1>     cmp rax, 0AAh    ;LShift released
   109 00000184 0F8490000000        <1>     je .lshift_released
   110 0000018A 483DB6000000        <1>     cmp rax, 0B6h    ;RShift released
   111 00000190 0F8488000000        <1>     je .rshift_released
   112 00000196 483DB8000000        <1>     cmp rax, 0B8h    ;Alt Shift released
   113 0000019C 7474                <1>     je .alt_shift_released
   114 0000019E 483D9D000000        <1>     cmp rax, 9Dh    ;Ctrl Shift released
   115 000001A4 7470                <1>     je .ctrl_shift_released
   116 000001A6 483D2B0D0000        <1>     cmp rax, 0D2Bh    ;Toggle Insert
   117 000001AC 7460                <1>     je .insert_released
   118 000001AE EB25                <1>     jmp short .kb1_exit    ;Just exit if something weird gets sent
   119                              <1> 
   120                              <1> .kb_store_in_buffer:
   121 000001B0 488B1C25[4A000000]  <1>     mov rbx, qword [kb_buf_tail]    ;point rbx to tail
   122 000001B8 4889DF              <1>     mov rdi, rbx ;Save bx in di for storing the data in AX after bx gets inc 
   123 000001BB E8651E0000          <1>     call kb_io.kb_ptr_adv            ;safely advance the pointer
   124 000001C0 483B1C25[42000000]  <1>     cmp rbx, qword [kb_buf_head]    ;Have we wrapped around?
   125 000001C8 745F                <1>     je .kb_buf_full_beep            ;discard and beep
   126 000001CA 668907              <1>     mov word [rdi], ax                ;mov scancode/ascii pair into buffer
   127 000001CD 48891C25[4A000000]  <1>     mov qword [kb_buf_tail], rbx    ;store new pointer back into tail
   128                              <1> 
   129                              <1> .kb1_exit:
   130 000001D5 B0FC                <1>     mov al, ~(kb_flag2_e0 | kb_flag2_e1)        ;move the notted version into al
   131 000001D7 200425[64000000]    <1>     and byte [kb_flags_2], al        ;Nullify the e0 and e1 flag
   132                              <1> .kb1_exit_e0:
   133 000001DE B020                <1>     mov al, EOI
   134 000001E0 E620                <1>     out pic1command, al    ;End of interrupt to pic1 command port
   135                              <1> 
   136 000001E2 5F                  <1>     pop rdi
   137 000001E3 59                  <1>     pop rcx
   138 000001E4 5B                  <1>     pop rbx
   139 000001E5 58                  <1>     pop rax
   140 000001E6 48CF                <1>     iretq
   141                              <1> 
   142                              <1> .special_keys:    ;An E0 process
   143 000001E8 B002                <1>     mov al, kb_flag2_e0         ;Set the bit for the flag
   144 000001EA 080425[64000000]    <1>     or byte [kb_flags_2], al    ;Set the flag
   145 000001F1 802425[64000000]FE  <1>     and byte [kb_flags_2], ~kb_flag2_e1    ;clear the E1 bit
   146 000001F9 EBE3                <1>     jmp short .kb1_exit_e0      ;Exit from IRQ without resetting flags 
   147                              <1> .pause:    ;An E1 process
   148 000001FB B001                <1>     mov al, kb_flag2_e1         ;Set the bit for the flag
   149 000001FD 080425[64000000]    <1>     or byte [kb_flags_2], al    ;Toggle the flag, since 9D and C5 will be 
   150                              <1>                                 ; ignored by the Int handler
   151 00000204 802425[64000000]FD  <1>     and byte [kb_flags_2], ~kb_flag2_e0    ;clear the E0 bit
   152 0000020C EBD0                <1>     jmp short .kb1_exit_e0
   153                              <1> 
   154                              <1> .insert_released:
   155 0000020E B07F                <1>     mov al, ~kb_flag_insset     ;Flag negation
   156 00000210 EB0E                <1>     jmp short .shift_release_common
   157                              <1> .alt_shift_released:
   158 00000212 B0F7                <1>     mov al, ~kb_flag_alt        ;Flag negation
   159 00000214 EB0A                <1>     jmp short .shift_release_common
   160                              <1> .ctrl_shift_released:
   161 00000216 B0FB                <1>     mov al, ~kb_flag_ctrl       ;Flag negation
   162 00000218 EB06                <1>     jmp short .shift_release_common
   163                              <1> .lshift_released:
   164 0000021A B0FD                <1>     mov al, ~kb_flag_lshift     ;Flag negation
   165 0000021C EB02                <1>     jmp short .shift_release_common
   166                              <1> .rshift_released:
   167 0000021E B0FE                <1>     mov al, ~kb_flag_rshift     ;Flag negation
   168                              <1> .shift_release_common:
   169 00000220 200425[62000000]    <1>     and byte [kb_flags], al     ;Clear the relevant bit
   170 00000227 EBAC                <1>     jmp short .kb1_exit
   171                              <1> 
   172                              <1> 
   173                              <1> .kb_buf_full_beep:
   174 00000229 53                  <1>     push rbx
   175 0000022A 51                  <1>     push rcx
   176 0000022B BBA9040000          <1>     mov ebx, 04A9h ;Frequency divisor for 1000Hz tone
   177 00000230 48B9F4010000000000- <1>     mov rcx, 500   ;Beep for a 1/2 second
   177 00000239 00                  <1>
   178 0000023A E857FEFFFF          <1>     call beep
   179 0000023F 59                  <1>     pop rcx
   180 00000240 5B                  <1>     pop rbx
   181 00000241 E98FFFFFFF          <1>     jmp .kb1_exit
   182                              <1> 
   183                              <1> .basickey:          ;al contains the scancode
   184 00000246 483D46000000        <1>     cmp rax, 46h
   185 0000024C 0F8421010000        <1>     je .e0special   ;ctrl+break checker (E0 46h is make for break haha)
   186                              <1> .kbbk1:
   187 00000252 483D2A000000        <1>     cmp rax, 2Ah    ;Left Shift scancode
   188 00000258 0F84E4000000        <1>     je .lshift_pressed
   189 0000025E 483D36000000        <1>     cmp rax, 36h    ;Right Shift scancode
   190 00000264 0F84DC000000        <1>     je .rshift_pressed
   191 0000026A 483D38000000        <1>     cmp rax, 38h    ;Alt Shift key scancode
   192 00000270 0F84C4000000        <1>     je .alt_shift_pressed
   193 00000276 483D1D000000        <1>     cmp rax, 1Dh    ;Ctrl Shift key scancode
   194 0000027C 0F84BC000000        <1>     je .ctrl_shift_pressed
   195                              <1>     
   196 00000282 483D3A000000        <1>     cmp rax, 3Ah    ;Caps lock key
   197 00000288 0F84CA000000        <1>     je .caps_lock
   198 0000028E 483D45000000        <1>     cmp rax, 45h    ;Num lock key
   199 00000294 0F84C2000000        <1>     je .num_lock
   200                              <1> ;    cmp rax, 46h    ;Scroll lock key
   201                              <1> ;    je .scroll_lock
   202 0000029A 483D52000000        <1>     cmp rax, 52h    ;Insert key pressed
   203 000002A0 0F84AE000000        <1>     je .ins_toggle    
   204 000002A6 483D53000000        <1>     cmp rax, 53h    ;Delete key, for CTRL+ALT+DEL
   205 000002AC 0F8408010000        <1>     je .ctrl_alt_del
   206                              <1> .keylookup:
   207 000002B2 48BB-               <1>     mov rbx, .kb_sc_ascii_lookup
   207 000002B4 [3F04000000000000]  <1>
   208                              <1>                     ; upper 7 bytes of rax are completely clear
   209 000002BC 66C1E004            <1>     shl ax, 4       ;multiply ax, the scancode, by 16, to offset to correct row
   210 000002C0 4801C3              <1>     add rbx, rax    ;offset rbx to the correct row
   211                              <1> ;Now check shift states, to align with column. rax is free again
   212 000002C3 8A0425[62000000]    <1>     mov al, byte [kb_flags]
   213                              <1> 
   214 000002CA A802                <1>     test al, kb_flag_lshift
   215 000002CC 7525                <1>     jnz .addshiftvalue            ;If that bit is set, jump!
   216 000002CE A801                <1>     test al, kb_flag_rshift
   217 000002D0 7521                <1>     jnz .addshiftvalue
   218 000002D2 A804                <1>     test al, kb_flag_ctrl
   219 000002D4 752E                <1>     jnz .addctrlvalue
   220 000002D6 A808                <1>     test al, kb_flag_alt
   221 000002D8 7533                <1>     jnz .addaltvalue
   222 000002DA A820                <1>     test al, kb_flag_numset
   223 000002DC 7538                <1>     jnz .addnumvalue
   224 000002DE A840                <1>     test al, kb_flag_capsset
   225 000002E0 753D                <1>     jnz .addcapsvalue
   226                              <1> 
   227                              <1> .keyget:
   228 000002E2 668B03              <1>     mov ax, word [rbx] ;Get correct word into ax!
   229 000002E5 6685C0              <1>     test ax, ax        ;check if the value is zero, if so, dont store in buffer
   230 000002E8 0F84E7FEFFFF        <1>     jz .kb1_exit
   231 000002EE E9BDFEFFFF          <1>     jmp .kb_store_in_buffer
   232                              <1> 
   233                              <1> .addshiftvalue:    ;first check if we shift with caps or num
   234 000002F3 A820                <1>     test al, kb_flag_numset
   235 000002F5 753A                <1>     jnz .addshiftnum
   236 000002F7 A840                <1>     test al, kb_flag_capsset
   237 000002F9 752D                <1>     jnz .addshiftcaps
   238                              <1>     ;Collapse through, it is just shift, add 2 to rbx
   239 000002FB 4881C302000000      <1>     add rbx, 1h*2h
   240 00000302 EBDE                <1>     jmp short .keyget
   241                              <1> .addctrlvalue:
   242 00000304 4881C304000000      <1>     add rbx, 2h*2h
   243 0000030B EBD5                <1>     jmp short .keyget
   244                              <1> .addaltvalue:
   245 0000030D 4881C306000000      <1>     add rbx, 3h*2h
   246 00000314 EBCC                <1>     jmp short .keyget
   247                              <1> .addnumvalue:
   248 00000316 4881C308000000      <1>     add rbx, 4h*2h
   249 0000031D EBC3                <1>     jmp short .keyget
   250                              <1> .addcapsvalue:
   251 0000031F 4881C30A000000      <1>     add rbx, 5h*2h
   252 00000326 EBBA                <1>     jmp short .keyget
   253                              <1> .addshiftcaps:
   254 00000328 4881C30C000000      <1>     add rbx, 6h*2h
   255 0000032F EBB1                <1>     jmp short .keyget
   256                              <1> .addshiftnum:
   257 00000331 4881C30E000000      <1>     add rbx, 7h*2h
   258 00000338 EBA8                <1>     jmp short .keyget
   259                              <1> 
   260                              <1> .alt_shift_pressed:
   261 0000033A B008                <1>     mov al, kb_flag_alt
   262 0000033C EB0A                <1>     jmp short .shift_pressed_common
   263                              <1> .ctrl_shift_pressed:
   264 0000033E B004                <1>     mov al, kb_flag_ctrl
   265 00000340 EB06                <1>     jmp short .shift_pressed_common
   266                              <1> .lshift_pressed:
   267 00000342 B002                <1>     mov al, kb_flag_lshift
   268 00000344 EB02                <1>     jmp short .shift_pressed_common
   269                              <1> .rshift_pressed:
   270 00000346 B001                <1>     mov al, kb_flag_rshift
   271                              <1> .shift_pressed_common:
   272 00000348 080425[62000000]    <1>     or byte [kb_flags], al    ;toggle flag bits
   273 0000034F E981FEFFFF          <1>     jmp .kb1_exit             ;Exit
   274                              <1> 
   275                              <1> .ins_toggle:
   276 00000354 B080                <1>     mov al, kb_flag_insset
   277 00000356 EB0A                <1>     jmp short .lock_common
   278                              <1> .caps_lock:
   279 00000358 B040                <1>     mov al, kb_flag_capsset
   280 0000035A EB06                <1>     jmp short .lock_common
   281                              <1> .num_lock:
   282 0000035C B020                <1>     mov al, kb_flag_numset
   283 0000035E EB02                <1>     jmp short .lock_common
   284                              <1> .scroll_lock:
   285 00000360 B010                <1>     mov al, kb_flag_scrlset
   286                              <1> .lock_common:
   287 00000362 300425[62000000]    <1>     xor byte [kb_flags], al    ;toggle bit
   288 00000369 E875000000          <1>     call .set_kb_lights
   289 0000036E E962FEFFFF          <1>     jmp .kb1_exit
   290                              <1> 
   291                              <1> .e0special:
   292 00000373 F60425[64000000]02  <1>     test byte [kb_flags_2], 00000010b    ;Check for E0 set
   293 0000037B 7505                <1>     jnz .ctrl_break
   294 0000037D E9DEFFFFFF          <1>     jmp .scroll_lock    ;Assume scroll lock set
   295                              <1> .ctrl_break:
   296 00000382 800C25[65000000]01  <1>     or byte [break_flag], 1        ;set break_flag
   297 0000038A 6631C0              <1>     xor ax, ax
   298 0000038D 53                  <1>     push rbx
   299 0000038E 48BB-               <1>     mov rbx, kb_buffer            ;mov the buffer addr to rbx
   299 00000390 [2200000000000000]  <1>
   300 00000398 48891C25[42000000]  <1>     mov qword [kb_buf_head], rbx
   301 000003A0 48891C25[4A000000]  <1>     mov qword [kb_buf_tail], rbx
   302 000003A8 668903              <1>     mov word [rbx], ax    ;Store zero as the first two bytes of the
   303 000003AB 5B                  <1>     pop rbx
   304 000003AC CD3B                <1>     int 3Bh                      ;Call the CTRL+Break handler
   305 000003AE 200425[65000000]    <1>     and byte [break_flag], al    ;clear break_flag
   306 000003B5 E91BFEFFFF          <1>     jmp .kb1_exit        ;return clearing E0
   307                              <1> 
   308                              <1> .ctrl_alt_del:
   309 000003BA 50                  <1>     push rax    ;save scancode
   310 000003BB 8A0425[64000000]    <1>     mov al, byte [kb_flags_2]
   311 000003C2 A802                <1>     test al, kb_flag2_e0    ;Delete scancode is E0, 53, check if we first had E0
   312 000003C4 7417                <1>     jz .ctrl_alt_del_no_reset
   313                              <1> 
   314 000003C6 8A0425[62000000]    <1>     mov al, byte [kb_flags]
   315 000003CD 240C                <1>     and al,  kb_flag_ctrl | kb_flag_alt
   316 000003CF 3C0C                <1>     cmp al, kb_flag_ctrl | kb_flag_alt    ;Test if Ctrl + Alt is being pressed
   317 000003D1 750A                <1>     jne .ctrl_alt_del_no_reset
   318                              <1> .ctrl_alt_del_killPC:
   319 000003D3 E464                <1>     in al, 64h    ;Check if the input buffer is empty
   320 000003D5 A802                <1>     test al, 2    ;Check if clear
   321 000003D7 75FA                <1>     jne .ctrl_alt_del_killPC    ;keep waiting
   322 000003D9 B0FE                <1>     mov al, 0FEh    ;Pulse kill lines
   323 000003DB E664                <1>     out 64h, al    
   324                              <1>     ;PC dead, time to reboot!
   325                              <1> .ctrl_alt_del_no_reset:
   326 000003DD 58                  <1>     pop rax        ;return the OG scancode and proceed as normal
   327 000003DE E9CFFEFFFF          <1>     jmp .keylookup
   328                              <1> 
   329                              <1> 
   330                              <1> .set_kb_lights:
   331 000003E3 50                  <1>     push rax
   332                              <1> 
   333 000003E4 E8CDFCFFFF          <1>     call ps2wait
   334                              <1> 
   335 000003E9 B0ED                <1>     mov al, 0EDh
   336 000003EB E660                <1>     out ps2data, al
   337                              <1> 
   338 000003ED E8C4FCFFFF          <1>     call ps2wait
   339                              <1>     
   340 000003F2 8A0425[62000000]    <1>     mov al, byte [kb_flags]    ;get flag into al
   341 000003F9 C0E804              <1>     shr al, 4
   342 000003FC 2407                <1>     and al, 111b    ;mask Insert bit off to isolate the NUM,CAPS,SCRL status 
   343                              <1>                     ; bits <=> LED status.
   344 000003FE E660                <1>     out ps2data, al    ;send the led status away
   345                              <1> 
   346 00000400 58                  <1>     pop rax
   347 00000401 C3                  <1>     ret
   348                              <1> 
   349                              <1> .kb_error:     ;If error recieved from Keyboard, hang the system, cold reboot 
   350                              <1>                ; needed.
   351 00000402 FA                  <1>     cli        ;Disable interrupts/Further keystrokes
   352 00000403 66BB0700            <1>     mov bx, 0007h    ;cls attribs
   353 00000407 E8EBFCFFFF          <1>     call cls    ;clear the screen
   354 0000040C 66B80413            <1>     mov ax, 1304h
   355 00000410 30FF                <1>     xor bh, bh
   356 00000412 48BD-               <1>     mov rbp, .kb_error_msg
   356 00000414 [2204000000000000]  <1>
   357 0000041C CD30                <1>     int 30h
   358                              <1> .kber1:
   359 0000041E F390                <1>     pause
   360 00000420 EBFC                <1>     jmp short .kber1
   361 00000422 4B6579626F61726420- <1> .kb_error_msg:    db    "Keyboard Error. Halting...", 0Ah, 0Dh, 0
   361 0000042B 4572726F722E204861- <1>
   361 00000434 6C74696E672E2E2E0A- <1>
   361 0000043D 0D00                <1>
   362                              <1> 
   363                              <1> .kb_sc_ascii_lookup:    ;Scancodes 00h-58h
   364                              <1> ; Scancodes 00h-0Fh
   365                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   366 0000043F 000000000000000000- <1>  dw 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h ;NUL
   366 00000448 00000000000000      <1>
   367 0000044F 1B011B011B011B011B- <1>  dw 011Bh, 011Bh, 011Bh, 011Bh, 011Bh, 011Bh, 011Bh, 011Bh ;Esc
   367 00000458 011B011B011B01      <1>
   368 0000045F 310221020000007831- <1>  dw 0231h, 0221h, 0000h, 7800h, 0231h, 0231h, 0221h, 0221h ;1 !
   368 00000468 02310221022102      <1>
   369 0000046F 320322030003007932- <1>  dw 0332h, 0322h, 0300h, 7900h, 0332h, 0332h, 0322h, 0322h ;2 "
   369 00000478 03320322032203      <1>
   370 0000047F 33049C040000007A33- <1>  dw 0433h, 049Ch, 0000h, 7A00h, 0433h, 0433h, 049Ch, 049Ch ;3 £
   370 00000488 0433049C049C04      <1>
   371 0000048F 340524050000007B34- <1>  dw 0534h, 0524h, 0000h, 7B00h, 0534h, 0534h, 0524h, 0524h ;4 $
   371 00000498 05340524052405      <1>
   372 0000049F 350625060000007C35- <1>  dw 0635h, 0625h, 0000h, 7C00h, 0635h, 0635h, 0625h, 0625h ;5 %
   372 000004A8 06350625062506      <1>
   373 000004AF 36075E071E07007D36- <1>  dw 0736h, 075Eh, 071Eh, 7D00h, 0736h, 0736h, 075Eh, 075Eh ;6 ^
   373 000004B8 0736075E075E07      <1>
   374 000004BF 370826080000007E37- <1>  dw 0837h, 0826h, 0000h, 7E00h, 0837h, 0837h, 0826h, 0826h ;7 &
   374 000004C8 08370826082608      <1>
   375 000004CF 38092A090000007F38- <1>  dw 0938h, 092Ah, 0000h, 7F00h, 0938h, 0938h, 092Ah, 092Ah ;8 *
   375 000004D8 0938092A092A09      <1>
   376 000004DF 390A280A0000008039- <1>  dw 0A39h, 0A28h, 0000h, 8000h, 0A39h, 0A39h, 0A28h, 0A28h ;9 (
   376 000004E8 0A390A280A280A      <1>
   377 000004EF 300B290B0000008130- <1>  dw 0B30h, 0B29h, 0000h, 8100h, 0B30h, 0B30h, 0B29h, 0B29h ;0 )
   377 000004F8 0B300B290B290B      <1>
   378 000004FF 2D0C5F0C000000822D- <1>  dw 0C2Dh, 0C5Fh, 0000h, 8200h, 0C2Dh, 0C2Dh, 0C5Fh, 0C5Fh ;- _
   378 00000508 0C2D0C5F0C5F0C      <1>
   379 0000050F 3D0D2B0D000000833D- <1>  dw 0D3Dh, 0D2Bh, 0000h, 8300h, 0D3Dh, 0D3Dh, 0D2Bh, 0D2Bh ;= +
   379 00000518 0D3D0D2B0D2B0D      <1>
   380 0000051F 080E080E7F0E000008- <1>  dw 0E08h, 0E08h, 0E7Fh, 0000h, 0E08h, 0E08h, 0E08h, 0E08h ;bksp (ctrl -> del)
   380 00000528 0E080E080E080E      <1>
   381 0000052F 090F000F0000000009- <1>  dw 0F09h, 0F00h, 0000h, 0000h, 0F09h, 0F09h, 0F00h, 0F00h ;L2R Horizontal Tab
   381 00000538 0F090F000F000F      <1>
   382                              <1> 
   383                              <1> ; Scancodes 10h-1Fh
   384                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   385 0000053F 711051101110001071- <1>  dw 1071h, 1051h, 1011h, 1000h, 1071h, 1051h, 1071h, 1051h ;q Q
   385 00000548 10511071105110      <1>
   386 0000054F 771157111711001177- <1>  dw 1177h, 1157h, 1117h, 1100h, 1177h, 1157h, 1177h, 1157h ;w W
   386 00000558 11571177115711      <1>
   387 0000055F 651245120512001265- <1>  dw 1265h, 1245h, 1205h, 1200h, 1265h, 1245h, 1265h, 1245h ;e E
   387 00000568 12451265124512      <1>
   388 0000056F 721352131213001372- <1>  dw 1372h, 1352h, 1312h, 1300h, 1372h, 1352h, 1372h, 1352h ;r R
   388 00000578 13521372135213      <1>
   389 0000057F 741454141414001474- <1>  dw 1474h, 1454h, 1414h, 1400h, 1474h, 1454h, 1474h, 1454h ;t T
   389 00000588 14541474145414      <1>
   390 0000058F 791559151915001579- <1>  dw 1579h, 1559h, 1519h, 1500h, 1579h, 1559h, 1579h, 1559h ;y Y
   390 00000598 15591579155915      <1>
   391 0000059F 751655161516001675- <1>  dw 1675h, 1655h, 1615h, 1600h, 1675h, 1655h, 1675h, 1655h ;u U
   391 000005A8 16551675165516      <1>
   392 000005AF 691749170917001769- <1>  dw 1769h, 1749h, 1709h, 1700h, 1769h, 1749h, 1769h, 1749h ;i I
   392 000005B8 17491769174917      <1>
   393 000005BF 6F184F180F1800186F- <1>  dw 186Fh, 184Fh, 180Fh, 1800h, 186Fh, 184Fh, 186Fh, 184Fh ;o O
   393 000005C8 184F186F184F18      <1>
   394 000005CF 701950191019001970- <1>  dw 1970h, 1950h, 1910h, 1900h, 1970h, 1950h, 1970h, 1950h ;p P
   394 000005D8 19501970195019      <1>
   395 000005DF 5B1A7B1A1B1A00005B- <1>  dw 1A5Bh, 1A7Bh, 1A1Bh, 0000h, 1A5Bh, 1A5Bh, 1A7Bh, 1A7Bh ;[ {
   395 000005E8 1A5B1A7B1A7B1A      <1>
   396 000005EF 5D1B7D1B1D1B00005D- <1>  dw 1B5Dh, 1B7Dh, 1B1Dh, 0000h, 1B5Dh, 1B5Dh, 1B7Dh, 1B7Dh ;] }
   396 000005F8 1B5D1B7D1B7D1B      <1>
   397 000005FF 0D1C0D1C0A1C00000D- <1>  dw 1C0Dh, 1C0Dh, 1C0Ah, 0000h, 1C0Dh, 1C0Dh, 1C0Ah, 1C0Ah ;Enter (CR/LF)
   397 00000608 1C0D1C0A1C0A1C      <1>
   398 0000060F 001D001D001D001D00- <1>  dw 1D00h, 1D00h, 1D00h, 1D00h, 1D00h, 1D00h, 1D00h, 1D00h ;CTRL (left)
   398 00000618 1D001D001D001D      <1>
   399 0000061F 611E411E011E001E61- <1>  dw 1E61h, 1E41h, 1E01h, 1E00h, 1E61h, 1E41h, 1E61h, 1E41h ;a A
   399 00000628 1E411E611E411E      <1>
   400 0000062F 731F531F131F001F73- <1>  dw 1F73h, 1F53h, 1F13h, 1F00h, 1F73h, 1F53h, 1F73h, 1F53h ;s S
   400 00000638 1F531F731F531F      <1>
   401                              <1> 
   402                              <1> ; Scancodes 20h-2Fh
   403                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   404 0000063F 642044200420002064- <1>  dw 2064h, 2044h, 2004h, 2000h, 2064h, 2044h, 2064h, 2044h ;d D
   404 00000648 20442064204420      <1>
   405 0000064F 662146210621002166- <1>  dw 2166h, 2146h, 2106h, 2100h, 2166h, 2146h, 2166h, 2146h ;f F
   405 00000658 21462166214621      <1>
   406 0000065F 672247220722002267- <1>  dw 2267h, 2247h, 2207h, 2200h, 2267h, 2247h, 2267h, 2247h ;g G
   406 00000668 22472267224722      <1>
   407 0000066F 682348230823002368- <1>  dw 2368h, 2348h, 2308h, 2300h, 2368h, 2348h, 2368h, 2348h ;h H
   407 00000678 23482368234823      <1>
   408 0000067F 6A244A240A2400246A- <1>  dw 246Ah, 244Ah, 240Ah, 2400h, 246Ah, 244Ah, 246Ah, 244Ah ;j J
   408 00000688 244A246A244A24      <1>
   409 0000068F 6B254B250B2500256B- <1>  dw 256Bh, 254Bh, 250Bh, 2500h, 256Bh, 254Bh, 256Bh, 254Bh ;k K
   409 00000698 254B256B254B25      <1>
   410 0000069F 6C264C260C2600266C- <1>  dw 266Ch, 264Ch, 260Ch, 2600h, 266Ch, 264Ch, 266Ch, 264Ch ;l L
   410 000006A8 264C266C264C26      <1>
   411 000006AF 3B273A27000000003B- <1>  dw 273Bh, 273Ah, 0000h, 0000h, 273Bh, 273Bh, 273Ah, 273Ah ;; :
   411 000006B8 273B273A273A27      <1>
   412 000006BF 272840280000000027- <1>  dw 2827h, 2840h, 0000h, 0000h, 2827h, 2827h, 2840h, 2840h ;' @
   412 000006C8 28272840284028      <1>
   413 000006CF 5C297C29000000005C- <1>  dw 295Ch, 297Ch, 0000h, 0000h, 295Ch, 295Ch, 297Ch, 297Ch ;\ |
   413 000006D8 295C297C297C29      <1>
   414 000006DF 002A002A002A002A00- <1>  dw 2A00h, 2A00h, 2A00h, 2A00h, 2A00h, 2A00h, 2A00h, 2A00h ;LShift (2Ah)
   414 000006E8 2A002A002A002A      <1>
   415 000006EF 232B7E2B1C2B000023- <1>  dw 2B23h, 2B7Eh, 2B1Ch, 0000h, 2B23h, 2B23h, 2B7Eh, 2B7Eh ;# ~
   415 000006F8 2B232B7E2B7E2B      <1>
   416 000006FF 7A2C5A2C1A2C002C7A- <1>  dw 2C7Ah, 2C5Ah, 2C1Ah, 2C00h, 2C7Ah, 2C5Ah, 2C7Ah, 2C5Ah ;z Z
   416 00000708 2C5A2C7A2C5A2C      <1>
   417 0000070F 782D582D182D002D78- <1>  dw 2D78h, 2D58h, 2D18h, 2D00h, 2D78h, 2D58h, 2D78h, 2D58h ;x X
   417 00000718 2D582D782D582D      <1>
   418 0000071F 632E432E032E002E63- <1>  dw 2E63h, 2E43h, 2E03h, 2E00h, 2E63h, 2E43h, 2E63h, 2E43h ;c C
   418 00000728 2E432E632E432E      <1>
   419 0000072F 762F562F162F002F76- <1>  dw 2F76h, 2F56h, 2F16h, 2F00h, 2F76h, 2F56h, 2F76h, 2F56h ;v V
   419 00000738 2F562F762F562F      <1>
   420                              <1> 
   421                              <1> ; Scancodes 30h-3Fh
   422                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   423 0000073F 623042300230003062- <1>  dw 3062h, 3042h, 3002h, 3000h, 3062h, 3042h, 3062h, 3042h ;b B
   423 00000748 30423062304230      <1>
   424 0000074F 6E314E310E3100316E- <1>  dw 316Eh, 314Eh, 310Eh, 3100h, 316Eh, 314Eh, 316Eh, 314Eh ;n N
   424 00000758 314E316E314E31      <1>
   425 0000075F 6D324D320D3200326D- <1>  dw 326Dh, 324Dh, 320Dh, 3200h, 326Dh, 324Dh, 326Dh, 324Dh ;m M
   425 00000768 324D326D324D32      <1>
   426 0000076F 2C333C33000000002C- <1>  dw 332Ch, 333Ch, 0000h, 0000h, 332Ch, 332Ch, 333Ch, 333Ch ;, <
   426 00000778 332C333C333C33      <1>
   427 0000077F 2E343E34000000002E- <1>  dw 342Eh, 343Eh, 0000h, 0000h, 342Eh, 342Eh, 343Eh, 343Eh ;. >
   427 00000788 342E343E343E34      <1>
   428 0000078F 2F353F35000000002F- <1>  dw 352Fh, 353Fh, 0000h, 0000h, 352Fh, 352Fh, 353Fh, 353Fh ;/ ?
   428 00000798 352F353F353F35      <1>
   429 0000079F 003600360036003600- <1>  dw 3600h, 3600h, 3600h, 3600h, 3600h, 3600h, 3600h, 3600h ;RShift
   429 000007A8 36003600360036      <1>
   430 000007AF 2A370000103700002A- <1>  dw 372Ah, 0000h, 3710h, 0000h, 372Ah, 372Ah, 0000h, 0000h ;KP *
   430 000007B8 372A3700000000      <1>
   431 000007BF 003800380038003800- <1>  dw 3800h, 3800h, 3800h, 3800h, 3800h, 3800h, 3800h, 3800h ;Alt
   431 000007C8 38003800380038      <1>
   432 000007CF 203920390039000020- <1>  dw 3920h, 3920h, 3900h, 0000h, 3920h, 3920h, 3920h, 3920h ;Space
   432 000007D8 39203920392039      <1>
   433 000007DF 003A003A003A003A00- <1>  dw 3A00h, 3A00h, 3A00h, 3A00h, 3A00h, 3A00h, 3A00h, 3A00h ;Caps Lock
   433 000007E8 3A003A003A003A      <1>
   434 000007EF 003B0054005E006800- <1>  dw 3B00h, 5400h, 5E00h, 6800h, 3B00h, 3B00h, 5400h, 5400h ;F1
   434 000007F8 3B003B00540054      <1>
   435 000007FF 003C0055005F006900- <1>  dw 3C00h, 5500h, 5F00h, 6900h, 3C00h, 3C00h, 5500h, 5500h ;F2
   435 00000808 3C003C00550055      <1>
   436 0000080F 003D00560060006A00- <1>  dw 3D00h, 5600h, 6000h, 6A00h, 3D00h, 3D00h, 5600h, 5600h ;F3
   436 00000818 3D003D00560056      <1>
   437 0000081F 003E00570061006B00- <1>  dw 3E00h, 5700h, 6100h, 6B00h, 3E00h, 3E00h, 5700h, 5700h ;F4
   437 00000828 3E003E00570057      <1>
   438 0000082F 003F00580062006C00- <1>  dw 3F00h, 5800h, 6200h, 6C00h, 3F00h, 3F00h, 5800h, 5800h ;F5
   438 00000838 3F003F00580058      <1>
   439                              <1> 
   440                              <1> ; Scancodes 40h-4Fh
   441                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   442 0000083F 004000590063006D00- <1>  dw 4000h, 5900h, 6300h, 6D00h, 4000h, 4000h, 5900h, 5900h ;F6
   442 00000848 40004000590059      <1>
   443 0000084F 0041005A0064006E00- <1>  dw 4100h, 5A00h, 6400h, 6E00h, 4100h, 4100h, 5A00h, 5A00h ;F7
   443 00000858 410041005A005A      <1>
   444 0000085F 0042005B0065006F00- <1>  dw 4200h, 5B00h, 6500h, 6F00h, 4200h, 4200h, 5B00h, 5B00h ;F8
   444 00000868 420042005B005B      <1>
   445 0000086F 0043005C0066007000- <1>  dw 4300h, 5C00h, 6600h, 7000h, 4300h, 4300h, 5C00h, 5C00h ;F9
   445 00000878 430043005C005C      <1>
   446 0000087F 0044005D0067007100- <1>  dw 4400h, 5D00h, 6700h, 7100h, 4400h, 4400h, 5D00h, 5D00h ;F10
   446 00000888 440044005D005D      <1>
   447 0000088F 004500450045004500- <1>  dw 4500h, 4500h, 4500h, 4500h, 4500h, 4500h, 4500h, 4500h ;Num Lock
   447 00000898 45004500450045      <1>
   448 0000089F 004600460046004600- <1>  dw 4600h, 4600h, 4600h, 4600h, 4600h, 4600h, 4600h, 4600h ;Scroll Lock
   448 000008A8 46004600460046      <1>
   449 000008AF 004737470077000037- <1>  dw 4700h, 4737h, 7700h, 0000h, 4737h, 4700h, 4737h, 4700h ;(KP)Home
   449 000008B8 47004737470047      <1>
   450 000008BF 004838480000000038- <1>  dw 4800h, 4838h, 0000h, 0000h, 4838h, 4800h, 4838h, 4800h ;(KP)Up arrow
   450 000008C8 48004838480048      <1>
   451 000008CF 004939490084000039- <1>  dw 4900h, 4939h, 8400h, 0000h, 4939h, 4900h, 4939h, 4900h ;(KP)PgUp 
   451 000008D8 49004939490049      <1>
   452 000008DF 2D4A2D4A000000002D- <1>  dw 4A2Dh, 4A2Dh, 0000h, 0000h, 4A2Dh, 4A2Dh, 4A2Dh, 4A2Dh ;(KP)-
   452 000008E8 4A2D4A2D4A2D4A      <1>
   453 000008EF 004B344B0073000034- <1>  dw 4B00h, 4B34h, 7300h, 0000h, 4B34h, 4B00h, 4B34h, 4B00h ;(KP)Left arrow
   453 000008F8 4B004B344B004B      <1>
   454 000008FF 004C354C0000000035- <1>  dw 4C00h, 4C35h, 0000h, 0000h, 4C35h, 4C00h, 4C35h, 4C00h ;(KP)Center
   454 00000908 4C004C354C004C      <1>
   455 0000090F 004D364D0074000036- <1>  dw 4D00h, 4D36h, 7400h, 0000h, 4D36h, 4D00h, 4D36h, 4D00h ;(KP)Right arrow
   455 00000918 4D004D364D004D      <1>
   456 0000091F 2B4E2B4E000000002B- <1>  dw 4E2Bh, 4E2Bh, 0000h, 0000h, 4E2Bh, 4E2Bh, 4E2Bh, 4E2Bh ;(KP)+
   456 00000928 4E2B4E2B4E2B4E      <1>
   457 0000092F 004F314F0075000031- <1>  dw 4F00h, 4F31h, 7500h, 0000h, 4F31h, 4F00h, 4F31h, 4F00h ;(KP)End
   457 00000938 4F004F314F004F      <1>
   458                              <1> 
   459                              <1> ; Scancodes 50h-58h
   460                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   461 0000093F 005032500000000032- <1>  dw 5000h, 5032h, 0000h, 0000h, 5032h, 5000h, 5032h, 5000h ;(KB)Down arrow
   461 00000948 50005032500050      <1>
   462 0000094F 005133510076000033- <1>  dw 5100h, 5133h, 7600h, 0000h, 5133h, 5100h, 5133h, 5100h ;(KB)PgDn
   462 00000958 51005133510051      <1>
   463 0000095F 005230520000000030- <1>  dw 5200h, 5230h, 0000h, 0000h, 5230h, 5200h, 5230h, 5200h ;(KB)Ins
   463 00000968 52005230520052      <1>
   464 0000096F 00532E53000000002E- <1>  dw 5300h, 532Eh, 0000h, 0000h, 532Eh, 5300h, 532Eh, 5300h ;(KB)Del
   464 00000978 5300532E530053      <1>
   465 0000097F 005400540054005400- <1>  dw 5400h, 5400h, 5400h, 5400h, 5400h, 5400h, 5400h, 5400h ;ALT+PRTSC -> Sysreq
   465 00000988 54005400540054      <1>
   466 0000098F 000000000000000000- <1>  dw 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h ;xxxxNOTUSEDxxxx
   466 00000998 00000000000000      <1>
   467 0000099F 5C567C56000000005C- <1>  dw 565Ch, 567Ch, 0000h, 0000h, 565Ch, 565Ch, 567Ch, 567Ch ;\ |
   467 000009A8 565C567C567C56      <1>
   468 000009AF 005700000000000000- <1>  dw 5700h, 0000h, 0000h, 0000h, 5700h, 5700h, 0000h, 0000h ;F11
   468 000009B8 57005700000000      <1>
   469 000009BF 005800000000000000- <1>  dw 5800h, 0000h, 0000h, 0000h, 5800h, 5800h, 0000h, 0000h ;F12
   469 000009C8 58005800000000      <1>
   470                              <1> ;------------------------End of Interrupt------------------------
    85                                  %include "./Resident/Hardware/Serial/serInt.asm"
    86                              <1> ;------------------Serial Interrupt IRQ 3/Int 23h----------------
    87                              <1> ;Serves serial ports 1 and 3 should they exist. Only considers 
    88                              <1> ; data recieving. Disregards all sending data interrupts.
    89                              <1> ;Puts recieved data into respective buffer and clears RTS 
    90                              <1> ; (base+5) if buffer full.
    91                              <1> ;----------------------------------------------------------------
    92                              <1> ser_IRQ3:
    93 000009CF FA                  <1>     cli
    94 000009D0 50                  <1>     push rax
    95 000009D1 52                  <1>     push rdx
    96 000009D2 55                  <1>     push rbp
    97 000009D3 51                  <1>     push rcx
    98 000009D4 57                  <1>     push rdi
    99 000009D5 53                  <1>     push rbx
   100                              <1> 
   101 000009D6 BB08000000          <1>     mov ebx, 8
   102 000009DB 66BAFA02            <1>     mov dx, com2_base + 2 ;Interrupt ID register
   103 000009DF EB10                <1>     jmp short ser_common
   104                              <1> ;------------------------End of Interrupt------------------------
   105                              <1> ;---------------------Serial Interrupt IRQ 3/Int 23h-------------
   106                              <1> ;Serves serial ports 1 and 3 should they exist. Only considers 
   107                              <1> ; data recieving. Disregards all sending data interrupts.
   108                              <1> ;Puts recieved data into respective buffer and clears RTS 
   109                              <1> ; (base+5) if buffer full.
   110                              <1> ;----------------------------------------------------------------
   111                              <1> ser_IRQ4:
   112 000009E1 FA                  <1>     cli
   113 000009E2 50                  <1>     push rax
   114 000009E3 52                  <1>     push rdx
   115 000009E4 55                  <1>     push rbp
   116 000009E5 51                  <1>     push rcx
   117 000009E6 57                  <1>     push rdi
   118 000009E7 53                  <1>     push rbx
   119                              <1> 
   120 000009E8 BB06000000          <1>     mov ebx, 6
   121 000009ED 66BAFA03            <1>     mov dx, com1_base + 2 ;Interrupt ID register
   122                              <1> ser_common:
   123 000009F1 EC                  <1>     in al, dx
   124 000009F2 A801                <1>     test al, 1    ;Check if bit zero is clear ie interrupt pending
   125 000009F4 741F                <1>     jz .si1       ;Clear, interrupt pending on COM 1 port
   126                              <1> .si0:
   127 000009F6 668B93[67000000]    <1>     mov dx, word [com_addresses + rbx] ;now point to HI COM Interrupt ID registr
   128 000009FD 6685D2              <1>     test dx, dx
   129 00000A00 0F8497000000        <1>     jz .siexit            ;Nothing here, exit
   130 00000A06 66FFC2              <1>     inc dx
   131 00000A09 66FFC2              <1>     inc dx                ;dx = base + 2
   132 00000A0C EC                  <1>     in al, dx
   133 00000A0D A801                <1>     test al, 1     ;Check if bit zero is clear
   134 00000A0F 0F8588000000        <1>     jnz .siexit    ;Bad behavior, or no Int on com3 after com1 processed, exit
   135                              <1> .si1:
   136                              <1> ;Confirm Data available Interrupt (ie bits 1,2,3 are 010b)
   137 00000A15 A804                <1>     test al, 00000100b
   138 00000A17 0F8480000000        <1>     jz .siexit   ;bad behavior, exit
   139 00000A1D 6681C20300          <1>     add dx, 3    ;dx = base + 5
   140                              <1> .si41:
   141 00000A22 EC                  <1>     in al, dx
   142 00000A23 2401                <1>     and al, 1
   143 00000A25 74FB                <1>     jz .si41
   144                              <1> 
   145 00000A27 6681EA0500          <1>     sub dx, 5
   146 00000A2C EC                  <1>     in al, dx    ;get char into al
   147 00000A2D 88C4                <1>     mov ah, al   ;save al in ah temporarily
   148 00000A2F 4831C9              <1>     xor rcx, rcx
   149                              <1> .si2:    ;Get offset into table structures into cx
   150 00000A32 663B9409[67000000]  <1>     cmp dx, word [com_addresses + rcx*2]    ;table of addresses, dx is at base
   151 00000A3A 740C                <1>     je .si3
   152 00000A3C 66FFC1              <1>     inc cx
   153 00000A3F 6681F90400          <1>     cmp cx, 4    ;rcx should be {0,3}
   154 00000A44 7CEC                <1>     jl .si2
   155 00000A46 EB55                <1>     jmp short .siexit    ;bad value, exit
   156                              <1> .si3:    ;Store in buffer algorithm
   157 00000A48 488B1CCD[CF000000]  <1>     mov rbx, qword [comX_buf_tail + rcx*8]
   158 00000A50 4889DF              <1>     mov rdi, rbx
   159 00000A53 48FFC3              <1>     inc rbx        ;increment by one char
   160 00000A56 483B1CCD[0F010000]  <1>     cmp rbx, qword [comX_buf_end + rcx*8]
   161 00000A5E 7508                <1>     jne .si4
   162 00000A60 488B1CCD[EF000000]  <1>     mov rbx, qword [comX_buf_start + rcx*8]    ;Wrap around buffer
   163                              <1> .si4:
   164 00000A68 483B1CCD[AF000000]  <1>     cmp rbx, qword [comX_buf_head + rcx*8]    ;Check if buffer full
   165 00000A70 740F                <1>     je .si5    ;Buffer full, indicate wait to data source
   166                              <1> 
   167 00000A72 8827                <1>     mov byte [rdi], ah    ;store char into buffer
   168 00000A74 48891CCD[CF000000]  <1>     mov qword [comX_buf_tail + rcx*8], rbx    ;store new tail into variable
   169                              <1> 
   170 00000A7C E975FFFFFF          <1>     jmp .si0    ;If com1/2, now check that com 3/4 didnt fire interrupt.
   171                              <1> 
   172                              <1> .si5:    ;Buffer full, Deassert DTR bit 
   173                              <1> ;dx points at the base register
   174 00000A81 6681C20400          <1>     add dx, 4    ;Point at Modem Control Register
   175 00000A86 EC                  <1>     in al, dx
   176 00000A87 24FE                <1>     and al, 11111110b    ;Clear the bottom bit
   177 00000A89 EE                  <1>     out dx, al    ;Set the DTR bit down (not ready to recieve data)
   178 00000A8A 6681C20300          <1>     add dx, 3    ;Point to scratch register
   179 00000A8F 88E0                <1>     mov al, ah    ;return ah into al
   180 00000A91 EE                  <1>     out dx, al    ;put the overrun char into scratch register
   181 00000A92 6681F90200          <1>     cmp cx, 2    ;If this was com1/2, now check for com 3/4.
   182 00000A97 0F8559FFFFFF        <1>     jne .si0
   183                              <1> ;exit since we dont want to take whats in the UART buffer just yet.
   184                              <1> .siexit:
   185 00000A9D B020                <1>     mov al, EOI
   186 00000A9F E620                <1>     out pic1command, al
   187                              <1> 
   188 00000AA1 5B                  <1>     pop rbx
   189 00000AA2 5F                  <1>     pop rdi
   190 00000AA3 59                  <1>     pop rcx
   191 00000AA4 5D                  <1>     pop rbp
   192 00000AA5 5A                  <1>     pop rdx
   193 00000AA6 58                  <1>     pop rax
   194 00000AA7 FB                  <1>     sti
   195 00000AA8 48CF                <1>     iretq
   196                              <1> ;------------------------End of Interrupt------------------------
    86                                  %include "./Resident/Hardware/MSD/fddInt.asm"
    87                              <1> ;----------------FDD Interrupt IRQ 6/Int 26h---------------------
    88                              <1> fdd_IRQ6:
    89 00000AAA 50                  <1>     push rax
    90 00000AAB B020                <1>     mov al, EOI
    91 00000AAD E620                <1>     out pic1command, al
    92 00000AAF 58                  <1>     pop rax
    93 00000AB0 48CF                <1>     iretq
    94                              <1> ;------------------------End of Interrupt------------------------
    87                                  %include "./Resident/Hardware/Timers/rtcInt.asm"
    88                              <1> ;---------------RTC Interrupt IRQ 8/Int 28h----------------------
    89                              <1> ; This IRQ should only trigger for the periodic and alarm 
    90                              <1> ; interrupts. If a programmer wishes to use the time update 
    91                              <1> ; complete interrupt feature, they should hook their own 
    92                              <1> ; interrupt handler.
    93                              <1> ;----------------------------------------------------------------
    94                              <1> rtc_IRQ8:
    95 00000AB2 50                  <1>     push rax
    96 00000AB3 FA                  <1>     cli             ;Disable interrupts
    97 00000AB4 B08C                <1>     mov al, 8Ch     ;Register C with NMI disabled
    98 00000AB6 E670                <1>     out cmos_base, al
    99 00000AB8 E680                <1>     out waitp, al    ;allow one io cycle to run
   100 00000ABA EB00                <1>     jmp short $+2
   101 00000ABC E471                <1>     in al, cmos_data    ;Get the data byte to confirm IRQ recieved
   102 00000ABE 2460                <1>     and al, 060h        ;Isolate Alarm and Periodic bits only
   103 00000AC0 A840                <1>     test al, 40h        ;Periodic?
   104 00000AC2 7408                <1>     jz .noPeriodic      ;No, skip the periodic
   105                              <1> .periodic:
   106 00000AC4 48FF0C25[3B010000]  <1>     dec qword [rtc_ticks]
   107                              <1> .noPeriodic:
   108 00000ACC A820                <1>     test al, 20h        ;Alarm?
   109 00000ACE 7402                <1>     jz .exit
   110                              <1> .alarm:
   111 00000AD0 CD6A                <1>     int 6Ah    ;User Alarm handler, behaves like Int 4Ah on 16-bit BIOS
   112                              <1> .exit:
   113 00000AD2 B00D                <1>     mov al, 0Dh     ;Read Register D and reenable NMI
   114 00000AD4 E670                <1>     out cmos_base, al
   115 00000AD6 E680                <1>     out waitp, al    ;allow one io cycle to run
   116 00000AD8 EB00                <1>     jmp short $+2
   117 00000ADA E471                <1>     in al, cmos_data    
   118 00000ADC B020                <1>     mov al, EOI
   119 00000ADE E6A0                <1>     out pic2command, al
   120 00000AE0 E620                <1>     out pic1command, al
   121 00000AE2 58                  <1>     pop rax
   122 00000AE3 48CF                <1>     iretq
   123                              <1> ;------------------------End of Interrupt------------------------
    88                                  %include "./Resident/Hardware/MSD/hddInt.asm"
    89                              <1> ;---------------HDD Interrupt IRQ 14/Int 2Eh---------------------
    90                              <1> hdd_IRQ14:
    91 00000AE5 50                  <1>     push rax
    92 00000AE6 C60425[AB010000]00  <1>     mov byte [ir14_mutex], 0
    93 00000AEE B020                <1>     mov al, EOI
    94 00000AF0 E620                <1>     out pic1command, al
    95 00000AF2 58                  <1>     pop rax
    96 00000AF3 48CF                <1>     iretq
    97                              <1> ;------------------------End of Interrupt------------------------
    89                                  %include "./Resident/Hardware/USB/EHCI/ehciInt.asm"
    90                              <1> ;-------------------EHCI Int Handler/Int 2Xh---------------------
    91                              <1> ;This is installed by the PCI proc at runtime, onto the 
    92                              <1> ; appropriate IRQ.
    93                              <1> ;
    94                              <1> ;If USB Host controller is doing transaction, this HC is 
    95                              <1> ; nominally turned off. Bits [7:2] in the eAsyncMutex identify 
    96                              <1> ; how many interrupts to ignore, before switching off the 
    97                              <1> ; Schedule. This value is nominally zero.
    98                              <1> ;----------------------------------------------------------------
    99                              <1> ehci_IRQ:
   100 00000AF5 68[08500000]        <1>     push qword dummy_interrupt.pic2
   101 00000AFA EB05                <1>     jmp short .intr
   102                              <1> .pic1:
   103 00000AFC 68[0F500000]        <1>     push qword dummy_interrupt.pic1
   104                              <1> .intr:
   105                              <1> ;EHCI Interrupt Handler 
   106 00000B01 53                  <1>     push rbx
   107 00000B02 50                  <1>     push rax
   108                              <1> 
   109 00000B03 8A0425[47020000]    <1>     mov al, byte [eActiveCtrlr]
   110 00000B0A 3CFF                <1>     cmp al, -1    ;Spurious case, replace with manual poll then discard proc
   111 00000B0C 743F                <1>     je .spur
   112                              <1> 
   113 00000B0E E8C8400000          <1>     call USB.ehciGetOpBase    ;returns opreg base in rax
   114                              <1> .nonIRQmain:
   115 00000B13 678B5804            <1>     mov ebx, dword [eax + ehcists]  ;save USBSTS and clear usb interrupt
   116 00000B17 67095804            <1>     or dword [eax + ehcists], ebx   ;WC all interrupt status
   117 00000B1B 881C25[48020000]    <1>     mov byte [eActiveInt], bl    ;save interrupt status
   118                              <1> 
   119                              <1> ;Test based on which bits are set. Higher bits have higher priority
   120                              <1>     ;test bl, 10h            ;Check if host error bit set
   121                              <1>     ;test bl, 8              ;Frame List rollover
   122                              <1>     ;test bl, 4              ;Port status change detected
   123 00000B22 F6C302              <1>     test bl, 2              ;Check if transation error bit is set
   124 00000B25 7542                <1>     jnz .transactionError
   125 00000B27 F6C301              <1>     test bl, 1              ;Check if short packet/interrupt bit set
   126 00000B2A 741E                <1>     jz .exit                ;If none of the bits were set, continue IRQ chain
   127                              <1> ;IoC and Short Packet section
   128 00000B2C 8A0425[49020000]    <1>     mov al, byte [eAsyncMutex]    ;check if we should ignore interrupt
   129 00000B33 24FC                <1>     and al, 11111100b    ;clear out bottom two bits (dont care)
   130 00000B35 84C0                <1>     test al, al            ;Set zero flag if al is zero
   131 00000B37 7509                <1>     jnz .usbignoreirq    ;If not zero, ignore irq (and dec counter!)
   132                              <1> 
   133 00000B39 880425[49020000]    <1>     mov byte [eAsyncMutex], al ;Wait no longer!! Data available
   134                              <1> 
   135 00000B40 EB08                <1>     jmp short .exit    ;Ignore the "ignore usb" section
   136                              <1> .usbignoreirq:
   137 00000B42 802C25[49020000]04  <1>     sub byte [eAsyncMutex], 4    ;sub the semaphore 
   138                              <1> .exit:
   139 00000B4A 58                  <1>     pop rax
   140 00000B4B 5B                  <1>     pop rbx
   141 00000B4C C3                  <1>     ret
   142                              <1> .spur:
   143 00000B4D 30C0                <1>     xor al, al
   144                              <1> .s1:
   145 00000B4F E887400000          <1>     call USB.ehciGetOpBase
   146 00000B54 678B5804            <1>     mov ebx, dword [eax + ehcists] ;save USBSTS and clear usb interrupt 
   147 00000B58 67095804            <1>     or dword [eax + ehcists], ebx    ;WC all interrupt status
   148 00000B5C FEC0                <1>     inc al    ;Clear all interrupts on all controllers
   149 00000B5E 3A0425[14020000]    <1>     cmp al, byte [eControllers]
   150 00000B65 72E8                <1>     jb .s1
   151 00000B67 EBE1                <1>     jmp short .exit
   152                              <1> .transactionError:
   153 00000B69 C60425[49020000]00  <1>     mov byte [eAsyncMutex], 0   ;Unblock wait
   154 00000B71 EBD7                <1>     jmp short .exit
   155                              <1> .nonIRQep:
   156 00000B73 53                  <1>     push rbx
   157 00000B74 50                  <1>     push rax
   158 00000B75 EB9C                <1>     jmp short .nonIRQmain
   159                              <1> ;------------------------End of Interrupt------------------------
    90                                  %include "./Resident/Hardware/spurInt.asm"
    91                              <1> ;-----------------Spurious Int Handler/Int 27h-------------------
    92                              <1> ; Catches and handles spurious interrupts on the first pic.
    93                              <1> ;----------------------------------------------------------------
    94                              <1> default_IRQ7:
    95 00000B77 50                  <1>     push rax
    96 00000B78 B00B                <1>     mov al, 0Bh    ;Read ISR 
    97 00000B7A E620                <1>     out pic1command, al
    98 00000B7C E680                <1>     out waitp, al    ;Latch wait
    99 00000B7E EB00                <1>     jmp short $+2
   100 00000B80 E420                <1>     in al, pic1command    ;Get the ISR
   101 00000B82 A880                <1>     test al, 80h
   102 00000B84 750A                <1>     jne .exit
   103 00000B86 66FF0425[20000000]  <1>     inc word [spurint1]
   104 00000B8E EB04                <1>     jmp short .e2    ;Avoid sending EOI
   105                              <1> .exit:
   106 00000B90 B020                <1>     mov al, EOI
   107 00000B92 E620                <1>     out pic1command, al
   108                              <1> .e2:
   109 00000B94 58                  <1>     pop rax
   110 00000B95 48CF                <1>     iretq
   111                              <1> 
   112                              <1> ;-----------------Spurious Int Handler/Int 2Fh-------------------
   113                              <1> ; Catches and handles spurious interrupts on the second pic.
   114                              <1> ;----------------------------------------------------------------
   115                              <1> default_IRQ15:
   116 00000B97 50                  <1>     push rax
   117 00000B98 803C25[AD010000]01  <1>     cmp byte [ir15_mutex], 1    ;Check if mutex set
   118 00000BA0 7508                <1>     jne .spurcheck              ;If not set, then just check spur
   119 00000BA2 C60425[AD010000]00  <1>     mov byte [ir15_mutex], 0    ;Exit and check spur
   120                              <1> .spurcheck:
   121 00000BAA B00B                <1>     mov al, 0Bh    ;Read ISR 
   122 00000BAC E6A0                <1>     out pic2command, al
   123 00000BAE E680                <1>     out waitp, al    ;Latch wait
   124 00000BB0 EB00                <1>     jmp short $+2
   125 00000BB2 E4A0                <1>     in al, pic2command    ;Get the ISR
   126 00000BB4 A880                <1>     test al, 80h
   127 00000BB6 B020                <1>     mov al, EOI    ;Still need to send EOI to pic1
   128 00000BB8 750A                <1>     jne .exit
   129 00000BBA 66FF0425[21000000]  <1>     inc word [spurint2]
   130 00000BC2 EB02                <1>     jmp short .e2    ;Avoid sending EOI
   131                              <1> .exit:
   132 00000BC4 E6A0                <1>     out pic2command, al
   133                              <1> .e2:
   134 00000BC6 E620                <1>     out pic1command, al
   135 00000BC8 58                  <1>     pop rax
   136 00000BC9 48CF                <1>     iretq
   137                              <1> ;------------------------End of Interrupt------------------------
    91                                  ;========================SOFTWARE INTERRUPTS=====================
    92                                  %include "./Resident/Services/Int30h.asm"
    93                              <1> ;----------------------Video Interrupt Int 30h-------------------
    94                              <1> scr_io_table:
    95 00000BCB [980C000000000000]  <1>     dq    scr_io.change_mode     ;AH = 0 -> Change Screen Mode (Currently no 
    96                              <1>                                  ; options)
    97 00000BD3 [A70C000000000000]  <1>     dq    scr_io.set_curs_shape  ;AH = 1 -> Set Cursor Shape
    98 00000BDB [BA0C000000000000]  <1>     dq    scr_io.set_curs_pos    ;AH = 2 -> Set Cursor Position
    99 00000BE3 [DE0C000000000000]  <1>     dq    scr_io.get_curs_pos    ;AH = 3 -> Get Cursor Position
   100 00000BEB [FE0C000000000000]  <1>     dq    scr_io.write_register  ;AH = 4 -> Reserved, Undoc, Write al in ASCII 
   101                              <1>                                  ; at cursor 
   102 00000BF3 [470D000000000000]  <1>     dq    scr_io.select_page     ;AH = 5 -> Select Active Page
   103 00000BFB [ED0D000000000000]  <1>     dq    scr_io.scroll_up       ;AH = 6 -> Scroll Active Page up
   104 00000C03 [AB0E000000000000]  <1>     dq    scr_io.scroll_down     ;AH = 7 -> Scroll Active Page down
   105 00000C0B [3D0F000000000000]  <1>     dq    scr_io.read_att_char   ;AH = 8 -> Read Attribute and Char at curs pos
   106 00000C13 [6F0F000000000000]  <1>     dq    scr_io.write_att_char  ;AH = 9 -> Write Attribute and Char at curs pos
   107 00000C1B [AF0F000000000000]  <1>     dq    scr_io.write_char      ;AH = 0Ah -> Write Char at curs position 
   108                              <1>                                  ; (using default attribute)
   109 00000C23 [F70F000000000000]  <1>     dq    scr_io.gset_col_palette ;AH = 0Bh -> Graphics, Set Colour Palette
   110 00000C2B [0610000000000000]  <1>     dq    scr_io.gwritedot       ;AH = 0Ch -> Graphics, Write a Dot to screen
   111 00000C33 [1510000000000000]  <1>     dq    scr_io.greaddot        ;AH = 0Dh -> Graphics, Read a Dot from screen
   112 00000C3B [2410000000000000]  <1>     dq    scr_io.write_tty       ;AH = 0Eh -> Write Teletype
   113 00000C43 [F210000000000000]  <1>     dq    scr_io.get_mode        ;AH = 0Fh -> Get Screen Mode (currently, no 
   114                              <1>                                  ; options)
   115 00000C4B [8D0C000000000000]  <1>     dq    scr_io.exitf           ;AH = 10h -> Reserved
   116 00000C53 [8D0C000000000000]  <1>     dq  scr_io.exitf             ;AH = 11h -> Reserved
   117 00000C5B [8D0C000000000000]  <1>     dq    scr_io.exitf           ;AH = 12h -> Reserved
   118 00000C63 [1B11000000000000]  <1>     dq  scr_io.write_string      ;AH = 13h -> Write string
   119                              <1> scr_io_table_length    equ    $ - scr_io_table
   120                              <1> scr_io:
   121 00000C6B FC                  <1>     cld        ;set direction to read the right way
   122 00000C6C 56                  <1>     push rsi
   123 00000C6D 50                  <1>     push rax
   124 00000C6E C0E403              <1>     shl ah, 3  ;Use ah as offset into table
   125 00000C71 80FC98              <1>     cmp ah, (scr_io_table_length - 8)    ;Ensure function number is within table
   126 00000C74 7717                <1>     ja .exitf
   127 00000C76 88E0                <1>     mov al, ah
   128 00000C78 480FB6C0            <1>     movzx rax, al               ;Zero extend ax into rax
   129 00000C7C 4889C6              <1>     mov rsi, rax                ;Note rsi is not being saved here!
   130 00000C7F 58                  <1>     pop rax                     ;recover back into ax
   131 00000C80 8A2425[58010000]    <1>     mov ah, byte [scr_mode]     ;Get the current mode into ah
   132 00000C87 FFA6[CB0B0000]      <1>     jmp [scr_io_table + rsi]    ;Jump to correct function
   133                              <1> .exitf:
   134 00000C8D 58                  <1>     pop rax
   135 00000C8E B480                <1>     mov ah, 80h ;Function not supported
   136 00000C90 804C241801          <1>     or byte [rsp + 3*8h], 1 ;Set Carry flag, invalid function, skip rsi on stack
   137                              <1> .exit:
   138 00000C95 5E                  <1>     pop rsi
   139 00000C96 48CF                <1>     iretq
   140                              <1>     
   141                              <1> .change_mode:
   142 00000C98 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   142 00000CA1 00                  <1>
   143 00000CA2 E9EEFFFFFF          <1>     jmp .exit    ;Currently unsupported function    
   144                              <1> .set_curs_shape:
   145                              <1> ;Input: CH = Scan Row Start, CL = Scan Row End
   146 00000CA7 52                  <1>     push rdx
   147 00000CA8 66890C25[55010000]  <1>     mov word [scr_curs_shape], cx
   148                              <1> 
   149 00000CB0 B00A                <1>     mov al, 0Ah
   150 00000CB2 E86B050000          <1>     call .write_crtc_word
   151                              <1>     
   152 00000CB7 5A                  <1>     pop rdx
   153 00000CB8 EBDB                <1>     jmp short .exit
   154                              <1> .set_curs_pos:
   155                              <1> ;Input: DH = Row, DL = Column, BH = active page
   156 00000CBA 51                  <1>     push rcx
   157 00000CBB 52                  <1>     push rdx
   158                              <1>     
   159 00000CBC 53                  <1>     push rbx
   160 00000CBD 88FB                <1>     mov bl, bh
   161 00000CBF 480FB6DB            <1>     movzx rbx, bl
   162 00000CC3 6689941B[43010000]  <1>     mov word [scr_curs_pos + 2*rbx], dx
   163 00000CCB 5B                  <1>     pop rbx
   164 00000CCC 3A3C25[59010000]    <1>     cmp bh, byte [scr_active_page]
   165 00000CD3 7505                <1>     jne .scpexit    ;if the page is not the active page
   166 00000CD5 E8E3050000          <1>     call .cursor_proc
   167                              <1> .scpexit:
   168 00000CDA 5A                  <1>     pop rdx
   169 00000CDB 59                  <1>     pop rcx
   170 00000CDC EBB7                <1>     jmp short .exit
   171                              <1>     
   172                              <1> 
   173                              <1> .get_curs_pos:
   174                              <1> ;Return: AX = 0, CH = Start scan line, CL = End scan line, DH = Row, DL = Column
   175 00000CDE 53                  <1>     push rbx
   176                              <1> 
   177 00000CDF 88FB                <1>     mov bl, bh
   178 00000CE1 480FB6DB            <1>     movzx rbx, bl
   179 00000CE5 668B941B[43010000]  <1>     mov dx, word [scr_curs_pos + 2*rbx] 
   180 00000CED 668B0C25[55010000]  <1>     mov cx, word [scr_curs_shape]    ;Get cursor shape
   181                              <1> 
   182 00000CF5 5B                  <1>     pop rbx
   183 00000CF6 6631C0              <1>     xor ax, ax 
   184 00000CF9 E997FFFFFF          <1>     jmp .exit
   185                              <1> 
   186                              <1> .write_register:    ;al contains the byte to convert
   187 00000CFE 52                  <1>     push rdx
   188 00000CFF 53                  <1>     push rbx
   189 00000D00 50                  <1>     push rax
   190                              <1> 
   191 00000D01 88C2                <1>     mov dl, al           ;save byte in dl
   192 00000D03 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   193 00000D07 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   194 00000D0C 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   195 00000D10 E810000000          <1>     call .wrchar
   196 00000D15 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
   197 00000D18 E808000000          <1>     call .wrchar
   198                              <1> 
   199 00000D1D 58                  <1>     pop rax
   200 00000D1E 5B                  <1>     pop rbx
   201 00000D1F 5A                  <1>     pop rdx
   202 00000D20 E970FFFFFF          <1>     jmp .exit
   203                              <1> .wrchar:
   204 00000D25 48BB-               <1>     mov rbx, .wrascii
   204 00000D27 [370D000000000000]  <1>
   205 00000D2F D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   206 00000D30 B40E                <1>     mov ah, 0Eh
   207 00000D32 B307                <1>     mov bl, 07h
   208 00000D34 CD30                <1>     int 30h  ;print char
   209 00000D36 C3                  <1>     ret
   210 00000D37 303132333435363738- <1> .wrascii:    db    '0123456789ABCDEF'
   210 00000D40 39414243444546      <1>
   211                              <1> .select_page:
   212                              <1> ;ah contains the current screen mode
   213                              <1> ;al contains new screen page
   214                              <1> ;vga just returns as invalid FOR NOW
   215                              <1> ;Handled differently between vga and classic modes
   216 00000D47 80FC04              <1>     cmp ah, 04
   217 00000D4A 761D                <1>     jbe .sp1
   218 00000D4C 80FC07              <1>     cmp ah, 07
   219 00000D4F 7418                <1>     je .sp1
   220 00000D51 80FC0D              <1>     cmp ah, 0Dh
   221 00000D54 0F838E000000        <1>     jae .sp_vga
   222                              <1> .spbad:
   223 00000D5A 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   223 00000D63 00                  <1>
   224 00000D64 E92CFFFFFF          <1>     jmp .exit    ;Bad argument
   225                              <1> .sp1:
   226 00000D69 3C08                <1>     cmp al, 8
   227 00000D6B 73ED                <1>     jae .spbad    ;page should be 0-7
   228                              <1> .spmain:
   229 00000D6D 50                  <1>     push rax
   230 00000D6E 53                  <1>     push rbx
   231 00000D6F 51                  <1>     push rcx
   232 00000D70 52                  <1>     push rdx
   233 00000D71 880425[59010000]    <1>     mov byte [scr_active_page], al    ;change active page
   234                              <1> ;----Modify this proc with data tables when finalised!!----
   235 00000D78 48BE00080000000000- <1>     mov rsi, 800h    ;mode 0,1 page size
   235 00000D81 00                  <1>
   236 00000D82 48BB00100000000000- <1>     mov rbx, 1000h    ;mode 2,3,7 page size
   236 00000D8B 00                  <1>
   237 00000D8C 480FB6C8            <1>     movzx rcx, al    ;Get count into rcx
   238 00000D90 80FC02              <1>     cmp ah, 2
   239 00000D93 480F42DE            <1>     cmovb rbx, rsi
   240 00000D97 48BA00800B00000000- <1>     mov rdx, vga_bpage2
   240 00000DA0 00                  <1>
   241 00000DA1 48BE00000B00000000- <1>     mov rsi, vga_bpage1    ;Base addr for mode 7
   241 00000DAA 00                  <1>
   242                              <1> ;----Modify this proc with data tables when finalised!!----
   243 00000DAB 80FC07              <1>     cmp ah, 7
   244 00000DAE 480F44D6            <1>     cmove rdx, rsi
   245 00000DB2 52                  <1>     push rdx    ;Push the saved page 0 address
   246 00000DB3 E307                <1>     jrcxz .spm2    ;If 0th page, dont add
   247                              <1> .spm1:
   248 00000DB5 4801DA              <1>     add rdx, rbx
   249 00000DB8 FEC9                <1>     dec cl
   250 00000DBA 75F9                <1>     jnz .spm1
   251                              <1> .spm2:
   252 00000DBC 5E                  <1>     pop rsi     ;Get saved base into rsi
   253 00000DBD 891425[5C010000]    <1>     mov dword [scr_page_addr], edx    ;Get new base addr
   254 00000DC4 4829F2              <1>     sub rdx, rsi    ;rsi has conditionally b8000 or b0000
   255 00000DC7 50                  <1>     push rax
   256 00000DC8 66D1EA              <1>     shr dx, 1    ;Divide dx by 2 to get # of PELs
   257 00000DCB 6689D1              <1>     mov cx, dx    ;Get offset from crtc base addr
   258 00000DCE 66B80C00            <1>     mov ax, 0Ch    ;6845 Start Addr register
   259 00000DD2 E84B040000          <1>     call .write_crtc_word    ;Change "crtc view window"
   260                              <1> 
   261 00000DD7 58                  <1>     pop rax        ;Get original ax back for page number
   262 00000DD8 88C7                <1>     mov bh, al
   263 00000DDA E8DE040000          <1>     call .cursor_proc    ;Move cursor on page
   264                              <1>     
   265 00000DDF 5A                  <1>     pop rdx
   266 00000DE0 59                  <1>     pop rcx
   267 00000DE1 5B                  <1>     pop rbx
   268 00000DE2 58                  <1>     pop rax
   269 00000DE3 E9ADFEFFFF          <1>     jmp .exit    ;Bad argument
   270                              <1> .sp_vga:
   271 00000DE8 E96DFFFFFF          <1>     jmp .spbad
   272                              <1> 
   273                              <1> .scroll_up:
   274                              <1> ;Scrolls ACTIVE SCREEN only
   275                              <1> ;Called with AL=number of lines to scroll, BH=Attribute for new area
   276                              <1> ;    CH=ycor of top of scroll, CL=xcor of top of scroll
   277                              <1> ;    DH=ycor of bottom of scroll, DL=xcor of bottom of scroll
   278                              <1> ;If AL=0 then entire window is blanked, BH is used for blank attrib
   279                              <1> ;ah contains the current screen mode
   280 00000DED 80FC04              <1>     cmp ah, 04    ;Test for Alpha mode
   281 00000DF0 7209                <1>     jb .su0
   282 00000DF2 80FC07              <1>     cmp ah, 07    ;Test for MDA Alpha mode
   283 00000DF5 0F8509040000        <1>     jne .gscrollup    ;We in graphics mode, go to correct proc
   284                              <1> .su0:
   285 00000DFB 55                  <1>     push rbp
   286 00000DFC 57                  <1>     push rdi
   287 00000DFD 50                  <1>     push rax    ;Treat AX more or less as clobbered 
   288                              <1>     
   289 00000DFE 84C0                <1>     test al, al   ;Check if zero
   290 00000E00 747F                <1>     je .sblank    ;recall ah=06 then reset cursor and exit
   291 00000E02 88C3                <1>     mov bl, al    ;Save number of lines to scroll in bl
   292                              <1> .su1:
   293 00000E04 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]    ;zeros upper dword
   294 00000E0B 4889F7              <1>     mov rdi, rsi  ;Point both pointers at base of active page
   295 00000E0E 6689C8              <1>     mov ax, cx    ;Bottom top corner into ax
   296 00000E11 E870040000          <1>     call .offset_from_ax    ;Get the page offset of dx
   297 00000E16 480FB7C0            <1>     movzx rax, ax
   298 00000E1A 48D1E0              <1>     shl rax, 1    ;Multiply by two for words
   299 00000E1D 4801C7              <1>     add rdi, rax  ;point to the top left of window
   300 00000E20 4801C6              <1>     add rsi, rax
   301 00000E23 480FB60425-         <1>     movzx rax, byte [scr_cols]
   301 00000E28 [53010000]          <1>
   302 00000E2C 48D1E0              <1>     shl rax, 1      ;number of columns * 2 for words!
   303 00000E2F 4801C6              <1>     add rsi, rax    ;Point rsi one row down
   304 00000E32 51                  <1>     push rcx
   305 00000E33 52                  <1>     push rdx
   306                              <1> 
   307 00000E34 28EE                <1>     sub dh, ch    ;work out number of rows to copy
   308                              <1> .su2:
   309 00000E36 56                  <1>     push rsi
   310 00000E37 57                  <1>     push rdi
   311 00000E38 E865040000          <1>     call .text_scroll_c1    ;Scroll the selected row
   312 00000E3D 5F                  <1>     pop rdi
   313 00000E3E 5E                  <1>     pop rsi
   314 00000E3F 4801C7              <1>     add rdi, rax    ;goto next row
   315 00000E42 4801C6              <1>     add rsi, rax
   316 00000E45 FECE                <1>     dec dh
   317 00000E47 75ED                <1>     jnz .su2
   318                              <1> 
   319 00000E49 5A                  <1>     pop rdx
   320 00000E4A 59                  <1>     pop rcx
   321                              <1> ;Draw blank line
   322 00000E4B 50                  <1>     push rax
   323 00000E4C 51                  <1>     push rcx
   324 00000E4D 57                  <1>     push rdi
   325                              <1> 
   326 00000E4E 6689C8              <1>     mov ax, cx
   327 00000E51 88F4                <1>     mov ah, dh    ;Starting column from cx, starting row from dx
   328 00000E53 E82E040000          <1>     call .offset_from_ax
   329 00000E58 8B3C25[5C010000]    <1>     mov edi, dword [scr_page_addr]
   330 00000E5F 480FB7C0            <1>     movzx rax, ax
   331 00000E63 48D1E0              <1>     shl rax, 1
   332 00000E66 01C7                <1>     add edi, eax   ;point to new line
   333 00000E68 88FC                <1>     mov ah, bh
   334 00000E6A B020                <1>     mov al, 20h    ;Blank char
   335 00000E6C 4889E9              <1>     mov rcx, rbp   ;move word count into cx
   336 00000E6F F366AB              <1>     rep stosw      ;write the word bp number of times
   337 00000E72 5F                  <1>     pop rdi
   338 00000E73 59                  <1>     pop rcx
   339 00000E74 58                  <1>     pop rax
   340 00000E75 FECB                <1>     dec bl
   341 00000E77 758B                <1>     jnz .su1    ;Once we have done bl rows, exit
   342                              <1> 
   343                              <1> .suexit:
   344 00000E79 58                  <1>     pop rax
   345 00000E7A 5F                  <1>     pop rdi
   346 00000E7B 5D                  <1>     pop rbp
   347 00000E7C E914FEFFFF          <1>     jmp .exit
   348                              <1> .sblank:
   349                              <1> ;Fast clear function
   350 00000E81 51                  <1>     push rcx
   351 00000E82 52                  <1>     push rdx
   352                              <1> 
   353 00000E83 88FC                <1>     mov ah, bh    ;mov attrib into ah
   354 00000E85 B020                <1>     mov al, 20h    ;Space char
   355 00000E87 8B3C25[5C010000]    <1>     mov edi, dword [scr_page_addr]
   356 00000E8E 480FB61425-         <1>     movzx rdx, byte [scr_rows]
   356 00000E93 [54010000]          <1>
   357                              <1> .sbl0:
   358 00000E97 480FB60C25-         <1>     movzx rcx, byte [scr_cols]
   358 00000E9C [53010000]          <1>
   359 00000EA0 F366AB              <1>     rep stosw
   360 00000EA3 FECA                <1>     dec dl
   361 00000EA5 75F0                <1>     jnz .sbl0
   362                              <1> 
   363 00000EA7 5A                  <1>     pop rdx
   364 00000EA8 59                  <1>     pop rcx
   365 00000EA9 EBCE                <1>     jmp short .suexit
   366                              <1> 
   367                              <1> .scroll_down:
   368                              <1> ;Scrolls ACTIVE SCREEN only
   369                              <1> ;Called with AL=number of lines to scroll, BH=Attribute for new area
   370                              <1> ;    CH=ycor of top of scroll, CL=xcor of top of scroll
   371                              <1> ;    DH=ycor of bottom of scroll, DL=xcor of bottom of scroll
   372                              <1> ;If AL=0 then entire window is blanked, BH is used for blank attrib
   373                              <1> ;ah contains the current screen mode
   374 00000EAB 80FC04              <1>     cmp ah, 04    ;Test for Alpha mode
   375 00000EAE 7209                <1>     jb .sd0
   376 00000EB0 80FC07              <1>     cmp ah, 07    ;Test for MDA Alpha mode
   377 00000EB3 0F855A030000        <1>     jne .gscrolldown    ;We in graphics mode, go to correct proc
   378                              <1> .sd0:
   379 00000EB9 55                  <1>     push rbp
   380 00000EBA 57                  <1>     push rdi
   381 00000EBB 50                  <1>     push rax    ;Treat AX more or less as clobbered
   382                              <1> 
   383 00000EBC 84C0                <1>     test al, al    ;Check if zero
   384 00000EBE 74C1                <1>     je .sblank    ;recall ah=06 then reset cursor and exit
   385 00000EC0 88C3                <1>     mov bl, al    ;Save number of lines to scroll in bl
   386 00000EC2 FD                  <1>     std    ;change the direction of string operations
   387                              <1> .sd1:
   388 00000EC3 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]    ;point esi to bottom
   389 00000ECA 6689D0              <1>     mov ax, dx    ;point to bottom right 
   390 00000ECD E8B4030000          <1>     call .offset_from_ax
   391 00000ED2 480FB7C0            <1>     movzx rax, ax
   392 00000ED6 48D1E0              <1>     shl rax, 1
   393 00000ED9 4801C6              <1>     add rsi, rax
   394 00000EDC 4889F7              <1>     mov rdi, rsi
   395 00000EDF 480FB60425-         <1>     movzx rax, byte [scr_cols]
   395 00000EE4 [53010000]          <1>
   396 00000EE8 48D1E0              <1>     shl rax, 1
   397 00000EEB 4829C6              <1>     sub rsi, rax    ;Point rsi one row above rdi
   398                              <1> 
   399 00000EEE 51                  <1>     push rcx
   400 00000EEF 52                  <1>     push rdx
   401 00000EF0 28EE                <1>     sub dh, ch    ;Number of rows to copy
   402                              <1> .sd2:
   403 00000EF2 56                  <1>     push rsi
   404 00000EF3 57                  <1>     push rdi
   405 00000EF4 E8A9030000          <1>     call .text_scroll_c1
   406 00000EF9 5F                  <1>     pop rdi
   407 00000EFA 5E                  <1>     pop rsi
   408 00000EFB 4829C7              <1>     sub rdi, rax
   409 00000EFE 4829C6              <1>     sub rsi, rax
   410 00000F01 FECE                <1>     dec dh
   411 00000F03 75ED                <1>     jnz .sd2
   412                              <1> 
   413 00000F05 5A                  <1>     pop rdx
   414 00000F06 59                  <1>     pop rcx
   415                              <1> ;Draw blank line
   416 00000F07 50                  <1>     push rax
   417 00000F08 51                  <1>     push rcx
   418 00000F09 57                  <1>     push rdi
   419                              <1> 
   420 00000F0A 6689D0              <1>     mov ax, dx
   421 00000F0D 88EC                <1>     mov ah, ch    ;Starting column from dx, starting row from cx
   422 00000F0F E872030000          <1>     call .offset_from_ax
   423 00000F14 8B3C25[5C010000]    <1>     mov edi, dword [scr_page_addr]
   424 00000F1B 480FB7C0            <1>     movzx rax, ax
   425 00000F1F 48D1E0              <1>     shl rax, 1
   426 00000F22 01C7                <1>     add edi, eax    ;Point to appropriate line and col
   427 00000F24 88FC                <1>     mov ah, bh
   428 00000F26 B020                <1>     mov al, 20h
   429 00000F28 4889E9              <1>     mov rcx, rbp
   430 00000F2B F366AB              <1>     rep stosw    ;Store backwards
   431 00000F2E 5F                  <1>     pop rdi
   432 00000F2F 59                  <1>     pop rcx
   433 00000F30 58                  <1>     pop rax
   434 00000F31 FECB                <1>     dec bl
   435 00000F33 758E                <1>     jnz .sd1
   436                              <1> 
   437                              <1> .sdexit:
   438 00000F35 58                  <1>     pop rax
   439 00000F36 5F                  <1>     pop rdi
   440 00000F37 5D                  <1>     pop rbp
   441 00000F38 E958FDFFFF          <1>     jmp .exit
   442                              <1> .read_att_char:
   443                              <1> ;Get ASCII char and attr at current cursor position on chosen page
   444                              <1> ;Called with AH=08h, BH=Page number (if supported),
   445                              <1> ;Returns, AH=Attrib, AL=Char
   446                              <1> 
   447                              <1> ;On entry, ah contains current screen mode
   448 00000F3D 80FC04              <1>     cmp ah, 04    ;Test for Alpha mode
   449 00000F40 7209                <1>     jb .rac1
   450 00000F42 80FC07              <1>     cmp ah, 07    ;Test for MDA Alpha mode
   451 00000F45 0F859B020000        <1>     jne .gread    ;We in graphics mode, go to correct proc
   452                              <1> .rac1:
   453 00000F4B 80FF07              <1>     cmp bh, 7
   454 00000F4E 0F8739FDFFFF        <1>     ja .exitf    ;All A/N modes can have 8 pages, any more, fail
   455                              <1> 
   456 00000F54 88E3                <1>     mov bl, ah    ;Move screen mode into bl for function call
   457 00000F56 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]
   458 00000F5D E814030000          <1>     call .page_cursor_offset    ;bx preserved
   459 00000F62 48D1E0              <1>     shl rax, 1        
   460 00000F65 4801C6              <1>     add rsi, rax    ;rsi should point to attrib/char 
   461 00000F68 66AD                <1>     lodsw            ;Load ah with attrib/char
   462 00000F6A E926FDFFFF          <1>     jmp .exit    ;Restoring rsi
   463                              <1> 
   464                              <1> .write_att_char:
   465                              <1> ;Puts ASCII char and attribute/colour at cursor
   466                              <1> ;Called with AH=09h, AL=Char, BH=Page, 
   467                              <1> ;    BL=Attrib/Color, CX=number of repeats
   468                              <1> ;Returns nothing (just prints in page)
   469                              <1> 
   470                              <1> ;When called, ah contains current screen mode
   471 00000F6F 80FC04              <1>     cmp ah, 04    ;Test for Alpha mode
   472 00000F72 7209                <1>     jb .wac1
   473 00000F74 80FC07              <1>     cmp ah, 07    ;Test for MDA Alpha mode
   474 00000F77 0F8578020000        <1>     jne .gwrite    ;We in graphics mode, go to correct proc
   475                              <1> .wac1:
   476 00000F7D 80FF07              <1>     cmp bh, 7
   477 00000F80 0F8707FDFFFF        <1>     ja .exitf    ;All A/N modes can have 8 pages, any more, fail
   478                              <1> 
   479 00000F86 86DC                <1>     xchg bl, ah ;swap attrib and scr mode bytes
   480 00000F88 57                  <1>     push rdi
   481 00000F89 50                  <1>     push rax    ;Save the char/attrib word
   482 00000F8A 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]
   483 00000F91 E8E0020000          <1>     call .page_cursor_offset    ;bx preserved
   484 00000F96 4889F7              <1>     mov rdi, rsi    ;Change register for string ops
   485 00000F99 48D1E0              <1>     shl rax, 1
   486 00000F9C 4801C7              <1>     add rdi, rax    ;rsi now points to right place on right page
   487 00000F9F 58                  <1>     pop rax
   488                              <1> 
   489 00000FA0 51                  <1>     push rcx
   490 00000FA1 480FB7C9            <1>     movzx rcx, cx    ;zero upper bytes
   491 00000FA5 F366AB              <1>     rep stosw        ;Store packed ah/al cx times
   492 00000FA8 59                  <1>     pop rcx
   493 00000FA9 5F                  <1>     pop rdi
   494 00000FAA E9E6FCFFFF          <1>     jmp .exit    ;Restoring rsi
   495                              <1> 
   496                              <1> .write_char:
   497                              <1> ;Puts ASCII char and attribute/colour at cursor
   498                              <1> ;Called with AH=0Ah, AL=Char, BH=Page, 
   499                              <1> ;    BL=Color (G modes ONLY), CX=number of repeats
   500                              <1> ;Returns nothing (just prints in page)
   501 00000FAF 80FC04              <1>     cmp ah, 04    ;Test for Alpha mode
   502 00000FB2 7209                <1>     jb .wc1
   503 00000FB4 80FC07              <1>     cmp ah, 07    ;Test for MDA Alpha mode
   504 00000FB7 0F8538020000        <1>     jne .gwrite    ;We in graphics mode, go to correct proc
   505                              <1> .wc1:
   506 00000FBD 80FF07              <1>     cmp bh, 7
   507 00000FC0 0F87C7FCFFFF        <1>     ja .exitf    ;All A/N modes can have 8 pages, any more, fail
   508                              <1> 
   509 00000FC6 88E3                <1>     mov bl, ah ;mov scr mode byte into bl
   510 00000FC8 57                  <1>     push rdi
   511 00000FC9 50                  <1>     push rax    ;Save the char word
   512 00000FCA 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]
   513 00000FD1 E8A0020000          <1>     call .page_cursor_offset    ;bx preserved
   514 00000FD6 4889F7              <1>     mov rdi, rsi    ;Change register for string ops
   515 00000FD9 48D1E0              <1>     shl rax, 1
   516 00000FDC 4801C7              <1>     add rdi, rax    ;rdi now points to right place on right page
   517 00000FDF 58                  <1>     pop rax
   518                              <1> 
   519 00000FE0 51                  <1>     push rcx
   520 00000FE1 480FB7C9            <1>     movzx rcx, cx    ;zero upper bytes
   521 00000FE5 E309                <1>     jrcxz .wc3    ;If cx is zero, dont print anything, exit
   522                              <1> .wc2:
   523 00000FE7 AA                  <1>     stosb
   524 00000FE8 48FFC7              <1>     inc rdi
   525 00000FEB 48FFC9              <1>     dec rcx
   526 00000FEE 75F7                <1>     jnz .wc2
   527                              <1> .wc3:
   528 00000FF0 59                  <1>     pop rcx
   529 00000FF1 5F                  <1>     pop rdi
   530 00000FF2 E99EFCFFFF          <1>     jmp .exit    ;Exit restoring rsi
   531                              <1> 
   532                              <1> .gset_col_palette:
   533 00000FF7 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   533 00001000 00                  <1>
   534 00001001 E98FFCFFFF          <1>     jmp .exit    ;Currently unsupported function
   535                              <1> .gwritedot:
   536 00001006 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   536 0000100F 00                  <1>
   537 00001010 E980FCFFFF          <1>     jmp .exit    ;Currently unsupported function
   538                              <1> .greaddot:
   539 00001015 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   539 0000101E 00                  <1>
   540 0000101F E971FCFFFF          <1>     jmp .exit    ;Currently unsupported function
   541                              <1> 
   542                              <1> .write_tty:
   543                              <1> ;Called with al=char, bl=foreground color (graphics)
   544                              <1> ;When called, ah contains current screen mode
   545 00001024 51                  <1>     push rcx
   546 00001025 52                  <1>     push rdx
   547 00001026 53                  <1>     push rbx
   548 00001027 50                  <1>     push rax
   549                              <1> 
   550 00001028 8A3C25[59010000]    <1>     mov bh, byte [scr_active_page]    ;Get active page
   551 0000102F 50                  <1>     push rax
   552 00001030 B403                <1>     mov ah, 3    ;Get cursor into dx
   553 00001032 CD30                <1>     int 30h
   554 00001034 58                  <1>     pop rax
   555                              <1> 
   556 00001035 3C08                <1>     cmp al, 08h    ;Check for backspace
   557 00001037 746B                <1>     je .wttybspace
   558 00001039 3C0A                <1>     cmp al, 0Ah    ;Check for line feed
   559 0000103B 747F                <1>     je .wttylf
   560 0000103D 3C0D                <1>     cmp al, 0Dh    ;Check for carriage return
   561 0000103F 0F848D000000        <1>     je .wttycr
   562 00001045 3C07                <1>     cmp al, 07h    ;ASCII bell
   563 00001047 0F848C000000        <1>     je .wttybell
   564                              <1> 
   565                              <1> .wttywrite:
   566 0000104D 48B901000000000000- <1>     mov rcx, 1    
   566 00001056 00                  <1>
   567 00001057 B40A                <1>     mov ah, 0Ah    ;Write 1 char w/o attrib byte
   568 00001059 CD30                <1>     int 30h    ;bh contains page to write for
   569                              <1> 
   570                              <1> .wttycursorupdate:
   571 0000105B FEC2                <1>     inc dl
   572 0000105D 3A1425[53010000]    <1>     cmp dl, byte [scr_cols]
   573 00001064 730D                <1>     jae .wttycu0    ;go down by a line, and start of the line
   574                              <1> .wttycursorupdatego:
   575 00001066 B402                <1>     mov ah, 2
   576 00001068 CD30                <1>     int 30h     ;set cursor
   577                              <1> .wttyexit:
   578 0000106A 58                  <1>     pop rax
   579 0000106B 5B                  <1>     pop rbx
   580 0000106C 5A                  <1>     pop rdx
   581 0000106D 59                  <1>     pop rcx
   582 0000106E E922FCFFFF          <1>     jmp .exit
   583                              <1> 
   584                              <1> .wttycu0:
   585 00001073 30D2                <1>     xor dl, dl    ;Return to start of line
   586 00001075 FEC6                <1>     inc dh
   587 00001077 3A3425[54010000]    <1>     cmp dh, byte [scr_rows]    ;are past the bottom of the screen?
   588 0000107E 72E6                <1>     jb .wttycursorupdatego    ;we are not past the bottom of the screen
   589                              <1> .wttyscrollupone:
   590 00001080 53                  <1>     push rbx
   591 00001081 B408                <1>     mov ah, 08h    ;Read char/attrib at cursor
   592 00001083 CD30                <1>     int 30h
   593 00001085 88E7                <1>     mov bh, ah    ;Move attrib byte into bh
   594 00001087 4831C9              <1>     xor rcx, rcx
   595 0000108A 668B1425[53010000]  <1>     mov dx, word [scr_cols]    ;word access all ok
   596 00001092 FECE                <1>     dec dh
   597 00001094 FECA                <1>     dec dl
   598 00001096 66B80106            <1>     mov ax, 0601h    ;scroll up one line
   599 0000109A CD30                <1>     int 30h
   600                              <1> 
   601 0000109C 30D2                <1>     xor dl, dl 
   602 0000109E 5B                  <1>     pop rbx
   603 0000109F E9C2FFFFFF          <1>     jmp .wttycursorupdatego
   604                              <1> .wttybspace:
   605 000010A4 84D2                <1>     test dl, dl    ;compare if the column is zero
   606 000010A6 750D                <1>     jnz .wttybs1   ;if not just decrement row pos
   607 000010A8 84F6                <1>     test dh, dh    ;compare if zero row, if so do nothing
   608 000010AA 74BE                <1>     jz .wttyexit   ;at top left, just exit
   609 000010AC FECE                <1>     dec dh
   610 000010AE 8A1425[53010000]    <1>     mov dl, byte [scr_cols]    ;move to end of prev row + 1
   611                              <1> .wttybs1:
   612 000010B5 FECA                <1>     dec dl
   613 000010B7 E9AAFFFFFF          <1>     jmp .wttycursorupdatego
   614                              <1> 
   615                              <1> .wttylf:
   616 000010BC 52                  <1>     push rdx
   617 000010BD 8A1425[54010000]    <1>     mov dl, byte [scr_rows]
   618 000010C4 FECA                <1>     dec dl
   619 000010C6 38D6                <1>     cmp dh, dl
   620 000010C8 5A                  <1>     pop rdx
   621 000010C9 74B5                <1>     je .wttyscrollupone    ;if we need to scroll, scroll
   622 000010CB FEC6                <1>     inc dh    ;otherwise just send cursor down by one
   623 000010CD E994FFFFFF          <1>     jmp    .wttycursorupdatego
   624                              <1> .wttycr:
   625 000010D2 B200                <1>     mov dl, 0    ;Set to 0 on row
   626 000010D4 E98DFFFFFF          <1>     jmp .wttycursorupdatego
   627                              <1> .wttybell:
   628 000010D9 48B9E8030000000000- <1>     mov rcx, 1000   ;Beep for a second
   628 000010E2 00                  <1>
   629 000010E3 BBA9040000          <1>     mov ebx, 04A9h  ;Frequency divisor for 1000Hz tone
   630 000010E8 E8A9EFFFFF          <1>     call beep
   631 000010ED E978FFFFFF          <1>     jmp .wttyexit
   632                              <1> 
   633                              <1> .get_mode:
   634                              <1> ;Takes no arguments
   635                              <1> ;Returns ah=Number of Columns, al=Current Screen mode, bh=active page
   636 000010F2 8A2425[53010000]    <1>     mov ah, byte [scr_cols]
   637 000010F9 8A0425[58010000]    <1>     mov al, byte [scr_mode]
   638 00001100 8A3C25[59010000]    <1>     mov bh, byte [scr_active_page]
   639 00001107 E989FBFFFF          <1>     jmp .exit
   640                              <1> 
   641                              <1> 
   642                              <1> ;Bad string argument for below function
   643                              <1> .wsbad:
   644 0000110C 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   644 00001115 00                  <1>
   645 00001116 E97AFBFFFF          <1>     jmp .exit
   646                              <1> .write_string:
   647                              <1> ;bh=page to print on, bl=attribute, cx=number of chars to print
   648                              <1> ;dh=y coord to print at, dl=x coord to print at, rbp=string
   649                              <1> ;al contains subfunction
   650                              <1> ;al=0 attrib in bl, cursor NOT updated
   651                              <1> ;al=1 attrib in bl, cursor updated
   652                              <1> ;al=2 string alt attrib/char, cursor NOT updated
   653                              <1> ;al=3 string alt attrib/char, cursor updated
   654                              <1> ;al=4 print 0 terminated string
   655 0000111B 3C04                <1>     cmp al, 4h
   656 0000111D 0F84AA000000        <1>     je .wszero    ;If its a zero terminated string, go down
   657 00001123 E3E7                <1>     jrcxz .wsbad
   658 00001125 3C04                <1>     cmp al, 4h    ;Bad argument
   659 00001127 77E3                <1>     ja .wsbad
   660                              <1> .ws:
   661 00001129 56                  <1>     push rsi
   662 0000112A 51                  <1>     push rcx
   663 0000112B 52                  <1>     push rdx
   664 0000112C 53                  <1>     push rbx
   665 0000112D 50                  <1>     push rax
   666                              <1> 
   667 0000112E 53                  <1>     push rbx
   668 0000112F 88FB                <1>     mov bl, bh
   669 00001131 0FB6DB              <1>     movzx ebx, bl
   670 00001134 66678BB41B-         <1>     mov si, word [scr_curs_pos + 2*ebx]    ;Fast get cursor position
   670 00001139 [43010000]          <1>
   671 0000113D 5B                  <1>     pop rbx
   672 0000113E 56                  <1>     push rsi    ;Save the current cursor position
   673                              <1> 
   674 0000113F 50                  <1>     push rax
   675 00001140 B402                <1>     mov ah, 02h    ;Set cursor at dx
   676 00001142 CD30                <1>     int 30h
   677 00001144 58                  <1>     pop rax
   678                              <1> 
   679                              <1> .ws0:
   680 00001145 51                  <1>     push rcx
   681 00001146 53                  <1>     push rbx
   682 00001147 50                  <1>     push rax
   683 00001148 88C4                <1>     mov ah, al
   684 0000114A 8A4500              <1>     mov al, byte [rbp] ;Get char
   685 0000114D 48FFC5              <1>     inc rbp
   686 00001150 3C07                <1>     cmp al, 07h
   687 00001152 7462                <1>     je .wsctrlchar
   688 00001154 3C08                <1>     cmp al, 08h
   689 00001156 745E                <1>     je .wsctrlchar
   690 00001158 3C0A                <1>     cmp al, 0Ah
   691 0000115A 745A                <1>     je .wsctrlchar
   692 0000115C 3C0D                <1>     cmp al, 0Dh
   693 0000115E 7456                <1>     je .wsctrlchar
   694                              <1> 
   695 00001160 80FC02              <1>     cmp ah, 2    ;Check if we need to get the char attrib too
   696 00001163 7206                <1>     jb .ws1
   697 00001165 8A5D00              <1>     mov bl, byte [rbp]    ;Get char attrib
   698 00001168 48FFC5              <1>     inc rbp
   699                              <1> .ws1:
   700 0000116B 66B90100            <1>     mov cx, 1
   701 0000116F B409                <1>     mov ah, 09h    ;Print char and attrib (either given or taken)
   702 00001171 CD30                <1>     int 30h
   703                              <1> 
   704 00001173 FEC2                <1>     inc dl
   705 00001175 3A1425[53010000]    <1>     cmp dl, byte [scr_cols]    ;Check if we passed the end of the row
   706 0000117C 7515                <1>     jne .ws2    ;We havent, skip the reset
   707 0000117E 30D2                <1>     xor dl, dl    ;Reset horizontal pos
   708 00001180 FEC6                <1>     inc dh        ;Goto next row
   709 00001182 3A3425[53010000]    <1>     cmp dh, byte [scr_cols]    ;Have we passed the last row?
   710 00001189 7508                <1>     jne .ws2    ;No, put cursor
   711 0000118B 66B80A0E            <1>     mov ax, 0E0Ah    ;Yes, do  TTY Line feed
   712 0000118F CD30                <1>     int 30h
   713 00001191 FECE                <1>     dec dh        ;Mov cursor to start of last row on page
   714                              <1> .ws2:
   715 00001193 B402                <1>     mov ah, 02
   716 00001195 CD30                <1>     int 30h    ;Put cursor at new location
   717                              <1> .ws3:
   718 00001197 58                  <1>     pop rax
   719 00001198 5B                  <1>     pop rbx
   720 00001199 59                  <1>     pop rcx
   721                              <1> 
   722 0000119A 66FFC9              <1>     dec cx
   723 0000119D 75A6                <1>     jnz .ws0
   724                              <1> 
   725                              <1> .wsexitupdate:    ;Exit returning char to original position
   726 0000119F 5A                  <1>     pop rdx
   727 000011A0 3C01                <1>     cmp al, 01h
   728 000011A2 7408                <1>     je .wsexit
   729 000011A4 3C03                <1>     cmp al, 03h
   730 000011A6 7404                <1>     je .wsexit
   731                              <1> ;Exit returning char to original position    
   732 000011A8 B402                <1>     mov ah, 02h
   733 000011AA CD30                <1>     int 30h 
   734                              <1> .wsexit:
   735 000011AC 58                  <1>     pop rax
   736 000011AD 5B                  <1>     pop rbx
   737 000011AE 5A                  <1>     pop rdx
   738 000011AF 59                  <1>     pop rcx
   739 000011B0 5E                  <1>     pop rsi
   740 000011B1 E9DFFAFFFF          <1>     jmp .exit
   741                              <1> .wsctrlchar:
   742                              <1> ;Handles Control Characters: ASCII Bell, Bspace, LF and CR
   743 000011B6 B40E                <1>     mov ah, 0Eh
   744 000011B8 CD30                <1>     int 30h    ;Print control char as TTY
   745 000011BA 88FB                <1>     mov bl, bh
   746 000011BC 0FB6DB              <1>     movzx ebx, bl
   747 000011BF 66678B941B-         <1>     mov dx, word [scr_curs_pos + 2*ebx]    ;Fast get cursor position
   747 000011C4 [43010000]          <1>
   748 000011C8 E9CAFFFFFF          <1>     jmp .ws3
   749                              <1> .wszero:
   750                              <1> ;Print zero terminated string at cursor on current active page
   751                              <1> ;Called with ax=1304, rbp=pointer to string
   752 000011CD 55                  <1>     push rbp
   753 000011CE 50                  <1>     push rax
   754                              <1> .wsz1:
   755 000011CF 8A4500              <1>     mov al, byte [rbp]
   756 000011D2 84C0                <1>     test al, al    ;Check al got a zero char
   757 000011D4 7409                <1>     jz .wsz2
   758 000011D6 48FFC5              <1>     inc rbp
   759 000011D9 B40E                <1>     mov ah, 0Eh
   760 000011DB CD30                <1>     int 30h
   761 000011DD EBF0                <1>     jmp short .wsz1
   762                              <1> .wsz2:
   763 000011DF 58                  <1>     pop rax
   764 000011E0 5D                  <1>     pop rbp
   765 000011E1 E9AFFAFFFF          <1>     jmp .exit
   766                              <1> 
   767                              <1> ;Graphics mode specific versions!
   768                              <1> .gread:
   769 000011E6 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   769 000011EF 00                  <1>
   770 000011F0 E9A0FAFFFF          <1>     jmp .exit    ;Currently unsupported function
   771                              <1> .gwrite:
   772 000011F5 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   772 000011FE 00                  <1>
   773 000011FF E991FAFFFF          <1>     jmp .exit    ;Currently unsupported function
   774                              <1> .gscrollup:
   775 00001204 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   775 0000120D 00                  <1>
   776 0000120E E982FAFFFF          <1>     jmp .exit    ;Currently unsupported function
   777                              <1> .gscrolldown:
   778 00001213 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   778 0000121C 00                  <1>
   779 0000121D E973FAFFFF          <1>     jmp .exit    ;Currently unsupported function
   780                              <1> 
   781                              <1> .write_crtc_word: ;Writes cx to the CRTC register in al and al+1
   782 00001222 52                  <1>     push rdx
   783                              <1> 
   784 00001223 668B1425[5A010000]  <1>     mov dx, word [scr_crtc_base]
   785 0000122B EE                  <1>     out dx, al
   786 0000122C FEC2                <1>     inc dl
   787 0000122E 88C4                <1>     mov ah, al    ;Temp save al
   788 00001230 88E8                <1>     mov al, ch    ;Set high bits first
   789 00001232 EE                  <1>     out dx, al
   790                              <1> 
   791 00001233 FECA                <1>     dec dl
   792 00001235 88E0                <1>     mov al, ah    ;Bring back al into al
   793 00001237 FEC0                <1>     inc al ;GOTO next CTRC address
   794                              <1> 
   795 00001239 EE                  <1>     out dx, al
   796 0000123A FEC2                <1>     inc dl
   797 0000123C 88C8                <1>     mov al, cl
   798 0000123E EE                  <1>     out dx, al 
   799                              <1> 
   800 0000123F 5A                  <1>     pop rdx
   801 00001240 C3                  <1>     ret
   802                              <1> 
   803                              <1> .get_page_base:
   804                              <1> ;Returns in rsi, the base address of the selected page
   805                              <1> ;Called with BH = page number, BL=screen mode
   806                              <1> ;return RSI=Base of selected page, since rsi is already clobbered
   807 00001241 51                  <1>     push rcx
   808 00001242 53                  <1>     push rbx
   809                              <1> 
   810 00001243 88F9                <1>     mov cl, bh    ;mov into cl, free bx
   811 00001245 480FB6C9            <1>     movzx rcx, cl
   812                              <1> ;----Modify this proc with data tables when finalised!!----
   813 00001249 80FB02              <1>     cmp bl, 2
   814 0000124C 66BB0010            <1>     mov bx, 1000h    ;Doesnt affect flags
   815 00001250 48BE00080000000000- <1>     mov rsi, 800h    ;si is a free register
   815 00001259 00                  <1>
   816 0000125A 660F42DE            <1>     cmovb bx, si    ;if below, replace with 800h
   817 0000125E 480FB7DB            <1>     movzx rbx, bx        ;zero extend
   818 00001262 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]
   819 00001269 E308                <1>     jrcxz .gpb1        ;Dont enter the loop if cx is zero
   820                              <1> .gpb0:
   821 0000126B 4801DE              <1>     add rsi, rbx    ;add pagesize cx times
   822 0000126E 48FFC9              <1>     dec rcx
   823 00001271 75F8                <1>     jnz .gpb0        ;go around
   824                              <1> 
   825                              <1> .gpb1:
   826 00001273 5B                  <1>     pop rbx
   827 00001274 59                  <1>     pop rcx
   828 00001275 C3                  <1>     ret
   829                              <1> 
   830                              <1> .page_cursor_offset:
   831                              <1> ;Returns in rax the offset into the RAM page of the cursor
   832                              <1> ;Works for A/N modes and graphic, though must be shl by 1 for A/N modes
   833                              <1> ;bh contains page to work out address 
   834 00001276 53                  <1>     push rbx
   835 00001277 88FB                <1>     mov bl, bh    ;bring the page number from bh into bl
   836 00001279 480FB6DB            <1>     movzx rbx, bl            
   837 0000127D 668B841B[43010000]  <1>     mov ax, word [scr_curs_pos + 2*rbx]    ;move cursor position into ax
   838 00001285 5B                  <1>     pop rbx
   839                              <1> .offset_from_ax:
   840                              <1> ;Same as above but now ax needs to be packed as in the cursor
   841 00001286 52                  <1>     push rdx
   842 00001287 53                  <1>     push rbx
   843 00001288 4831DB              <1>     xor rbx, rbx
   844 0000128B 00C3                <1>     add bl, al    ;move columns into bl
   845 0000128D 66C1E808            <1>     shr ax, 8    ;mov rows from ah to al to use 8 bit mul
   846                              <1>     
   847 00001291 F62425[53010000]    <1>     mul byte [scr_cols]    ;multiply the row we are on by columns, store in ax
   848 00001298 6601D8              <1>     add ax, bx        ;add number of columns to this mix!
   849 0000129B 480FB7C0            <1>     movzx rax, ax
   850                              <1> 
   851 0000129F 5B                  <1>     pop rbx
   852 000012A0 5A                  <1>     pop rdx
   853 000012A1 C3                  <1>     ret
   854                              <1> .text_scroll_c1:
   855                              <1> ;Common function
   856                              <1> ;Scrolls a single pair of lines from column given in cl to dl
   857                              <1> ;rsi/rdi assumed to be pointing at the right place
   858                              <1> ;Direction to be set by calling function
   859                              <1> ;All registers EXCEPT pointers preserved, rbp returns # of words
   860 000012A2 51                  <1>     push rcx
   861 000012A3 52                  <1>     push rdx
   862 000012A4 4831ED              <1>     xor rbp, rbp
   863 000012A7 88CE                <1>     mov dh, cl    ;Save upper left corner in dh, freeing cx
   864 000012A9 88D1                <1>     mov cl, dl    
   865 000012AB 28F1                <1>     sub cl, dh    ;Get correct number of words to copy into cl
   866 000012AD 480FB6C9            <1>     movzx rcx, cl
   867 000012B1 48FFC1              <1>     inc rcx    ;absolute value, not offset
   868 000012B4 4889CD              <1>     mov rbp, rcx    ;Save number of words in rbp
   869 000012B7 F366A5              <1>     rep movsw    ;Move char/attrib for one row
   870 000012BA 5A                  <1>     pop rdx
   871 000012BB 59                  <1>     pop rcx
   872 000012BC C3                  <1>     ret
   873                              <1> .cursor_proc:
   874                              <1> ;Called with bh containing page number
   875                              <1> ;Sets cursor on page in bh
   876                              <1> ;Returns nothing
   877 000012BD E8B4FFFFFF          <1>     call .page_cursor_offset    ;rax rets offset, no shift needed
   878                              <1> 
   879 000012C2 88F9                <1>     mov cl, bh
   880 000012C4 480FB6C9            <1>     movzx rcx, cl
   881                              <1> ;----Modify this proc with data tables when finalised!!----
   882 000012C8 6631F6              <1>     xor si, si    
   883 000012CB 66BA0008            <1>     mov dx, 800h ;Most legacy Pages are sized 800h PELs, VGA greater
   884 000012CF 803C25[58010000]02  <1>     cmp byte [scr_mode], 2
   885 000012D7 7303                <1>     jae .cp1
   886 000012D9 66D1EA              <1>     shr dx, 1    ;If in modes 0,1, 400h PELs per page
   887                              <1> .cp1:
   888 000012DC 84C9                <1>     test cl, cl
   889 000012DE 7407                <1>     jz .cpwrite
   890 000012E0 6601D6              <1>     add si, dx 
   891 000012E3 FEC9                <1>     dec cl
   892 000012E5 75F5                <1>     jnz .cp1
   893                              <1> 
   894                              <1> .cpwrite:
   895 000012E7 6689C1              <1>     mov cx, ax    ;move ax into cx
   896 000012EA 6601F1              <1>     add cx, si
   897 000012ED B00E                <1>     mov al, 0Eh    ;Cursor row
   898 000012EF E82EFFFFFF          <1>     call .write_crtc_word    ;cx has data to output, al is crtc reg
   899                              <1> 
   900 000012F4 C3                  <1>     ret
   901                              <1> ;------------------------End of Interrupt------------------------
    93                                  %include "./Resident/Services/Int31h.asm"
    94                              <1> ;-----------------------Basic Config Int 31h---------------------
    95                              <1> ;This interrupt returns in ax the Hardware Bitfield from the 
    96                              <1> ; data area and the mass storage device details.
    97                              <1> ;----------------------------------------------------------------
    98                              <1> machineWord_io:
    99 000012F5 668B0425[C9010000]  <1>     mov ax, word [MachineWord]    ;Return the legacy bitfield
   100                              <1> 
   101 000012FD 4C0FB60425-         <1>     movzx r8, byte [i33Devices] ;Get Number of i33h devices
   101 00001302 [A8010000]          <1>
   102 00001306 49C1E008            <1>     shl r8, 8   ;Shift up by a byte
   103 0000130A 448A0425[4B020000]  <1>     mov r8b, byte [numMSD]  ;Get the number of Mass Storage Devices (on EHCI)
   104 00001312 49C1E008            <1>     shl r8, 8   ;Shift up by a byte again
   105 00001316 448A0425[AA010000]  <1>     mov r8b, byte [fdiskNum]    ;Get the number of fixed disks
   106 0000131E 49C1E008            <1>     shl r8, 8  ;Shift up by a byte again
   107 00001322 448A0425[66000000]  <1>     mov r8b, byte [numCOM]      ;Get the number of COM ports
   108                              <1> 
   109 0000132A 48CF                <1>     iretq
   110                              <1> ;------------------------End of Interrupt------------------------
    94                                  %include "./Resident/Services/Int32h.asm"
    95                              <1> ;------------------------Basic RAM Int 32h-----------------------
    96                              <1> ;This interrupt returns in ax amount of conventional memory in ax
    97                              <1> ;----------------------------------------------------------------
    98                              <1> convRAM_io:
    99 0000132C 668B0425[CB010000]  <1>     mov ax, word [convRAM]    ;Return the amount of conventional RAM
   100 00001334 4C8B0425[CD010000]  <1>     mov r8, qword [userBase]    ;Return the userbase to a caller
   101 0000133C 4C8B0C25[F0050000]  <1>     mov r9, qword [bigmapptr]   ;Return the big Map pointer 
   102 00001344 4C0FB61425-         <1>     movzx r10, byte [bigmapSize]    ;Return the number of 24 byte entries
   102 00001349 [D5010000]          <1>
   103 0000134D 48CF                <1>     iretq
   104                              <1> ;------------------------End of Interrupt------------------------
    95                                  %include "./Resident/Services/Int33h.asm"
    96                              <1> ;---------------------Storage Interrupt Int 33h------------------
    97                              <1> ;Input : dl = Drive number, rbx = Address of buffer, 
    98                              <1> ;        al = number of sectors, ch = Track number, 
    99                              <1> ;        cl = Sector number, dh = Head number
   100                              <1> ;Input LBA: dl = Drive Number, rbx = Address of Buffer, 
   101                              <1> ;           al = number of sectors, rcx = LBA number
   102                              <1> ;
   103                              <1> ;All registers not mentioned above, preserved
   104                              <1> ;----------------------------------------------------------------
   105                              <1> disk_io:
   106 0000134F FC                  <1>     cld ;Ensure all string reads/writes are in the right way
   107 00001350 F6C280              <1>     test dl, 80h
   108 00001353 0F8597000000        <1>     jnz .baddev    ;If bit 7 set, exit (temp for v0.9)
   109 00001359 52                  <1>     push rdx
   110 0000135A FEC2                <1>     inc dl          ;Inc device number count to absolute value
   111 0000135C 3A1425[A8010000]    <1>     cmp dl, byte [i33Devices]
   112 00001363 5A                  <1>     pop rdx
   113 00001364 0F8786000000        <1>     ja .baddev
   114 0000136A 80FC16              <1>     cmp ah, 16h
   115 0000136D 0F84D6030000        <1>     jz .deviceChanged   ;Pick it off
   116                              <1> 
   117 00001373 E8A7040000          <1>     call .busScan   ;Bus scan only in valid cases
   118 00001378 803C25[A9010000]40  <1>     cmp byte [msdStatus], 40h   ;Media seek failed
   119 00001380 747E                <1>     je .noDevInDrive
   120                              <1> 
   121 00001382 84E4                <1>     test ah, ah
   122 00001384 0F8484000000        <1>     jz .reset           ;ah = 00h Reset Device
   123 0000138A FECC                <1>     dec ah
   124 0000138C 0F84AF000000        <1>     jz .statusreport    ;ah = 01h Get status of last op and req. sense if ok 
   125                              <1> 
   126 00001392 C60425[A9010000]00  <1>     mov byte [msdStatus], 00    ;Reset status byte for following operations
   127                              <1> 
   128 0000139A FECC                <1>     dec ah
   129 0000139C 0F841E010000        <1>     jz .readsectors     ;ah = 02h CHS Read Sectors
   130 000013A2 FECC                <1>     dec ah
   131 000013A4 0F843E010000        <1>     jz .writesectors    ;ah = 03h CHS Write Sectors
   132 000013AA FECC                <1>     dec ah
   133 000013AC 0F8457010000        <1>     jz .verify          ;ah = 04h CHS Verify Sectors
   134 000013B2 FECC                <1>     dec ah
   135 000013B4 0F8470010000        <1>     jz .format          ;ah = 05h CHS Format Track (Select Head and Cylinder)
   136                              <1> 
   137 000013BA 80FC02              <1>     cmp ah, 02h
   138 000013BD 0F84A1020000        <1>     je .formatLowLevel  ;ah = 07h (SCSI) Low Level Format Device
   139                              <1> 
   140 000013C3 80FC7D              <1>     cmp ah, 7Dh         ;ah = 82h LBA Read Sectors
   141 000013C6 0F84E5010000        <1>     je .lbaread
   142 000013CC 80FC7E              <1>     cmp ah, 7Eh         ;ah = 83h LBA Write Sectors
   143 000013CF 0F8401020000        <1>     je .lbawrite
   144 000013D5 80FC7F              <1>     cmp ah, 7Fh         ;ah = 84h LBA Verify Sectors
   145 000013D8 0F841D020000        <1>     je .lbaverify
   146 000013DE 80FC80              <1>     cmp ah, 80h         ;ah = 85h LBA Format Sectors
   147 000013E1 0F8439020000        <1>     je .lbaformat
   148 000013E7 80FC83              <1>     cmp ah, 83h         ;ah = 88h LBA Read Drive Parameters
   149 000013EA 0F8496020000        <1>     je .lbareadparams
   150                              <1> .baddev:
   151 000013F0 B401                <1>     mov ah, 01h
   152 000013F2 882425[A9010000]    <1>     mov byte [msdStatus], ah   ;Invalid function requested signature
   153                              <1> .bad:
   154 000013F9 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   155 000013FE 48CF                <1>     iretq
   156                              <1> .noDevInDrive:
   157 00001400 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   158 00001407 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   159 0000140C 48CF                <1>     iretq
   160                              <1> .reset: ;Device Reset
   161 0000140E 56                  <1>     push rsi
   162 0000140F 52                  <1>     push rdx
   163 00001410 E8E5020000          <1>     call .i33ehciGetDevicePtr
   164 00001415 E87F200000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   165 0000141A E8532F0000          <1>     call USB.ehciMsdBOTResetRecovery
   166                              <1> .rrexit:
   167 0000141F 5A                  <1>     pop rdx
   168 00001420 5E                  <1>     pop rsi
   169 00001421 720E                <1>     jc .rrbad
   170 00001423 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   171 0000142A 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   172 0000142F 48CF                <1>     iretq
   173                              <1> .rrbad:
   174 00001431 B405                <1>     mov ah, 5   ;Reset failed
   175 00001433 882425[A9010000]    <1>     mov byte [msdStatus], ah
   176 0000143A 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   177 0000143F 48CF                <1>     iretq
   178                              <1> .statusreport:  
   179                              <1> ;If NOT a host/bus/ctrlr type error, request sense and ret code
   180 00001441 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]    ;Get last status into ah
   181 00001448 84E4                <1>     test ah, ah ;If status is zero, exit
   182 0000144A 7507                <1>     jnz .srmain
   183 0000144C 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh     ;Clear CF
   184 00001451 48CF                <1>     iretq
   185                              <1> .srmain:
   186 00001453 C60425[A9010000]00  <1>     mov byte [msdStatus], 00    ;Reset status byte
   187 0000145B 80FC20              <1>     cmp ah, 20h     ;General Controller failure?
   188 0000145E 7449                <1>     je .srexit
   189 00001460 80FC80              <1>     cmp ah, 80h     ;Timeout?
   190 00001463 7444                <1>     je .srexit
   191                              <1> ;Issue a Request sense command
   192 00001465 56                  <1>     push rsi
   193 00001466 50                  <1>     push rax    ;Save original error code in ah on stack
   194 00001467 E88E020000          <1>     call .i33ehciGetDevicePtr
   195 0000146C E828200000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   196 00001471 7241                <1>     jc .srexitbad1
   197 00001473 E8C6340000          <1>     call USB.ehciMsdBOTRequestSense
   198 00001478 E8D52F0000          <1>     call USB.ehciMsdBOTCheckTransaction
   199 0000147D 6685C0              <1>     test ax, ax
   200 00001480 58                  <1>     pop rax         ;Get back original error code
   201 00001481 752D                <1>     jnz .srexitbad2
   202 00001483 4C0FB60425-         <1>     movzx r8, byte [ehciDataIn + 13]  ;Get ASCQ into r8
   202 00001488 [CD030000]          <1>
   203 0000148C 49C1E008            <1>     shl r8, 8                        ;Make space in lower byte of r8 for ASC key
   204 00001490 448A0425[CC030000]  <1>     mov r8b, byte [ehciDataIn + 12]   ;Get ASC into r8
   205 00001498 49C1E008            <1>     shl r8, 8                    ;Make space in lower byte of r8 for sense key
   206 0000149C 448A0425[C2030000]  <1>     mov r8b, byte [ehciDataIn + 2]  ;Get sense key into al
   207 000014A4 4180C8F0            <1>     or r8b, 0F0h                    ;Set sense signature (set upper nybble F)
   208 000014A8 5E                  <1>     pop rsi
   209                              <1> .srexit:
   210 000014A9 804C241001          <1>     or byte [rsp + 2*8h], 1 ;Non-zero error, requires CF=CY
   211 000014AE 48CF                <1>     iretq
   212                              <1> .srexitbad2:
   213 000014B0 B4FF                <1>     mov ah, -1  ;Sense operation failed
   214 000014B2 EB02                <1>     jmp short .srexitbad
   215                              <1> .srexitbad1:
   216 000014B4 B420                <1>     mov ah, 20h ;General Controller Failure
   217                              <1> .srexitbad:
   218 000014B6 5E                  <1>     pop rsi
   219 000014B7 882425[A9010000]    <1>     mov byte [msdStatus], ah
   220 000014BE EB21                <1>     jmp short .rsbad
   221                              <1> 
   222                              <1> .readsectors:
   223 000014C0 57                  <1>     push rdi
   224 000014C1 48BF-               <1>     mov rdi, USB.ehciMsdBOTInSector512
   224 000014C3 [624A000000000000]  <1>
   225 000014CB E8DE010000          <1>     call .sectorsEHCI
   226 000014D0 5F                  <1>     pop rdi
   227 000014D1 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]    ;Return Error code in ah
   228 000014D8 7207                <1>     jc .rsbad
   229 000014DA 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   230 000014DF 48CF                <1>     iretq
   231                              <1> .rsbad:
   232 000014E1 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   233 000014E6 48CF                <1>     iretq
   234                              <1> 
   235                              <1> .writesectors:
   236 000014E8 57                  <1>     push rdi
   237 000014E9 48BF-               <1>     mov rdi, USB.ehciMsdBOTOutSector512
   237 000014EB [174A000000000000]  <1>
   238 000014F3 E8B6010000          <1>     call .sectorsEHCI
   239 000014F8 5F                  <1>     pop rdi
   240 000014F9 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   241 00001500 72DF                <1>     jc .rsbad
   242 00001502 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   243 00001507 48CF                <1>     iretq
   244                              <1> 
   245                              <1> .verify:
   246 00001509 57                  <1>     push rdi
   247 0000150A 48BF-               <1>     mov rdi, USB.ehciMsdBOTVerify
   247 0000150C [EF48000000000000]  <1>
   248 00001514 E895010000          <1>     call .sectorsEHCI   ;Verify sector by sector
   249 00001519 5F                  <1>     pop rdi
   250 0000151A 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   251 00001521 72BE                <1>     jc .rsbad
   252 00001523 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   253 00001528 48CF                <1>     iretq
   254                              <1> .format:
   255                              <1> ;Cleans sectors on chosen track. DOES NOT Low Level Format.
   256                              <1> ;Fills sectors with fill byte from table
   257 0000152A 50                  <1>     push rax
   258 0000152B 53                  <1>     push rbx
   259 0000152C 51                  <1>     push rcx
   260 0000152D 56                  <1>     push rsi
   261 0000152E 57                  <1>     push rdi
   262 0000152F 55                  <1>     push rbp
   263                              <1> 
   264 00001530 51                  <1>     push rcx                    ;Save ch = Cylinder number
   265 00001531 488B3425[AF010000]  <1>     mov rsi, qword [diskDptPtr]
   266 00001539 B880000000          <1>     mov eax, 80h                 ;128 bytes
   267 0000153E 8A4E03              <1>     mov cl, byte [rsi + 3]  ;Bytes per track
   268 00001541 D3E0                <1>     shl eax, cl                  ;Multiply 128 bytes per sector by multiplier
   269 00001543 89C1                <1>     mov ecx, eax
   270 00001545 8A4608              <1>     mov al, byte [rsi + 8]  ;Fill byte for format
   271 00001548 48BF-               <1>     mov rdi, sectorbuffer       ;Large enough buffer
   271 0000154A [C003000000000000]  <1>
   272 00001552 F3AA                <1>     rep stosb                   ;Create mock sector
   273                              <1> 
   274 00001554 8A4E04              <1>     mov cl, byte [rsi + 4]  ;Get sectors per track
   275 00001557 0FB6E9              <1>     movzx ebp, cl               ;Put number of sectors in Cylinder in ebp
   276                              <1> 
   277 0000155A 59                  <1>     pop rcx                     ;Get back Cylinder number in ch
   278 0000155B B101                <1>     mov cl, 1                   ;Ensure start at sector 1 of Cylinder
   279                              <1> 
   280 0000155D E8C6010000          <1>     call .convertCHSLBA ;Converts to valid 32 bit LBA in ecx for geometry type
   281                              <1>     ;ecx now has LBA
   282                              <1> .formatcommon:
   283 00001562 E893010000          <1>     call .i33ehciGetDevicePtr
   284 00001567 7245                <1>     jc .fbad
   285 00001569 89CA                <1>     mov edx, ecx    ;Load edx for function call
   286                              <1> ;Replace this section with a single USB function
   287 0000156B E8291F0000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   288 00001570 48BB-               <1>     mov rbx, sectorbuffer
   288 00001572 [C003000000000000]  <1>
   289                              <1> .f0:
   290 0000157A E898340000          <1>     call USB.ehciMsdBOTOutSector512
   291 0000157F 0F826A010000        <1>     jc .sebadBB
   292 00001585 FFC2                <1>     inc edx ;Inc LBA
   293 00001587 FFCD                <1>     dec ebp ;Dec number of sectors to act on
   294 00001589 75EF                <1>     jnz .f0
   295 0000158B F8                  <1>     clc
   296                              <1> .formatexit:
   297 0000158C 5D                  <1>     pop rbp
   298 0000158D 5F                  <1>     pop rdi
   299 0000158E 5E                  <1>     pop rsi
   300 0000158F 59                  <1>     pop rcx
   301 00001590 5B                  <1>     pop rbx
   302 00001591 58                  <1>     pop rax
   303 00001592 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   304 00001599 0F8242FFFFFF        <1>     jc .rsbad
   305 0000159F 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   306 000015A4 48CF                <1>     iretq
   307                              <1> .fbadBB:
   308 000015A6 C60425[A9010000]BB  <1>     mov byte [msdStatus], 0BBh  ;Unknown Error, request sense
   309                              <1> .fbad:
   310 000015AE F9                  <1>     stc
   311 000015AF EBDB                <1>     jmp short .formatexit
   312                              <1> .lbaread:
   313 000015B1 57                  <1>     push rdi
   314 000015B2 48BF-               <1>     mov rdi, USB.ehciMsdBOTInSector512
   314 000015B4 [624A000000000000]  <1>
   315 000015BC E88D000000          <1>     call .lbaCommon
   316 000015C1 5F                  <1>     pop rdi
   317 000015C2 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]    ;Return Error code in ah
   318 000015C9 0F8212FFFFFF        <1>     jc .rsbad
   319 000015CF 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   320 000015D4 48CF                <1>     iretq   
   321                              <1> .lbawrite:
   322 000015D6 57                  <1>     push rdi
   323 000015D7 48BF-               <1>     mov rdi, USB.ehciMsdBOTOutSector512
   323 000015D9 [174A000000000000]  <1>
   324 000015E1 E868000000          <1>     call .lbaCommon
   325 000015E6 5F                  <1>     pop rdi
   326 000015E7 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]    ;Return Error code in ah
   327 000015EE 0F82EDFEFFFF        <1>     jc .rsbad
   328 000015F4 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   329 000015F9 48CF                <1>     iretq
   330                              <1> .lbaverify:
   331 000015FB 57                  <1>     push rdi
   332 000015FC 48BF-               <1>     mov rdi, USB.ehciMsdBOTVerify
   332 000015FE [EF48000000000000]  <1>
   333 00001606 E843000000          <1>     call .lbaCommon
   334 0000160B 5F                  <1>     pop rdi
   335 0000160C 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]    ;Return Error code in ah
   336 00001613 0F82C8FEFFFF        <1>     jc .rsbad
   337 00001619 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   338 0000161E 48CF                <1>     iretq
   339                              <1> .lbaformat:
   340 00001620 50                  <1>     push rax
   341 00001621 53                  <1>     push rbx
   342 00001622 51                  <1>     push rcx
   343 00001623 56                  <1>     push rsi
   344 00001624 57                  <1>     push rdi
   345 00001625 55                  <1>     push rbp
   346 00001626 0FB6E8              <1>     movzx ebp, al ;Save the number of sectors to format in ebp
   347 00001629 51                  <1>     push rcx
   348 0000162A 52                  <1>     push rdx
   349 0000162B B900020000          <1>     mov ecx, 200h
   350 00001630 48BF-               <1>     mov rdi, sectorbuffer
   350 00001632 [C003000000000000]  <1>
   351 0000163A 488B1425[AF010000]  <1>     mov rdx, qword [diskDptPtr]
   352 00001642 8A4208              <1>     mov al, byte [rdx + 8]  ;Fill byte for format
   353 00001645 F3AA                <1>     rep stosb
   354 00001647 5A                  <1>     pop rdx
   355 00001648 59                  <1>     pop rcx
   356 00001649 E914FFFFFF          <1>     jmp .formatcommon
   357                              <1> 
   358                              <1> .lbaCommon:
   359 0000164E 50                  <1>     push rax
   360 0000164F 56                  <1>     push rsi
   361 00001650 53                  <1>     push rbx
   362 00001651 51                  <1>     push rcx
   363 00001652 52                  <1>     push rdx
   364 00001653 55                  <1>     push rbp
   365 00001654 84C0                <1>     test al, al
   366 00001656 0F848C000000        <1>     jz .se2 ;If al=0, skip copying sectors, clears CF
   367 0000165C 0FB6E8              <1>     movzx ebp, al
   368 0000165F E95C000000          <1>     jmp .seCommon
   369                              <1> 
   370                              <1> ;Low level format, ah=07h
   371                              <1> .formatLowLevel:
   372 00001664 56                  <1>     push rsi
   373 00001665 50                  <1>     push rax
   374 00001666 E88F000000          <1>     call .i33ehciGetDevicePtr   ;al = bus num, rsi = ehci device structure ptr
   375 0000166B E815320000          <1>     call USB.ehciMsdBOTFormatUnit
   376 00001670 58                  <1>     pop rax
   377 00001671 5E                  <1>     pop rsi
   378 00001672 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   379 00001679 0F8262FEFFFF        <1>     jc .rsbad
   380 0000167F 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   381 00001684 48CF                <1>     iretq
   382                              <1> .lbareadparams:
   383                              <1> ;Reads drive parameters (for drive dl which is always valid at this point)
   384                              <1> ;Output: rax = dBlockSize (Dword for LBA block size)
   385                              <1> ;        rcx = qLastLBANum (Qword address of last LBA)
   386 00001686 52                  <1>     push rdx
   387 00001687 480FB6C2            <1>     movzx rax, dl   ;Move drive number offset into rax
   388 0000168B 48BA10000000000000- <1>     mov rdx, int33TblEntrySize
   388 00001694 00                  <1>
   389 00001695 48F7E2              <1>     mul rdx
   390 00001698 488D90[BB030000]    <1>     lea rdx, qword [diskDevices + rax]  ;Move address into rdx
   391 0000169F 8B4203              <1>     mov eax, dword [rdx + 3]    ;Get dBlockSize for device
   392 000016A2 488B4A07            <1>     mov rcx, qword [rdx + 7]    ;Get qLastLBANum for device
   393 000016A6 5A                  <1>     pop rdx
   394 000016A7 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   395 000016AC 48CF                <1>     iretq
   396                              <1> .sectorsEHCI:
   397                              <1> ;Input: rdi = Address of USB EHCI MSD BBB function
   398                              <1> ;Output: CF = CY: Error, exit
   399                              <1> ;        CF = NC: No Error
   400 000016AE 50                  <1>     push rax
   401 000016AF 56                  <1>     push rsi
   402 000016B0 53                  <1>     push rbx
   403 000016B1 51                  <1>     push rcx
   404 000016B2 52                  <1>     push rdx
   405 000016B3 55                  <1>     push rbp
   406 000016B4 84C0                <1>     test al, al
   407 000016B6 7430                <1>     jz .se2 ;If al=0, skip copying sectors, clears CF
   408 000016B8 0FB6E8              <1>     movzx ebp, al   ;Move the number of sectors into ebp
   409 000016BB E868000000          <1>     call .convertCHSLBA ;Converts to valid 32 bit LBA in ecx for geometry type
   410                              <1>     ;ecx now has LBA
   411                              <1> .seCommon:  ;Entered with ebp = Number of Sectors and ecx = Start LBA
   412 000016C0 E835000000          <1>     call .i33ehciGetDevicePtr
   413 000016C5 7230                <1>     jc .sebad
   414 000016C7 4889CA              <1>     mov rdx, rcx    ;Load edx for function call
   415                              <1> ;Replace this section with a single USB function
   416 000016CA E8CA1D0000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   417 000016CF 30C0                <1>     xor al, al      ;Sector counter
   418                              <1> .se1:
   419 000016D1 FEC0                <1>     inc al  ;Inc Sector counter
   420 000016D3 50                  <1>     push rax
   421 000016D4 FFD7                <1>     call rdi
   422 000016D6 58                  <1>     pop rax
   423 000016D7 7216                <1>     jc .sebadBB
   424 000016D9 4881C300020000      <1>     add rbx, 200h   ;Goto next sector
   425 000016E0 48FFC2              <1>     inc rdx ;Inc LBA
   426 000016E3 FFCD                <1>     dec ebp ;Dec number of sectors to act on
   427 000016E5 75EA                <1>     jnz .se1
   428 000016E7 F8                  <1>     clc
   429                              <1> .se2:
   430 000016E8 5D                  <1>     pop rbp
   431 000016E9 5A                  <1>     pop rdx
   432 000016EA 59                  <1>     pop rcx
   433 000016EB 5B                  <1>     pop rbx
   434 000016EC 5E                  <1>     pop rsi
   435 000016ED 58                  <1>     pop rax
   436 000016EE C3                  <1>     ret
   437                              <1> .sebadBB:
   438 000016EF C60425[A9010000]BB  <1>     mov byte [msdStatus], 0BBh  ;Unknown Error, request sense
   439                              <1> .sebad:
   440 000016F7 F9                  <1>     stc
   441 000016F8 EBEE                <1>     jmp short .se2
   442                              <1> 
   443                              <1> .i33ehciGetDevicePtr:
   444                              <1> ;Input: dl = Int 33h number whose 
   445                              <1> ;Output: rsi = Pointer to ehci msd device parameter block
   446                              <1> ;        al = EHCI bus the device is on
   447 000016FA 53                  <1>     push rbx    ;Need to temporarily preserve rbx
   448 000016FB 480FB6C2            <1>     movzx rax, dl   ;Move drive number offset into rax
   449 000016FF 48BA10000000000000- <1>     mov rdx, int33TblEntrySize
   449 00001708 00                  <1>
   450 00001709 48F7E2              <1>     mul rdx
   451 0000170C 488D90[BB030000]    <1>     lea rdx, qword [diskDevices + rax]  ;Move address into rdx
   452 00001713 803A00              <1>     cmp byte [rdx], 0   ;Check to see if the device type is 0 (ie doesnt exist)
   453 00001716 740E                <1>     jz .i33egdpbad ;If not, exit
   454 00001718 668B4201            <1>     mov ax, word [rdx + 1]  ;Get address/Bus pair into ax
   455 0000171C E849260000          <1>     call USB.ehciGetDevicePtr   ;Get device pointer into rsi
   456 00001721 88E0                <1>     mov al, ah          ;Get the bus into al
   457 00001723 5B                  <1>     pop rbx
   458 00001724 F8                  <1>     clc
   459 00001725 C3                  <1>     ret
   460                              <1> .i33egdpbad:
   461 00001726 F9                  <1>     stc
   462 00001727 C3                  <1>     ret
   463                              <1> 
   464                              <1> .convertCHSLBA:
   465                              <1> ;Converts a CHS address to LBA
   466                              <1> ;Input: dl = Drive number, if dl < 80h, use diskdpt. If dl > 80h, use hdiskdpt
   467                              <1> ;       ch = Track number, cl = Sector number, dh = Head number 
   468                              <1> ;Output: ecx = LBA address
   469                              <1> ;----------Reference Equations----------
   470                              <1> ;C = LBA / (HPC x SPT)
   471                              <1> ;H = (LBA / SPT) mod HPC
   472                              <1> ;S = (LBA mod SPT) + 1
   473                              <1> ;+++++++++++++++++++++++++++++++++++++++
   474                              <1> ;LBA = (( C x HPC ) + H ) x SPT + S - 1
   475                              <1> ;---------------------------------------
   476                              <1> ;Use diskdpt.spt for sectors per track value! 
   477                              <1> ;1.44Mb geometry => H=2, C=80, S=18
   478 00001728 50                  <1>     push rax
   479 00001729 56                  <1>     push rsi
   480 0000172A 488B3425[AF010000]  <1>     mov rsi, qword [diskDptPtr]
   481 00001732 D0E5                <1>     shl ch, 1   ;Multiply by HPC=2
   482 00001734 00F5                <1>     add ch, dh  ;Add head number
   483 00001736 88E8                <1>     mov al, ch  ;al = ch = (( C x HPC ) + H )
   484 00001738 F66604              <1>     mul byte [rsi + 4]  ;Sectors per track
   485 0000173B 30ED                <1>     xor ch, ch  
   486 0000173D 6601C8              <1>     add ax, cx  ;Add sector number to ax
   487 00001740 66FFC8              <1>     dec ax
   488 00001743 0FB7C8              <1>     movzx ecx, ax
   489 00001746 5E                  <1>     pop rsi
   490 00001747 58                  <1>     pop rax
   491 00001748 C3                  <1>     ret
   492                              <1> .deviceChanged:
   493                              <1> ;Entry: dl = Drive number
   494                              <1> ;Exit: ah = 00h, No device changed occured, CF = CN
   495                              <1> ;      ah = 01h, Device changed occured, CF = CN
   496                              <1> ;      CF = CY if an error occured or device removed
   497 00001749 53                  <1>     push rbx
   498 0000174A 51                  <1>     push rcx
   499 0000174B 52                  <1>     push rdx
   500 0000174C 56                  <1>     push rsi
   501 0000174D 57                  <1>     push rdi
   502 0000174E 55                  <1>     push rbp
   503 0000174F 4150                <1>     push r8
   504 00001751 4151                <1>     push r9
   505 00001753 4152                <1>     push r10
   506 00001755 4153                <1>     push r11
   507                              <1> 
   508 00001757 50                  <1>     push rax
   509                              <1> 
   510 00001758 4C0FB61C25-         <1>     movzx r11, byte [msdStatus] ;Preserve the original status byte
   510 0000175D [A9010000]          <1>
   511 00001761 0FB6EA              <1>     movzx ebp, dl               ;Save the device number in ebp
   512 00001764 E891FFFFFF          <1>     call .i33ehciGetDevicePtr   ;Get MSD dev data block ptr in rsi and bus in al
   513                              <1> ;Check port on device for status change.
   514 00001769 807E0200            <1>     cmp byte [rsi + 2], 0   ;Check if root hub
   515 0000176D 0F8490000000        <1>     jz .dcRoot
   516                              <1> ;External Hub procedure
   517 00001773 668B4601            <1>     mov ax, word [rsi + 1]  ;Get bus and host hub address
   518 00001777 86C4                <1>     xchg al, ah             ;Swap endianness
   519 00001779 4989F1              <1>     mov r9, rsi
   520 0000177C E8E9250000          <1>     call USB.ehciGetDevicePtr   ;Get the hub address in rsi
   521 00001781 88E0                <1>     mov al, ah
   522 00001783 E8111D0000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   523 00001788 C70425[C0030000]00- <1>     mov dword [ehciDataIn], 0
   523 00001790 000000              <1>
   524 00001793 48BAA3000000000004- <1>     mov rdx, 00040000000000A3h ;Get Port status
   524 0000179C 00                  <1>
   525 0000179D 410FB65903          <1>     movzx ebx, byte [r9 + 3]    ;Get the port number from device parameter block
   526 000017A2 48C1E320            <1>     shl rbx, 4*8    ;Shift port number to right position
   527 000017A6 4809D3              <1>     or rbx, rdx
   528 000017A9 0FB64E04            <1>     movzx ecx, byte [rsi + 4]  ;bMaxPacketSize0
   529 000017AD 8A06                <1>     mov al, byte [rsi]      ;Get upstream hub address
   530 000017AF E8DB1E0000          <1>     call USB.ehciGetRequest
   531 000017B4 7231                <1>     jc .dcError
   532                              <1> 
   533 000017B6 49B8-               <1>     mov r8, USB.ehciEnumerateHubPort    ;Store address for if bit is set
   533 000017B8 [F53F000000000000]  <1>
   534 000017C0 8B1425[C0030000]    <1>     mov edx, dword [ehciDataIn]
   535 000017C7 81E200000100        <1>     and edx, 10000h ;Isolate the port status changed bit
   536 000017CD C1EA10              <1>     shr edx, 10h    ;Shift status from bit 16 to bit 0
   537                              <1> .dcNoError:
   538 000017D0 44881C25[A9010000]  <1>     mov byte [msdStatus], r11b  ;Return back the original status byte
   539 000017D8 58                  <1>     pop rax
   540 000017D9 88D4                <1>     mov ah, dl                  ;Place return value in ah
   541 000017DB E814000000          <1>     call .dcRetPop
   542 000017E0 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   543 000017E5 48CF                <1>     iretq
   544                              <1> .dcError:
   545 000017E7 58                  <1>     pop rax ;Just return the old rax value
   546 000017E8 E807000000          <1>     call .dcRetPop
   547 000017ED 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   548 000017F2 48CF                <1>     iretq
   549                              <1> .dcRetPop:
   550 000017F4 415B                <1>     pop r11
   551 000017F6 415A                <1>     pop r10
   552 000017F8 4159                <1>     pop r9
   553 000017FA 4158                <1>     pop r8
   554 000017FC 5D                  <1>     pop rbp
   555 000017FD 5F                  <1>     pop rdi
   556 000017FE 5E                  <1>     pop rsi
   557 000017FF 5A                  <1>     pop rdx
   558 00001800 59                  <1>     pop rcx
   559 00001801 5B                  <1>     pop rbx
   560 00001802 C3                  <1>     ret
   561                              <1> .dcRoot:
   562                              <1> ;Root hub procedure.
   563 00001803 E8911C0000          <1>     call USB.ehciAdjustAsyncSchedCtrlr  ;Reset the bus if needed
   564 00001808 E8CE330000          <1>     call USB.ehciGetOpBase      ;Get opbase into rax
   565 0000180D 0FB65E03            <1>     movzx ebx, byte [rsi + 3]   ;Get MSD port number into dl
   566 00001811 FFCB                <1>     dec ebx                     ;Reduce by one
   567 00001813 678B549844          <1>     mov edx, dword [eax + 4*ebx + ehciportsc]  ;Get port status into eax
   568 00001818 80E202              <1>     and dl, 2h      ;Only save bit 1, status changed bit
   569 0000181B D0EA                <1>     shr dl, 1       ;Shift down by one bit
   570 0000181D EBB1                <1>     jmp short .dcNoError    ;Exit
   571                              <1> .busScan:
   572                              <1> ;Will request the hub bitfield from the RMH the device is plugged in to.
   573                              <1> ;Preserves ALL registers.
   574                              <1> ;dl = Device number
   575                              <1> 
   576                              <1> ;If status changed bit set, call appropriate enumeration function.
   577                              <1> ;If enumeration returns empty device, keep current device data blocks in memory,
   578                              <1> ; but return Int 33h error 40h = Seek operation Failed.
   579 0000181F 50                  <1>     push rax
   580 00001820 53                  <1>     push rbx
   581 00001821 51                  <1>     push rcx
   582 00001822 52                  <1>     push rdx
   583 00001823 56                  <1>     push rsi
   584 00001824 57                  <1>     push rdi
   585 00001825 55                  <1>     push rbp
   586 00001826 4150                <1>     push r8
   587 00001828 4151                <1>     push r9
   588 0000182A 4152                <1>     push r10
   589 0000182C 4153                <1>     push r11
   590                              <1> 
   591 0000182E 4C0FB61C25-         <1>     movzx r11, byte [msdStatus] ;Preserve the original status
   591 00001833 [A9010000]          <1>
   592                              <1> 
   593 00001837 0FB6EA              <1>     movzx ebp, dl               ;Save the device number in ebp
   594 0000183A E8BBFEFFFF          <1>     call .i33ehciGetDevicePtr   ;Get MSD dev data block ptr in rsi and bus in al
   595                              <1> ;Check port on device for status change.
   596 0000183F 807E0200            <1>     cmp byte [rsi + 2], 0   ;Check if root hub
   597 00001843 0F84CE000000        <1>     jz .bsRoot
   598                              <1> ;External Hub procedure
   599 00001849 668B4601            <1>     mov ax, word [rsi + 1]  ;Get bus and host hub address
   600 0000184D 86C4                <1>     xchg al, ah             ;Swap endianness
   601 0000184F 4989F1              <1>     mov r9, rsi
   602 00001852 E813250000          <1>     call USB.ehciGetDevicePtr   ;Get the hub address in rsi
   603 00001857 88E0                <1>     mov al, ah
   604 00001859 E83B1C0000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   605 0000185E C70425[C0030000]00- <1>     mov dword [ehciDataIn], 0
   605 00001866 000000              <1>
   606 00001869 48BAA3000000000004- <1>     mov rdx, 00040000000000A3h ;Get Port status
   606 00001872 00                  <1>
   607 00001873 410FB65903          <1>     movzx ebx, byte [r9 + 3]    ;Get the port number from device parameter block
   608 00001878 48C1E320            <1>     shl rbx, 4*8    ;Shift port number to right position
   609 0000187C 4809D3              <1>     or rbx, rdx
   610 0000187F 0FB64E04            <1>     movzx ecx, byte [rsi + 4]  ;bMaxPacketSize0
   611 00001883 8A06                <1>     mov al, byte [rsi]      ;Get upstream hub address
   612 00001885 E8051E0000          <1>     call USB.ehciGetRequest
   613 0000188A 722C                <1>     jc .bsErrorExit
   614                              <1> 
   615 0000188C 49B8-               <1>     mov r8, USB.ehciEnumerateHubPort    ;Store address for if bit is set
   615 0000188E [F53F000000000000]  <1>
   616 00001896 8B1425[C0030000]    <1>     mov edx, dword [ehciDataIn]
   617 0000189D 81E201000100        <1>     and edx, 10001h
   618 000018A3 F7C200000100        <1>     test edx, 10000h
   619 000018A9 752A                <1>     jnz .bsClearPortChangeStatus    ;If top bit set, clear port change bit
   620                              <1> .bsret:
   621 000018AB F6C201              <1>     test dl, 1h
   622 000018AE 7418                <1>     jz .bsrExit06h  ;Bottom bit not set, exit media changed Error (edx = 00000h)
   623                              <1> .bsexit:    ;The fall through is (edx = 00001h), no change to dev in port
   624 000018B0 44881C25[A9010000]  <1>     mov byte [msdStatus], r11b  ;Get back the original status byte
   625                              <1> .bsErrorExit:
   626 000018B8 415B                <1>     pop r11
   627 000018BA 415A                <1>     pop r10
   628 000018BC 4159                <1>     pop r9
   629 000018BE 4158                <1>     pop r8
   630 000018C0 5D                  <1>     pop rbp
   631 000018C1 5F                  <1>     pop rdi
   632 000018C2 5E                  <1>     pop rsi
   633 000018C3 5A                  <1>     pop rdx
   634 000018C4 59                  <1>     pop rcx
   635 000018C5 5B                  <1>     pop rbx
   636 000018C6 58                  <1>     pop rax
   637 000018C7 C3                  <1>     ret
   638                              <1> .bsrExit06h:    ;If its clear, nothing in port, return media changed error
   639 000018C8 49BB06000000000000- <1>     mov r11, 06h ;Change the msdStatus byte, media changed or removed
   639 000018D1 00                  <1>
   640 000018D2 F9                  <1>     stc
   641 000018D3 EBDB                <1>     jmp short .bsexit
   642                              <1> .bsClearPortChangeStatus:
   643 000018D5 52                  <1>     push rdx
   644 000018D6 C70425[C0030000]00- <1>     mov dword [ehciDataIn], 0
   644 000018DE 000000              <1>
   645 000018E1 48BA23011000000000- <1>     mov rdx, 0000000000100123h  ;Set Port status
   645 000018EA 00                  <1>
   646 000018EB 410FB65903          <1>     movzx ebx, byte [r9 + 3]    ;Get the port number from device parameter block
   647 000018F0 48C1E320            <1>     shl rbx, 4*8    ;Shift port number to right position
   648 000018F4 4809D3              <1>     or rbx, rdx
   649 000018F7 0FB64E04            <1>     movzx ecx, byte [rsi + 4]  ;bMaxPacketSize0
   650 000018FB 8A06                <1>     mov al, byte [rsi]      ;Get device address
   651 000018FD E8EE1C0000          <1>     call USB.ehciSetNoData
   652 00001902 5A                  <1>     pop rdx
   653 00001903 72B3                <1>     jc .bsErrorExit  ;If error exit by destroying the old msdStatus
   654                              <1> 
   655 00001905 F6C201              <1>     test dl, 1h
   656 00001908 74BE                <1>     jz .bsrExit06h  ;Bottom bit not set, exit media changed error (edx = 10000h)
   657 0000190A EB4E                <1>     jmp short .bsCommonEP   ;Else new device in port needs enum (edx = 10001h)
   658                              <1> .bsRtNoDev:
   659 0000190C 67814C984402000000  <1>     or dword [eax + 4*ebx + ehciportsc], 2  ;Clear the bit
   660 00001915 EBB1                <1>     jmp short .bsrExit06h   ;Exit with seek error
   661                              <1> .bsRoot:
   662                              <1> ;Root hub procedure.
   663 00001917 E87D1B0000          <1>     call USB.ehciAdjustAsyncSchedCtrlr  ;Reset the bus if needed
   664 0000191C E8BA320000          <1>     call USB.ehciGetOpBase      ;Get opbase into rax
   665 00001921 0FB65E03            <1>     movzx ebx, byte [rsi + 3]   ;Get MSD port number into dl
   666 00001925 FFCB                <1>     dec ebx                     ;Reduce by one
   667 00001927 678B549844          <1>     mov edx, dword [eax + 4*ebx + ehciportsc]  ;Get port status into eax
   668 0000192C 80E203              <1>     and dl, 3h      ;Only save bottom two bits
   669 0000192F 84D2                <1>     test dl, dl     ;No device in port  (dl=00b)
   670 00001931 7495                <1>     jz .bsrExit06h  ;Exit media changed error
   671 00001933 FECA                <1>     dec dl          ;Device in port     (dl=01b)
   672 00001935 0F8475FFFFFF        <1>     jz .bsexit      ;Exit, no status change
   673 0000193B FECA                <1>     dec dl          ;New device, Device removed from port   (dl=10b)
   674 0000193D 74CD                <1>     jz .bsRtNoDev   ;Clear state change bit and exit Seek error
   675                              <1> ;Fallthrough case, New device, Device inserted in port  (dl=11b)
   676 0000193F 67814C984402000000  <1>     or dword [eax + 4*ebx + ehciportsc], 2  ;Clear the state change bit
   677 00001948 49B8-               <1>     mov r8,  USB.ehciEnumerateRootPort   ;The enumeration function to call
   677 0000194A [B238000000000000]  <1>
   678 00001952 4989F1              <1>     mov r9, rsi        ;Store the device pointer in r9
   679 00001955 BE00000000          <1>     mov esi, 0         ;Store 0 for root hub parameter block                 
   680                              <1> .bsCommonEP:
   681                              <1> ;Invalidate USB MSD and Int 33h table entries for device
   682                              <1> ;r9 has device pointer block and rsi has host hub pointer (if on RMH)
   683 0000195A 66418B19            <1>     mov bx, word [r9]          ;bl = Address, bh = Bus
   684 0000195E 88FE                <1>     mov dh, bh                 ;dh = Bus
   685 00001960 418A5103            <1>     mov dl, byte [r9 + 3]      ;dl = Device Port
   686 00001964 4D0FB65102          <1>     movzx r10, byte [r9 + 2]   ;r10b = Host hub address (0 = Root hub)
   687 00001969 6689D8              <1>     mov ax, bx                 ;ax needs a copy for RemoveDevFromTables
   688 0000196C E884220000          <1>     call USB.ehciRemoveDevFromTables    ;Removes device from USB tables
   689 00001971 87EA                <1>     xchg ebp, edx                       ;device number -><- bus/dev pair
   690 00001973 E8E5000000          <1>     call .i33removeFromTable            ;Removes device from Int 33h table
   691 00001978 87EA                <1>     xchg ebp, edx                       ;bus/dev pair -><- device number
   692                              <1> ;Devices enumerated, time to reenumerate!
   693 0000197A B903000000          <1>     mov ecx, 3
   694 0000197F 85F6                <1>     test esi, esi   ;Is device on root hub?
   695 00001981 7502                <1>     jnz .bsr0
   696 00001983 FECA                <1>     dec dl  ;Recall that device port must be device port - 1 for Root hub enum
   697                              <1> .bsr0:
   698 00001985 41FFD0              <1>     call r8
   699 00001988 7410                <1>     jz .bsr1
   700 0000198A 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h   ;General Controller Failure?
   701 00001992 7439                <1>     je .bsrFail
   702 00001994 FFC9                <1>     dec ecx
   703 00001996 75ED                <1>     jnz .bsr0
   704 00001998 EB33                <1>     jmp short .bsrFail
   705                              <1> .bsr1:
   706 0000199A 4C87CE              <1>     xchg r9, rsi    ;MSD parameter blk -><- Hub parameter blk (or 0 if root)
   707 0000199D E8EE280000          <1>     call USB.ehciMsdInitialise
   708 000019A2 84C0                <1>     test al, al
   709 000019A4 7527                <1>     jnz .bsrFail    ;Exit if the device failed to initialise
   710                              <1> ;Multiply dl by int33TblEntrySize to get the address to write Int33h table
   711 000019A6 89EA                <1>     mov edx, ebp    ;Move the device number into edx (dl)
   712 000019A8 B810000000          <1>     mov eax, int33TblEntrySize  ;Zeros the upper bytes
   713 000019AD F6E2                <1>     mul dl  ;Multiply dl by al. ax has offset into diskDevices table
   714 000019AF 4805[BB030000]      <1>     add rax, diskDevices
   715 000019B5 4889C7              <1>     mov rdi, rax    ;Put the offset into the table into rdi
   716 000019B8 E820000000          <1>     call .deviceInit
   717 000019BD 84C0                <1>     test al, al
   718 000019BF 0F84EBFEFFFF        <1>     jz .bsexit  ;Successful, exit!
   719 000019C5 3C03                <1>     cmp al, 3
   720 000019C7 0F84E3FEFFFF        <1>     je .bsexit  ;Invalid device type, but ignore for now
   721                              <1> .bsrFail:
   722 000019CD 49BB20000000000000- <1>     mov r11, 20h ;Change the msdStatus byte to Gen. Ctrlr Failure
   722 000019D6 00                  <1>
   723 000019D7 F9                  <1>     stc
   724 000019D8 E9D3FEFFFF          <1>     jmp .bsexit
   725                              <1> .deviceInit:    
   726                              <1> ;Further initialises an MSD device for use with the int33h interface.
   727                              <1> ;Adds device data to the allocated int33h data table.
   728                              <1> ;Input: rdi = device diskDevice ptr (given by device number*int33TblEntrySize)
   729                              <1> ;       rsi = device MSDDevTbl entry (USB address into getDevPtr)
   730                              <1> ;Output: al = 0 : Device added successfully
   731                              <1> ;        al = 1 : Bus error
   732                              <1> ;        al = 2 : Read Capacities/Reset recovary failed after 10 attempts
   733                              <1> ;        al = 3 : Invalid device type (Endpoint size too small, temporary)
   734                              <1> ;   rax destroyed
   735                              <1> ;IF DEVICE HAS MAX ENDPOINT SIZE 64, DO NOT WRITE IT TO INT 33H TABLES
   736 000019DD 51                  <1>     push rcx
   737 000019DE B003                <1>     mov al, 3   ;Invalid EP size error code
   738 000019E0 66817E090002        <1>     cmp word [rsi + 9], 200h  ;Check IN max EP packet size
   739 000019E6 7573                <1>     jne .deviceInitExit
   740 000019E8 66817E0C0002        <1>     cmp word [rsi + 12], 200h ;Check OUT max EP packet size
   741 000019EE 756B                <1>     jne .deviceInitExit
   742                              <1> 
   743 000019F0 8A4601              <1>     mov al, byte [rsi + 1]  ;Get bus number
   744 000019F3 E8A11A0000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   745 000019F8 B001                <1>     mov al, 1       ;Bus error exit
   746 000019FA 725F                <1>     jc .deviceInitExit
   747 000019FC B90A000000          <1>     mov ecx, 10
   748                              <1> .deviceInitReadCaps:
   749 00001A01 E82E2E0000          <1>     call USB.ehciMsdBOTReadCapacity10   ;Preserve al error code
   750 00001A06 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h   ;General Controller Failure
   751 00001A0E 744B                <1>     je .deviceInitExit
   752 00001A10 E83D2A0000          <1>     call USB.ehciMsdBOTCheckTransaction
   753 00001A15 6685C0              <1>     test ax, ax     ;Clears CF
   754 00001A18 7418                <1>     jz .deviceInitWriteTableEntry   ;Success, write table entry
   755 00001A1A E853290000          <1>     call USB.ehciMsdBOTResetRecovery    ;Just force a device reset
   756 00001A1F 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h   ;General Controller Failure
   757 00001A27 7432                <1>     je .deviceInitExit
   758 00001A29 FFC9                <1>     dec ecx
   759 00001A2B 75D4                <1>     jnz .deviceInitReadCaps
   760 00001A2D B002                <1>     mov al, 2   ;Non bus error exit
   761 00001A2F F9                  <1>     stc ;Set carry, device failed to initialise properly
   762 00001A30 EB29                <1>     jmp short .deviceInitExit
   763                              <1> .deviceInitWriteTableEntry:
   764 00001A32 C60701              <1>     mov byte [rdi], 1   ;MSD USB device signature
   765                              <1> 
   766 00001A35 668B06              <1>     mov ax, word [rsi]  ;Get address and bus into ax
   767 00001A38 66894701            <1>     mov word [rdi + 1], ax  ;Store in Int 33h table
   768                              <1> 
   769 00001A3C 8B0425[C4030000]    <1>     mov eax, dword [ehciDataIn + 4] ;Get LBA block size
   770 00001A43 0FC8                <1>     bswap eax
   771 00001A45 894703              <1>     mov dword [rdi + 3], eax
   772                              <1> 
   773 00001A48 8B0425[C0030000]    <1>     mov eax, dword [ehciDataIn] ;Get zx qword LastLBA
   774 00001A4F 0FC8                <1>     bswap eax
   775 00001A51 48894707            <1>     mov qword [rdi + 7], rax
   776                              <1> 
   777 00001A55 C6470F02            <1>     mov byte [rdi + 15], 2  ;Temporary, only accept devices with 200h EP sizes
   778 00001A59 30C0                <1>     xor al, al 
   779                              <1> .deviceInitExit:
   780 00001A5B 59                  <1>     pop rcx
   781 00001A5C C3                  <1>     ret
   782                              <1> .i33removeFromTable:
   783                              <1> ;Uses Int 33h device number to invalidate the device table entry
   784                              <1> ;Input: dl = Device number
   785                              <1> ;Output: Nothing, device entry invalidated
   786 00001A5D 50                  <1>     push rax
   787 00001A5E 52                  <1>     push rdx
   788 00001A5F B010                <1>     mov al, int33TblEntrySize
   789 00001A61 F6E2                <1>     mul dl  ;Multiply tbl entry size by device number, offset in ax
   790 00001A63 480FB7C0            <1>     movzx rax, ax
   791 00001A67 C680[BB030000]00    <1>     mov byte [diskDevices + rax], 0 ;Invalidate entry
   792 00001A6E 5A                  <1>     pop rdx
   793 00001A6F 58                  <1>     pop rax
   794 00001A70 C3                  <1>     ret
   795                              <1> 
   796                              <1> diskdpt:   ;Imaginary floppy disk parameter table with disk geometry. 
   797                              <1> ;For more information on layout, see Page 3-26 of IBM BIOS ref
   798                              <1> ;Assume 2 head geometry due to emulating a floppy drive
   799 00001A71 00                  <1> .fsb:   db 0    ;First specify byte
   800 00001A72 00                  <1> .ssb:   db 0    ;Second specify byte
   801 00001A73 00                  <1> .tto:   db 0    ;Number of timer ticks to wait before turning off drive motors
   802 00001A74 02                  <1> .bps:   db 2    ;Number of bytes per sector in multiples of 128 bytes, editable.
   803                              <1>                 ; 0 = 128 bytes, 1 = 256 bytes, 2 = 512 bytes etc
   804                              <1>                 ;Left shift 128 by bps to get the real bytes per sector
   805 00001A75 09                  <1> .spt:   db 9    ;Sectors per track
   806 00001A76 00                  <1> .gpl:   db 0    ;Gap length
   807 00001A77 00                  <1> .dtl:   db 0    ;Data length
   808 00001A78 00                  <1> .glf:   db 0    ;Gap length for format
   809 00001A79 FF                  <1> .fbf:   db 0FFh ;Fill byte for format
   810 00001A7A 00                  <1> .hst:   db 0    ;Head settle time in ms
   811 00001A7B 01                  <1> .mst:   db 1    ;Motor startup time in multiples of 1/8 of a second.
   812                              <1> 
   813                              <1> fdiskdpt: ;Fixed drive table, only cyl, nhd and spt are valid. 
   814                              <1> ;           This schema gives roughly 8.42Gb of storage.
   815                              <1> ;           All fields with 0 in the comments are reserved post XT class BIOS.
   816 00001A7C 0004                <1> .cyl:   dw  1024    ;1024 cylinders
   817 00001A7E FF                  <1> .nhd:   db  255     ;255 heads
   818 00001A7F 0000                <1> .rwc:   dw  0       ;Reduced write current cylinder, 0
   819 00001A81 FFFF                <1> .wpc:   dw  -1      ;Write precompensation number (-1=none)
   820 00001A83 00                  <1> .ecc:   db  0       ;Max ECC burst length, 0
   821 00001A84 08                  <1> .ctl:   db  08h     ;Control byte (more than 8 heads)
   822 00001A85 00                  <1> .sto:   db  0       ;Standard timeout, 0
   823 00001A86 00                  <1> .fto:   db  0       ;Formatting timeout, 0
   824 00001A87 00                  <1> .tcd:   db  0       ;Timeout for checking drive, 0
   825 00001A88 FF03                <1> .clz:   dw  1023    ;Cylinder for landing zone
   826 00001A8A 3F                  <1> .spt:   db  63      ;Sectors per track
   827 00001A8B 00                  <1> .res:   db  0       ;Reserved byte
   828                              <1> ;------------------------End of Interrupt------------------------
    96                                  %include "./Resident/Services/Int34h.asm"
    97                              <1> ;------------------Serial IO Interrupts Int 34h------------------
    98                              <1> serial_baud_table:    ;DLAB devisor values
    99 00001A8C 1704                <1>     dw    0417h    ;110 baud,     00
   100 00001A8E 0003                <1>     dw    0300h    ;150 baud,     01
   101 00001A90 8001                <1>     dw    0180h    ;300 baud,     02
   102 00001A92 C000                <1>     dw    00C0h    ;600 baud,     03
   103 00001A94 6000                <1>     dw    0060h    ;1200 baud,    04
   104 00001A96 3000                <1>     dw    0030h    ;2400 baud,    05 
   105 00001A98 1800                <1>     dw    0018h    ;4800 baud,    06
   106 00001A9A 0C00                <1>     dw    000Ch    ;9600 baud,    07
   107 00001A9C 0600                <1>     dw    0006h    ;19200 baud,   08
   108 00001A9E 0300                <1>     dw    0003h    ;38400 baud,   09
   109 00001AA0 0200                <1>     dw    0002h    ;57600 baud,   0A
   110 00001AA2 0100                <1>     dw    0001h    ;115200 baud,  0B
   111                              <1> serial_abt: ;serial port address base table. List of supported addresses!
   112 00001AA4 F803                <1>     dw com1_base
   113 00001AA6 F802                <1>     dw com2_base
   114 00001AA8 E803                <1>     dw com3_base
   115 00001AAA E802                <1>     dw com4_base
   116                              <1> serial_io:
   117 00001AAC 52                  <1>     push rdx        ;Save upper 7 bytes
   118 00001AAD 6681FA0400          <1>     cmp dx, 4        ;Check to see if the selected com port is within range
   119 00001AB2 7D5A                <1>     jge .sbadexit1    ;Bad dx value
   120 00001AB4 480FB7D2            <1>     movzx rdx, dx    ;zero the upper 6 bytes of rdx
   121 00001AB8 668B9412[67000000]  <1>     mov dx, word [com_addresses + rdx*2]    ;get serial port base addr into dx
   122 00001AC0 6685D2              <1>     test dx, dx        ;is the address zero?
   123 00001AC3 744D                <1>     jz .sbadexit2    ;com port doesnt exist
   124 00001AC5 50                  <1>     push rax        ;Saves upper 6 bytes
   125 00001AC6 52                  <1>     push rdx        ;Save base for exit algorithm
   126                              <1> 
   127 00001AC7 84E4                <1>     test ah, ah
   128 00001AC9 7451                <1>     jz .userinit
   129 00001ACB FECC                <1>     dec ah 
   130 00001ACD 0F848A000000        <1>     jz .transmit
   131 00001AD3 FECC                <1>     dec ah
   132 00001AD5 0F84B7000000        <1>     jz .recieve
   133 00001ADB FECC                <1>     dec ah
   134 00001ADD 741E                <1>     jz .sioexit    ;since this puts the status into ax
   135 00001ADF FECC                <1>     dec ah
   136 00001AE1 0F842A010000        <1>     jz .extinit
   137 00001AE7 FECC                <1>     dec ah
   138 00001AE9 0F8422010000        <1>     jz .extstatus
   139 00001AEF FECC                <1>     dec ah
   140 00001AF1 0F841A010000        <1>     jz .custombaud
   141                              <1> 
   142                              <1> .badin:
   143 00001AF7 5A                  <1>     pop rdx
   144 00001AF8 58                  <1>     pop rax
   145 00001AF9 B480                <1>     mov ah, 80h    ;Invalid Function
   146 00001AFB EB17                <1>     jmp short .sbadcommon
   147                              <1> .sioexit:
   148 00001AFD 5A                  <1>     pop rdx   ;Get base back, to know exact offset
   149 00001AFE 58                  <1>     pop rax        ;Return the upper bytes of rax into rax
   150 00001AFF 6681C20500          <1>     add dx, 5    ;point to the line status register
   151 00001B04 EC                  <1>     in al, dx    ;get status
   152 00001B05 88C4                <1>     mov ah, al    ;save line status in ah
   153 00001B07 66FFC2              <1>     inc dx        ;point to the modem status register
   154 00001B0A EC                  <1>     in al, dx    ;save modem status in al
   155 00001B0B 5A                  <1>     pop rdx
   156 00001B0C 48CF                <1>     iretq
   157                              <1> 
   158                              <1> .sbadexit1:    
   159 00001B0E B0FF                <1>     mov al, 0FFh    ;dx was too large
   160 00001B10 EB02                <1>     jmp short .sbadcommon
   161                              <1> .sbadexit2:
   162 00001B12 B0FE                <1>     mov al, 0FEh    ;COM port doesnt exist
   163                              <1> .sbadcommon:
   164 00001B14 5A                  <1>     pop rdx        ;return original rdx value
   165 00001B15 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   166 00001B1A 48CF                <1>     iretq
   167                              <1> 
   168                              <1> .userinit:
   169 00001B1C 88C4                <1>     mov ah, al    ;save the data in ah for the baud rate
   170 00001B1E 6681C20300          <1>     add dx, 3    ;Point to the line control register
   171 00001B23 241F                <1>     and al, 00011111b   ;Zero out the upper three bits
   172 00001B25 0C80                <1>     or al, 10000000b    ;Set the DLAB bit
   173 00001B27 EE                  <1>     out dx, al 
   174                              <1> 
   175 00001B28 6681EA0300          <1>     sub dx, 3    ;return point to base
   176 00001B2D 66C1E80D            <1>     shr ax, 0Dh  ;0Dh=move hi bits of hi word into low bits of low word
   177 00001B31 480FB6C0            <1>     movzx rax, al    ;zero upper 7 bytes of rax
   178 00001B35 3C07                <1>     cmp al, 00000111b    ;Check if set to 9600baud (for extension)
   179 00001B37 7414                <1>     je .ui2
   180                              <1> .ui1:
   181 00001B39 668B80[8C1A0000]    <1>     mov ax, word [serial_baud_table + rax]    ;rax is the offset into the table
   182 00001B40 66EF                <1>     out dx, ax    ;dx points to base with dlab on, set divisor! (word out)
   183                              <1> ;Disable DLAB bit now
   184 00001B42 6681C20300          <1>     add dx, 3
   185 00001B47 EC                  <1>     in al, dx    ;Get the Line Control Register (preserving the written data)
   186 00001B48 247F                <1>     and al, 01111111b    ;Clear the DLAB bit, preserve the other bits
   187 00001B4A EE                  <1>     out dx, al    ;Clear the bit
   188                              <1> 
   189 00001B4B EBB0                <1>     jmp short .sioexit    ;exit!
   190                              <1> .ui2:    ;Check r8b to make sure it is 0-4 inclusive.
   191 00001B4D 4180F804            <1>     cmp r8b, 4    ;greater than four defaults to 4
   192 00001B51 7F05                <1>     jg .ui3    ;r8b is greater than four, error!
   193 00001B53 4400C0              <1>     add al, r8b    ;increase the offset into the table
   194 00001B56 EBE1                <1>     jmp short .ui1    ;return to the get value from table
   195                              <1> .ui3:    ;If r8b greater than 4, default to 4
   196 00001B58 41B004              <1>     mov r8b, 4   ;Error caught, user used a value greater than 4, default to 4
   197 00001B5B EBF0                <1>     jmp short .ui2    ;return to checker
   198                              <1> 
   199                              <1> .transmit:
   200 00001B5D 6681C20500          <1>     add dx, 5    ;dx contains base address, point to Line status register
   201 00001B62 88C4                <1>     mov ah, al   ;temp save char to send in ah
   202 00001B64 51                  <1>     push rcx
   203 00001B65 6631C9              <1>     xor cx, cx
   204                              <1> .t1:
   205 00001B68 66FFC9              <1>     dec cx
   206 00001B6B 7410                <1>     jz .t2       ;timeout
   207 00001B6D EC                  <1>     in al, dx    ;get the LSR byte in
   208 00001B6E 2420                <1>     and al, 00100000b    ;Check the transmit holding register empty bit
   209 00001B70 74F6                <1>     jz .t1    ;if this is zero, keep looping until it is 1 (aka empty)
   210                              <1> 
   211 00001B72 59                  <1>     pop rcx
   212 00001B73 88E0                <1>     mov al, ah   ;return data byte down to al
   213 00001B75 6681EA0500          <1>     sub dx, 5    ;reaim to the IO port
   214 00001B7A EE                  <1>     out dx, al   ;output the data byte to the serial line!!
   215 00001B7B EB80                <1>     jmp short .sioexit
   216                              <1> .t2:
   217 00001B7D 59                  <1>     pop rcx
   218 00001B7E 5A                  <1>     pop rdx      ;Get base back, to know exact offset
   219 00001B7F 58                  <1>     pop rax      ;Return the upper bytes of rax into rax
   220 00001B80 6681C20500          <1>     add dx, 5    ;point to the line status register
   221 00001B85 EC                  <1>     in al, dx    ;get status
   222 00001B86 88C4                <1>     mov ah, al   ;save line status in ah
   223 00001B88 80E480              <1>     and ah, 80h  ;Set error bit (bit 7)
   224 00001B8B 66FFC2              <1>     inc dx       ;point to the modem status register
   225 00001B8E EC                  <1>     in al, dx    ;save modem status in al
   226 00001B8F 5A                  <1>     pop rdx
   227 00001B90 48CF                <1>     iretq
   228                              <1> .recieve:
   229                              <1>     ;Gets byte out of appropriate buffer head and places it in al
   230 00001B92 5A                  <1>     pop rdx
   231 00001B93 58                  <1>     pop rax        
   232 00001B94 5A                  <1>     pop rdx    ;Undoes the address entry and returns COM port number into dx    
   233 00001B95 52                  <1>     push rdx   ;Save it once more
   234 00001B96 53                  <1>     push rbx
   235 00001B97 480FB7D2            <1>     movzx rdx, dx
   236                              <1> 
   237 00001B9B FA                  <1>     cli    ;Entering a critical area, interrupts off
   238 00001B9C 488B1CD5[AF000000]  <1>     mov rbx, qword [comX_buf_head + rdx*8]
   239 00001BA4 483B1CD5[CF000000]  <1>     cmp rbx, qword [comX_buf_tail + rdx*8]
   240 00001BAC 7426                <1>     je .r1    ;We are at the head of the buffer, signal error, no char to get.
   241 00001BAE 8A03                <1>     mov al, byte [rbx]    ;store byte into al
   242 00001BB0 88C4                <1>     mov ah, al ;temp save al in ah
   243 00001BB2 48FFC3              <1>     inc rbx    ;move buffer head
   244 00001BB5 483B1CD5[0F010000]  <1>     cmp rbx, qword [comX_buf_end + rdx*8]    ;are we at the end of the buffer
   245 00001BBD 7508                <1>     jne .r0    ;no, save new position
   246 00001BBF 488B1CD5[EF000000]  <1>     mov rbx, qword [comX_buf_start + rdx*8]  ;yes, wrap around
   247                              <1> .r0:
   248 00001BC7 48891CD5[AF000000]  <1>     mov qword [comX_buf_head + rdx*8], rbx   ;save new buffer position
   249 00001BCF FB                  <1>     sti
   250 00001BD0 5B                  <1>     pop rbx
   251 00001BD1 5A                  <1>     pop rdx
   252 00001BD2 EB07                <1>     jmp short .rexit
   253                              <1> .r1:
   254 00001BD4 FB                  <1>     sti
   255 00001BD5 B480                <1>     mov ah, 80h    ;Equivalent to a timeout error.
   256 00001BD7 5B                  <1>     pop rbx
   257 00001BD8 5A                  <1>     pop rdx
   258 00001BD9 48CF                <1>     iretq
   259                              <1> 
   260                              <1> .rexit:    ;Line status in ah. Char was got so ensure DTR is now high again!
   261 00001BDB 668B9412[67000000]  <1>     mov dx, word [com_addresses + rdx*2]    ;Get the base address back into dx
   262 00001BE3 6681C20400          <1>     add dx, 4    ;point to the modem control register
   263 00001BE8 EC                  <1>     in al, dx
   264 00001BE9 A801                <1>     test al, 1   ;Test DTR is clear
   265 00001BEB 740B                <1>     jz .getscratch
   266                              <1> .gsret:
   267 00001BED 0C01                <1>     or al, 1    ;Set DTR bit on again
   268 00001BEF EE                  <1>     out dx, al
   269 00001BF0 66FFC2              <1>     inc dx      ;point to the line status register
   270 00001BF3 EC                  <1>     in al, dx   ;get status
   271 00001BF4 86E0                <1>     xchg ah, al ;swap them around
   272 00001BF6 48CF                <1>     iretq
   273                              <1> .getscratch:
   274 00001BF8 0C10                <1>     or al, 00010000b    ;Enable loopback mode with DTR on
   275 00001BFA EE                  <1>     out dx, al
   276 00001BFB 6681C20300          <1>     add dx, 3    ;Point to scratch register
   277 00001C00 EC                  <1>     in al, dx    ;Get overrun char
   278 00001C01 6681EA0700          <1>     sub dx, 7    ;transmit register
   279 00001C06 EE                  <1>     out dx, al   ;send the char (no need to play with DTR, we sending to 
   280                              <1>                  ; ourselves, generating an INT)
   281 00001C07 6681C20400          <1>     add dx, 4    ;point back to modem control register again!
   282 00001C0C EC                  <1>     in al, dx
   283 00001C0D 24EF                <1>     and al, 11101111b    ;Clear loopback mode, DTR bit gets set in main proc
   284 00001C0F EBDC                <1>     jmp short .gsret    
   285                              <1> 
   286                              <1> .extinit:
   287                              <1> .extstatus:
   288                              <1> .custombaud:
   289 00001C11 5A                  <1>     pop rdx
   290 00001C12 58                  <1>     pop rax
   291 00001C13 B486                <1>     mov ah, 86h
   292 00001C15 E9FAFEFFFF          <1>     jmp .sbadcommon
   293                              <1> ;------------------------End of Interrupt------------------------
    97                                  %include "./Resident/Services/Int35h.asm"
    98                              <1> ;-------------------Misc IO Interrupts Int 35h-------------------
    99                              <1> ;Misc features int that can be used for a variety of things.
   100                              <1> ;This will break compatibility with BIOS, since hopefully more 
   101                              <1> ; advanced features will be present.
   102                              <1> ;
   103                              <1> ; ah = 0 - 82h System Reserved
   104                              <1> ; ah = 83h -> Reserved, Event wait
   105                              <1> ; ah = 86h -> Delay rcx = # of milliseconds to wait
   106                              <1> ; ah = 88h -> Basic High Mem Map 1 (First 16MB only)
   107                              <1> ; ah = 89h to C4h - System Reserved
   108                              <1> ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   109                              <1> ; ah = C5h - FFh BIOS device class dispatcher extensions
   110                              <1> ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   111                              <1> ; ah = C5h -> Misc sys function dispatcher      (3 funct)
   112                              <1> ; ah = E8h -> Adv mem management sys dispatcher (4 funct)
   113                              <1> ; ah = F0h -> Sys data table dispatcher         (15 funct)
   114                              <1> ; ah = F1h -> EHCI system dispatcher            (4 funct)
   115                              <1> ;----------------------------------------------------------------
   116                              <1> misc_io:
   117 00001C1A 80FC86              <1>     cmp ah, 86h
   118 00001C1D 722F                <1>     jb .badFunction
   119 00001C1F 7436                <1>     jz .delay
   120 00001C21 80FC88              <1>     cmp ah, 88h
   121 00001C24 0F84B0000000        <1>     jz .memory16MB
   122                              <1> 
   123 00001C2A 80FCC5              <1>     cmp ah, 0C5h    ;Miscellaneous function dispatcher
   124 00001C2D 0F84B1000000        <1>     jz .miscDispatcher 
   125 00001C33 80FCE8              <1>     cmp ah, 0E8h    ;Advanced memory management system dispatcher
   126 00001C36 0F847E010000        <1>     jz .advSysMemDispatcher
   127 00001C3C 80FCF0              <1>     cmp ah, 0F0h    ;System table dispatcher
   128 00001C3F 0F84F3010000        <1>     jz .sysDataTableDispatcher
   129 00001C45 80FCF1              <1>     cmp ah, 0F1h    ;EHCI function dispatcher
   130 00001C48 0F843E030000        <1>     jz .ehciFunctionDispatcher
   131                              <1> .badFunction:
   132 00001C4E B480                <1>     mov ah, 80h    ;Invalid Function
   133                              <1> .badout:
   134 00001C50 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   135 00001C55 48CF                <1>     iretq
   136                              <1> 
   137                              <1> .delay:
   138                              <1> ;Input: rcx = milliseconds to wait (rcx < 7FFFFFFFFFFFFFFFh)
   139                              <1> ;Init IRQ 8, wait for loop to end, deactivate
   140 00001C57 FA                  <1>     cli    ;NO INTERRUPTS
   141 00001C58 4885C9              <1>     test rcx, rcx
   142 00001C5B 747B                <1>     jz .return  ;Can avoid sti since we return caller flags
   143 00001C5D 50                  <1>     push rax
   144                              <1> ;Ensure PIC is saved
   145 00001C5E E421                <1>     in al, pic1data
   146 00001C60 50                  <1>     push rax    ;Save unaltered pic1 value
   147 00001C61 24FB                <1>     and al, 0FBh ;Ensure Cascading pic1 line unmasked
   148 00001C63 E621                <1>     out pic1data, al
   149                              <1> 
   150 00001C65 E4A1                <1>     in al, pic2data
   151 00001C67 50                  <1>     push rax    ;Save unaltered pic2 value
   152 00001C68 24FE                <1>     and al, 0FEh ;Ensure line 0 of pic2 unmasked 
   153 00001C6A E6A1                <1>     out pic2data, al
   154                              <1> 
   155 00001C6C 48890C25[3B010000]  <1>     mov qword [rtc_ticks], rcx
   156 00001C74 66B88B8B            <1>     mov ax, 8B8Bh       
   157 00001C78 E670                <1>     out cmos_base, al   ;NMI disabled
   158 00001C7A E680                <1>     out waitp, al
   159 00001C7C EB00                <1>     jmp short $+2
   160 00001C7E E471                <1>     in al, cmos_data
   161 00001C80 247F                <1>     and al, 7Fh    ;Clear upper bit
   162 00001C82 0C40                <1>     or al, 40h    ;Set periodic interrupt bit
   163 00001C84 86E0                <1>     xchg ah, al
   164 00001C86 E670                <1>     out cmos_base, al
   165 00001C88 E680                <1>     out waitp, al
   166 00001C8A EB00                <1>     jmp short $+2
   167 00001C8C 86C4                <1>     xchg al, ah
   168 00001C8E E671                <1>     out cmos_data, al
   169 00001C90 B00D                <1>     mov al, 0Dh     ;Read Register D and reenable NMI
   170 00001C92 E670                <1>     out cmos_base, al
   171 00001C94 E680                <1>     out waitp, al    ;allow one io cycle to run
   172 00001C96 EB00                <1>     jmp short $+2
   173 00001C98 E471                <1>     in al, cmos_data  
   174 00001C9A FB                  <1>     sti        ;Reenable interrupts
   175                              <1> .loopdelay:
   176 00001C9B F390                <1>     pause ;allow an interrupt to occur
   177 00001C9D 48813C25[3B010000]- <1>     cmp qword [rtc_ticks], 0        ;See if we at 0 yet
   177 00001CA5 00000000            <1>
   178 00001CA9 7FF0                <1>     jg .loopdelay    ;If not, keep looping
   179                              <1> ;Return CMOS to default state
   180 00001CAB FA                  <1>     cli
   181 00001CAC 66B88B8B            <1>     mov ax, 8B8Bh   ;NMI disabled
   182 00001CB0 E670                <1>     out cmos_base, al
   183 00001CB2 E680                <1>     out waitp, al
   184 00001CB4 EB00                <1>     jmp short $+2
   185 00001CB6 E471                <1>     in al, cmos_data
   186 00001CB8 240F                <1>     and al, 0Fh    ;Clear all upper 4 bits
   187 00001CBA 86E0                <1>     xchg ah, al
   188 00001CBC E670                <1>     out cmos_base, al
   189 00001CBE E680                <1>     out waitp, al
   190 00001CC0 EB00                <1>     jmp short $+2
   191 00001CC2 86E0                <1>     xchg ah, al
   192 00001CC4 E671                <1>     out cmos_data, al
   193 00001CC6 B00D                <1>     mov al, 0Dh     ;Read Register D and reenable NMI
   194 00001CC8 E670                <1>     out cmos_base, al
   195 00001CCA E680                <1>     out waitp, al    ;allow one io cycle to run
   196 00001CCC EB00                <1>     jmp short $+2
   197 00001CCE E471                <1>     in al, cmos_data  
   198                              <1> 
   199 00001CD0 58                  <1>     pop rax ;Return pic2 value
   200 00001CD1 E6A1                <1>     out pic2data, al
   201 00001CD3 58                  <1>     pop rax    ;Return pic1 value
   202 00001CD4 E621                <1>     out pic1data, al
   203                              <1> 
   204 00001CD6 58                  <1>     pop rax    ;Return rax value
   205 00001CD7 FB                  <1>     sti
   206                              <1> .return:
   207 00001CD8 48CF                <1>     iretq
   208                              <1> .memory16MB:    ;ah=88 function
   209 00001CDA 668B0425[DE010000]  <1>     mov ax, word [srData1]
   210 00001CE2 48CF                <1>     iretq
   211                              <1> 
   212                              <1> .miscDispatcher:
   213                              <1> ; ax = C500h -> Beep PC speaker
   214                              <1> ; ax = C501h -> Connect Debugger 
   215                              <1> ; ax = C502h -> Disconnect Debugger
   216 00001CE4 84C0                <1>     test al, al     ;Play a tone using PC speaker
   217 00001CE6 0F84C7000000        <1>     jz .mdBeeper
   218 00001CEC 3C01                <1>     cmp al, 01h     ;Connect Debugger
   219 00001CEE 7409                <1>     jz .mdConnectDebugger
   220 00001CF0 3C02                <1>     cmp al, 02h     ;Disconnect Debugger
   221 00001CF2 7460                <1>     jz .mdDisconnectDebugger
   222 00001CF4 E955FFFFFF          <1>     jmp .badFunction
   223                              <1> .mdConnectDebugger:
   224 00001CF9 50                  <1>     push rax
   225 00001CFA 53                  <1>     push rbx
   226 00001CFB 52                  <1>     push rdx
   227 00001CFC 56                  <1>     push rsi
   228 00001CFD BA008F0000          <1>     mov edx, 8F00h
   229 00001D02 BB08000000          <1>     mov ebx, codedescriptor
   230 00001D07 48B8-               <1>     mov rax, MCP_int.singleStepsEP  ;Pointer
   230 00001D09 [6121000000000000]  <1>
   231 00001D11 48BE01000000000000- <1>     mov rsi, 01 ;Interrupt number, Single Step
   231 00001D1A 00                  <1>
   232 00001D1B E8ABE3FFFF          <1>     call idtWriteEntry
   233 00001D20 48B8-               <1>     mov rax, MCP_int.debugEp  ;Pointer
   233 00001D22 [B621000000000000]  <1>
   234 00001D2A 48BE03000000000000- <1>     mov rsi, 03 ;Interrupt number, Software Breakpoint
   234 00001D33 00                  <1>
   235 00001D34 E892E3FFFF          <1>     call idtWriteEntry
   236 00001D39 48B8-               <1>     mov rax, MCP_int.debugEpHardware  ;Pointer
   236 00001D3B [9621000000000000]  <1>
   237 00001D43 48BE3B000000000000- <1>     mov rsi, 3Bh ;Interrupt number, Invoke debugger through hardware CTRL+BREAK
   237 00001D4C 00                  <1>
   238 00001D4D E879E3FFFF          <1>     call idtWriteEntry
   239 00001D52 EB59                <1>     jmp short .mdDebugExit
   240                              <1> .mdDisconnectDebugger:
   241 00001D54 50                  <1>     push rax
   242 00001D55 53                  <1>     push rbx
   243 00001D56 52                  <1>     push rdx
   244 00001D57 56                  <1>     push rsi
   245 00001D58 BA008F0000          <1>     mov edx, 8F00h
   246 00001D5D BB08000000          <1>     mov ebx, codedescriptor
   247 00001D62 48B8-               <1>     mov rax, i1  ;Pointer
   247 00001D64 [FE4B000000000000]  <1>
   248 00001D6C 48BE01000000000000- <1>     mov rsi, 01 ;Interrupt number, Single Step
   248 00001D75 00                  <1>
   249 00001D76 E850E3FFFF          <1>     call idtWriteEntry
   250 00001D7B 48B8-               <1>     mov rax, i3  ;Pointer
   250 00001D7D [1C4C000000000000]  <1>
   251 00001D85 48BE03000000000000- <1>     mov rsi, 03 ;Interrupt number, Software Breakpoint
   251 00001D8E 00                  <1>
   252 00001D8F E837E3FFFF          <1>     call idtWriteEntry
   253 00001D94 48B8-               <1>     mov rax, ctrlbreak_io  ;Pointer
   253 00001D96 [BF31000000000000]  <1>
   254 00001D9E 48BE3B000000000000- <1>     mov rsi, 3Bh ;Interrupt number, CTRL+Break
   254 00001DA7 00                  <1>
   255 00001DA8 E81EE3FFFF          <1>     call idtWriteEntry
   256                              <1> .mdDebugExit:
   257 00001DAD 5E                  <1>     pop rsi
   258 00001DAE 5A                  <1>     pop rdx
   259 00001DAF 5B                  <1>     pop rbx
   260 00001DB0 58                  <1>     pop rax
   261 00001DB1 48CF                <1>     iretq
   262                              <1> 
   263                              <1> .mdBeeper:
   264                              <1> ;Input: 
   265                              <1> ;   bx = Frequency divisor to use for tone
   266                              <1> ;   rcx = # of ms to beep for
   267                              <1> ; All registers including ax preserved
   268 00001DB3 E8DEE2FFFF          <1>     call beep
   269 00001DB8 48CF                <1>     iretq
   270                              <1> 
   271                              <1> .advSysMemDispatcher:
   272                              <1> ; ax = E800h -> Return userBase pointer
   273                              <1> ; ax = E801h -> Give RAM count, minus the size of SCPBIOS, in ax, bx, cx, dx.
   274                              <1> ; ax = E802h -> Total RAM count (without SCP/BIOS)
   275                              <1> ; ax = E820h -> Full Memory Map, including entry for SCPBIOS
   276 00001DBA 84C0                <1>     test al, al
   277 00001DBC 7411                <1>     jz .retUserBase
   278 00001DBE 3C01                <1>     cmp al, 01h
   279 00001DC0 7417                <1>     je .memory64MB
   280 00001DC2 3C02                <1>     cmp al, 02h
   281 00001DC4 7435                <1>     je .memoryBIOSseg
   282 00001DC6 3C20                <1>     cmp al, 20h
   283 00001DC8 7451                <1>     je .fullMemoryMap
   284 00001DCA E97FFEFFFF          <1>     jmp .badFunction
   285                              <1> 
   286                              <1> .retUserBase:
   287 00001DCF 488B0425[CD010000]  <1>     mov rax, qword [userBase]
   288 00001DD7 48CF                <1>     iretq
   289                              <1> .memory64MB:
   290 00001DD9 668B0425[D6010000]  <1>     mov ax, word [srData]
   291 00001DE1 668B1C25[D8010000]  <1>     mov bx, word [srData + 2]
   292 00001DE9 668B0C25[DA010000]  <1>     mov cx, word [srData + 4]
   293 00001DF1 668B1425[DC010000]  <1>     mov dx, word [srData + 6]
   294 00001DF9 48CF                <1>     iretq    
   295                              <1> .memoryBIOSseg:
   296                              <1> ;This gives information about the SCP/BIOS segment
   297 00001DFB 48B800001100000000- <1>     mov rax, BIOSStartAddr  ;Start address of BIOS
   297 00001E04 00                  <1>
   298 00001E05 31DB                <1>     xor ebx, ebx
   299 00001E07 8B1C25[E8010000]    <1>     mov ebx, dword [scpSize]    ;Total sum of segment sizes
   300 00001E0E 488B1425[E0010000]  <1>     mov rdx, qword [sysMem]     ;Get total usable memory count
   301 00001E16 4829DA              <1>     sub rdx, rbx    ;Remove SCP/BIOS allocation from the size
   302 00001E19 48CF                <1>     iretq
   303                              <1> 
   304                              <1> .fullMemoryMap:
   305 00001E1B 488B0425[CD010000]  <1>     mov rax, qword [userBase]    ;Start space, returns userbase in r8
   306 00001E23 48BE-               <1>     mov rsi, bigmapptr
   306 00001E25 [F005000000000000]  <1>
   307 00001E2D 8A0C25[D5010000]    <1>     mov cl, byte [bigmapSize]   ;Get the number of 24 byte entries
   308 00001E34 30ED                <1>     xor ch, ch                  ;Reserve the upper byte
   309 00001E36 48CF                <1>     iretq
   310                              <1> 
   311                              <1> .sysDataTableDispatcher:
   312                              <1> ; ax = F000h, Register new GDT ptr
   313                              <1> ; ax = F001h, Register new IDT ptr
   314                              <1> ; ax = F002h, Get Current GDT ptr
   315                              <1> ; ax = F003h, Get Current IDT ptr
   316                              <1> ; ax = F004h, Register New Page Tables
   317                              <1> ; ax = F005h, Get physical address of PTables
   318                              <1> ; ax = F006h, Get pointer to BIOS Data Area
   319                              <1> ; ax = F007h, Read IDT entry
   320                              <1> ; ax = F008h, Write IDT entry
   321                              <1> ; ax = F009h, Register new Disk Parameter Table
   322                              <1> ; ax = F00Ah, Get current DPT
   323                              <1> ; ax = F00Bh, Register new Fixed Disk Parameter Table
   324                              <1> ; ax = F00Ch, Get current fDPT
   325                              <1> ; ax = F00Dh, Register new SysInit parameters 
   326                              <1> ; ax = F00Eh, Get current SysInit parameters
   327 00001E38 3C04                <1>     cmp al, 4h          
   328 00001E3A 725D                <1>     jb .sdtDT           ;al = 00 - 03, goto sdtDT
   329 00001E3C 3C04                <1>     cmp al, 4           
   330 00001E3E 0F8493000000        <1>     jz .sdtRegisterPage ;al = 04
   331 00001E44 3C05                <1>     cmp al, 5
   332 00001E46 0F8495000000        <1>     jz .sdtGetPagePtr   ;al = 05
   333 00001E4C 3C06                <1>     cmp al, 6
   334 00001E4E 0F8497000000        <1>     jz .sdtDataptr      ;al = 06
   335 00001E54 3C07                <1>     cmp al, 7
   336 00001E56 0F849B000000        <1>     jz .sdtReadIDTEntry ;al = 07
   337 00001E5C 3C08                <1>     cmp al, 8
   338 00001E5E 0F84C4000000        <1>     jz .sdtWriteIDTEntry    ;al = 08
   339 00001E64 3C09                <1>     cmp al, 9
   340 00001E66 0F84D4000000        <1>     jz .sdtNewDDP       ;al = 09
   341 00001E6C 3C0A                <1>     cmp al, 0Ah
   342 00001E6E 0F84E0000000        <1>     jz .sdtReadDDP      ;al = 0A
   343 00001E74 3C0B                <1>     cmp al, 0Bh         
   344 00001E76 0F84CE000000        <1>     jz .sdtNewfDDP      ;al = 0Bh
   345 00001E7C 3C0C                <1>     cmp al, 0Ch
   346 00001E7E 0F84DA000000        <1>     jz .sdtReadfDDP     ;al = 0Ch
   347 00001E84 3C0D                <1>     cmp al, 0Dh
   348 00001E86 0F84DC000000        <1>     jz .sdtNewSysInit   ;al = 0Dh
   349 00001E8C 3C0E                <1>     cmp al, 0Eh
   350 00001E8E 0F84E6000000        <1>     jz .sdtReadSysInit  ;al = 0Eh
   351 00001E94 E9B5FDFFFF          <1>     jmp .badFunction
   352                              <1> 
   353                              <1> .sdtDT:
   354                              <1> ;sys data tables Descriptor Table dispatcher
   355                              <1> ;rbx has/will have I/GDT base pointer (qword)
   356                              <1> ;ecx has/will have I/GDT limit (word)
   357                              <1> ;edx has/will have Number of entries in I/GDT (word)
   358 00001E99 57                  <1>     push rdi
   359 00001E9A 56                  <1>     push rsi
   360 00001E9B 48BF-               <1>     mov rdi, GDTlength
   360 00001E9D [0C00000000000000]  <1>
   361 00001EA5 48BE-               <1>     mov rsi, IDTlength
   361 00001EA7 [0000000000000000]  <1>
   362 00001EAF A801                <1>     test al, 1  ;If al[0] = 1, want rdi to point to IDT area
   363 00001EB1 480F45FE            <1>     cmovnz rdi, rsi ;If al[0] = 0, rdi will keep pointing to GDT
   364 00001EB5 A802                <1>     test al, 2  ;If bit 2 is set, Get pointers
   365 00001EB7 750F                <1>     jnz .sdtGet
   366 00001EB9 668917              <1>     mov word [rdi], dx
   367 00001EBC 66894F02            <1>     mov word [rdi + 2], cx
   368 00001EC0 48895F04            <1>     mov qword [rdi + 4], rbx
   369 00001EC4 56                  <1>     push rsi
   370 00001EC5 5F                  <1>     pop rdi
   371 00001EC6 48CF                <1>     iretq
   372                              <1> .sdtGet:
   373 00001EC8 0FB717              <1>     movzx edx, word [rdi]
   374 00001ECB 0FB74F02            <1>     movzx ecx, word [rdi + 2]
   375 00001ECF 488B5F04            <1>     mov rbx, qword [rdi + 4]
   376 00001ED3 56                  <1>     push rsi
   377 00001ED4 5F                  <1>     pop rdi
   378 00001ED5 48CF                <1>     iretq
   379                              <1> .sdtRegisterPage:
   380 00001ED7 48891C25[18000000]  <1>     mov qword [pageTablePtr], rbx   ;Registers pointer as new table space
   381 00001EDF 48CF                <1>     iretq
   382                              <1> .sdtGetPagePtr:
   383 00001EE1 488B1C25[18000000]  <1>     mov rbx, qword [pageTablePtr]  ;Return BIOS Page Table ptr
   384 00001EE9 48CF                <1>     iretq
   385                              <1> .sdtDataptr:
   386 00001EEB 48BB-               <1>     mov rbx, section.data.start        ;Get BIOS Data area ptr into rax
   386 00001EED [0000000000000000]  <1>
   387 00001EF5 48CF                <1>     iretq
   388                              <1> .sdtReadIDTEntry:
   389                              <1> ;bx = Number of interrupt handler (00h-0FFFFh), uses only bl
   390                              <1> ;Returns pointer in rbx, 
   391                              <1> ;Segment selector in ax,
   392                              <1> ;Attribute word in dx
   393 00001EF7 480FB6DB            <1>     movzx rbx, bl
   394 00001EFB 488B1425[04000000]  <1>     mov rdx, qword [IDTpointer.Base]    ;Get base address
   395 00001F03 48C1E304            <1>     shl rbx, 4h         ;Multiply address number by 16
   396 00001F07 4801DA              <1>     add rdx, rbx        ;rdx point to IDT entry
   397 00001F0A 8B4208              <1>     mov eax, dword [rdx + 8]
   398 00001F0D 48C1E020            <1>     shl rax, 20h        ;Shift dword into upper dword
   399 00001F11 668B5A06            <1>     mov bx, word [rdx + 6]
   400 00001F15 C1E310              <1>     shl ebx, 10h        ;Shift word into upper word
   401 00001F18 668B1A              <1>     mov bx, word [rdx]  ;Get final word
   402 00001F1B 4809C3              <1>     or rbx, rax         ;Add upper dword to rbx
   403 00001F1E 668B4202            <1>     mov ax, word [rdx + 2]  ;Get Segment selector in ax
   404 00001F22 668B5204            <1>     mov dx, word [rdx + 4]  ;Get attributes word
   405 00001F26 48CF                <1>     iretq
   406                              <1> .sdtWriteIDTEntry:
   407                              <1> ;rbx = Pointer to new routine
   408                              <1> ;cx = Number of the interrupt handler (00h-0FFFFh), uses only cl
   409                              <1> ;dx = IDT entry attributes
   410                              <1> ;si = Segment selector
   411 00001F28 50                  <1>     push rax
   412 00001F29 51                  <1>     push rcx
   413 00001F2A 56                  <1>     push rsi
   414 00001F2B 53                  <1>     push rbx
   415 00001F2C 4889D8              <1>     mov rax, rbx    ;Move pointer to new routine to rax
   416 00001F2F 89F3                <1>     mov ebx, esi    ;Move Segment selector from si to bx 
   417 00001F31 480FB6F1            <1>     movzx rsi, cl   ;Movzx low byte of interrupt number into rsi
   418 00001F35 E891E1FFFF          <1>     call idtWriteEntry
   419 00001F3A 5B                  <1>     pop rbx
   420 00001F3B 5E                  <1>     pop rsi
   421 00001F3C 59                  <1>     pop rcx
   422 00001F3D 58                  <1>     pop rax
   423 00001F3E 48CF                <1>     iretq
   424                              <1> .sdtNewDDP:
   425 00001F40 48891C25[AF010000]  <1>     mov qword [diskDptPtr], rbx
   426 00001F48 48CF                <1>     iretq
   427                              <1> .sdtNewfDDP:
   428 00001F4A 48891C25[B7010000]  <1>     mov qword [fdiskDptPtr], rbx
   429 00001F52 48CF                <1>     iretq
   430                              <1> .sdtReadDDP:
   431 00001F54 488B1C25[AF010000]  <1>     mov rbx, qword [diskDptPtr]
   432 00001F5C 48CF                <1>     iretq
   433                              <1> .sdtReadfDDP:
   434 00001F5E 488B1C25[B7010000]  <1>     mov rbx, qword [fdiskDptPtr]
   435 00001F66 48CF                <1>     iretq
   436                              <1> .sdtNewSysInit:
   437 00001F68 48891C25[BF010000]  <1>     mov qword [nextFilePtr], rbx
   438 00001F70 66891425[C7010000]  <1>     mov word [numSectors], dx
   439 00001F78 48CF                <1>     iretq
   440                              <1> .sdtReadSysInit:
   441 00001F7A 488B1C25[BF010000]  <1>     mov rbx, qword [nextFilePtr]
   442 00001F82 668B1425[C7010000]  <1>     mov dx, word [numSectors]
   443 00001F8A 48CF                <1>     iretq
   444                              <1> .ehciFunctionDispatcher:
   445                              <1> ;EHCI function dispatcher 0F1h
   446                              <1> ; al = 00h -> EHCI get crit error handler
   447                              <1> ; al = 01h -> EHCI set crit error handler
   448                              <1> ; al = 02h -> Reserved, reset selected EHCI controller
   449                              <1> ; al = 03h -> Reserved, re-enumerate devices downstream of EHCI Root hub
   450 00001F8C 84C0                <1>     test al, al
   451 00001F8E 7411                <1>     jz .ehciDispGetCritPtr
   452 00001F90 FEC8                <1>     dec al
   453 00001F92 7417                <1>     jz .ehciDispSetCritPtr
   454 00001F94 FEC8                <1>     dec al
   455 00001F96 741D                <1>     jz .ehciDispResetCtrlr
   456 00001F98 FEC8                <1>     dec al
   457 00001F9A 7419                <1>     jz .echiDispReEnumDevices
   458 00001F9C E9ADFCFFFF          <1>     jmp .badFunction
   459                              <1> 
   460                              <1> .ehciDispGetCritPtr:
   461                              <1> ;Gets the address of the current EHCI critical error handler into rbx
   462 00001FA1 488B1C25[36020000]  <1>     mov rbx, qword [eHCErrorHandler]
   463 00001FA9 48CF                <1>     iretq
   464                              <1> .ehciDispSetCritPtr:
   465                              <1> ;Sets the address of the EHCI critical error handler to the ptr in rbx
   466 00001FAB 48891C25[36020000]  <1>     mov qword [eHCErrorHandler], rbx
   467 00001FB3 48CF                <1>     iretq
   468                              <1> .ehciDispResetCtrlr:
   469                              <1> .echiDispReEnumDevices:
   470 00001FB5 B486                <1>     mov ah, 86h     ;Unsupported function call
   471 00001FB7 E994FCFFFF          <1>     jmp .badout  
   472                              <1> ;------------------------End of Interrupt------------------------
    98                                  %include "./Resident/Services/Int36h.asm"
    99                              <1> ;-------------------Keyboard Interrupt Int 36h-------------------
   100                              <1> ; Software keyboard interrupt. 
   101                              <1> ; ah = 0 -> Read the next scancode/ASCII struck from the keyboard
   102                              <1> ; ah = 1 -> Clear zero flag if there is a new char ready to be 
   103                              <1> ;           read.
   104                              <1> ; ah = 2 -> Returns the current shift status in the al register
   105                              <1> ; ax and flags changed.
   106                              <1> ;----------------------------------------------------------------
   107                              <1> kb_io:
   108 00001FBC 53                  <1>     push rbx
   109 00001FBD FA                  <1>     cli            ;Interrupts off
   110 00001FBE 84E4                <1>     test ah, ah
   111 00001FC0 7411                <1>     jz .k0
   112 00001FC2 FECC                <1>     dec ah
   113 00001FC4 7436                <1>     jz .k1
   114 00001FC6 FECC                <1>     dec ah
   115 00001FC8 7450                <1>     jz .k2
   116 00001FCA 804C241801          <1>     or byte [rsp + 3*8h], 1    ;Set CF, invalid function, skip rbx on stack
   117 00001FCF B480                <1>     mov ah, 80h    ;Invalid Function
   118 00001FD1 EB4E                <1>     jmp short .kexit ;ah > 2, not a valid function
   119                              <1>     
   120                              <1> .k0:    
   121                              <1> ;This one moves the head to catch up with the tail.
   122 00001FD3 FB                  <1>     sti
   123 00001FD4 F390                <1>     pause    ;Allow a keyboard interrupt to occur
   124 00001FD6 FA                  <1>     cli
   125 00001FD7 488B1C25[42000000]  <1>     mov rbx, qword [kb_buf_head]
   126 00001FDF 483B1C25[4A000000]  <1>     cmp rbx, qword [kb_buf_tail]    ;Are we at the head of the buffer?
   127 00001FE7 74EA                <1>     je .k0    ;If we are, then the buffer is empty, await a keystroke
   128 00001FE9 66678B03            <1>     mov ax, word [ebx]        ;move the word pointed at by rbx to ax
   129 00001FED E833000000          <1>     call .kb_ptr_adv    ;Advance the buffer pointer
   130                              <1>     
   131 00001FF2 48891C25[42000000]  <1>     mov qword [kb_buf_head], rbx    ;Move rbx into the buffer head variable
   132 00001FFA EB25                <1>     jmp short .kexit
   133                              <1> 
   134                              <1> .k1:
   135 00001FFC 488B1C25[42000000]  <1>     mov rbx, qword [kb_buf_head]
   136 00002004 483B1C25[4A000000]  <1>     cmp rbx, qword [kb_buf_tail] ;sets flags, Z is set if equal 
   137 0000200C 660F4503            <1>     cmovnz ax, word [rbx]    ;move head of buffer into ax, IF Z clear
   138 00002010 FB                  <1>     sti     ;renable interrupts 
   139 00002011 9C                  <1>     pushfq    ;push flags onto stack
   140 00002012 5B                  <1>     pop rbx    ;pop them into rbx
   141 00002013 48895C2418          <1>     mov [rsp + 3*8h], qword rbx    ;Replace with new flags, skip pushed rbx
   142 00002018 EB07                <1>     jmp short .kexit
   143                              <1>     
   144                              <1> .k2:
   145 0000201A 8A0425[62000000]    <1>     mov al, byte [kb_flags]
   146                              <1> .kexit:
   147 00002021 FB                  <1>     sti
   148 00002022 5B                  <1>     pop rbx
   149 00002023 48CF                <1>     iretq
   150                              <1> 
   151                              <1> .kb_ptr_adv:
   152                              <1> ;Advance the pointer passed by rbx safely and return pointer!
   153 00002025 48FFC3              <1>     inc rbx
   154 00002028 48FFC3              <1>     inc rbx
   155 0000202B 483B1C25[5A000000]  <1>     cmp rbx, qword [kb_buf_end]     ;Are we at the end of the buffer space
   156 00002033 7508                <1>     jne .kbpa1                      ;If not exit, if we are, wrap around space!
   157 00002035 488B1C25[52000000]  <1>     mov rbx, qword [kb_buf_start]
   158                              <1> .kbpa1:
   159 0000203D C3                  <1>     ret
   160                              <1> ;------------------------End of Interrupt------------------------
    99                                  %include "./Resident/Services/Int37h.asm"
   100                              <1> ;------------------------Printer Int 37h-------------------------
   101                              <1> ; Reserved for printer specific functions. Both USB and Parallel.
   102                              <1> ; Not currently supported
   103                              <1> ;----------------------------------------------------------------
   104                              <1> printer_io:
   105 0000203E B486                <1>     mov ah, 86h    ;Function not supported
   106 00002040 804C241001          <1>     or byte [rsp+ 2*8h], 1    ;Set carry
   107 00002045 48CF                <1>     iretq
   108                              <1> ;------------------------End of Interrupt------------------------
   100                                  %include "./Sysdebug/sysdeb.asm"
   101                              <1> ;---------------------MCP Interrupt Int 38h----------------------
   102                              <1> ;This interrupt superceeds the IBM BASIC routine caller. 
   103                              <1> ;This is a 64 bit port of my 16 bit MCP monitor program, 
   104                              <1> ; allowing users to "interactively" get sectors from devices 
   105                              <1> ; and run them. I might add some nicities to this version of MCP 
   106                              <1> ; such as a function to list all devices.
   107                              <1> ;----------------------------------------------------------------
   108                              <1> MCPjmptbl:  ;Function jump table
   109 00002047 [8129000000000000]  <1>     dq MCP_int.dumpMemory      ;Dump
   110 0000204F [822B000000000000]  <1>     dq MCP_int.editMemory      ;Edit
   111 00002057 [3E2C000000000000]  <1>     dq MCP_int.singleStep      ;Single step
   112 0000205F [F22B000000000000]  <1>     dq MCP_int.jumpProc        ;Go
   113 00002067 [4D2C000000000000]  <1>     dq MCP_int.proceedDefault  ;Proceed
   114 0000206F [602C000000000000]  <1>     dq MCP_int.storageRead     ;Load
   115 00002077 [682C000000000000]  <1>     dq MCP_int.storageWrite    ;Write
   116 0000207F [F22C000000000000]  <1>     dq MCP_int.restartMcp      ;Quit   <- To call Int 40h for DOS compatibility
   117 00002087 [F42C000000000000]  <1>     dq MCP_int.clearscreen     ;Clear screen
   118 0000208F [5C24000000000000]  <1>     dq MCP_int.xchangeReg      ;Registers
   119 00002097 [BF22000000000000]  <1>     dq MCP_int.debugRegs       ;Breakpoints
   120 0000209F [3026000000000000]  <1>     dq MCP_int.hexCalc         ;Hex
   121 000020A7 [7425000000000000]  <1>     dq MCP_int.inport          ;In
   122 000020AF [C725000000000000]  <1>     dq MCP_int.outport         ;Out
   123 000020B7 [7A22000000000000]  <1>     dq MCP_int.version         ;Version
   124 000020BF [3E2C000000000000]  <1>     dq MCP_int.singleStep      ;Single Step (Alt), temp
   125 000020C7 [4B21000000000000]  <1>     dq MCP_int.memoryMap       ;Print memory map
   126 000020CF [1322000000000000]  <1>     dq MCP_int.connect         ;Connect Debugger
   127 000020D7 [4522000000000000]  <1>     dq MCP_int.disconnect      ;Disconnect Debugger
   128                              <1> MCP_int:
   129                              <1>     ;Entry point from external programs
   130 000020DF 48890425[04020000]  <1>     mov qword [mcpUserRaxStore], rax
   131 000020E7 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
   132 000020EF 48896008            <1>     mov qword [rax + 08h], rsp
   133 000020F3 E8080C0000          <1>     call .storeMainRegisters    ;Save main registers
   134                              <1> .z11:
   135 000020F8 488B2425[0C020000]  <1>     mov rsp, qword [mcpStackPtr]  ;Point sp to new stack
   136 00002100 B804130000          <1>     mov eax, 1304h    ;Zero extends to rax
   137 00002105 48BD-               <1>     mov rbp, .prompt
   137 00002107 [CE2E000000000000]  <1>
   138 0000210F 30FF                <1>     xor bh, bh
   139 00002111 CD30                <1>     int 30h
   140                              <1> .z2:
   141 00002113 6631C0              <1>     xor ax, ax 
   142 00002116 CD36                <1>     int 36h
   143 00002118 3C08                <1>     cmp al, 08h        ;If backspace, ignore
   144 0000211A 74F7                <1>     je .z2
   145 0000211C E8820D0000          <1>     call .print        ;Print input char
   146 00002121 FD                  <1>     std
   147 00002122 48BF-               <1>     mov rdi, .prompt    ;end of lst is prompt
   147 00002124 [CE2E000000000000]  <1>
   148 0000212C 48B914000000000000- <1>     mov rcx, .lstl + 1
   148 00002135 00                  <1>
   149 00002136 F2AE                <1>     repne scasb
   150 00002138 FC                  <1>     cld
   151 00002139 0F85AC000000        <1>     jne .bad_command    ;Char not found!
   152                              <1> .prog_sel:    ;Choose program
   153 0000213F 68[F8200000]        <1>     push MCP_int.z11    ;to allow RETurning to application
   154 00002144 FF24CD[47200000]    <1>     jmp qword [MCPjmptbl + 8*rcx]    ;Jump to chosen function         
   155                              <1> .memoryMap:
   156 0000214B 66B80A0E            <1>     mov ax,0E0Ah
   157 0000214F CD30                <1>     int 30h
   158 00002151 66B80D0E            <1>     mov ax, 0E0Dh
   159 00002155 CD30                <1>     int 30h
   160 00002157 E8A4DEFFFF          <1>     call e820print  ;Print memory map
   161 0000215C E997FFFFFF          <1>     jmp .z11
   162                              <1> .singleStepsEP:
   163 00002161 48890425[04020000]  <1>     mov qword [mcpUserRaxStore], rax
   164 00002169 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
   165 00002171 48896008            <1>     mov qword [rax + 08h], rsp
   166 00002175 E8860B0000          <1>     call .storeMainRegisters
   167 0000217A 488B0424            <1>     mov rax, qword [rsp]    ;Get next instruction address
   168 0000217E 48890425[F4010000]  <1>     mov qword [mcpUserRip], rax
   169 00002186 E875050000          <1>     call .dumpReg    ;Show register state
   170 0000218B E802020000          <1>     call .dumpDebugRegs
   171 00002190 FB                  <1>     sti ;Restore interrupts
   172 00002191 E962FFFFFF          <1>     jmp .z11
   173                              <1> .debugEpHardware:
   174 00002196 48890425[04020000]  <1>     mov qword [mcpUserRaxStore], rax
   175 0000219E 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
   176 000021A6 48896008            <1>     mov qword [rax + 08h], rsp
   177 000021AA E8510B0000          <1>     call .storeMainRegisters
   178 000021AF FB                  <1>     sti ;Restore interrupts
   179 000021B0 B020                <1>     mov al, EOI
   180 000021B2 E620                <1>     out pic1command, al
   181 000021B4 EB1A                <1>     jmp short .dep1
   182                              <1> .debugEp:    
   183                              <1> ;Return here after a single step or int 3. 
   184                              <1> ;Support Int 3h thru manual encoding only, not via the debugger
   185 000021B6 48890425[04020000]  <1>     mov qword [mcpUserRaxStore], rax
   186 000021BE 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
   187 000021C6 48896008            <1>     mov qword [rax + 08h], rsp
   188 000021CA E8310B0000          <1>     call .storeMainRegisters
   189 000021CF FB                  <1>     sti ;Restore interrupts
   190                              <1> .dep1:
   191 000021D0 488B0424            <1>     mov rax, qword [rsp]    ;Get next instruction address
   192 000021D4 48890425[F4010000]  <1>     mov qword [mcpUserRip], rax
   193 000021DC E81F050000          <1>     call .dumpReg    ;Show register state
   194 000021E1 E8AC010000          <1>     call .dumpDebugRegs
   195 000021E6 E90DFFFFFF          <1>     jmp .z11
   196                              <1> .bad_command:
   197 000021EB 48B804130000000000- <1>     mov rax, 1304h
   197 000021F4 00                  <1>
   198 000021F5 30FF                <1>     xor bh, bh
   199 000021F7 48BD-               <1>     mov rbp, .bc1
   199 000021F9 [0822000000000000]  <1>
   200 00002201 CD30                <1>     int 30h
   201 00002203 E9F0FEFFFF          <1>     jmp MCP_int.z11
   202 00002208 0A0D205E204572726F- <1> .bc1: db 0Ah,0Dh," ^ Error",0
   202 00002211 7200                <1>
   203                              <1> ;><><><><><><><-Internal Commands Begin Here-><><><><><><><
   204                              <1> .connect:
   205 00002213 50                  <1>     push rax
   206 00002214 55                  <1>     push rbp
   207 00002215 B801C50000          <1>     mov eax, 0C501h ;Connect Debugger
   208 0000221A CD35                <1>     int 35h
   209 0000221C B804130000          <1>     mov eax, 1304h
   210 00002221 48BD-               <1>     mov rbp, .connectString
   210 00002223 [3022000000000000]  <1>
   211 0000222B CD30                <1>     int 30h
   212 0000222D 5D                  <1>     pop rbp
   213 0000222E 58                  <1>     pop rax
   214 0000222F C3                  <1>     ret
   215 00002230 0A0D53595344454255- <1> .connectString db 0Ah,0Dh,"SYSDEBUG Connected",0
   215 00002239 4720436F6E6E656374- <1>
   215 00002242 656400              <1>
   216                              <1> .disconnect:
   217 00002245 50                  <1>     push rax
   218 00002246 55                  <1>     push rbp
   219 00002247 B802C50000          <1>     mov eax, 0C502h ;Disconnect Debugger
   220 0000224C CD35                <1>     int 35h
   221 0000224E B804130000          <1>     mov eax, 1304h
   222 00002253 48BD-               <1>     mov rbp, .disconnectString
   222 00002255 [6222000000000000]  <1>
   223 0000225D CD30                <1>     int 30h
   224 0000225F 5D                  <1>     pop rbp
   225 00002260 58                  <1>     pop rax
   226 00002261 C3                  <1>     ret
   227 00002262 0A0D53595344454255- <1> .disconnectString db 0Ah,0Dh,"SYSDEBUG Disconnected",0
   227 0000226B 4720446973636F6E6E- <1>
   227 00002274 656374656400        <1>
   228                              <1> .version:
   229 0000227A 66B80413            <1>     mov ax, 1304h
   230 0000227E 30FF                <1>     xor bh, bh
   231 00002280 48BD-               <1>     mov rbp, .vstring
   231 00002282 [A222000000000000]  <1>
   232 0000228A CD30                <1>     int 30h
   233 0000228C 48BE-               <1>     mov rsi, signature + 1    ;Point to BIOS signature string (skip the v char)
   233 0000228E [1850000000000000]  <1>
   234                              <1> .v1:
   235 00002296 AC                  <1>     lodsb
   236 00002297 3C20                <1>     cmp al, 20h            ;Check space
   237 00002299 7406                <1>     je .v2
   238 0000229B B40E                <1>     mov ah, 0Eh
   239                              <1>     ;xor bh, bh
   240 0000229D CD30                <1>     int 30h
   241 0000229F EBF5                <1>     jmp short .v1
   242                              <1> .v2:
   243 000022A1 C3                  <1>     ret
   244 000022A2 0A0D5343502F42494F- <1> .vstring:    db 0Ah, 0Dh,"SCP/BIOS SYSDEBUG Version ",0
   244 000022AB 532053595344454255- <1>
   244 000022B4 472056657273696F6E- <1>
   244 000022BD 2000                <1>
   245                              <1> .debugRegs:
   246 000022BF E8CE000000          <1>     call .dumpDebugRegs
   247 000022C4 66B80413            <1>     mov ax, 1304h
   248 000022C8 48BD-               <1>     mov rbp, .crlf    ;Newline
   248 000022CA [D42E000000000000]  <1>
   249 000022D2 CD30                <1>     int 30h
   250                              <1> 
   251 000022D4 66B82E0E            <1>     mov ax, 0E2Eh    ;Print dot byte
   252 000022D8 CD30                <1>     int 30h
   253                              <1> 
   254 000022DA 66B80101            <1>     mov ax, 0101h    ;Process one byte
   255 000022DE E81F0B0000          <1>     call .keyb
   256 000022E3 4885ED              <1>     test rbp, rbp
   257 000022E6 0F840CFEFFFF        <1>     jz .z11    ;If enter pressed, return to command line
   258 000022EC E8B10A0000          <1>     call .arg
   259 000022F1 3C01                <1>     cmp al, 1
   260 000022F3 0F85DA070000        <1>     jne .dmbadexit
   261                              <1> 
   262 000022F9 488B7D00            <1>     mov rdi, qword [rbp]
   263 000022FD 4881FF04000000      <1>     cmp rdi, 4
   264 00002304 7213                <1>     jb .xr11    ;Cant edit dr4, or 5. dr6 is read only
   265 00002306 4881FF07000000      <1>     cmp rdi, 7  ;Can only edit 7
   266 0000230D 0F85D8FEFFFF        <1>     jne .bad_command
   267 00002313 48FFCF              <1>     dec rdi     ;Is the fifth entry in the table
   268 00002316 48FFCF              <1>     dec rdi
   269                              <1> .xr11:
   270 00002319 48BD-               <1>     mov rbp, .crlf
   270 0000231B [D42E000000000000]  <1>
   271 00002323 66B80413            <1>     mov ax, 1304h
   272 00002327 30FF                <1>     xor bh, bh
   273 00002329 CD30                <1>     int 30h
   274                              <1> 
   275 0000232B 57                  <1>     push rdi    ;Save rdi
   276 0000232C 48C1E702            <1>     shl rdi, 2    ;Multiply by 4
   277 00002330 66B90400            <1>     mov cx, 4    ;4 chars to print
   278                              <1> .xr1:   ;Print register name
   279 00002334 8A87[44240000]      <1>     mov al, byte [.dregtbl + rdi]
   280 0000233A B40E                <1>     mov ah, 0Eh
   281 0000233C CD30                <1>     int 30h
   282 0000233E 66FFC7              <1>     inc di
   283 00002341 66FFC9              <1>     dec cx
   284 00002344 75EE                <1>     jnz .xr1
   285                              <1> ;Get the qword into the keybuffer
   286 00002346 5F                  <1>     pop rdi
   287 00002347 66B80104            <1>     mov ax, 0401h    ;Process one qword
   288 0000234B E8B20A0000          <1>     call .keyb
   289 00002350 4885ED              <1>     test rbp, rbp
   290 00002353 0F84C6010000        <1>     jz .xcnoexit
   291 00002359 E8440A0000          <1>     call .arg
   292 0000235E 3C01                <1>     cmp al, 1
   293 00002360 0F856D070000        <1>     jne .dmbadexit
   294                              <1> 
   295 00002366 488B4500            <1>     mov rax, qword [rbp]    ;rax has the replacement value
   296 0000236A 4885FF              <1>     test rdi, rdi
   297 0000236D 7504                <1>     jnz .xr2
   298 0000236F 0F23C0              <1>     mov dr0, rax
   299 00002372 C3                  <1>     ret
   300                              <1> .xr2:
   301 00002373 48FFCF              <1>     dec rdi
   302 00002376 7504                <1>     jnz .xr3
   303 00002378 0F23C8              <1>     mov dr1, rax
   304 0000237B C3                  <1>     ret
   305                              <1> .xr3:
   306 0000237C 48FFCF              <1>     dec rdi
   307 0000237F 7504                <1>     jnz .xr4
   308 00002381 0F23D0              <1>     mov dr2, rax
   309 00002384 C3                  <1>     ret
   310                              <1> .xr4:
   311 00002385 48FFCF              <1>     dec rdi
   312 00002388 7504                <1>     jnz .xr5
   313 0000238A 0F23D8              <1>     mov dr3, rax
   314 0000238D C3                  <1>     ret
   315                              <1> .xr5:
   316 0000238E 0F23F8              <1>     mov dr7, rax
   317 00002391 C3                  <1>     ret
   318                              <1> 
   319                              <1> .dumpDebugRegs:
   320 00002392 48BD-               <1>     mov rbp, .crlf
   320 00002394 [D42E000000000000]  <1>
   321 0000239C 66B80413            <1>     mov ax, 1304h
   322 000023A0 30FF                <1>     xor bh, bh
   323 000023A2 CD30                <1>     int 30h
   324 000023A4 4831ED              <1>     xor rbp, rbp
   325 000023A7 4831FF              <1>     xor rdi, rdi
   326                              <1> 
   327 000023AA 0F21F8              <1>     mov rax, dr7
   328 000023AD 50                  <1>     push rax
   329 000023AE 0F21F0              <1>     mov rax, dr6
   330 000023B1 50                  <1>     push rax
   331 000023B2 0F21D8              <1>     mov rax, dr3
   332 000023B5 50                  <1>     push rax
   333 000023B6 0F21D0              <1>     mov rax, dr2
   334 000023B9 50                  <1>     push rax
   335 000023BA 0F21C8              <1>     mov rax, dr1
   336 000023BD 50                  <1>     push rax
   337 000023BE 0F21C0              <1>     mov rax, dr0
   338 000023C1 50                  <1>     push rax
   339                              <1> 
   340                              <1> .ddr1:
   341 000023C2 4831C9              <1>     xor rcx, rcx
   342 000023C5 4881FF03000000      <1>     cmp rdi, 3      ;3 registers per row
   343 000023CC 7450                <1>     je .dregcrlf
   344                              <1> .ddr11:
   345 000023CE 8A840D[44240000]    <1>     mov al, byte [.dregtbl + rbp + rcx]
   346 000023D5 B40E                <1>     mov ah, 0Eh
   347 000023D7 CD30                <1>     int 30h
   348 000023D9 66FFC1              <1>     inc cx
   349 000023DC 6681F90400          <1>     cmp cx, 4
   350 000023E1 75EB                <1>     jnz .ddr11
   351                              <1> 
   352 000023E3 48B908000000000000- <1>     mov rcx, 8
   352 000023EC 00                  <1>
   353                              <1> .ddr2:
   354 000023ED 5B                  <1>     pop rbx    ;Get debug register
   355 000023EE 480FCB              <1>     bswap rbx
   356                              <1> .ddr21:
   357 000023F1 B404                <1>     mov ah, 04h
   358 000023F3 88D8                <1>     mov al, bl
   359 000023F5 CD30                <1>     int 30h
   360 000023F7 48C1EB08            <1>     shr rbx, 8h
   361 000023FB FEC9                <1>     dec cl
   362 000023FD 75F2                <1>     jnz .ddr21
   363 000023FF 48FFC7              <1>     inc rdi
   364                              <1> 
   365 00002402 B403                <1>     mov ah, 3
   366 00002404 CD30                <1>     int 30h
   367 00002406 80C203              <1>     add dl, 3
   368 00002409 B402                <1>     mov ah, 2
   369 0000240B CD30                <1>     int 30h
   370 0000240D 4881C504000000      <1>     add rbp, 4
   371 00002414 4881FD18000000      <1>     cmp rbp, 24 ;number of chars in the below typed string
   372 0000241B 72A5                <1>     jb .ddr1
   373                              <1> 
   374 0000241D C3                  <1>     ret
   375                              <1> .dregcrlf:
   376 0000241E 4831FF              <1>     xor rdi, rdi
   377 00002421 55                  <1>     push rbp
   378 00002422 50                  <1>     push rax
   379 00002423 53                  <1>     push rbx
   380 00002424 48BD-               <1>     mov rbp, .crlf
   380 00002426 [D42E000000000000]  <1>
   381 0000242E 48B804130000000000- <1>     mov rax, 1304h
   381 00002437 00                  <1>
   382 00002438 30FF                <1>     xor bh, bh
   383 0000243A CD30                <1>     int 30h
   384 0000243C 5B                  <1>     pop rbx
   385 0000243D 58                  <1>     pop rax
   386 0000243E 5D                  <1>     pop rbp
   387 0000243F E98AFFFFFF          <1>     jmp .ddr11
   388 00002444 4452303D4452313D44- <1> .dregtbl db "DR0=", "DR1=", "DR2=", "DR3=", "DR6=", "DR7="
   388 0000244D 52323D4452333D4452- <1>
   388 00002456 363D4452373D        <1>
   389                              <1> 
   390                              <1> .xchangeReg:
   391 0000245C E89F020000          <1>     call .dumpReg
   392 00002461 66B80413            <1>     mov ax, 1304h
   393 00002465 48BD-               <1>     mov rbp, .crlf    ;Newline
   393 00002467 [D42E000000000000]  <1>
   394 0000246F CD30                <1>     int 30h
   395                              <1> 
   396 00002471 66B82E0E            <1>     mov ax, 0E2Eh    ;Print dot byte
   397 00002475 CD30                <1>     int 30h
   398                              <1> 
   399 00002477 66B80101            <1>     mov ax, 0101h    ;Process one byte
   400 0000247B E882090000          <1>     call .keyb
   401 00002480 4885ED              <1>     test rbp, rbp
   402 00002483 0F846FFCFFFF        <1>     jz .z11    ;If enter pressed, return to command line
   403 00002489 E814090000          <1>     call .arg
   404 0000248E 3C01                <1>     cmp al, 1
   405 00002490 0F853D060000        <1>     jne .dmbadexit
   406                              <1> 
   407 00002496 488B7D00            <1>     mov rdi, qword [rbp]    ;move this byte into rdi
   408 0000249A 4881FF11000000      <1>     cmp rdi, 11h
   409 000024A1 0F8744FDFFFF        <1>     ja .bad_command    ;If the user chooses a value greater than 11, exit!
   410                              <1> 
   411 000024A7 48BD-               <1>     mov rbp, .crlf
   411 000024A9 [D42E000000000000]  <1>
   412 000024B1 66B80413            <1>     mov ax, 1304h
   413 000024B5 30FF                <1>     xor bh, bh
   414 000024B7 CD30                <1>     int 30h
   415                              <1> 
   416 000024B9 4881FF11000000      <1>     cmp rdi, 11h
   417 000024C0 7467                <1>     je .xcflags ;If the user typed 10, then xchange flags
   418                              <1> 
   419 000024C2 57                  <1>     push rdi    ;Save rdi
   420 000024C3 48C1E702            <1>     shl rdi, 2    ;Multiply by 4
   421 000024C7 66B90400            <1>     mov cx, 4    ;4 chars to print
   422                              <1> .xcr1:
   423 000024CB 8A87[1B290000]      <1>     mov al, byte [.regtbl + rdi]
   424 000024D1 B40E                <1>     mov ah, 0Eh
   425 000024D3 CD30                <1>     int 30h
   426 000024D5 66FFC7              <1>     inc di
   427 000024D8 66FFC9              <1>     dec cx
   428 000024DB 75EE                <1>     jnz .xcr1
   429                              <1> 
   430 000024DD 5F                  <1>     pop rdi
   431 000024DE 66B80104            <1>     mov ax, 0401h    ;Process one qword
   432 000024E2 E81B090000          <1>     call .keyb
   433 000024E7 4885ED              <1>     test rbp, rbp
   434 000024EA 7433                <1>     jz .xcnoexit
   435 000024EC E8B1080000          <1>     call .arg
   436 000024F1 3C01                <1>     cmp al, 1
   437 000024F3 0F85DA050000        <1>     jne .dmbadexit
   438                              <1> 
   439 000024F9 488B4500            <1>     mov rax, qword [rbp]
   440 000024FD 4881FF10000000      <1>     cmp rdi, 10h
   441 00002504 741A                <1>     je .xcipchange
   442 00002506 488B1C25[EC010000]  <1>     mov rbx, qword [mcpUserBase]
   443 0000250E 4881C380000000      <1>     add rbx, 80h
   444 00002515 48C1E703            <1>     shl rdi, 3  ;Multiply by 8
   445 00002519 4829FB              <1>     sub rbx, rdi
   446 0000251C 488903              <1>     mov qword [rbx], rax    ;Replace element with rax
   447                              <1> .xcnoexit:
   448 0000251F C3                  <1>     ret
   449                              <1> .xcipchange:
   450 00002520 48890425[F4010000]  <1>     mov qword [mcpUserRip], rax
   451 00002528 C3                  <1>     ret
   452                              <1> .xcflags:
   453 00002529 48B907000000000000- <1>     mov rcx, 7
   453 00002532 00                  <1>
   454 00002533 4831FF              <1>     xor rdi, rdi
   455                              <1> .xcf1:
   456 00002536 8A87[71290000]      <1>     mov al, byte [.rflgs + rdi]
   457 0000253C B40E                <1>     mov ah, 0Eh
   458 0000253E CD30                <1>     int 30h
   459 00002540 66FFC7              <1>     inc di
   460 00002543 66FFC9              <1>     dec cx
   461 00002546 75EE                <1>     jnz .xcf1
   462                              <1> 
   463 00002548 66B80104            <1>     mov ax, 0401h    ;Process one qword
   464 0000254C E8B1080000          <1>     call .keyb
   465 00002551 4885ED              <1>     test rbp, rbp
   466 00002554 74C9                <1>     jz .xcnoexit
   467 00002556 E847080000          <1>     call .arg
   468 0000255B 3C01                <1>     cmp al, 1
   469 0000255D 0F8570050000        <1>     jne .dmbadexit
   470 00002563 488B4500            <1>     mov rax, qword [rbp]
   471 00002567 488B2C25[EC010000]  <1>     mov rbp, qword [mcpUserBase]
   472 0000256F 48894500            <1>     mov qword [rbp], rax
   473 00002573 C3                  <1>     ret
   474                              <1> .inport:
   475 00002574 66B80413            <1>     mov ax, 1304h
   476 00002578 30FF                <1>     xor bh, bh
   477 0000257A 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
   477 0000257C [D22E000000000000]  <1>
   478 00002584 CD30                <1>     int 30h
   479                              <1> 
   480 00002586 66B80101            <1>     mov ax, 0101h    ;Get 1 byte
   481 0000258A E873080000          <1>     call .keyb
   482 0000258F 4885ED              <1>     test rbp, rbp
   483 00002592 0F8453FCFFFF        <1>     jz .bad_command
   484 00002598 E805080000          <1>     call .arg
   485 0000259D 3C01                <1>     cmp al, 1
   486 0000259F 0F852E050000        <1>     jne .dmbadexit
   487 000025A5 488B5500            <1>     mov rdx, qword [rbp]    ;First arg, word io addr
   488 000025A9 48BD-               <1>     mov rbp, .crlf
   488 000025AB [D42E000000000000]  <1>
   489 000025B3 48B804130000000000- <1>     mov rax, 1304h
   489 000025BC 00                  <1>
   490 000025BD 30FF                <1>     xor bh, bh
   491 000025BF CD30                <1>     int 30h
   492 000025C1 EC                  <1>     in al, dx
   493 000025C2 B404                <1>     mov ah, 04h
   494 000025C4 CD30                <1>     int 30h
   495 000025C6 C3                  <1>     ret
   496                              <1> 
   497                              <1> .outport:
   498 000025C7 66B80413            <1>     mov ax, 1304h
   499 000025CB 48BB07000000000000- <1>     mov rbx, 7h
   499 000025D4 00                  <1>
   500 000025D5 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
   500 000025D7 [D22E000000000000]  <1>
   501 000025DF CD30                <1>     int 30h
   502 000025E1 66B80102            <1>     mov ax, 0201h    ;Get 1 word
   503 000025E5 E818080000          <1>     call .keyb
   504 000025EA 4885ED              <1>     test rbp, rbp
   505 000025ED 0F84F8FBFFFF        <1>     jz .bad_command
   506 000025F3 E8AA070000          <1>     call .arg
   507 000025F8 3C01                <1>     cmp al, 1
   508 000025FA 0F85D3040000        <1>     jne .dmbadexit
   509 00002600 488B5500            <1>     mov rdx, qword [rbp]    ;First arg, word io addr
   510 00002604 B02E                <1>     mov al, "."
   511 00002606 E898080000          <1>     call .print
   512 0000260B 66B80101            <1>     mov ax, 0101h    ;Get 1 byte
   513 0000260F E8EE070000          <1>     call .keyb
   514 00002614 4885ED              <1>     test rbp, rbp
   515 00002617 0F84CEFBFFFF        <1>     jz .bad_command
   516 0000261D E880070000          <1>     call .arg
   517 00002622 3C01                <1>     cmp al, 1
   518 00002624 0F85A9040000        <1>     jne .dmbadexit
   519 0000262A 488B4500            <1>     mov rax, qword [rbp]
   520 0000262E EE                  <1>     out dx, al
   521 0000262F C3                  <1>     ret
   522                              <1> 
   523                              <1> .hexCalc:
   524 00002630 66B80413            <1>     mov ax, 1304h
   525 00002634 30FF                <1>     xor bh, bh
   526 00002636 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
   526 00002638 [D22E000000000000]  <1>
   527 00002640 CD30                <1>     int 30h
   528 00002642 66B80204            <1>     mov ax, 0402h    ;Get 2 qwords
   529 00002646 E8B7070000          <1>     call .keyb
   530 0000264B 4885ED              <1>     test rbp, rbp
   531 0000264E 0F8497FBFFFF        <1>     jz .bad_command
   532 00002654 E849070000          <1>     call .arg
   533                              <1> 
   534 00002659 3C02                <1>     cmp al, 2
   535 0000265B 0F8572040000        <1>     jne .dmbadexit
   536                              <1> 
   537 00002661 4C8B4508            <1>     mov r8, qword [rbp + 8] ;First number 
   538 00002665 4C8B4D00            <1>     mov r9, qword [rbp]        ;Second number
   539 00002669 4F8D1408            <1>     lea r10, qword [r8+r9]
   540                              <1> 
   541 0000266D 48BD-               <1>     mov rbp, .crlf
   541 0000266F [D42E000000000000]  <1>
   542 00002677 48B804130000000000- <1>     mov rax, 1304h
   542 00002680 00                  <1>
   543 00002681 30FF                <1>     xor bh, bh
   544 00002683 CD30                <1>     int 30h
   545                              <1> 
   546 00002685 4C89C2              <1>     mov rdx, r8
   547 00002688 E856000000          <1>     call .hcprintquad
   548 0000268D B02B                <1>     mov al, "+"
   549 0000268F E80F080000          <1>     call .print
   550 00002694 4C89CA              <1>     mov rdx, r9
   551 00002697 E847000000          <1>     call .hcprintquad
   552 0000269C B03D                <1>     mov al, "="
   553 0000269E E800080000          <1>     call .print
   554 000026A3 4C89D2              <1>     mov rdx, r10
   555 000026A6 E838000000          <1>     call .hcprintquad
   556                              <1> 
   557 000026AB 48B804130000000000- <1>     mov rax, 1304h
   557 000026B4 00                  <1>
   558 000026B5 30FF                <1>     xor bh, bh
   559 000026B7 CD30                <1>     int 30h
   560                              <1> 
   561 000026B9 4C89C2              <1>     mov rdx, r8
   562 000026BC E822000000          <1>     call .hcprintquad
   563 000026C1 B02D                <1>     mov al, "-"
   564 000026C3 E8DB070000          <1>     call .print
   565 000026C8 4C89CA              <1>     mov rdx, r9
   566 000026CB E813000000          <1>     call .hcprintquad
   567 000026D0 B03D                <1>     mov al, "="
   568 000026D2 E8CC070000          <1>     call .print
   569 000026D7 4D29C8              <1>     sub r8, r9
   570 000026DA 4C89C2              <1>     mov rdx, r8
   571 000026DD E801000000          <1>     call .hcprintquad
   572 000026E2 C3                  <1>     ret
   573                              <1> 
   574                              <1> .hcprintquad:
   575                              <1> ;Takes whats in rdx, and prints it
   576 000026E3 480FCA              <1>     bswap rdx
   577 000026E6 48B908000000000000- <1>     mov rcx, 8
   577 000026EF 00                  <1>
   578                              <1> .hcpq1:
   579 000026F0 88D0                <1>     mov al, dl
   580 000026F2 B404                <1>     mov ah, 04h
   581 000026F4 CD30                <1>     int 30h
   582 000026F6 48C1EA08            <1>     shr rdx, 8
   583 000026FA 66FFC9              <1>     dec cx
   584 000026FD 75F1                <1>     jnz .hcpq1
   585 000026FF C3                  <1>     ret
   586                              <1> 
   587                              <1> .dumpReg:
   588 00002700 48BD-               <1>     mov rbp, .crlf
   588 00002702 [D42E000000000000]  <1>
   589 0000270A 66B80413            <1>     mov ax, 1304h
   590 0000270E 30FF                <1>     xor bh, bh
   591 00002710 CD30                <1>     int 30h
   592 00002712 4831ED              <1>     xor rbp, rbp
   593 00002715 4831FF              <1>     xor rdi, rdi
   594 00002718 4831F6              <1>     xor rsi, rsi
   595 0000271B 488B3425[EC010000]  <1>     mov rsi, qword [mcpUserBase]
   596 00002723 4881C680000000      <1>     add rsi, 80h
   597                              <1> .dreg1:
   598 0000272A 4831C9              <1>     xor rcx, rcx
   599 0000272D 4881FF03000000      <1>     cmp rdi, 3
   600 00002734 0F84BB010000        <1>     je .regcrlf
   601                              <1> .dreg11:    ;Print register name
   602 0000273A 8A840D[1B290000]    <1>     mov al, byte [.regtbl+rbp+rcx]
   603 00002741 B40E                <1>     mov ah, 0Eh
   604 00002743 CD30                <1>     int 30h
   605 00002745 66FFC1              <1>     inc cx
   606 00002748 6681F90400          <1>     cmp cx, 4h
   607 0000274D 75EB                <1>     jnz .dreg11
   608                              <1> .dreg2:
   609 0000274F 48B908000000000000- <1>     mov rcx, 8h
   609 00002758 00                  <1>
   610                              <1> ;Now print register value
   611 00002759 488B1E              <1>     mov rbx, qword [rsi]    ;Get qword from storage
   612 0000275C 81EE08000000        <1>     sub esi, 8
   613 00002762 480FCB              <1>     bswap rbx    ;Change endianness
   614                              <1> .dreg21:
   615 00002765 B404                <1>     mov ah, 04h
   616 00002767 88D8                <1>     mov al, bl
   617 00002769 CD30                <1>     int 30h
   618 0000276B 48C1EB08            <1>     shr rbx, 8h    ;Shift down by a byte
   619 0000276F FEC9                <1>     dec cl
   620 00002771 75F2                <1>     jnz .dreg21
   621 00002773 48FFC7              <1>     inc rdi
   622                              <1> 
   623 00002776 B403                <1>     mov ah, 3
   624 00002778 CD30                <1>     int 30h
   625 0000277A 80C203              <1>     add dl, 3
   626 0000277D B402                <1>     mov ah, 2
   627 0000277F CD30                <1>     int 30h
   628 00002781 4881C504000000      <1>     add rbp, 4
   629 00002788 4881FD40000000      <1>     cmp rbp, 40h
   630 0000278F 7299                <1>     jb .dreg1
   631                              <1> 
   632                              <1> ;Print RIP
   633                              <1> .drip0:
   634 00002791 4831C9              <1>     xor rcx, rcx
   635                              <1> .drip1:
   636                              <1> ;Print name
   637 00002794 8A840D[1B290000]    <1>     mov al, byte [.regtbl+rbp+rcx]
   638 0000279B B40E                <1>     mov ah, 0Eh
   639 0000279D CD30                <1>     int 30h
   640 0000279F 66FFC1              <1>     inc cx
   641 000027A2 6681F90400          <1>     cmp cx, 4h
   642 000027A7 75EB                <1>     jne .drip1
   643                              <1> 
   644 000027A9 48B908000000000000- <1>     mov rcx, 8
   644 000027B2 00                  <1>
   645 000027B3 488B3425[F4010000]  <1>     mov rsi, qword [mcpUserRip]
   646 000027BB 480FCE              <1>     bswap rsi
   647                              <1> .drip2:
   648                              <1> ;Print value
   649 000027BE B404                <1>     mov ah, 04h
   650 000027C0 4088F0              <1>     mov al, sil
   651 000027C3 CD30                <1>     int 30h
   652 000027C5 48C1EE08            <1>     shr rsi, 8h    ;Shift down by a byte
   653 000027C9 FEC9                <1>     dec cl
   654 000027CB 75F1                <1>     jnz .drip2
   655 000027CD 4881C504000000      <1>     add rbp, 4    ;Offset into table
   656                              <1> 
   657 000027D4 55                  <1>     push rbp
   658 000027D5 48BD-               <1>     mov rbp, .ipstrg
   658 000027D7 [7829000000000000]  <1>
   659 000027DF 66B80413            <1>     mov ax, 1304h
   660 000027E3 CD30                <1>     int 30h    
   661 000027E5 B107                <1>     mov cl, 7
   662 000027E7 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
   663 000027EF 488B4008            <1>     mov rax, qword [rax + 08h]  ;Get the old stack pointer
   664 000027F3 488B18              <1>     mov rbx, qword [rax]    ;Get the address of 8 bytes at that instruction
   665 000027F6 488B1B              <1>     mov rbx, qword [rbx]    ;Get the bytes
   666 000027F9 88D8                <1>     mov al, bl
   667 000027FB B404                <1>     mov ah, 04h
   668 000027FD CD30                <1>     int 30h
   669 000027FF 48C1EB08            <1>     shr rbx, 8
   670 00002803 B40E                <1>     mov ah, 0Eh   ;Add a space to indicate mod r/m + optionals
   671 00002805 B02D                <1>     mov al, '-'
   672 00002807 CD30                <1>     int 30h
   673                              <1> .ssep0:
   674 00002809 88D8                <1>     mov al, bl
   675 0000280B B404                <1>     mov ah, 04h
   676 0000280D CD30                <1>     int 30h
   677 0000280F 48C1EB08            <1>     shr rbx, 8
   678 00002813 FEC9                <1>     dec cl
   679 00002815 75F2                <1>     jnz .ssep0
   680                              <1> 
   681 00002817 48BD-               <1>     mov rbp, .crlf
   681 00002819 [D42E000000000000]  <1>
   682 00002821 48B804130000000000- <1>     mov rax, 1304h
   682 0000282A 00                  <1>
   683 0000282B 48BB07000000000000- <1>     mov rbx, 7h
   683 00002834 00                  <1>
   684 00002835 CD30                <1>     int 30h
   685 00002837 5D                  <1>     pop rbp
   686                              <1> 
   687 00002838 668CC8              <1>     mov ax, cs
   688 0000283B E87D000000          <1>     call .dsegregwrite
   689 00002840 668CD8              <1>     mov ax, ds
   690 00002843 E875000000          <1>     call .dsegregwrite
   691 00002848 668CC0              <1>     mov ax, es
   692 0000284B E86D000000          <1>     call .dsegregwrite
   693 00002850 668CD0              <1>     mov ax, ss
   694 00002853 E865000000          <1>     call .dsegregwrite
   695 00002858 668CE0              <1>     mov ax, fs
   696 0000285B E85D000000          <1>     call .dsegregwrite
   697 00002860 668CE8              <1>     mov ax, gs
   698 00002863 E855000000          <1>     call .dsegregwrite
   699                              <1> 
   700 00002868 55                  <1>     push rbp
   701 00002869 48BD-               <1>     mov rbp, .crlf
   701 0000286B [D42E000000000000]  <1>
   702 00002873 48B804130000000000- <1>     mov rax, 1304h
   702 0000287C 00                  <1>
   703 0000287D 30FF                <1>     xor bh, bh
   704 0000287F CD30                <1>     int 30h
   705 00002881 5D                  <1>     pop rbp
   706                              <1> .drflagwrite:
   707 00002882 4831C9              <1>     xor rcx, rcx
   708                              <1> .drflg1:    ;Print register name
   709 00002885 8A840D[1B290000]    <1>     mov al, byte [.regtbl+rbp+rcx]
   710 0000288C B40E                <1>     mov ah, 0Eh
   711 0000288E CD30                <1>     int 30h
   712 00002890 48FFC1              <1>     inc rcx
   713 00002893 4881F907000000      <1>     cmp rcx, 7
   714 0000289A 75E9                <1>     jnz .drflg1
   715                              <1> 
   716 0000289C 48FFC1              <1>     inc rcx
   717 0000289F 488B1425[EC010000]  <1>     mov rdx, qword [mcpUserBase]    ;Get flags into rdx
   718 000028A7 488B12              <1>     mov rdx, qword [rdx]
   719 000028AA 480FCA              <1>     bswap rdx
   720                              <1> .drflg2:
   721 000028AD B404                <1>     mov ah, 04h
   722 000028AF 88D0                <1>     mov al, dl
   723 000028B1 CD30                <1>     int 30h
   724 000028B3 48C1EA08            <1>     shr rdx, 8
   725 000028B7 48FFC9              <1>     dec rcx
   726 000028BA 75F1                <1>     jnz .drflg2
   727                              <1> 
   728                              <1> .dregexit:
   729 000028BC C3                  <1>     ret
   730                              <1> .dsegregwrite:
   731 000028BD 4831C9              <1>     xor rcx, rcx
   732 000028C0 6689C2              <1>     mov dx, ax    ;save
   733                              <1> .dsegreg1:    ;Print register name
   734 000028C3 8A840D[1B290000]    <1>     mov al, byte [.regtbl+rbp+rcx]
   735                              <1>     ;xor bh, bh
   736 000028CA B40E                <1>     mov ah, 0Eh
   737 000028CC CD30                <1>     int 30h
   738 000028CE 48FFC1              <1>     inc rcx
   739 000028D1 4881F903000000      <1>     cmp rcx, 3
   740 000028D8 75E9                <1>     jnz .dsegreg1
   741                              <1> 
   742 000028DA 88F0                <1>     mov al, dh
   743 000028DC B404                <1>     mov ah, 04h
   744 000028DE CD30                <1>     int 30h
   745 000028E0 88D0                <1>     mov al, dl
   746 000028E2 B404                <1>     mov ah, 04h
   747 000028E4 CD30                <1>     int 30h
   748                              <1> 
   749 000028E6 4801CD              <1>     add rbp, rcx
   750 000028E9 B403                <1>     mov ah, 3
   751 000028EB CD30                <1>     int 30h
   752 000028ED 80C202              <1>     add dl, 2
   753 000028F0 B402                <1>     mov ah, 2
   754 000028F2 CD30                <1>     int 30h
   755 000028F4 C3                  <1>     ret
   756                              <1> 
   757                              <1> .regcrlf:
   758 000028F5 4831FF              <1>     xor rdi, rdi
   759 000028F8 55                  <1>     push rbp
   760 000028F9 50                  <1>     push rax
   761 000028FA 53                  <1>     push rbx
   762 000028FB 48BD-               <1>     mov rbp, .crlf
   762 000028FD [D42E000000000000]  <1>
   763 00002905 48B804130000000000- <1>     mov rax, 1304h
   763 0000290E 00                  <1>
   764 0000290F 30FF                <1>     xor bh, bh
   765 00002911 CD30                <1>     int 30h
   766 00002913 5B                  <1>     pop rbx
   767 00002914 58                  <1>     pop rax
   768 00002915 5D                  <1>     pop rbp
   769 00002916 E91FFEFFFF          <1>     jmp .dreg11
   770                              <1> 
   771 0000291B 5241583D5242583D52- <1> .regtbl  db "RAX=", "RBX=", "RCX=", "RDX=", "RSI=", "RDI=", "R8 =",
   771 00002924 43583D5244583D5253- <1>
   771 0000292D 493D5244493D523820- <1>
   771 00002936 3D                  <1>
   772 00002937 5239203D5231303D52- <1>          db "R9 =", "R10=", "R11=", "R12=", "R13=", "R14=", "R15=",
   772 00002940 31313D5231323D5231- <1>
   772 00002949 333D5231343D523135- <1>
   772 00002952 3D                  <1>
   773 00002953 5242503D5253503D52- <1>          db "RBP=", "RSP=", "RIP=","CS=", "DS=", "ES=", "SS=", "FS=", 
   773 0000295C 49503D43533D44533D- <1>
   773 00002965 45533D53533D46533D  <1>
   774 0000296E 47533D              <1>          db "GS="
   775 00002971 52464C4147533D      <1> .rflgs   db "RFLAGS="
   776 00002978 20205B5249505D3D00  <1> .ipstrg: db "  [RIP]=",0
   777                              <1> .dumpMemory:
   778 00002981 50                  <1>     push rax
   779 00002982 53                  <1>     push rbx
   780 00002983 51                  <1>     push rcx
   781 00002984 52                  <1>     push rdx
   782 00002985 57                  <1>     push rdi
   783 00002986 56                  <1>     push rsi
   784 00002987 55                  <1>     push rbp
   785 00002988 4150                <1>     push r8
   786 0000298A 4151                <1>     push r9
   787                              <1> 
   788 0000298C 66B80413            <1>     mov ax, 1304h
   789 00002990 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
   789 00002992 [D22E000000000000]  <1>
   790 0000299A CD30                <1>     int 30h
   791 0000299C 66B80204            <1>     mov ax, 0402h    ;Get 2 dwords
   792 000029A0 E85D040000          <1>     call .keyb
   793 000029A5 4885ED              <1>     test rbp, rbp
   794 000029A8 0F8442010000        <1>     jz .dmnoargs
   795 000029AE B002                <1>     mov al, 2    ;Number of user inputs to convert
   796 000029B0 E8ED030000          <1>     call .arg
   797 000029B5 FEC8                <1>     dec al
   798 000029B7 0F843D010000        <1>     jz .dmnoargs1
   799 000029BD FEC8                <1>     dec al    ;More than 2 args, error
   800 000029BF 0F850E010000        <1>     jnz .dmbadexit
   801 000029C5 4C8B4508            <1>     mov r8, qword [rbp + 8]    ;First argument, #Base
   802 000029C9 4C8B4D00            <1>     mov r9, qword [rbp]    ;Second argument, #Number of bytes
   803                              <1> .dmmain00:
   804 000029CD 4D85C9              <1>     test r9, r9
   805 000029D0 0F84FD000000        <1>     jz .dmbadexit
   806 000029D6 66B80413            <1>     mov ax, 1304h
   807 000029DA 48BD-               <1>     mov rbp, .crlf
   807 000029DC [D42E000000000000]  <1>
   808 000029E4 CD30                <1>     int 30h
   809 000029E6 4C89C2              <1>     mov rdx, r8
   810 000029E9 E85C010000          <1>     call .dmcsaddrprint
   811 000029EE 30FF                <1>     xor bh, bh
   812 000029F0 B403                <1>     mov ah, 03h
   813 000029F2 CD30                <1>     int 30h
   814 000029F4 B219                <1>     mov dl, 25
   815 000029F6 B402                <1>     mov ah, 02h
   816 000029F8 CD30                <1>     int 30h
   817 000029FA 4C89C6              <1>     mov rsi, r8    ;point rsi at r8
   818 000029FD 48F7C608000000      <1>     test rsi, 08h    ;If it starts between a qword and para
   819                              <1> 
   820 00002A04 48F7C60F000000      <1>     test rsi, 0Fh
   821 00002A0B 7430                <1>     jz .dmmain0    ;If it starts on paragraph bndry, continue as normal
   822 00002A0D 56                  <1>     push rsi
   823 00002A0E 4881E60F000000      <1>     and rsi, 0Fh
   824 00002A15 4881FE08000000      <1>     cmp rsi, 8
   825 00002A1C 720F                <1>     jb .dmmain01
   826 00002A1E 48B901000000000000- <1>     mov rcx, 1
   826 00002A27 00                  <1>
   827 00002A28 E8F9000000          <1>     call .dmal1    ;Print one space
   828                              <1> .dmmain01:
   829 00002A2D 5E                  <1>     pop rsi
   830 00002A2E 48B801000000000000- <1>     mov rax, 1
   830 00002A37 00                  <1>
   831 00002A38 E8D0000000          <1>     call .dmalign
   832                              <1> 
   833                              <1> .dmmain0:
   834 00002A3D 4889F7              <1>     mov rdi, rsi    ;Save start point at rdi
   835 00002A40 4151                <1>     push r9
   836                              <1> .dmmain1:    ;This loop prints a line
   837 00002A42 AC                  <1>     lodsb
   838 00002A43 B404                <1>     mov ah, 4h
   839 00002A45 CD30                <1>     int 30h
   840 00002A47 49FFC9              <1>     dec r9
   841 00002A4A 7416                <1>     jz .dmmain2
   842 00002A4C 48F7C608000000      <1>     test rsi, 08h    ;This is zero iff rsi has bit 4 set
   843 00002A53 0F85D9000000        <1>     jnz .dmhyphen1
   844 00002A59 48F7C60F000000      <1>     test rsi, 0Fh    ;This is zero iff lower nybble is zero
   845 00002A60 75E0                <1>     jnz .dmmain1
   846                              <1> .dmmain2:
   847                              <1> ;Now the numbers have been printed, get the ascii row too
   848                              <1> ;First check if numbers have stopped short of 16
   849 00002A62 4D85C9              <1>     test r9, r9
   850 00002A65 7500                <1>     jnz .dmmain21    ;end of row
   851                              <1> 
   852                              <1> .dmmain21:
   853 00002A67 4159                <1>     pop r9
   854 00002A69 30FF                <1>     xor bh, bh
   855 00002A6B B403                <1>     mov ah, 03h
   856 00002A6D CD30                <1>     int 30h
   857 00002A6F B23E                <1>     mov dl, 62
   858 00002A71 B402                <1>     mov ah, 02h
   859 00002A73 CD30                <1>     int 30h
   860 00002A75 4889FE              <1>     mov rsi, rdi    ;Reload value
   861 00002A78 48F7C60F000000      <1>     test rsi, 0Fh
   862 00002A7F 7408                <1>     jz .dmmain3    ;If it starts on paragraph bndry, continue as normal
   863 00002A81 4831C0              <1>     xor rax, rax    ;no shift
   864 00002A84 E884000000          <1>     call .dmalign
   865                              <1> 
   866                              <1> .dmmain3:
   867 00002A89 AC                  <1>     lodsb
   868 00002A8A 49FFC9              <1>     dec r9
   869 00002A8D 3C30                <1>     cmp al, 30h
   870 00002A8F 660F420425-         <1>     cmovb ax, word [.dmdot]    ;bring the dot to ax
   870 00002A94 [712B0000]          <1>
   871 00002A98 B40E                <1>     mov ah, 0Eh
   872 00002A9A CD30                <1>     int 30h
   873 00002A9C 4D85C9              <1>     test r9, r9
   874 00002A9F 7443                <1>     jz .dmexit
   875 00002AA1 48F7C60F000000      <1>     test rsi, 0Fh    ;Check if lower nybble is 0
   876 00002AA8 75DF                <1>     jnz .dmmain3
   877                              <1> 
   878 00002AAA 48BD-               <1>     mov rbp, .crlf
   878 00002AAC [D42E000000000000]  <1>
   879 00002AB4 66B80413            <1>     mov ax, 1304h
   880 00002AB8 CD30                <1>     int 30h
   881                              <1> 
   882 00002ABA 4889F2              <1>     mov rdx, rsi
   883 00002ABD E888000000          <1>     call .dmcsaddrprint
   884                              <1> 
   885 00002AC2 B403                <1>     mov ah, 03h
   886 00002AC4 30FF                <1>     xor bh, bh
   887 00002AC6 CD30                <1>     int 30h
   888 00002AC8 B219                <1>     mov dl, 25
   889 00002ACA B402                <1>     mov ah, 02h
   890 00002ACC CD30                <1>     int 30h
   891 00002ACE E96AFFFFFF          <1>     jmp .dmmain0
   892                              <1> 
   893                              <1> .dmbadexit:
   894 00002AD3 48BD-               <1>     mov rbp, .dmbadargs
   894 00002AD5 [732B000000000000]  <1>
   895 00002ADD 66B80413            <1>     mov ax, 1304h
   896 00002AE1 CD30                <1>     int 30h
   897 00002AE3 C3                  <1>     ret;Reload program, error!
   898                              <1> .dmexit:
   899 00002AE4 4159                <1>     pop r9
   900 00002AE6 4158                <1>     pop r8
   901 00002AE8 5D                  <1>     pop rbp
   902 00002AE9 5E                  <1>     pop rsi
   903 00002AEA 5F                  <1>     pop rdi
   904 00002AEB 5A                  <1>     pop rdx
   905 00002AEC 59                  <1>     pop rcx
   906 00002AED 5B                  <1>     pop rbx
   907 00002AEE 58                  <1>     pop rax
   908 00002AEF C3                  <1>     ret
   909                              <1> .dmnoargs:
   910 00002AF0 4C8B0425[F4010000]  <1>     mov r8, qword [mcpUserRip]
   911                              <1>     ;add r8, 180h    ;Add 180 bytes, to bypass internal work areas
   912 00002AF8 EB04                <1>     jmp short .dmnoargscommon
   913                              <1> .dmnoargs1:
   914 00002AFA 4C8B4500            <1>     mov r8, qword [rbp]
   915                              <1> .dmnoargscommon:
   916 00002AFE 49B980000000000000- <1>     mov r9, 80h
   916 00002B07 00                  <1>
   917 00002B08 E9C0FEFFFF          <1>     jmp .dmmain00
   918                              <1> 
   919                              <1> .dmalign:    ;Print blank chars for offset
   920                              <1> ;Works out from rsi
   921                              <1> ;rax contains value for shl
   922 00002B0D 56                  <1>     push rsi
   923 00002B0E 4889F1              <1>     mov rcx, rsi
   924 00002B11 4881E1F0FFFFFF      <1>     and rcx, 0FFFFFFFFFFFFFFF0h    ;Round down
   925 00002B18 4829CE              <1>     sub rsi, rcx
   926 00002B1B 4887CE              <1>     xchg rcx, rsi
   927 00002B1E 5E                  <1>     pop rsi
   928 00002B1F 4891                <1>     xchg rcx, rax
   929 00002B21 48D3E0              <1>     shl rax, cl
   930 00002B24 4891                <1>     xchg rcx, rax
   931                              <1> .dmal1:
   932 00002B26 66B8200E            <1>     mov ax, 0E20h
   933 00002B2A CD30                <1>     int 30h
   934 00002B2C 48FFC9              <1>     dec rcx
   935 00002B2F 75F5                <1>     jnz .dmal1
   936 00002B31 C3                  <1>     ret
   937                              <1> 
   938                              <1> .dmhyphen1:
   939 00002B32 48F7C607000000      <1>     test rsi, 07h    ;If the rest of the bits are set, go away
   940 00002B39 0F8503FFFFFF        <1>     jnz .dmmain1
   941 00002B3F 66B82D0E            <1>     mov ax, 0E2Dh    ;2dh="-"
   942 00002B43 CD30                <1>     int 30h
   943 00002B45 E9F8FEFFFF          <1>     jmp .dmmain1
   944                              <1> .dmcsaddrprint:
   945 00002B4A 668CC8              <1>     mov ax, cs    ;Get current code segment into ax
   946 00002B4D 88E0                <1>     mov al, ah
   947 00002B4F B404                <1>     mov ah, 04h    ;print upper byte
   948 00002B51 CD30                <1>     int 30h
   949 00002B53 668CC8              <1>     mov ax, cs
   950 00002B56 B404                <1>     mov ah, 04h
   951 00002B58 CD30                <1>     int 30h        ;print lower byte
   952 00002B5A 66B83A0E            <1>     mov ax, 0E3Ah
   953                              <1> 
   954 00002B5E B108                <1>     mov cl, 8
   955 00002B60 CD30                <1>     int 30h
   956                              <1> 
   957                              <1> .dmrollprint:
   958                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   959                              <1> ;repeats, cl times.
   960 00002B62 48C1C208            <1>     rol rdx, 8
   961 00002B66 88D0                <1>     mov al, dl
   962 00002B68 B404                <1>     mov ah, 04h
   963 00002B6A CD30                <1>     int 30h
   964 00002B6C FEC9                <1>     dec cl
   965 00002B6E 75F2                <1>     jnz .dmrollprint
   966 00002B70 C3                  <1>     ret
   967 00002B71 2E00                <1> .dmdot:    db    ".",0
   968 00002B73 0A0D53796E74617820- <1> .dmbadargs:    db 0Ah, 0Dh,"Syntax error",0
   968 00002B7C 6572726F7200        <1>
   969                              <1> 
   970                              <1> .editMemory:
   971 00002B82 66B80413            <1>     mov ax, 1304h
   972 00002B86 30FF                <1>     xor bh, bh
   973 00002B88 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
   973 00002B8A [D22E000000000000]  <1>
   974 00002B92 CD30                <1>     int 30h
   975                              <1> 
   976 00002B94 66B80104            <1>     mov ax, 0401h    ;Get up to one qword
   977 00002B98 E865020000          <1>     call .keyb
   978 00002B9D 4885ED              <1>     test rbp, rbp        ;No chars entered?
   979 00002BA0 0F8445F6FFFF        <1>     jz .bad_command
   980 00002BA6 E8F7010000          <1>     call .arg
   981 00002BAB 488B7D00            <1>     mov rdi, qword [rbp]    ;First arg, Dword Address 
   982                              <1> 
   983 00002BAF 48BD-               <1>     mov rbp, .crlf
   983 00002BB1 [D42E000000000000]  <1>
   984 00002BB9 30FF                <1>     xor bh, bh
   985 00002BBB 48B804130000000000- <1>     mov rax, 1304h
   985 00002BC4 00                  <1>
   986 00002BC5 CD30                <1>     int 30h
   987                              <1>     
   988 00002BC7 4889FE              <1>     mov rsi, rdi
   989 00002BCA AC                  <1>     lodsb    ;Get byte into al
   990 00002BCB B404                <1>     mov ah, 04
   991 00002BCD CD30                <1>     int 30h
   992 00002BCF B02E                <1>     mov al, "."
   993 00002BD1 E8CD020000          <1>     call .print
   994 00002BD6 66B80101            <1>     mov ax, 0101h    ;Get 1 byte
   995 00002BDA E823020000          <1>     call .keyb
   996 00002BDF 4885ED              <1>     test rbp, rbp        ;No chars entered?
   997 00002BE2 0F84EBFEFFFF        <1>     jz .dmbadexit
   998 00002BE8 E8B5010000          <1>     call .arg
   999 00002BED 4889EE              <1>     mov rsi, rbp    ;Point rsi to the stack
  1000 00002BF0 A4                  <1>     movsb            ;Move byte from rsi to rdi
  1001                              <1> 
  1002 00002BF1 C3                  <1>     ret
  1003                              <1> 
  1004                              <1> .jumpProc:
  1005 00002BF2 66B80413            <1>     mov ax, 1304h
  1006 00002BF6 30FF                <1>     xor bh, bh
  1007 00002BF8 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
  1007 00002BFA [D22E000000000000]  <1>
  1008 00002C02 CD30                <1>     int 30h
  1009 00002C04 66B80104            <1>     mov ax, 0401h    ;Get 1 dword (forbit going too high eh?)
  1010 00002C08 E8F5010000          <1>     call .keyb
  1011 00002C0D 4885ED              <1>     test rbp, rbp        ;No chars entered?
  1012 00002C10 743B                <1>     jz .proceedDefault
  1013 00002C12 E88B010000          <1>     call .arg
  1014 00002C17 FEC8                <1>     dec al
  1015 00002C19 0F85B4FEFFFF        <1>     jnz .dmbadexit
  1016 00002C1F 488B6D00            <1>     mov rbp, qword [rbp]    ;First argument, Address of procedure
  1017 00002C23 48892C25[F4010000]  <1>     mov qword [mcpUserRip], rbp   ;Move first argument into new Rip  
  1018 00002C2B E81B010000          <1>     call .loadMainRegisters
  1019 00002C30 488B6008            <1>     mov rsp, qword [rax + 08h]
  1020 00002C34 488B0425[04020000]  <1>     mov rax, qword [mcpUserRaxStore]
  1021 00002C3C 48CF                <1>     iretq
  1022                              <1> .singleStep:
  1023                              <1> ;When s is pressed, the program proceeds by a single step.
  1024                              <1> ;Sets trap flag on
  1025 00002C3E 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
  1026 00002C46 48810800010000      <1>     or qword [rax + 00h], 100h  ;Set trap flag on
  1027                              <1> .proceedDefault:
  1028 00002C4D E8F9000000          <1>     call .loadMainRegisters
  1029 00002C52 488B6008            <1>     mov rsp, qword [rax + 08h]
  1030 00002C56 488B0425[04020000]  <1>     mov rax, qword [mcpUserRaxStore]
  1031 00002C5E 48CF                <1>     iretq
  1032                              <1> 
  1033                              <1> .storageRead:
  1034 00002C60 50                  <1>     push rax
  1035 00002C61 B800820000          <1>     mov eax, 8200h ;LBA Read function
  1036 00002C66 EB06                <1>     jmp short .storageCommon
  1037                              <1> .storageWrite:
  1038 00002C68 50                  <1>     push rax
  1039 00002C69 B800830000          <1>     mov eax, 8300h ;LBA Write function
  1040                              <1> .storageCommon:
  1041                              <1> ;l/w [Address Buffer] [Drive] [Sector] [Count]
  1042 00002C6E 53                  <1>     push rbx
  1043 00002C6F 51                  <1>     push rcx
  1044 00002C70 52                  <1>     push rdx
  1045 00002C71 56                  <1>     push rsi
  1046 00002C72 57                  <1>     push rdi
  1047 00002C73 55                  <1>     push rbp
  1048                              <1> 
  1049 00002C74 89C6                <1>     mov esi, eax        ;Save LBA r/w function number in esi
  1050 00002C76 66B80413            <1>     mov ax, 1304h
  1051 00002C7A 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
  1051 00002C7C [D22E000000000000]  <1>
  1052 00002C84 CD30                <1>     int 30h
  1053                              <1> 
  1054 00002C86 66B80404            <1>     mov ax, 0404h    ;Get 4 qwords
  1055 00002C8A E873010000          <1>     call .keyb
  1056 00002C8F 4885ED              <1>     test rbp, rbp
  1057 00002C92 7452                <1>     jz .storageError
  1058 00002C94 B004                <1>     mov al, 4    ;Number of user inputs to convert
  1059 00002C96 E807010000          <1>     call .arg
  1060 00002C9B 3C04                <1>     cmp al, 4   ;If not 4 arguments, fail
  1061 00002C9D 7547                <1>     jne .storageError
  1062 00002C9F BF05000000          <1>     mov edi, 5
  1063                              <1> .sc0:
  1064 00002CA4 89F0                <1>     mov eax, esi                ;Get back LBA r/w function number into eax
  1065 00002CA6 488B5D18            <1>     mov rbx, qword [rbp + 24]   ;First argument, Address buffer
  1066 00002CAA 488B5510            <1>     mov rdx, qword [rbp + 16]   ;dl ONLY, Second argument
  1067 00002CAE 4881E2FF000000      <1>     and rdx, 0FFh
  1068 00002CB5 488B4D08            <1>     mov rcx, qword [rbp + 08]   ;LBA starting sector, third argument
  1069 00002CB9 488B7500            <1>     mov rsi, qword [rbp]        ;Sector count into rsi
  1070 00002CBD 4881E6FF000000      <1>     and rsi, 0FFh               ;Sector count can be at most 255
  1071 00002CC4 09F0                <1>     or eax, esi                 ;Add the sector count to eax
  1072 00002CC6 89C6                <1>     mov esi, eax                ;Copy the function number into esi for failures
  1073 00002CC8 81E600FF0000        <1>     and esi, 0FF00h             ;Save only byte two of esi, the function number
  1074 00002CCE CD33                <1>     int 33h
  1075 00002CD0 7308                <1>     jnc .storageExit
  1076                              <1> 
  1077 00002CD2 31C0                <1>     xor eax, eax
  1078 00002CD4 CD33                <1>     int 33h
  1079 00002CD6 FFCF                <1>     dec edi
  1080 00002CD8 75CA                <1>     jnz .sc0
  1081                              <1> .storageExit:
  1082 00002CDA 5D                  <1>     pop rbp
  1083 00002CDB 5F                  <1>     pop rdi
  1084 00002CDC 5E                  <1>     pop rsi
  1085 00002CDD 5A                  <1>     pop rdx
  1086 00002CDE 59                  <1>     pop rcx
  1087 00002CDF 5B                  <1>     pop rbx
  1088 00002CE0 58                  <1>     pop rax   
  1089 00002CE1 E912F4FFFF          <1>     jmp MCP_int.z11
  1090                              <1> .storageError: 
  1091 00002CE6 5D                  <1>     pop rbp
  1092 00002CE7 5F                  <1>     pop rdi
  1093 00002CE8 5E                  <1>     pop rsi
  1094 00002CE9 5A                  <1>     pop rdx
  1095 00002CEA 59                  <1>     pop rcx
  1096 00002CEB 5B                  <1>     pop rbx
  1097 00002CEC 58                  <1>     pop rax
  1098 00002CED E9F9F4FFFF          <1>     jmp .bad_command
  1099                              <1> .restartMcp:
  1100 00002CF2 CD40                <1>     int 40h     ;To allow returning to DOS
  1101                              <1> .clearscreen:
  1102 00002CF4 B307                <1>     mov bl, 07h
  1103 00002CF6 E8FCD3FFFF          <1>     call cls
  1104 00002CFB E9F8F3FFFF          <1>     jmp MCP_int.z11
  1105                              <1> .storeMainRegisters:
  1106 00002D00 9C                  <1>     pushfq
  1107 00002D01 8F00                <1>     pop qword [rax + 00h]      ;Flags
  1108                              <1>     ;mov qword [rax + 08h], rsp
  1109 00002D03 48896810            <1>     mov qword [rax + 10h], rbp
  1110 00002D07 4C897818            <1>     mov qword [rax + 18h], r15
  1111 00002D0B 4C897020            <1>     mov qword [rax + 20h], r14
  1112 00002D0F 4C896828            <1>     mov qword [rax + 28h], r13
  1113 00002D13 4C896030            <1>     mov qword [rax + 30h], r12
  1114 00002D17 4C895838            <1>     mov qword [rax + 38h], r11
  1115 00002D1B 4C895040            <1>     mov qword [rax + 40h], r10
  1116 00002D1F 4C894848            <1>     mov qword [rax + 48h], r9
  1117 00002D23 4C894050            <1>     mov qword [rax + 50h], r8
  1118 00002D27 48897858            <1>     mov qword [rax + 58h], rdi
  1119 00002D2B 48897060            <1>     mov qword [rax + 60h], rsi
  1120 00002D2F 48895068            <1>     mov qword [rax + 68h], rdx
  1121 00002D33 48894870            <1>     mov qword [rax + 70h], rcx
  1122 00002D37 48895878            <1>     mov qword [rax + 78h], rbx
  1123 00002D3B 488B1C25[04020000]  <1>     mov rbx, qword [mcpUserRaxStore]
  1124 00002D43 48899880000000      <1>     mov qword [rax + 80h], rbx  ;Store rax
  1125 00002D4A C3                  <1>     ret
  1126                              <1> .loadMainRegisters:
  1127 00002D4B 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
  1128 00002D53 488B5008            <1>     mov rdx, qword [rax + 08h]  ;Get old stack pointer into rdx
  1129 00002D57 488B1C25[F4010000]  <1>     mov rbx, qword [mcpUserRip]
  1130 00002D5F 48891A              <1>     mov qword [rdx], rbx    ;Move the userRip into rdx
  1131 00002D62 488B18              <1>     mov rbx, qword [rax + 00h]
  1132 00002D65 48895A10            <1>     mov qword [rdx + 10h], rbx  ;Move new flags into position on stack
  1133 00002D69 488B5878            <1>     mov rbx, qword [rax + 78h]
  1134 00002D6D 488B4870            <1>     mov rcx, qword [rax + 70h]
  1135 00002D71 488B5068            <1>     mov rdx, qword [rax + 68h]
  1136 00002D75 488B7060            <1>     mov rsi, qword [rax + 60h]
  1137 00002D79 488B7858            <1>     mov rdi, qword [rax + 58h]
  1138 00002D7D 4C8B4050            <1>     mov r8,  qword [rax + 50h]
  1139 00002D81 4C8B4848            <1>     mov r9,  qword [rax + 48h]
  1140 00002D85 4C8B5040            <1>     mov r10, qword [rax + 40h]
  1141 00002D89 4C8B5838            <1>     mov r11, qword [rax + 38h]
  1142 00002D8D 4C8B6030            <1>     mov r12, qword [rax + 30h]
  1143 00002D91 4C8B6828            <1>     mov r13, qword [rax + 28h]
  1144 00002D95 4C8B7020            <1>     mov r14, qword [rax + 20h]
  1145 00002D99 4C8B7818            <1>     mov r15, qword [rax + 18h]
  1146 00002D9D 488B6810            <1>     mov rbp, qword [rax + 10h]
  1147 00002DA1 C3                  <1>     ret
  1148                              <1> ;ARG    PROC    NEAR
  1149                              <1> .arg:
  1150                              <1> ;Number of arguments expected in buffer in al (could early terminate due to 
  1151                              <1> ; enter)
  1152                              <1> ;Converted qwords stored on stack with al indicating how many processed
  1153                              <1> ;rbp returns the base of the stack of stored arguments
  1154                              <1> ;rdx is our scratch register
  1155 00002DA2 53                  <1>     push rbx
  1156 00002DA3 51                  <1>     push rcx
  1157 00002DA4 52                  <1>     push rdx
  1158 00002DA5 56                  <1>     push rsi
  1159 00002DA6 4889E5              <1>     mov rbp, rsp    ;Preserve stack pointer
  1160 00002DA9 488B3425[FC010000]  <1>     mov rsi, qword [mcpUserkeybf]
  1161 00002DB1 30C9                <1>     xor cl, cl        ;Keep track of how many arguments processed
  1162                              <1> .a01:
  1163 00002DB3 4831D2              <1>     xor rdx, rdx    ;Clean rdx
  1164                              <1> .a1:
  1165 00002DB6 AC                  <1>     lodsb        ;Get the first byte into al
  1166 00002DB7 3C11                <1>     cmp al, 11h    ;Offset 11h is the space key
  1167 00002DB9 740E                <1>     jz .a2
  1168 00002DBB 3C12                <1>     cmp al, 12h    ;Offset 12h is the enter key
  1169 00002DBD 740F                <1>     jz .aexit        ;Anyway, enter is exit!
  1170 00002DBF 48C1E204            <1>     shl rdx, 4    ;Go to next sig fig
  1171 00002DC3 08C2                <1>     or dl, al    ;Put this byte into dl
  1172 00002DC5 7013                <1>     jo .error
  1173 00002DC7 EBED                <1>     jmp short .a1
  1174                              <1> .a2:
  1175 00002DC9 52                  <1>     push rdx    ;Store argument on stack
  1176 00002DCA FEC1                <1>     inc cl        ;One more argument processed
  1177 00002DCC EBE5                <1>     jmp short .a01
  1178                              <1> .aexit:
  1179 00002DCE 480FB6C1            <1>     movzx rax, cl    ;Return #of args processed
  1180 00002DD2 4887E5              <1>     xchg rsp, rbp    ;rbp points to bottom of argument stack 
  1181 00002DD5 5E                  <1>     pop rsi
  1182 00002DD6 5A                  <1>     pop rdx
  1183 00002DD7 59                  <1>     pop rcx
  1184 00002DD8 5B                  <1>     pop rbx
  1185 00002DD9 C3                  <1>     ret
  1186                              <1> .error:
  1187 00002DDA 48BD-               <1>     mov rbp, .emsg
  1187 00002DDC [F12D000000000000]  <1>
  1188 00002DE4 30FF                <1>     xor bh, bh
  1189 00002DE6 66B80413            <1>     mov ax, 1304h
  1190 00002DEA CD30                <1>     int 30h
  1191 00002DEC 5E                  <1>     pop rsi
  1192 00002DED 5A                  <1>     pop rdx
  1193 00002DEE 59                  <1>     pop rcx
  1194 00002DEF 5B                  <1>     pop rbx
  1195 00002DF0 C3                  <1>     ret
  1196 00002DF1 0A0D417267756D656E- <1> .emsg:    db 0Ah, 0Dh,"Argument error",0
  1196 00002DFA 74206572726F7200    <1>
  1197                              <1> ;ARG    ENDP
  1198                              <1> 
  1199                              <1> ;KEYB     PROC     NEAR
  1200                              <1> .keyb:
  1201                              <1> ;Number of arguments to accept is passed in al, in units of ah
  1202                              <1> ;ah=4 => Qwords, ah=3 => dwords... ah=2 => word, ah=1 => bytes
  1203                              <1> ;Arguments are stored in buffer, after USB area, of size 2*al qwords
  1204                              <1> ;All arguments CAN be up to qword in size, though not all subprogs,
  1205                              <1> ;    may use the full qword.
  1206                              <1> ;ch returns number of chars not processed
  1207 00002E02 50                  <1>     push rax
  1208 00002E03 53                  <1>     push rbx
  1209                              <1>     ;push rcx
  1210 00002E04 57                  <1>     push rdi
  1211 00002E05 52                  <1>     push rdx
  1212                              <1> 
  1213 00002E06 4831C9              <1>     xor rcx, rcx
  1214 00002E09 88C1                <1>     mov cl, al
  1215 00002E0B 51                  <1>     push rcx
  1216 00002E0C 88E1                <1>     mov cl, ah
  1217 00002E0E D2E0                <1>     shl al, cl  ;Multiply by 16 to get the number of bytes needed w/o spaces
  1218 00002E10 59                  <1>     pop rcx
  1219 00002E11 00C8                <1>     add al, cl  ;Add space for spaces
  1220 00002E13 FEC8                <1>     dec al      ;We reserve one space for a "non-user accessible" EOL at the end
  1221                              <1> 
  1222 00002E15 488B3C25[FC010000]  <1>     mov rdi, qword [mcpUserkeybf]    ;Data area in command tail
  1223 00002E1D 50                  <1>     push rax
  1224 00002E1E 48B810000000000000- <1>     mov rax, 10h
  1224 00002E27 00                  <1>
  1225 00002E28 57                  <1>     push rdi
  1226 00002E29 F348AB              <1>     rep stosq    ;Clear buffer space for al qwords (max 8)
  1227 00002E2C 5F                  <1>     pop rdi
  1228 00002E2D 58                  <1>     pop rax
  1229                              <1> 
  1230 00002E2E 88C5                <1>     mov ch, al    ;Rememebr 1 Qword is 16 ASCII chars
  1231 00002E30 88C2                <1>     mov dl, al    ;Let dl save this number
  1232 00002E32 4831ED              <1>     xor rbp, rbp    ;Cheap cop out char counter
  1233                              <1> 
  1234                              <1> .k1:
  1235 00002E35 6631C0              <1>     xor ax, ax
  1236 00002E38 CD36                <1>     int 36h
  1237 00002E3A 3C71                <1>     cmp al, "q"    ;Quit option
  1238 00002E3C 0F84B6F2FFFF        <1>     je .z11
  1239 00002E42 3C08                <1>     cmp al, 08h    ;Backspace
  1240 00002E44 7447                <1>     je .kb2
  1241 00002E46 3C0D                <1>     cmp al, 0Dh    ;Enter key pressed, we done
  1242 00002E48 7438                <1>     je .kend
  1243                              <1> 
  1244 00002E4A 84ED                <1>     test ch, ch    ;Have we filled a 16 char buffer?
  1245 00002E4C 74E7                <1>     jz .k1        ;Yes, await control key
  1246                              <1> 
  1247 00002E4E 4889FB              <1>     mov rbx, rdi    ;Save current offset into bbuffer
  1248 00002E51 51                  <1>     push rcx
  1249 00002E52 48BF-               <1>     mov rdi, .ascii
  1249 00002E54 [A82E000000000000]  <1>
  1250 00002E5C 48B913000000000000- <1>     mov rcx, .asciil
  1250 00002E65 00                  <1>
  1251 00002E66 F2AE                <1>     repne scasb        ;Find the offset of the char in al in the table
  1252 00002E68 59                  <1>     pop rcx            ;Doesnt affect flags
  1253 00002E69 4887FB              <1>     xchg rdi, rbx    ;Return value back to rdi 
  1254 00002E6C 75C7                <1>     jne .k1            ;Not a key from our buffer, loop again
  1255 00002E6E 48FFC5              <1>     inc rbp
  1256 00002E71 E82D000000          <1>     call .print        ;Print typed char
  1257                              <1> 
  1258 00002E76 488D83(57D1FFFF)    <1>     lea rax, qword [rbx - .ascii -1]    ;Work out difference
  1259                              <1> 
  1260 00002E7D AA                  <1>     stosb            ;Store the value in storage buffer, inc rdi
  1261 00002E7E FECD                <1>     dec ch            ;Decrement the number of typable chars
  1262 00002E80 EBB3                <1>     jmp short .k1    ;Get next char
  1263                              <1> .kend:
  1264 00002E82 66B81112            <1>     mov ax, 1211h    ;Store a space and EOF at the end (little endian!)
  1265 00002E86 66AB                <1>     stosw
  1266                              <1> 
  1267 00002E88 5A                  <1>     pop rdx
  1268 00002E89 5F                  <1>     pop rdi
  1269                              <1>     ;pop rcx    ;Return in cl the number of processed chars
  1270 00002E8A 5B                  <1>     pop rbx
  1271 00002E8B 58                  <1>     pop rax
  1272                              <1> .kb1:        
  1273 00002E8C C3                  <1>     ret
  1274                              <1> .kb2:
  1275                              <1> ;When a backspace is entered, DONT MOVE THIS PROC!
  1276 00002E8D 68[352E0000]        <1>     push .k1
  1277 00002E92 38D5                <1>     cmp ch, dl    ;If bbuf is empty, ignore backspace 
  1278 00002E94 74F6                <1>     jz .kb1
  1279 00002E96 48FFCF              <1>     dec rdi        ;Decrement pointer and print the bspace char
  1280 00002E99 FEC5                <1>     inc ch        ;Increment the number of typable chars
  1281 00002E9B 4885ED              <1>     test rbp, rbp
  1282 00002E9E 7403                <1>     jz .print    ;Dont decrement if rbp is zero
  1283 00002EA0 48FFCD              <1>     dec rbp
  1284                              <1> ;KEYB    ENDP
  1285                              <1> .print:    ;Print char in al
  1286 00002EA3 B40E                <1>     mov ah, 0Eh
  1287                              <1>     ;xor bh, bh
  1288 00002EA5 CD30                <1>     int 30h
  1289 00002EA7 C3                  <1>     ret
  1290 00002EA8 303132333435363738- <1> .ascii       db    "0123456789abcdef", 08h, 20h, 0Dh ;b/space, enter
  1290 00002EB1 396162636465660820- <1>
  1290 00002EBA 0D                  <1>
  1291                              <1> .asciil       equ    $ - .ascii
  1292 00002EBB 64657367706C777163- <1> .lst       db    'desgplwqcrbhiovamkx';dump,edit,go,single step,read,write,quit,
  1292 00002EC4 726268696F76616D6B- <1>
  1292 00002ECD 78                  <1>
  1293                              <1> ;clearscreen,registers,deBug regs,hex,in,out,version,Single Step alt, memory map
  1294                              <1> ; (k)connect, dixonnect
  1295                              <1> .lstl    equ    $ - .lst
  1296 00002ECE 0A0D2D00            <1> .prompt       db    0Ah, 0Dh, "-", 0    ;3Eh = >
  1297 00002ED2 2000                <1> .prompt2    db 20h,0
  1298 00002ED4 0A0D00              <1> .crlf       db    0Ah, 0Dh, 0
  1299                              <1> ;------------------------End of Interrupt------------------------
   101                                  %include "./Resident/Services/Int39h.asm"
   102                              <1> ;-------------------Restart Interrupt Int 39h--------------------
   103                              <1> ;This interrupt allows the user to soft reboot
   104                              <1> ;----------------------------------------------------------------
   105                              <1> bootstrapInt:
   106                              <1> ;Bootstrap loader, loads sector 88 of device 0 to 7C00h and jumps to it
   107                              <1> ;If not found, will restart the machine, failing that, iretq with CF set
   108 00002ED7 50                  <1>     push rax
   109 00002ED8 53                  <1>     push rbx
   110 00002ED9 51                  <1>     push rcx
   111 00002EDA 52                  <1>     push rdx
   112 00002EDB 56                  <1>     push rsi
   113                              <1> 
   114 00002EDC B9000100C0          <1>     mov ecx, 0C0000100h    ;Select fs register to load base addr
   115 00002EE1 488B0425[CD010000]  <1>     mov rax, qword [userBase]    ;Load address to fs
   116 00002EE9 31D2                <1>     xor edx, edx        ;Zero upper bytes
   117 00002EEB 0F30                <1>     wrmsr                ;Write msr to load fs base
   118                              <1> 
   119 00002EED BE0A000000          <1>     mov esi, 10
   120                              <1> ;Now load one sector of second prog from first device 
   121                              <1> .e0:
   122 00002EF2 6631D2              <1>     xor dx, dx  ;This also clears carry flag so no checking ah
   123 00002EF5 48BB007C0000000000- <1>     mov rbx, 7c00h
   123 00002EFE 00                  <1>
   124 00002EFF 488B0C25[BF010000]  <1>     mov rcx, qword [nextFilePtr]
   125 00002F07 668B0425[C7010000]  <1>     mov ax, word [numSectors]
   126 00002F0F B482                <1>     mov ah, 82h ;LBA Sector Read 
   127 00002F11 CD33                <1>     int 33h     ;Read one sector
   128 00002F13 730C                <1>     jnc .e1
   129                              <1> 
   130 00002F15 FFCE                <1>     dec esi
   131 00002F17 742F                <1>     jz .efail
   132                              <1> 
   133 00002F19 30D2                <1>     xor dl, dl
   134 00002F1B 30E4                <1>     xor ah, ah  ;Reset the device
   135 00002F1D CD33                <1>     int 33h
   136 00002F1F EBD1                <1>     jmp short .e0
   137                              <1> .e1:
   138 00002F21 31D2                <1>     xor edx, edx  ;Device number 0!
   139 00002F23 66813C25007C000055- <1>     cmp word [7c00h], 0AA55h ;The Boot signature
   139 00002F2C AA                  <1>
   140 00002F2D 7519                <1>     jne .efail
   141                              <1> ;State when system transferred:
   142                              <1> ; RSP = DFF8h, 1FFh qword stack from DFFFh to 7C00H + 42*200h sectors = D000h
   143                              <1> ; FS MSR = userbase pointer, can be used for segment override.
   144                              <1> ; DX = Int 33h boot device number
   145                              <1> ; RBX = LBA of first Logical Block after SCP/BIOS
   146                              <1> ; BDA and BIOS ready to go
   147 00002F2F 48BCF8DF0000000000- <1>     mov rsp, 0DFF8h ;Move Stack pointer to default init stack position
   147 00002F38 00                  <1>
   148 00002F39 31D2                <1>     xor edx, edx    ;Device boot number
   149 00002F3B 488B1C25[BF010000]  <1>     mov rbx, qword [nextFilePtr]     ;First sector on device after SCP/BIOS
   150 00002F43 E9(027C0000)        <1>     jmp 7C02h       ;New sector entry point
   151                              <1> .efail:
   152 00002F48 5E                  <1>     pop rsi
   153 00002F49 5A                  <1>     pop rdx
   154 00002F4A 59                  <1>     pop rcx
   155 00002F4B 5B                  <1>     pop rbx
   156 00002F4C 58                  <1>     pop rax
   157 00002F4D 804C241001          <1>     or byte [rsp + 2*8h], 1 ;Set carry flag
   158 00002F52 48CF                <1>     iretq
   159                              <1> ;------------------------End of Interrupt------------------------
   102                                  %include "./Resident/Services/Int3Ah.asm"
   103                              <1> ;-----------------System Timer Interrupt Int 3Ah-----------------
   104                              <1> ;System Timer functions:
   105                              <1> ; ah=0 -> Get tick count
   106                              <1> ; ah=1 -> Set tick count
   107                              <1> ; ah=2 -> Read RTC time
   108                              <1> ; ah=3 -> Set RTC time
   109                              <1> ; ah=4 -> Read RTC date
   110                              <1> ; ah=5 -> Set RTC date
   111                              <1> ; ah=6 -> Set RTC alarm
   112                              <1> ; ah=7 -> Reset RTC alarm
   113                              <1> ; ah=80h -> Get PIT divisor
   114                              <1> ; ah=81h -> Set PIT divisor
   115                              <1> ;----------------------------------------------------------------
   116                              <1> timerInt:
   117 00002F54 80FC80              <1>     cmp ah, 80h
   118 00002F57 737B                <1>     jae .tiext
   119 00002F59 84E4                <1>     test ah, ah
   120 00002F5B 7444                <1>     jz .gett
   121 00002F5D 80FC01              <1>     cmp ah, 1
   122 00002F60 745E                <1>     jz .sett
   123 00002F62 80FC02              <1>     cmp ah, 2
   124 00002F65 0F8497000000        <1>     jz .readRTCtime
   125 00002F6B 80FC03              <1>     cmp ah, 3
   126 00002F6E 0F84D8000000        <1>     jz .setRTCtime
   127 00002F74 80FC04              <1>     cmp ah, 4
   128 00002F77 0F8431010000        <1>     jz .readRTCdate
   129 00002F7D 80FC05              <1>     cmp ah, 5
   130 00002F80 0F845C010000        <1>     jz .setRTCdate
   131 00002F86 80FC06              <1>     cmp ah, 6
   132 00002F89 0F84B4010000        <1>     jz .setRTCalarm
   133 00002F8F 80FC07              <1>     cmp ah, 7
   134 00002F92 0F84F6010000        <1>     jz .resetRTCalarm
   135                              <1> .bad:
   136 00002F98 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   137 00002F9D B480                <1>     mov ah, 80h
   138                              <1> .exit:
   139 00002F9F 48CF                <1>     iretq
   140                              <1> .gett:
   141                              <1> ;Returns:
   142                              <1> ; al=Rolled over flag (0=not rolled)
   143                              <1> ; cx=Hi count
   144                              <1> ; dx=Lo count
   145 00002FA1 8B0425[37010000]    <1>     mov eax, dword [pit_ticks]
   146 00002FA8 6689C2              <1>     mov dx, ax    ;Lo count
   147 00002FAB C1E810              <1>     shr eax, 10h    ;Bring high word down
   148 00002FAE 30ED                <1>     xor ch, ch
   149 00002FB0 88C1                <1>     mov cl, al
   150 00002FB2 88E0                <1>     mov al, ah
   151 00002FB4 0FB6C0              <1>     movzx eax, al    ;Zero upper bytes
   152 00002FB7 882425[3A010000]    <1>     mov byte [pit_ticks + 3], ah    ;Move 0 into day OF counter
   153 00002FBE 48CF                <1>     iretq
   154                              <1> .sett:
   155                              <1> ;Called with:
   156                              <1> ; cx=Hi count (bzw. cl)
   157                              <1> ; dx=Lo count
   158                              <1> ;Returns: Nothing
   159 00002FC0 66891425[37010000]  <1>     mov word [pit_ticks], dx
   160 00002FC8 30ED                <1>     xor ch, ch    ;Reset the OF counter
   161 00002FCA 66890C25[39010000]  <1>     mov word [pit_ticks + 2], cx
   162 00002FD2 48CF                <1>     iretq
   163                              <1> 
   164                              <1> .tiext:    ;Extended Timer functions
   165 00002FD4 80EC80              <1>     sub ah, 80h
   166 00002FD7 7406                <1>     jz .getpitdiv
   167 00002FD9 FECC                <1>     dec ah
   168 00002FDB 740C                <1>     jz .setpitdiv
   169 00002FDD EBB9                <1>     jmp short .bad
   170                              <1> .getpitdiv:
   171                              <1> ;Returns:
   172                              <1> ; ax=PIT divisor
   173 00002FDF 668B0425[35010000]  <1>     mov ax, word [pit_divisor]
   174 00002FE7 48CF                <1>     iretq
   175                              <1> .setpitdiv:
   176                              <1> ;Called with:
   177                              <1> ; dx=divsor
   178                              <1> ;Returns: Nothing
   179 00002FE9 66891425[35010000]  <1>     mov word [pit_divisor], dx
   180 00002FF1 50                  <1>     push rax
   181 00002FF2 B036                <1>     mov al, 36h ;Bitmap for frequency write to channel 0 of PIT
   182 00002FF4 E643                <1>     out PITcommand, al
   183 00002FF6 6689D0              <1>     mov ax, dx
   184 00002FF9 E640                <1>     out PIT0, al    ;Send low byte of new divisor
   185 00002FFB 88E0                <1>     mov al, ah
   186 00002FFD E640                <1>     out PIT0, al    ;Send high byte of new divisor
   187 00002FFF 58                  <1>     pop rax
   188 00003000 48CF                <1>     iretq
   189                              <1> 
   190                              <1> .readRTCtime:
   191                              <1> ; dh = Seconds
   192                              <1> ; cl = Minutes
   193                              <1> ; ch = Hours
   194                              <1> ; dl = Daylight Savings   
   195 00003002 50                  <1>     push rax
   196 00003003 51                  <1>     push rcx
   197 00003004 31C9                <1>     xor ecx, ecx    ;Long counter
   198                              <1> .rrt0:
   199 00003006 FFC9                <1>     dec ecx
   200 00003008 743C                <1>     jz .rrtbad
   201 0000300A B08A                <1>     mov al, 8Ah ;Disable NMI and and read bit 7. When 0, read
   202 0000300C E89A010000          <1>     call .readRTC
   203 00003011 A880                <1>     test al, 80h    ;Check bit 7 is zero
   204 00003013 75F1                <1>     jnz .rrt0   ;If zero, fall and read RTC registers
   205                              <1> 
   206 00003015 59                  <1>     pop rcx         ;Pop upper word of ecx back
   207 00003016 B080                <1>     mov al, 80h     ;Get seconds
   208 00003018 E88E010000          <1>     call .readRTC
   209 0000301D 88C6                <1>     mov dh, al      ;Pack seconds in dh
   210 0000301F B082                <1>     mov al, 82h     ;Get minutes
   211 00003021 E885010000          <1>     call .readRTC
   212 00003026 88C1                <1>     mov cl, al      ;Pack minutes in cl
   213 00003028 B084                <1>     mov al, 84h     ;Get Hours
   214 0000302A E87C010000          <1>     call .readRTC
   215 0000302F 88C5                <1>     mov ch, al      ;Pack Hours in ch
   216 00003031 B08B                <1>     mov al, 8Bh     ;Get Status B for Daylight Savings
   217 00003033 E873010000          <1>     call .readRTC
   218 00003038 2401                <1>     and al, 1       ;Isolate bit 0
   219 0000303A 88C2                <1>     mov dl, al      ;Pack Daylight Savings bit in dl
   220 0000303C B00D                <1>     mov al, 0Dh     ;Enable NMI
   221 0000303E E868010000          <1>     call .readRTC
   222 00003043 58                  <1>     pop rax
   223 00003044 48CF                <1>     iretq
   224                              <1> .rrtbad:
   225 00003046 59                  <1>     pop rcx
   226 00003047 58                  <1>     pop rax
   227 00003048 F9                  <1>     stc
   228 00003049 C20800              <1>     ret 8   ;Set carry and return
   229                              <1> 
   230                              <1> .setRTCtime:
   231                              <1> ; dh = Seconds
   232                              <1> ; cl = Minutes
   233                              <1> ; ch = Hours
   234                              <1> ; dl = Daylight Savings 
   235 0000304C 50                  <1>     push rax
   236 0000304D 51                  <1>     push rcx
   237 0000304E 31C9                <1>     xor ecx, ecx
   238                              <1> .srt0:
   239 00003050 FFC9                <1>     dec ecx
   240 00003052 74F2                <1>     jz .rrtbad
   241 00003054 B08A                <1>     mov al, 8Ah ;Disable NMI and and read bit 7. When 0, write
   242 00003056 E850010000          <1>     call .readRTC
   243 0000305B A880                <1>     test al, 80h    ;Check bit 7 is zero
   244 0000305D 75F1                <1>     jnz .srt0   ;If zero, fall and write RTC registers
   245                              <1> 
   246 0000305F 59                  <1>     pop rcx
   247 00003060 B08B                <1>     mov al, 8Bh
   248 00003062 E844010000          <1>     call .readRTC
   249 00003067 80E201              <1>     and dl, 1   ;Ensure we only have the low bit of dl
   250 0000306A 08D0                <1>     or al, dl   ;Set the daylight savings bit of Status B
   251 0000306C 0C80                <1>     or al, 80h  ;Stop RTC updates
   252 0000306E 88C4                <1>     mov ah, al
   253 00003070 B08B                <1>     mov al, 8Bh ;Reset Status B Register, and daylight savings
   254 00003072 E83D010000          <1>     call .writeRTC
   255                              <1> 
   256 00003077 88F4                <1>     mov ah, dh  ;Pack seconds
   257 00003079 B080                <1>     mov al, 80h
   258 0000307B E834010000          <1>     call .writeRTC
   259 00003080 88CC                <1>     mov ah, cl  ;Pack minutes
   260 00003082 B082                <1>     mov al, 82h
   261 00003084 E82B010000          <1>     call .writeRTC
   262 00003089 88EC                <1>     mov ah, ch  ;Pack hours
   263 0000308B B084                <1>     mov al, 84h
   264 0000308D E822010000          <1>     call .writeRTC
   265                              <1> 
   266 00003092 B08B                <1>     mov al, 8Bh
   267 00003094 E812010000          <1>     call .readRTC
   268 00003099 247F                <1>     and al, 7Fh ;Clear the top bit
   269 0000309B 88C4                <1>     mov ah, al  ;Pack byte to send in ah
   270 0000309D B08B                <1>     mov al, 8Bh
   271 0000309F E810010000          <1>     call .writeRTC  ;Restart RTC
   272                              <1> 
   273 000030A4 B00D                <1>     mov al, 0Dh   ;Enable NMI
   274 000030A6 E800010000          <1>     call .readRTC
   275                              <1> 
   276 000030AB 58                  <1>     pop rax
   277 000030AC 48CF                <1>     iretq
   278                              <1>     
   279                              <1> .readRTCdate:
   280                              <1> ; ch = Reserved, Century (19/20/21...), fixed 20h for now
   281                              <1> ; cl = Year
   282                              <1> ; dh = Month
   283                              <1> ; dl = Day
   284 000030AE 50                  <1>     push rax
   285 000030AF 51                  <1>     push rcx
   286 000030B0 31C9                <1>     xor ecx, ecx
   287                              <1> .rrd0:
   288 000030B2 FFC9                <1>     dec ecx
   289 000030B4 7490                <1>     jz .rrtbad
   290 000030B6 B08A                <1>     mov al, 8Ah     ;Disable NMI and and read bit 7. When 0, write
   291 000030B8 E8EE000000          <1>     call .readRTC
   292 000030BD A880                <1>     test al, 80h    ;Check bit 7 is zero
   293 000030BF 75F1                <1>     jnz .rrd0       ;If zero, fall and read RTC registers
   294                              <1> 
   295 000030C1 59                  <1>     pop rcx
   296 000030C2 B087                <1>     mov al, 87h     ;Get Day of the Month
   297 000030C4 E8E2000000          <1>     call .readRTC
   298 000030C9 88C2                <1>     mov dl, al      ;Pack Day of the Month
   299 000030CB B088                <1>     mov al, 88h     ;Get Month of the Year
   300 000030CD E8D9000000          <1>     call .readRTC
   301 000030D2 88C6                <1>     mov dh, al      ;Pack Month of the Year
   302 000030D4 B089                <1>     mov al, 89h     ;Get bottom two digits of year
   303 000030D6 E8D0000000          <1>     call .readRTC
   304 000030DB 88C1                <1>     mov cl, al      ;Pack Year
   305 000030DD B514                <1>     mov ch, 20      ;BCD value for 20
   306                              <1> 
   307 000030DF 58                  <1>     pop rax
   308 000030E0 48CF                <1>     iretq
   309                              <1> 
   310                              <1> .setRTCdate:
   311                              <1> ; ch = Reserved, Century (19/20/21...), fixed 20h for now
   312                              <1> ; cl = Year
   313                              <1> ; dh = Month
   314                              <1> ; dl = Day
   315 000030E2 50                  <1>     push rax
   316 000030E3 51                  <1>     push rcx
   317 000030E4 31C9                <1>     xor ecx, ecx
   318                              <1> .srd0:
   319 000030E6 FFC9                <1>     dec ecx
   320 000030E8 0F8458FFFFFF        <1>     jz .rrtbad
   321 000030EE B08A                <1>     mov al, 8Ah     ;Disable NMI and and read bit 7. When 0, write
   322 000030F0 E8B6000000          <1>     call .readRTC
   323 000030F5 A880                <1>     test al, 80h    ;Check bit 7 is zero
   324 000030F7 75ED                <1>     jnz .srd0       ;If zero, fall and write RTC registers
   325                              <1> 
   326 000030F9 59                  <1>     pop rcx
   327 000030FA B08B                <1>     mov al, 8Bh
   328 000030FC E8AA000000          <1>     call .readRTC
   329 00003101 0C80                <1>     or al, 80h      ;Stop RTC updates
   330 00003103 88C4                <1>     mov ah, al
   331 00003105 B08B                <1>     mov al, 8Bh
   332 00003107 E8A8000000          <1>     call .writeRTC
   333 0000310C 88D4                <1>     mov ah, dl      ;Pack Day of the Month
   334 0000310E B087                <1>     mov al, 87h
   335 00003110 E89F000000          <1>     call .writeRTC
   336 00003115 88F4                <1>     mov ah, dh      ;Pack Month of the Year
   337 00003117 B088                <1>     mov al, 88h
   338 00003119 E896000000          <1>     call .writeRTC
   339 0000311E 88CC                <1>     mov ah, cl      ;Pack Year
   340 00003120 B089                <1>     mov al, 89h
   341 00003122 E88D000000          <1>     call .writeRTC
   342                              <1> 
   343 00003127 B08B                <1>     mov al, 8Bh
   344 00003129 E87D000000          <1>     call .readRTC
   345 0000312E 247F                <1>     and al, 7Fh ;Clear the top bit
   346 00003130 88C4                <1>     mov ah, al  ;Pack byte to send in ah
   347 00003132 B08B                <1>     mov al, 8Bh
   348 00003134 E87B000000          <1>     call .writeRTC  ;Restart RTC
   349                              <1> 
   350 00003139 B00D                <1>     mov al, 0Dh   ;Enable NMI
   351 0000313B E86B000000          <1>     call .readRTC
   352                              <1> 
   353 00003140 58                  <1>     pop rax
   354 00003141 48CF                <1>     iretq
   355                              <1> 
   356                              <1> .setRTCalarm:
   357                              <1> ; dh = Seconds for alarm
   358                              <1> ; cl = Minutes for alarm
   359                              <1> ; ch = Hours for alarm
   360 00003143 50                  <1>     push rax
   361 00003144 B08B                <1>     mov al, 8BH ;Get status B
   362 00003146 E860000000          <1>     call .readRTC
   363 0000314B A820                <1>     test al, 20h
   364 0000314D 7537                <1>     jnz .srabad ;If The alarm bit is already set, exit CF=CY
   365                              <1> 
   366 0000314F 88F4                <1>     mov ah, dh      ;Pack Seconds for alarm
   367 00003151 B081                <1>     mov al, 81h     
   368 00003153 E85C000000          <1>     call .writeRTC
   369 00003158 88CC                <1>     mov ah, cl      ;Pack Minutes for alarm
   370 0000315A B083                <1>     mov al, 83h
   371 0000315C E853000000          <1>     call .writeRTC
   372 00003161 88EC                <1>     mov ah, ch      ;Pack Hours for alarm
   373 00003163 B085                <1>     mov al, 85h
   374 00003165 E84A000000          <1>     call .writeRTC
   375                              <1> 
   376 0000316A B08B                <1>     mov al, 8Bh     ;Get Status B
   377 0000316C E83A000000          <1>     call .readRTC
   378 00003171 0C20                <1>     or al, 20h      ;Set Bit 5 - Alarm Interrupt Enable
   379 00003173 88C4                <1>     mov ah, al      ;Pack new Status B
   380 00003175 B08B                <1>     mov al, 8Bh
   381 00003177 E838000000          <1>     call .writeRTC 
   382                              <1> 
   383 0000317C B00D                <1>     mov al, 0Dh     ;Enable NMI
   384 0000317E E828000000          <1>     call .readRTC
   385                              <1> 
   386 00003183 58                  <1>     pop rax
   387 00003184 48CF                <1>     iretq
   388                              <1> .srabad:
   389 00003186 58                  <1>     pop rax
   390 00003187 804C241001          <1>     or byte [rsp + 2*8], 1 ;Set Carry Flag
   391 0000318C 48CF                <1>     iretq  
   392                              <1> .resetRTCalarm:
   393 0000318E 50                  <1>     push rax
   394 0000318F B08B                <1>     mov al, 8Bh     ;Get Status B
   395 00003191 E815000000          <1>     call .readRTC
   396 00003196 24DF                <1>     and al, 0DFh    ;Clear Alarm Interrupt Enable
   397 00003198 88C4                <1>     mov ah, al
   398 0000319A B08B                <1>     mov al, 8Bh
   399 0000319C E813000000          <1>     call .writeRTC
   400                              <1> 
   401 000031A1 B00D                <1>     mov al, 0Dh     ;Enable NMI
   402 000031A3 E803000000          <1>     call .readRTC 
   403 000031A8 58                  <1>     pop rax
   404 000031A9 48CF                <1>     iretq
   405                              <1> 
   406                              <1> .readRTC:
   407                              <1> ;Reads an RTC port, interrupts disabled throughout
   408                              <1> ;Input: al = I/O port to read
   409                              <1> ;Output: al = I/O data
   410 000031AB FA                  <1>     cli
   411 000031AC E670                <1>     out cmos_base, al
   412 000031AE E680                <1>     out waitp, al
   413 000031B0 E471                <1>     in al, cmos_data
   414 000031B2 FB                  <1>     sti
   415 000031B3 C3                  <1>     ret
   416                              <1> .writeRTC:
   417                              <1> ;Writes to an RTC port, interrupts disabled throughout 
   418                              <1> ;Input: al = I/O port to read, ah = Data byte to send
   419 000031B4 FA                  <1>     cli
   420 000031B5 E670                <1>     out cmos_base, al
   421 000031B7 E680                <1>     out waitp, al
   422 000031B9 88E0                <1>     mov al, ah
   423 000031BB E671                <1>     out cmos_data, al
   424 000031BD FB                  <1>     sti
   425 000031BE C3                  <1>     ret
   426                              <1> ;------------------------End of Interrupt------------------------
   103                                  %include "./Resident/Services/Int3Bh.asm"
   104                              <1> ;-----------------CTRL+BREAK Interrupt Int 3Bh-------------------
   105                              <1> ;CTRL+Break will call this!
   106                              <1> ;----------------------------------------------------------------
   107                              <1> ctrlbreak_io:
   108 000031BF 48CF                <1>     iretq
   109                              <1> ;------------------------End of Interrupt-------------------------
   104                                  %include "./Resident/Services/Int3Dh.asm"
   105                              <1> ;------------Screen Mode Parameters Interrupt Int 3Dh-------------
   106                              <1> ;This Interrupt returns in r8 the pointer to screen mode 
   107                              <1> ; parameters. It replaces the nice pointers in the IVT of yore.
   108                              <1> ;Returns in r8 to not conflict with ported apps
   109                              <1> ;----------------------------------------------------------------
   110                              <1> scr_params_io:
   111 000031C1 49B8-               <1>     mov r8, scr_mode_params
   111 000031C3 [6001000000000000]  <1>
   112 000031CB 48CF                <1>     iretq
   113                              <1> ;------------------------End of Interrupt------------------------
   105                                  %include "./Resident/Services/Int3Eh.asm"
   106                              <1> ;-----------------Disk Params Interrupt Int 3Eh------------------
   107                              <1> disk_params_io:
   108 000031CD 4C8B0425[AF010000]  <1>     mov r8, qword [diskDptPtr]    
   109 000031D5 4C8B0C25[B7010000]  <1>     mov r9, qword [fdiskDptPtr]
   110 000031DD 48CF                <1>     iretq
   111                              <1> ;------------------------End of Interrupt------------------------
   106                                  %include "./Resident/Services/Int3Fh.asm"
   107                              <1> ;------------------CGA font Interrupt Int 3Fh--------------------
   108                              <1> ;This Interrupt returns in r8 the pointer to the CGA font.
   109                              <1> ;It replaces the nice pointers in the IVT of yore.
   110                              <1> ;Returns in r8 to not conflict with ported apps
   111                              <1> ;----------------------------------------------------------------
   112                              <1> cga_ret_io: ;Get first pointer in list
   113 000031DF 4C0FB70425-         <1>     movzx r8, word [scr_vga_ptrs]
   113 000031E4 [68010000]          <1>
   114 000031E8 49C1E004            <1>     shl r8, 4
   115 000031EC 6644030425-         <1>     add r8w, word [scr_vga_ptrs + 2]
   115 000031F1 [6A010000]          <1>
   116 000031F5 48CF                <1>     iretq
   117                              <1> ;------------------------End of Interrupt------------------------
   107                                  ;========================RESIDENT DRIVERS=====================
   108                                  %include "./Resident/Hardware/IDE/ideDriv.asm"
   109                              <1> ;--------------------IDE Driver and data area--------------------
   110                              <1> IDE:
   111                              <1> .addControllerTable:
   112                              <1> ;Adds a PCI IDE controller to the internal data tables, if there is space
   113                              <1> ; If there is no space, returns with carry set.
   114                              <1> ;Input: eax = BAR5 address
   115                              <1> ;       ebx = PCI IO address
   116                              <1> ;Output: CF=NC, all ok, CF=CY, device not added.
   117 000031F7 56                  <1>     push rsi
   118 000031F8 803C25[5A030000]02  <1>     cmp byte [ideNumberOfControllers], 2
   119 00003200 7428                <1>     je .actfail ;If it is 2, fail
   120 00003202 FE0425[5A030000]    <1>     inc byte [ideNumberOfControllers]
   121 00003209 48BE-               <1>     mov rsi, ideControllerTable
   121 0000320B [5B03000000000000]  <1>
   122 00003213 803E00              <1>     cmp byte [rsi], 0   ;Is the first entry empty?
   123 00003216 7407                <1>     jz .act0    ;If yes, write entry
   124 00003218 4881C610000000      <1>     add rsi, ideTableEntrySize  ;Else, goto second entry space
   125                              <1> .act0:
   126 0000321F 891E                <1>     mov dword [rsi], ebx    ;Move first PCI IO addr
   127 00003221 C60600              <1>     mov byte [rsi], 0       ;Zero the register index
   128 00003224 894604              <1>     mov dword [rsi + 4], eax    ;Move next data
   129 00003227 F8                  <1>     clc
   130                              <1> .actexit:
   131 00003228 5E                  <1>     pop rsi
   132 00003229 C3                  <1>     ret
   133                              <1> .actfail:
   134 0000322A F9                  <1>     stc
   135 0000322B EBFB                <1>     jmp short .actexit
   136                              <1> .identifyDevice:
   137                              <1> ;dx should contain the base register
   138                              <1> ;al should contain either A0/B0 for master/slave
   139                              <1> ;rdi points to the buffer
   140                              <1> ;Carry set if failed.
   141 0000322D 50                  <1>     push rax            ;save the master/slave bit temporarily
   142 0000322E 6681C20700          <1>     add dx, 7            ;dx at base + 7
   143                              <1> .l1:
   144 00003233 EC                  <1>     in al, dx
   145 00003234 3CFF                <1>     cmp al, 0FFh
   146 00003236 7447                <1>     je .exitfail
   147 00003238 A880                <1>     test al, 10000000b
   148 0000323A 75F7                <1>     jnz .l1
   149                              <1> 
   150 0000323C EB00                <1>     jmp short $ + 2            ;IO cycle kill
   151 0000323E FA                  <1>     cli
   152                              <1> .l2:
   153 0000323F EC                  <1>     in al, dx
   154 00003240 84C0                <1>     test al, al
   155 00003242 743B                <1>     jz .exitfail
   156 00003244 A840                <1>     test al, 01000000b
   157 00003246 74F7                <1>     jz .l2
   158                              <1> 
   159 00003248 30C0                <1>     xor al, al
   160 0000324A 6681EA0500          <1>     sub dx, 5            ;dx at base + 2
   161 0000324F EE                  <1>     out dx, al
   162 00003250 66FFC2              <1>     inc dx               ;dx at base + 3
   163 00003253 EE                  <1>     out dx, al
   164 00003254 66FFC2              <1>     inc dx               ;dx at base + 4
   165 00003257 EE                  <1>     out dx, al
   166 00003258 66FFC2              <1>     inc dx               ;dx at base + 5
   167 0000325B EE                  <1>     out dx, al
   168 0000325C 66FFC2              <1>     inc dx               ;dx at base + 6
   169 0000325F 58                  <1>     pop rax              ;Get the master/slave bit back
   170 00003260 EE                  <1>     out dx, al            
   171 00003261 66FFC2              <1>     inc dx               ;dx at base + 7
   172 00003264 B0EC                <1>     mov al, 0ECh         ;ECh = Identify drive command
   173 00003266 EE                  <1>     out dx, al
   174                              <1> 
   175 00003267 EB00                <1>     jmp short $ + 2      ;IO cycle kill
   176                              <1> .l3:
   177 00003269 EC                  <1>     in al, dx            ;get status byte
   178 0000326A A808                <1>     test al, 00001000b   ;Check DRQ, to be set for data ready
   179 0000326C 74FB                <1>     jz .l3
   180                              <1> 
   181 0000326E 6681EA0700          <1>     sub dx, 7            ;dx at base + 0
   182 00003273 51                  <1>     push rcx
   183 00003274 66B90001            <1>     mov cx, 100h         ;100h words to be copied
   184 00003278 F3666D              <1>     rep insw
   185 0000327B F8                  <1>     clc
   186 0000327C FB                  <1>     sti
   187 0000327D EB01                <1>     jmp short .exit
   188                              <1> 
   189                              <1> .exitfail:
   190 0000327F F9                  <1>     stc
   191                              <1> .exit:
   192 00003280 58                  <1>     pop rax
   193 00003281 C3                  <1>     ret
   109                                  %include "./Resident/Hardware/USB/EHCI/ehciDriv.asm"
   110                              <1> ;--------------------USB Driver and data area--------------------
   111                              <1> ;Note, this needs to be updated.
   112                              <1> ;All SCSI, MSD and HUB related functions are grouped in this file
   113                              <1> ;SCSI functions need to be moved into their own folder
   114                              <1> USB:
   115                              <1> ;------------------------EHCI functions--------------------------
   116                              <1> ;eActiveCtrlr must be set with the offset of the controller
   117                              <1> ; IFF the controller is about to enter a state in which it could
   118                              <1> ; fire an interrupt. These functions must safeguard against it by
   119                              <1> ; checking that this byte is -1 first and then setting the byte
   120                              <1> ; with the selected controller index, ending by resetting this 
   121                              <1> ; byte to -1 (even on fail). 
   122                              <1> ;
   123                              <1> ;Certain functions may be called to act upon the CURRENT ACTIVE
   124                              <1> ; controller, these functions dont need these safeguards, though
   125                              <1> ; they may need to ensure that there is a valid controller number 
   126                              <1> ; in the eActiveCtrlr byte.
   127                              <1> ;----------------------------------------------------------------
   128                              <1> .ehciCriticalErrorWrapper:
   129                              <1> ;Currently just jumps to the installed address.
   130                              <1> ;Conditional error calls MUST call this wrapper to allow for
   131                              <1> ; host operating systems to install their own USB error handlers
   132                              <1> ; and have the system continue working.
   133 00003282 FF2425[36020000]    <1>     jmp qword [eHCErrorHandler]
   134                              <1> .ehciCriticalErrorHandler:
   135                              <1> ;Currently just halts the system
   136 00003289 BB07000000          <1>     mov ebx, 07h
   137 0000328E E864CEFFFF          <1>     call cls
   138 00003293 48BD-               <1>     mov rbp, .ecehmsg
   138 00003295 [B032000000000000]  <1>
   139 0000329D 66B80413            <1>     mov ax, 1304h
   140 000032A1 CD30                <1>     int 30h
   141 000032A3 B0FF                <1>     mov al, 0FFh
   142 000032A5 E621                <1>     out pic1data, al
   143 000032A7 E6A1                <1>     out pic2data, al
   144 000032A9 FA                  <1>     cli
   145 000032AA F4                  <1>     hlt
   146 000032AB E9F9FFFFFF          <1>     jmp $ - 2
   147 000032B0 454843492043686563- <1> .ecehmsg db "EHCI Check 1", 0
   147 000032B9 6B203100            <1>
   148                              <1> .setupEHCIcontroller:
   149                              <1> ;Resets, initialises variables to default
   150                              <1> ;Input: al = Controller to setup (0 based)
   151                              <1> ;Output: CF=CY - Controller failed to reset
   152                              <1> ;        CF=NC - No problems
   153                              <1> ; al = Controller that was reset
   154 000032BD 51                  <1>     push rcx
   155 000032BE 53                  <1>     push rbx
   156 000032BF 55                  <1>     push rbp
   157 000032C0 E80F010000          <1>     call .ehciResetCtrlr    ;Reset the controller
   158 000032C5 7215                <1>     jc .secexit
   159 000032C7 6631DB              <1>     xor bx, bx ;No schedule, no interrupts
   160 000032CA 31C9                <1>     xor ecx, ecx
   161 000032CC 48BD-               <1>     mov rbp, ehciAschedule
   161 000032CE [0000000000000000]  <1>
   162 000032D6 E8EB010000          <1>     call .ehciInitCtrlrRegs    ;Initialise controller registers
   163 000032DB F8                  <1>     clc
   164                              <1> .secexit:
   165 000032DC 5D                  <1>     pop rbp
   166 000032DD 5B                  <1>     pop rbx
   167 000032DE 59                  <1>     pop rcx
   168 000032DF C3                  <1>     ret
   169                              <1> 
   170                              <1> .ehciResetControllerPort:
   171                              <1> ;A function that enacts an EHCI reset on a port.
   172                              <1> ;Works ONLY on the current active controller.
   173                              <1> ;Input:
   174                              <1> ; al = Port number [0,N-1] (Checked against ctrlr struc params entry)
   175                              <1> ;Returns:
   176                              <1> ; CF set if failed, clear if success
   177                              <1> ; ax=Error code, 0h=No active controller
   178                              <1> ;             1h=Invalid port number
   179                              <1> ;             2h=No device on port
   180                              <1> ;             3h=Port not enabled (Low speed device)
   181                              <1> ;             4h=Device not entering reset
   182                              <1> ;             5h=Device not clearing reset
   183                              <1> ;             6h=Port not enabled (Full speed device)
   184                              <1> ; rax destroyed
   185 000032E0 53                  <1>     push rbx
   186 000032E1 51                  <1>     push rcx
   187 000032E2 52                  <1>     push rdx
   188 000032E3 55                  <1>     push rbp
   189                              <1> 
   190 000032E4 6631ED              <1>     xor bp, bp
   191 000032E7 0FB6D0              <1>     movzx edx, al    ;Save port number into dl (edx)
   192 000032EA 0FB61C25[47020000]  <1>     movzx ebx, byte [eActiveCtrlr]
   193 000032F2 80FBFF              <1>     cmp bl, -1
   194 000032F5 0F84D3000000        <1>     je .ercperr    ;Error, No active controller (ec=0)
   195 000032FB 66FFC5              <1>     inc bp        ;Inc error counter
   196 000032FE 8B1CDD[19020000]    <1>     mov ebx, dword [eControllerList + 4 + 8*rbx]    ;get mmiobase into ebx
   197 00003305 678B4304            <1>     mov eax, dword [ebx+ehcistrucparams]    ;Get # of ports in al
   198 00003309 247F                <1>     and al, 7Fh    ;al contains port number, clear upper bit
   199 0000330B FEC8                <1>     dec al        ;Zero based port number
   200 0000330D 0FB6C0              <1>     movzx eax, al
   201 00003310 38C2                <1>     cmp dl, al    ;dl contains called port number
   202 00003312 0F87B6000000        <1>     ja .ercperr    ;Error, invalid port number (ec=1)
   203 00003318 66FFC5              <1>     inc bp        ;Inc error counter
   204                              <1> 
   205                              <1> 
   206 0000331B 670FB603            <1>     movzx eax, byte [ebx]    ;Byte access for caplength!
   207 0000331F 01C3                <1>     add ebx, eax    ;eax now points to opregs    
   208 00003321 66B90A00            <1>     mov cx, 10
   209                              <1> .erclp0:    ;Remember ebx=opregs, edx=port number    
   210 00003325 67814C934400100000  <1>     or dword [ebx+4*edx+ehciportsc], 1000h ;Set power bit
   211                              <1> 
   212 0000332E 51                  <1>     push rcx
   213 0000332F B90A000000          <1>     mov ecx, 10
   214 00003334 B486                <1>     mov ah, 86h
   215 00003336 CD35                <1>     int 35h        ;Wait for 10 ms
   216 00003338 59                  <1>     pop rcx
   217                              <1> 
   218                              <1> .erclp1:
   219 00003339 66FFC9              <1>     dec cx
   220 0000333C 0F848C000000        <1>     jz .ercperr ;Error, No device on port (ec=2)
   221 00003342 67F744934401000000  <1>     test dword [ebx+4*edx+ehciportsc], 1h    ;Test device on port
   222 0000334B 74D8                <1>     jz .erclp0
   223 0000334D 66FFC5              <1>     inc bp        ;Inc error counter
   224                              <1> 
   225 00003350 678B449344          <1>     mov eax, dword [ebx+4*edx+ehciportsc]
   226 00003355 6625000C            <1>     and ax, 0C00h
   227 00003359 662D0004            <1>     sub ax, 400h
   228 0000335D 66FFC8              <1>     dec ax
   229 00003360 746C                <1>     jz .ercperr    ;Error, Low speed device (ec=3)
   230 00003362 66FFC5              <1>     inc bp        ;Inc error counter
   231                              <1> 
   232 00003365 66B90A00            <1>     mov cx, 10
   233                              <1> .erclp2:
   234 00003369 66FFC9              <1>     dec cx
   235 0000336C 7460                <1>     jz .ercperr ;Error, Device not entering reset (ec=4)
   236 0000336E 67814C934400010000  <1>     or dword [ebx+4*edx+ehciportsc], 100h    ;Set bit 8, port reset bit
   237                              <1>     
   238 00003377 51                  <1>     push rcx
   239 00003378 B90A000000          <1>     mov ecx, 10
   240 0000337D B486                <1>     mov ah, 86h
   241 0000337F CD35                <1>     int 35h        ;Wait for 10 ms
   242 00003381 59                  <1>     pop rcx
   243                              <1> 
   244 00003382 67F744934400010000  <1>     test dword [ebx+4*edx+ehciportsc], 100h    ;Check if entered reset
   245 0000338B 74DC                <1>     jz .erclp2
   246                              <1> 
   247 0000338D 66FFC5              <1>     inc bp        ;Inc error counter
   248 00003390 66B90A00            <1>     mov cx, 10
   249 00003394 6781649344FFFEFFFF  <1>     and dword [ebx+4*edx+ehciportsc], 0FFFFFEFFh    ;Clear reset bit
   250                              <1> .erclp3:
   251 0000339D FFC9                <1>     dec ecx
   252 0000339F 742D                <1>     jz .ercperr ;Error, Device not leaving reset (ec=5)
   253                              <1> 
   254 000033A1 51                  <1>     push rcx
   255 000033A2 B90A000000          <1>     mov ecx, 10
   256 000033A7 B486                <1>     mov ah, 86h
   257 000033A9 CD35                <1>     int 35h        ;Wait for 10 ms
   258 000033AB 59                  <1>     pop rcx
   259                              <1> 
   260 000033AC 67F744934400010000  <1>     test dword [ebx+4*edx+ehciportsc], 100h
   261 000033B5 75E6                <1>     jnz .erclp3
   262 000033B7 66FFC5              <1>     inc bp        ;Inc error counter
   263                              <1> 
   264 000033BA 67F744934404000000  <1>     test dword [ebx+4*edx+ehciportsc], 4h    ;Bit 2 is the port enabled bit
   265 000033C3 7409                <1>     jz .ercperr    ;Error, Full speed device (ec=6)
   266                              <1> ;We get here IFF device on port is high speed
   267                              <1>     
   268                              <1> ;High Speed Device successfully reset. Now print message or whatever
   269 000033C5 4831C0              <1>     xor rax, rax
   270 000033C8 F8                  <1>     clc
   271                              <1> .ercpexit:
   272 000033C9 5D                  <1>     pop rbp
   273 000033CA 5A                  <1>     pop rdx
   274 000033CB 59                  <1>     pop rcx
   275 000033CC 5B                  <1>     pop rbx
   276 000033CD C3                  <1>     ret
   277                              <1> .ercperr:
   278 000033CE 6689E8              <1>     mov ax, bp    ;Get error code in ax
   279 000033D1 F9                  <1>     stc
   280 000033D2 EBF5                <1>     jmp short .ercpexit
   281                              <1> 
   282                              <1> .ehciResetCtrlr:
   283                              <1> ;A function that resets a controller. 
   284                              <1> ;No other controllers may be running during a ctrlr reset
   285                              <1> ;Input:
   286                              <1> ; al = Offset into the ehci controller table
   287                              <1> ;Returns:
   288                              <1> ; CF=CY if failed, CF=NC if reset
   289                              <1> ;All registers preserved
   290 000033D4 50                  <1>     push rax
   291 000033D5 51                  <1>     push rcx
   292                              <1>     ;cmp byte [eActiveCtrlr], -1
   293                              <1>     ;jne .erc2    ;A controller already active, exit fail (ec=0)
   294                              <1>     ;mov byte [eActiveCtrlr], al    ;For added security (may be removed later)
   295 000033D6 E800180000          <1>     call .ehciGetOpBase
   296 000033DB 67C7400800000000    <1>     mov dword [eax + ehciintr], 0h    ;No interrupts
   297 000033E3 67C740043F000000    <1>     mov dword [eax + ehcists], 3Fh    ;Clear any outstanding interrupts
   298                              <1>     ;Set the reset bit, check to see if run bit has cleared first!
   299 000033EB 31C9                <1>     xor ecx, ecx
   300                              <1> .erc0:
   301 000033ED 678120FEFFFFFF      <1>     and dword [eax + ehcicmd], 0FFFFFFFEh    ;Force stop the controller
   302 000033F4 FFC9                <1>     dec ecx
   303 000033F6 743D                <1>     jz .erc2    ;Controller not resetting, exit fail  (ec=1)
   304                              <1> 
   305 000033F8 67F7400400100000    <1>     test dword [eax + ehcists], 1000h    ;Test if bit 12 has been set
   306 00003400 74EB                <1>     jz .erc0
   307 00003402 67810802000000      <1>     or dword [eax + ehcicmd], 02h ;Set bit 1, reset HC
   308                              <1>     ;Spin and wait to give device time to respond and reset.
   309 00003409 6631C9              <1>     xor cx, cx
   310                              <1> .erc1:
   311 0000340C 66FFC9              <1>     dec cx        ;Wait for reset to happen
   312 0000340F 7424                <1>     jz .erc2    ;Not resetting, exit fail (ec=2)
   313                              <1> 
   314 00003411 50                  <1>     push rax
   315 00003412 51                  <1>     push rcx
   316 00003413 B486                <1>     mov ah, 86h
   317 00003415 B905000000          <1>     mov ecx, 5    ;5ms wait
   318 0000341A CD35                <1>     int 35h
   319 0000341C 59                  <1>     pop rcx
   320 0000341D 58                  <1>     pop rax
   321                              <1> 
   322 0000341E 67F70002000000      <1>     test dword [eax + ehcicmd], 2h    ;Whilst this bit is set, keep looping
   323 00003425 75E5                <1>     jnz .erc1
   324 00003427 31C0                <1>     xor eax, eax
   325 00003429 F8                  <1>     clc
   326                              <1> .ercexit:
   327 0000342A C60425[47020000]FF  <1>     mov byte [eActiveCtrlr], -1    ;No controllers active
   328 00003432 59                  <1>     pop rcx
   329 00003433 58                  <1>     pop rax
   330 00003434 C3                  <1>     ret
   331                              <1> .erc2:
   332 00003435 F9                  <1>     stc
   333 00003436 EBF2                <1>     jmp short .ercexit
   334                              <1> 
   335                              <1> .ehciRunCtrlr:
   336                              <1> ;A function that runs a controller to process set schedules
   337                              <1> ;Input:
   338                              <1> ;   al = Offset into the controller table
   339                              <1> ;Returns:
   340                              <1> ; CF = CY if failed, CF = NC if success
   341 00003438 50                  <1>     push rax
   342 00003439 51                  <1>     push rcx
   343 0000343A E89C170000          <1>     call .ehciGetOpBase
   344 0000343F 67F7400400100000    <1>     test dword [eax + ehcists], 1000h    ;bit 12 must be set to write 1 in cmd
   345 00003447 741E                <1>     jz .esc2
   346 00003449 67810801000000      <1>     or dword [eax + ehcicmd], 1h ;Set bit 0 to run
   347 00003450 31C9                <1>     xor ecx, ecx
   348                              <1> .esc0:
   349 00003452 66FFC9              <1>     dec cx
   350 00003455 7410                <1>     jz .esc2
   351 00003457 67F7400400100000    <1>     test dword [eax + ehcists], 1000h    ;bit 12 must be clear
   352 0000345F 75F1                <1>     jnz .esc0
   353 00003461 31C0                <1>     xor eax, eax
   354 00003463 F8                  <1>     clc
   355                              <1> .esc1:
   356 00003464 59                  <1>     pop rcx
   357 00003465 58                  <1>     pop rax
   358 00003466 C3                  <1>     ret
   359                              <1> .esc2:    ;Bad exit
   360 00003467 F9                  <1>     stc
   361 00003468 EBFA                <1>     jmp short .esc1
   362                              <1> 
   363                              <1> .ehciStopCtrlr:
   364                              <1> ;A function that stops current active controller from running
   365                              <1> ;Input:
   366                              <1> ; al=Controller to stop processing
   367                              <1> ;Returns:
   368                              <1> ; CF set if failed to stop, clear if success
   369 0000346A 50                  <1>     push rax
   370 0000346B 51                  <1>     push rcx
   371 0000346C 480FB60425-         <1>     movzx rax, byte [eActiveCtrlr]
   371 00003471 [47020000]          <1>
   372 00003475 E861170000          <1>     call .ehciGetOpBase
   373 0000347A 678120FEFFFFFF      <1>     and dword [eax + ehcicmd], 0FFFFFFFEh    ;Stop controller
   374 00003481 31C9                <1>     xor ecx, ecx
   375                              <1> .estc0:
   376 00003483 66FFC9              <1>     dec cx
   377 00003486 740E                <1>     jz .estc1
   378 00003488 67F7400400100000    <1>     test dword [eax + ehcists], 1000h    ;test hchalted until set
   379 00003490 74F1                <1>     jz .estc0
   380 00003492 F8                  <1>     clc
   381                              <1> .estcexit:
   382 00003493 59                  <1>     pop rcx
   383 00003494 58                  <1>     pop rax
   384 00003495 C3                  <1>     ret
   385                              <1> .estc1:
   386 00003496 F9                  <1>     stc
   387 00003497 EBFA                <1>     jmp short .estcexit
   388                              <1> .ehciAdjustAsyncSchedCtrlr:
   389                              <1> ;This function checks the currently online controller and compares it to
   390                              <1> ; the value provided in al. 
   391                              <1> ;If they are equal, do nothing.
   392                              <1> ;If not, turn off controller, update active ctrlr byte and indicate a new bus 
   393                              <1> ; was activated.
   394                              <1> ;If no controller active, update active ctrlr byte and indicate which bus 
   395                              <1> ; has been activated.
   396                              <1> ;
   397                              <1> ; Input: al = Controller to activate, preserved.
   398                              <1> ; Output: CF=CY: Error, turn off all controllers
   399                              <1> ;         CF=NC: All ok, proceed
   400 00003499 3A0425[47020000]    <1>     cmp al, byte [eActiveCtrlr]
   401 000034A0 7420                <1>     je .eacOkExit
   402 000034A2 803C25[47020000]FF  <1>     cmp byte [eActiveCtrlr], -1
   403 000034AA 7407                <1>     je .eacStart
   404 000034AC E8D8020000          <1>     call .ehciStopAsyncSchedule ;Stop currently transacting controller
   405 000034B1 7211                <1>     jc .eacBad
   406                              <1> .eacStart:
   407 000034B3 880425[47020000]    <1>     mov byte [eActiveCtrlr], al ;Set new active controller
   408 000034BA C60425[46020000]01  <1>     mov byte [eNewBus], 1   ;Set flag that a new bus has been selected
   409                              <1> .eacOkExit:
   410 000034C2 F8                  <1>     clc
   411 000034C3 C3                  <1>     ret
   412                              <1> .eacBad:
   413 000034C4 F9                  <1>     stc
   414 000034C5 C3                  <1>     ret
   415                              <1> .ehciInitCtrlrRegs:
   416                              <1> ;A function that initialises a given controllers registers as needed.
   417                              <1> ;Controller is left ready to process data start schedules
   418                              <1> ;MUST NOT BE CALLED ON A RUNNING CONTROLLER
   419                              <1> ;Input:
   420                              <1> ; al = Offset into the ehci controller table
   421                              <1> ; bl = ehciintr mask
   422                              <1> ; bh = Schedule mask, bits [7:2] reserved
   423                              <1> ;        00b = No schedule, 01b=Periodic, 10b=Async, 11b=Both
   424                              <1> ; ecx = Frame Index
   425                              <1> ; rbp = Schedule address
   426                              <1> ;Returns:
   427                              <1> ; Nothing
   428 000034C6 50                  <1>     push rax
   429 000034C7 53                  <1>     push rbx
   430 000034C8 51                  <1>     push rcx
   431 000034C9 53                  <1>     push rbx
   432 000034CA E80C170000          <1>     call .ehciGetOpBase    ;Get opbase 
   433 000034CF 0FB7DB              <1>     movzx ebx, bx
   434 000034D2 67C7400800000000    <1>     mov dword [eax + ehciintr], 0
   435 000034DA 6789480C            <1>     mov dword [eax + ehcifrindex], ecx
   436 000034DE 67896818            <1>     mov dword [eax + ehciasyncaddr], ebp
   437 000034E2 48C1CD20            <1>     ror rbp, 20h    ;Get upper dword low
   438 000034E6 67896810            <1>     mov dword [eax + ehcictrlseg], ebp
   439 000034EA 5B                  <1>     pop rbx    ;Get back bh
   440 000034EB 30DB                <1>     xor bl, bl    ;Zero lo byte
   441 000034ED 66C1EB04            <1>     shr bx, 4    ;Shift to hi nybble of lo byte
   442 000034F1 678120CF000000      <1>     and dword [eax + ehcicmd], 0CFh    ;Clear schedule enable bits
   443 000034F8 670B18              <1>     or ebx, dword [eax + ehcicmd]    ;Add ehcicmd to schedule mask
   444 000034FB 81E3F3FF00FF        <1>     and ebx, 0FF00FFF3h    ;Clear the Int Threshold and Frame List bits
   445 00003501 81CB00000800        <1>     or ebx, 000080000h ;Set 8 microframes (1 ms) per interrupt
   446 00003507 678918              <1>     mov dword [eax + ehcicmd], ebx    ;Write back
   447 0000350A 67C7404001000000    <1>     mov dword [eax + ehciconfigflag], 1h    ;Route all ports to EHCI ctrlr
   448 00003512 59                  <1>     pop rcx
   449 00003513 5B                  <1>     pop rbx
   450 00003514 58                  <1>     pop rax
   451 00003515 C3                  <1>     ret
   452                              <1> .ehciCtrlrGetNumberOfPorts:
   453                              <1> ;Gets the number of ports on a Host Controller.
   454                              <1> ;Ports are zero addressed so ports numbers are 0 to NUMBER_OF_PORTS - 1
   455                              <1> ;Input:  al = Offset into the controller table
   456                              <1> ;Output: rax = Number of ports on controller.
   457                              <1> ;Warning, input NOT bounds checked.
   458 00003516 0FB6C0              <1>     movzx eax, al
   459 00003519 8B04C5[19020000]    <1>     mov eax, dword [eControllerList + 4 + 8*rax]
   460 00003520 678B4004            <1>     mov eax, dword [eax + ehcistrucparams]
   461 00003524 257F000000          <1>     and eax, 7Fh    ;Clear upper bits
   462 00003529 C3                  <1>     ret
   463                              <1> .ehciGetNewQHeadAddr:
   464                              <1> ;Picks which QHead position to put the new Qhead into
   465                              <1> ;Input: Nothing
   466                              <1> ;Output: rdi = Position in RAM for QHead
   467                              <1> ;        r8  = Link to next QHead
   468                              <1> ;           r8 NEEDS to be or'ed with 2 when used as a QHead pointer
   469 0000352A 49B8-               <1>     mov r8, ehciQHead1
   469 0000352C [8000000000000000]  <1>
   470 00003534 48BF-               <1>     mov rdi, ehciQHead0
   470 00003536 [0000000000000000]  <1>
   471 0000353E 483B3C25[3E020000]  <1>     cmp rdi, qword [eCurrAsyncHead]   ;Compare head to start of buffer
   472 00003546 7503                <1>     jne .egnqaexit
   473 00003548 4987F8              <1>     xchg rdi, r8
   474                              <1> .egnqaexit:
   475 0000354B C3                  <1>     ret
   476                              <1> 
   477                              <1> .ehciToggleTransactingQHead:
   478                              <1> ;Toggles the transacting Qhead position
   479                              <1> ;This is called AFTER the old Qhead has been delinked from the AsynchSchedule
   480 0000354C 48813C25[3E020000]- <1>     cmp qword [eCurrAsyncHead], ehciQHead0
   480 00003554 [00000000]          <1>
   481 00003558 750D                <1>     jne .ettqh0
   482 0000355A 48C70425[3E020000]- <1>     mov qword [eCurrAsyncHead], ehciQHead1
   482 00003562 [80000000]          <1>
   483 00003566 C3                  <1>     ret
   484                              <1> .ettqh0:
   485 00003567 48C70425[3E020000]- <1>     mov qword [eCurrAsyncHead], ehciQHead0
   485 0000356F [00000000]          <1>
   486 00003573 C3                  <1>     ret
   487                              <1> 
   488                              <1> .ehciDelinkOldQHead:
   489                              <1> ;Delinks the old Qhead from the list async list
   490 00003574 57                  <1>     push rdi
   491 00003575 4150                <1>     push r8
   492 00003577 E8AEFFFFFF          <1>     call .ehciGetNewQHeadAddr
   493 0000357C 4989F8              <1>     mov r8, rdi
   494 0000357F 4981C802000000      <1>     or r8, 2
   495 00003586 448907              <1>     mov dword [rdi], r8d    ;Point the new qhead to itself
   496 00003589 814F0400800000      <1>     or dword [rdi + 4], 8000h   ;Toggle H-bit in the current transacting QHead
   497 00003590 4158                <1>     pop r8
   498 00003592 5F                  <1>     pop rdi
   499 00003593 C3                  <1>     ret
   500                              <1> 
   501                              <1> .ehciLinkNewQHead:
   502                              <1> ;Links the inserted qhead into the async list
   503 00003594 57                  <1>     push rdi
   504 00003595 4150                <1>     push r8
   505 00003597 E88EFFFFFF          <1>     call .ehciGetNewQHeadAddr   ;Get bus addresses
   506 0000359C 803C25[46020000]01  <1>     cmp byte [eNewBus], 1
   507 000035A4 740F                <1>     je .elnqadjusted   ;If equal, exit
   508 000035A6 4881CF02000000      <1>     or rdi, 2
   509 000035AD 418938              <1>     mov dword [r8], edi
   510                              <1> .elnqhexit:
   511 000035B0 F8                  <1>     clc
   512 000035B1 4158                <1>     pop r8
   513 000035B3 5F                  <1>     pop rdi
   514 000035B4 C3                  <1>     ret
   515                              <1> ;Only here if a new bus was Adjusted
   516                              <1> .elnqadjusted:
   517                              <1> ;The first qhead in a new queue must always point to itself and be
   518                              <1> ; the head of the reclaim list.
   519                              <1> ;The same address is provided to the function which writes the qhead
   520                              <1> ; and in the above function call into rdi, thus allowing us to point
   521                              <1> ; the new qhead to itself and set the H-bit on, in ALL instances 
   522 000035B5 4989F8              <1>     mov r8, rdi
   523 000035B8 4981C802000000      <1>     or r8, 2
   524 000035BF 448907              <1>     mov dword [rdi], r8d    ;Point the QHead to itself
   525 000035C2 814F0400800000      <1>     or dword [rdi + 4], 8000h   ;Set H bit on
   526 000035C9 50                  <1>     push rax
   527 000035CA 8A0425[47020000]    <1>     mov al, byte [eActiveCtrlr]
   528 000035D1 E805160000          <1>     call .ehciGetOpBase
   529 000035D6 67897818            <1>     mov dword [eax + ehciasyncaddr], edi ;Set the address in the ctrlr register
   530 000035DA 58                  <1>     pop rax
   531 000035DB E87D010000          <1>     call .ehciStartAsyncSchedule    ;Start schedule
   532 000035E0 7209                <1>     jc .elnqhbad
   533 000035E2 FE0C25[46020000]    <1>     dec byte [eNewBus]  ;Reset back to zero if successfully onlined
   534 000035E9 EBC5                <1>     jmp short .elnqhexit
   535                              <1> .elnqhbad:  ;If Async fails to start, exit
   536 000035EB 4158                <1>     pop r8
   537 000035ED 5F                  <1>     pop rdi
   538 000035EE F9                  <1>     stc
   539 000035EF C3                  <1>     ret
   540                              <1> 
   541                              <1> .ehciSetNoData:
   542                              <1> ;A function that does a set request with no data phase to the device
   543                              <1> ;at address al.
   544                              <1> ;Input:
   545                              <1> ; al = Address number (7 bit value)
   546                              <1> ; rbx = Setup packet
   547                              <1> ; cx = Max Packet Length 
   548                              <1> ;Returns:
   549                              <1> ; CF = NC if no Host error, CF = CY if Host error
   550                              <1> ; Caller MUST check the schedule to ensure that the transfer was successful,
   551                              <1> ; and without transaction errors as these dont constitute Host system errors.
   552                              <1> ;
   553                              <1> ; All registers except for CF preserved
   554 000035F0 57                  <1>     push rdi
   555 000035F1 4150                <1>     push r8
   556 000035F3 4151                <1>     push r9
   557 000035F5 4152                <1>     push r10
   558 000035F7 4153                <1>     push r11
   559 000035F9 51                  <1>     push rcx
   560 000035FA 52                  <1>     push rdx
   561 000035FB FC                  <1>     cld    ;Set right direction for string ops
   562                              <1>     
   563                              <1>     ;Write setup packet
   564 000035FC 48891C25[80030000]  <1>     mov qword [ehciDataOut], rbx
   565 00003604 E821FFFFFF          <1>     call .ehciGetNewQHeadAddr
   566 00003609 4981C802000000      <1>     or r8, 2    ;Process qH TDs
   567 00003610 41B900600080        <1>     mov r9d, 80006000h  ;Bit 15 not set here!!!!! Important
   568 00003616 0FB7C9              <1>     movzx ecx, cx
   569 00003619 C1E110              <1>     shl ecx, 8*2
   570 0000361C 4109C9              <1>     or r9d, ecx
   571 0000361F 247F                <1>     and al, 7Fh    ;Force clear upper bit of al
   572 00003621 4108C1              <1>     or r9b, al    ;Set lower 8 bits of r9 correctly
   573 00003624 41BA00000040        <1>     mov r10d, 40000000h    ;1 transaction/ms
   574 0000362A 49BB-               <1>     mov r11, ehciTDSpace  ;First TD is the head of the buffer
   574 0000362C [0001000000000000]  <1>
   575                              <1> 
   576 00003634 E827080000          <1>     call .ehciWriteQHead
   577                              <1> 
   578 00003639 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
   579 0000363C 4C8D4740            <1>     lea r8, qword [rdi + ehciSizeOfTD]    ;Point to next TD
   580 00003640 49B901000000000000- <1>     mov r9, 1
   580 00003649 00                  <1>
   581 0000364A 41BA800E0800        <1>     mov r10d, 00080E80h ;Active TD, SETUP EP, Error ctr = 3, 8 byte transfer
   582 00003650 49BB-               <1>     mov r11, ehciDataOut ; Data out buffer
   582 00003652 [8003000000000000]  <1>
   583                              <1> 
   584 0000365A E826080000          <1>     call .ehciWriteQHeadTD
   585                              <1> 
   586 0000365F 4881C740000000      <1>     add rdi, ehciSizeOfTD     ;Go to next TD space
   587 00003666 49B801000000000000- <1>     mov r8, 1
   587 0000366F 00                  <1>
   588 00003670 4D89C1              <1>     mov r9, r8
   589 00003673 41BA808D0080        <1>     mov r10d, 80008D80h        ;Status stage opposite direction of last transfer
   590 00003679 49BB-               <1>     mov r11, msdCSW         ;Nothing should be returned but use this point
   590 0000367B [C005000000000000]  <1>
   591                              <1> 
   592 00003683 E8FD070000          <1>     call .ehciWriteQHeadTD
   593 00003688 B103                <1>     mov cl, 011b   ;Lock out internal buffer
   594 0000368A E9BD000000          <1>     jmp .egddproceed
   595                              <1> 
   596                              <1> .ehciGetRequest:
   597                              <1> ;A function which does a standard get request from a device at
   598                              <1> ;address al.
   599                              <1> ;Input:
   600                              <1> ; al = Address number (7 bit value)
   601                              <1> ; rbx = Setup packet
   602                              <1> ; ecx = Max Packet Length 
   603                              <1> ;Returns:
   604                              <1> ; CF = NC if no Host error, CF = CY if Host error
   605                              <1> ; Caller MUST check the schedule to ensure that the transfer was successful,
   606                              <1> ; and without transaction errors as these dont constitute Host system errors.
   607                              <1> ;
   608                              <1> ; All registers except for CF preserved
   609 0000368F 57                  <1>     push rdi
   610 00003690 4150                <1>     push r8
   611 00003692 4151                <1>     push r9
   612 00003694 4152                <1>     push r10
   613 00003696 4153                <1>     push r11
   614 00003698 51                  <1>     push rcx
   615 00003699 52                  <1>     push rdx
   616 0000369A FC                  <1>     cld    ;Ensure right direction
   617                              <1> 
   618                              <1>     ;Write setup packet
   619 0000369B 48891C25[80030000]  <1>     mov qword [ehciDataOut], rbx
   620 000036A3 E882FEFFFF          <1>     call .ehciGetNewQHeadAddr
   621 000036A8 4981C802000000      <1>     or r8, 2    ;Process qH TDs
   622 000036AF 41B900600080        <1>     mov r9d, 80006000h  ;Bit 15 not set here!!!!! Important
   623 000036B5 0FB7C9              <1>     movzx ecx, cx
   624 000036B8 C1E110              <1>     shl ecx, 8*2
   625 000036BB 4109C9              <1>     or r9d, ecx
   626 000036BE 247F                <1>     and al, 7Fh    ;Force clear upper bit of al
   627 000036C0 4108C1              <1>     or r9b, al    ;Set lower 8 bits of r9 correctly
   628 000036C3 41BA00000040        <1>     mov r10d, 40000000h    ;1 transaction/ms
   629 000036C9 49BB-               <1>     mov r11, ehciTDSpace  ;First TD is the head of the buffer
   629 000036CB [0001000000000000]  <1>
   630                              <1>     
   631 000036D3 E888070000          <1>     call .ehciWriteQHead
   632                              <1> 
   633 000036D8 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
   634 000036DB 4C8D4740            <1>     lea r8, qword [rdi + ehciSizeOfTD]    ;Point to next TD
   635 000036DF 49B901000000000000- <1>     mov r9, 1
   635 000036E8 00                  <1>
   636 000036E9 41BA800E0800        <1>     mov r10d, 00080E80h ;Active TD, SETUP EP, Error ctr = 3, 8 byte transfer
   637 000036EF 49BB-               <1>     mov r11, ehciDataOut ; Data out buffer
   637 000036F1 [8003000000000000]  <1>
   638                              <1> 
   639 000036F9 E887070000          <1>     call .ehciWriteQHeadTD
   640                              <1> 
   641 000036FE 4881C740000000      <1>     add rdi, ehciSizeOfTD    ;Go to next TD space
   642 00003705 4C8D4740            <1>     lea r8, qword [rdi + ehciSizeOfTD]
   643 00003709 4D89C1              <1>     mov r9, r8    ;Alt pointer also points to next TD since this is expected!
   644 0000370C 41BA800D4080        <1>     mov r10d, 80400D80h ;Active TD, IN EP, Error ctr = 3, max 64 byte transfer
   645 00003712 49BB-               <1>     mov r11, ehciDataIn
   645 00003714 [C003000000000000]  <1>
   646                              <1> 
   647 0000371C E864070000          <1>     call .ehciWriteQHeadTD
   648                              <1> 
   649 00003721 4881C740000000      <1>     add rdi, ehciSizeOfTD     ;Go to next TD space
   650 00003728 49B801000000000000- <1>     mov r8, 1
   650 00003731 00                  <1>
   651 00003732 4D89C1              <1>     mov r9, r8
   652 00003735 41BA808C0080        <1>     mov r10d, 80008C80h
   653 0000373B 49BB-               <1>     mov r11, msdCSW
   653 0000373D [C005000000000000]  <1>
   654                              <1> 
   655 00003745 E83B070000          <1>     call .ehciWriteQHeadTD
   656                              <1> 
   657 0000374A B103                <1>     mov cl, 11b    ;Lock out internal buffer, ignore one interrupt
   658                              <1> ;Now set controller to process the schedule
   659                              <1> .egddproceed:
   660 0000374C E867000000          <1>     call .ehciProcessCommand
   661                              <1> ;The carry status of the previous function will propagate
   662                              <1> .egddexit:
   663 00003751 5A                  <1>     pop rdx
   664 00003752 59                  <1>     pop rcx
   665 00003753 415B                <1>     pop r11
   666 00003755 415A                <1>     pop r10
   667 00003757 4159                <1>     pop r9
   668 00003759 4158                <1>     pop r8
   669 0000375B 5F                  <1>     pop rdi
   670 0000375C C3                  <1>     ret
   671                              <1> 
   672                              <1> .ehciStartAsyncSchedule:
   673 0000375D 50                  <1>     push rax
   674 0000375E 51                  <1>     push rcx
   675                              <1> 
   676 0000375F 8A0425[47020000]    <1>     mov al, byte [eActiveCtrlr]    ;Deals with current active controller
   677 00003766 E870140000          <1>     call .ehciGetOpBase            ;Return opregs ADDRESS in eax
   678 0000376B 67810820000000      <1>     or dword [eax + ehcicmd], 20h    ;Process asyncschedule
   679 00003772 31C9                <1>     xor ecx, ecx
   680                              <1> .esas0:
   681 00003774 FFC9                <1>     dec ecx
   682 00003776 740E                <1>     jz .esasfail
   683 00003778 67F7400400800000    <1>     test dword [eax + ehcists], 08000h ;Asyncschedule bit should be on
   684 00003780 74F2                <1>     jz .esas0
   685                              <1> 
   686 00003782 F8                  <1>     clc
   687                              <1> .esasok:
   688 00003783 59                  <1>     pop rcx
   689 00003784 58                  <1>     pop rax
   690 00003785 C3                  <1>     ret
   691                              <1> .esasfail:
   692 00003786 F9                  <1>     stc
   693 00003787 EBFA                <1>     jmp short .esasok
   694                              <1> 
   695                              <1> .ehciStopAsyncSchedule:
   696                              <1> ;This function stops the processing of the current active Async Schedule
   697                              <1> ;Output: CF=CY: Failed to stop Async Schedule CF=NC: Stopped Async Schedule
   698 00003789 50                  <1>     push rax
   699 0000378A 51                  <1>     push rcx
   700 0000378B 8A0425[47020000]    <1>     mov al, byte [eActiveCtrlr]    ;Deals with current active controller
   701 00003792 E844140000          <1>     call .ehciGetOpBase            ;Return opregs ADDRESS in eax
   702 00003797 6631C9              <1>     xor cx, cx
   703 0000379A 678120DFFFFFFF      <1>     and dword [eax + ehcicmd], 0FFFFFFDFh ;Stop processing async
   704                              <1> .espc0:
   705 000037A1 66FFC9              <1>     dec cx
   706 000037A4 740E                <1>     jz .espcfail
   707 000037A6 67F7400400800000    <1>     test dword [eax + ehcists], 08000h
   708 000037AE 75F1                <1>     jnz .espc0
   709                              <1> 
   710 000037B0 F8                  <1>     clc
   711 000037B1 59                  <1>     pop rcx
   712 000037B2 58                  <1>     pop rax
   713 000037B3 C3                  <1>     ret
   714                              <1> .espcfail:
   715 000037B4 F9                  <1>     stc
   716 000037B5 59                  <1>     pop rcx
   717 000037B6 58                  <1>     pop rax
   718 000037B7 C3                  <1>     ret
   719                              <1> 
   720                              <1> .ehciProcessCommand:
   721                              <1> ; Allows EHCI async schedule to process commands.
   722                              <1> ; Preserves all registers except CF
   723                              <1> ; Returns: CF=CY if error detected 
   724                              <1> ;          CF=NC if no error detected
   725                              <1> ;
   726                              <1> ; If returned with CF=CY, caller must read the msdStatus byte
   727 000037B8 50                  <1>     push rax
   728 000037B9 53                  <1>     push rbx
   729 000037BA 51                  <1>     push rcx
   730 000037BB 57                  <1>     push rdi
   731                              <1> 
   732 000037BC 880C25[49020000]    <1>     mov byte [eAsyncMutex], cl  ;Set mutex
   733 000037C3 8A0425[47020000]    <1>     mov al, byte [eActiveCtrlr]    ;Deals with current active controller
   734 000037CA E80C140000          <1>     call .ehciGetOpBase            ;Return opregs ADDRESS in eax
   735 000037CF 4889C3              <1>     mov rbx, rax
   736 000037D2 66BF8813            <1>     mov di, 5000
   737 000037D6 E8B9FDFFFF          <1>     call .ehciLinkNewQHead
   738 000037DB 0F82A1000000        <1>     jc .epcfailedstart
   739                              <1> .epc1:
   740 000037E1 67F7430413000000    <1>     test dword [ebx + ehcists], 13h
   741 000037E9 7516                <1>     jnz .epc2     ;If bits we care about are set, call IRQ proceedure
   742 000037EB F390                <1>     pause       
   743 000037ED 66FFCF              <1>     dec di
   744 000037F0 0F849F000000        <1>     jz .epcfailtimeout
   745 000037F6 B486                <1>     mov ah, 86h
   746 000037F8 B901000000          <1>     mov ecx, 1    ;Max 5s in 1ms chunks
   747 000037FD CD35                <1>     int 35h
   748 000037FF EBE0                <1>     jmp short .epc1
   749                              <1> .epc2:
   750 00003801 89D8                <1>     mov eax, ebx    ;Get opreg base into eax before we proceed into IRQ handler
   751 00003803 E86BD3FFFF          <1>     call ehci_IRQ.nonIRQep ;Manually call IRQ
   752 00003808 F60425[48020000]10  <1>     test byte [eActiveInt], 10h ;HC error bit
   753 00003810 7578                <1>     jnz .epcHostError   ;HC error detected
   754 00003812 F60425[49020000]00  <1>     test byte [eAsyncMutex], 0
   755 0000381A 75C5                <1>     jnz .epc1    ;If the mutex isnt cleared, go back to sts check
   756 0000381C E853FDFFFF          <1>     call .ehciDelinkOldQHead   ;Perform delink
   757 00003821 E826FDFFFF          <1>     call .ehciToggleTransactingQHead    ;Toggle the active Qheads
   758                              <1> ;Now set doorbell
   759 00003826 67810B40000000      <1>     or dword [ebx + ehcicmd], 40h   ;Ring Doorbell
   760 0000382D 66BF8813            <1>     mov di, 5000
   761                              <1> .epc3:
   762 00003831 67F7430420000000    <1>     test dword [ebx + ehcists], 20h ;Test for doorbell set high
   763 00003839 7512                <1>     jnz .epc4
   764 0000383B F390                <1>     pause
   765 0000383D 66FFCF              <1>     dec di
   766 00003840 7440                <1>     jz .epcfaildelinked
   767 00003842 B486                <1>     mov ah, 86h
   768 00003844 B901000000          <1>     mov ecx, 1    ;Max 5s in 1ms chunks
   769 00003849 CD35                <1>     int 35h
   770 0000384B EBE4                <1>     jmp short .epc3
   771                              <1> .epc4:
   772                              <1> ;Clear once more to clear the doorbell bit
   773 0000384D 678B4B04            <1>     mov ecx, dword [ebx + ehcists]  
   774 00003851 67094B04            <1>     or dword  [ebx + ehcists], ecx    ;WC high bits
   775                              <1> ;Check if it was a stall
   776 00003855 F60425[48020000]02  <1>     test byte [eActiveInt], 2h  ;Check USBError bit
   777 0000385D 7509                <1>     jnz .epcexit
   778 0000385F C60425[A9010000]00  <1>     mov byte [msdStatus], 00h   ;No error... yet
   779 00003867 F8                  <1>     clc
   780                              <1> .epcexit:
   781 00003868 5F                  <1>     pop rdi
   782 00003869 59                  <1>     pop rcx
   783 0000386A 5B                  <1>     pop rbx
   784 0000386B 58                  <1>     pop rax
   785 0000386C C3                  <1>     ret 
   786                              <1> .epcStall:
   787 0000386D C60425[A9010000]21  <1>     mov byte [msdStatus], 21h   ;General Controller Failure - Stall
   788 00003875 F9                  <1>     stc
   789 00003876 EBF0                <1>     jmp short .epcexit
   790                              <1> .epcfail:
   791 00003878 E8F7FCFFFF          <1>     call .ehciDelinkOldQHead   ;Perform delink
   792 0000387D E8CAFCFFFF          <1>     call .ehciToggleTransactingQHead    ;Toggle the active Qheads
   793                              <1> .epcfailedstart: ;No need to delink as that data structure is considered garbage
   794                              <1> .epcfaildelinked:
   795 00003882 678B4B04            <1>     mov ecx, dword [ebx + ehcists]
   796 00003886 67094B04            <1>     or dword  [ebx + ehcists], ecx    ;WC selected bits
   797                              <1> .epcHostError:  ;Host error detected in interrupt register
   798 0000388A C60425[A9010000]20  <1>     mov byte [msdStatus], 20h   ;General Controller Error
   799 00003892 F9                  <1>     stc
   800 00003893 EBD3                <1>     jmp short .epcexit
   801                              <1> .epcfailtimeout:
   802                              <1> ;Called in the event that the schedule fails to process the QHead.
   803                              <1> ;Emergency stops the currently transacting schedule
   804 00003895 E8DAFCFFFF          <1>     call .ehciDelinkOldQHead   ;Perform delink
   805 0000389A E8ADFCFFFF          <1>     call .ehciToggleTransactingQHead    ;Toggle the active Qheads
   806 0000389F 678B4B04            <1>     mov ecx, dword [ebx + ehcists]
   807 000038A3 67094B04            <1>     or dword  [ebx + ehcists], ecx    ;WC selected bits
   808 000038A7 C60425[A9010000]80  <1>     mov byte [msdStatus], 80h   ;Timeout Error
   809 000038AF F9                  <1>     stc
   810 000038B0 EBB6                <1>     jmp short .epcexit  ;Delink
   811                              <1> 
   812                              <1> .ehciEnumerateRootPort:
   813                              <1> ;This function discovers whether a device is of a valid type
   814                              <1> ;or not.
   815                              <1> ;Input: dl=port number - 1 (0 based), dh = bus [0-3]
   816                              <1> ;       r10b = Host hub address (if the device is on a hub, 0 else)
   817                              <1> ;Output:     CF=CY if error, CF=NC if bus transaction occured 
   818                              <1> ;           ZF=ZR if passed enum: ah = bus number, al = Address number
   819                              <1> ;            ZF=NZ if the device failed enumeration: ax=error code
   820                              <1> ;                ah = Enum stage, al = Sub function stage
   821 000038B2 53                  <1>     push rbx
   822 000038B3 51                  <1>     push rcx
   823 000038B4 52                  <1>     push rdx
   824 000038B5 55                  <1>     push rbp
   825 000038B6 4150                <1>     push r8
   826 000038B8 4151                <1>     push r9
   827 000038BA 4152                <1>     push r10
   828 000038BC 4153                <1>     push r11
   829                              <1> 
   830                              <1> .eebinit:
   831 000038BE 6631ED              <1>     xor bp, bp    ;Use as error counter    (Stage 0)
   832 000038C1 88D0                <1>     mov al, dl
   833 000038C3 E818FAFFFF          <1>     call .ehciResetControllerPort    ;Reset port
   834 000038C8 0F828C010000        <1>     jc .ehciedbadnotimeout
   835                              <1> ;Power on debounce!
   836 000038CE B9C8000000          <1>     mov ecx, debounceperiod    ;debounce period
   837 000038D3 B486                <1>     mov ah, 86h
   838 000038D5 CD35                <1>     int 35h
   839                              <1> 
   840 000038D7 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 1)
   841                              <1> .eeb0:
   842 000038DA 48BB80060001000008- <1>     mov rbx, 00008000001000680h    ;Pass get minimal device descriptor
   842 000038E3 00                  <1>
   843 000038E4 48891C25[80030000]  <1>     mov qword [ehciDataOut], rbx
   844 000038EC 66B94000            <1>     mov cx, 40h    ;Pass default endpoint size
   845 000038F0 30C0                <1>     xor al, al
   846 000038F2 E898FDFFFF          <1>     call .ehciGetRequest
   847 000038F7 0F8245010000        <1>     jc .ehciedexit  ;Fast exit with carry set
   848                              <1> .eeb1:
   849 000038FD 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 2)
   850 00003900 30C0                <1>     xor al, al    ;Increment Error subcounter    (Substage 0)
   851 00003902 48BB-               <1>     mov rbx, ehciDataIn
   851 00003904 [C003000000000000]  <1>
   852 0000390C 807B0101            <1>     cmp byte [rbx + 1], 01h    ;Verify this is a valid dev descriptor
   853 00003910 0F8539010000        <1>     jne .ehciedbad
   854 00003916 FEC0                <1>     inc al    ;Increment Error subcounter    (Substage 1)
   855 00003918 66817B020002        <1>     cmp word [rbx + 2], 0200h    ;Verify this is a USB 2.0 device or above
   856 0000391E 0F822B010000        <1>     jb .ehciedbad
   857 00003924 FEC0                <1>     inc al    ;Increment Error subcounter    (Substage 2)
   858 00003926 807B0400            <1>     cmp byte [rbx + 4], 0    ;Check interfaces
   859 0000392A 7410                <1>     je .eeb2
   860 0000392C 807B0408            <1>     cmp byte [rbx + 4], 08h    ;MSD?
   861 00003930 740A                <1>     je .eeb2
   862 00003932 807B0409            <1>     cmp byte [rbx + 4], 09h    ;Hub?
   863 00003936 0F8513010000        <1>     jne .ehciedbad
   864                              <1> .eeb2:
   865 0000393C 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 3)
   866 0000393F 440FB64307          <1>     movzx r8d, byte [rbx + 7]    ;Byte 7 is MaxPacketSize0, save in r8b
   867 00003944 88D0                <1>     mov al, dl
   868                              <1> 
   869 00003946 E895F9FFFF          <1>     call .ehciResetControllerPort    ;Reset port again
   870 0000394B 0F82FE000000        <1>     jc .ehciedbad
   871 00003951 49BB0A000000000000- <1>     mov r11, 10
   871 0000395A 00                  <1>
   872                              <1> .ehciEnumCommonEp:
   873 0000395B 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 4)
   874 0000395E 88F0                <1>     mov al, dh    ;Put bus number into al
   875                              <1> 
   876 00003960 E825030000          <1>     call .ehciGiveValidAddress    ;Get a valid address for device
   877 00003965 3C80                <1>     cmp al, 80h    
   878 00003967 0F83E2000000        <1>     jae .ehciedbad    ;Invalid address
   879                              <1> 
   880 0000396D 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 5)
   881 00003970 4188C1              <1>     mov r9b, al        ;Save the new device address number in r9b
   882                              <1> .eeb3:
   883 00003973 BB00050000          <1>     mov ebx, 0500h    ;Set address function
   884 00003978 410FB6C9            <1>     movzx ecx, r9b    ;move new address into ecx
   885 0000397C C1E110              <1>     shl ecx, 8*2
   886 0000397F 09CB                <1>     or ebx, ecx    ;Add address number to ebx
   887 00003981 664489C1            <1>     mov cx, r8w    ;Move endpoint size into cx
   888 00003985 30C0                <1>     xor al, al    ;Device still talks on address 0, ax not preserved
   889 00003987 E864FCFFFF          <1>     call .ehciSetNoData    ;Set address
   890 0000398C 0F82B0000000        <1>     jc .ehciedexit  ;Fast exit with carry set
   891                              <1> .eeb4:
   892 00003992 B486                <1>     mov ah, 86h
   893 00003994 4C89D9              <1>     mov rcx, r11
   894 00003997 CD35                <1>     int 35h
   895                              <1> 
   896 00003999 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 6)
   897                              <1> .eeb5:
   898 0000399C 48BB80060001000012- <1>     mov rbx, 00012000001000680h    ;Now get full device descriptor
   898 000039A5 00                  <1>
   899 000039A6 4488C8              <1>     mov al, r9b    ;Get address
   900 000039A9 664489C1            <1>     mov cx, r8w
   901 000039AD E8DDFCFFFF          <1>     call .ehciGetRequest    ;Get full device descriptor and discard
   902 000039B2 0F828A000000        <1>     jc .ehciedexit  ;Fast exit with carry set
   903 000039B8 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 7/0Bh)
   904                              <1> .eeb6:
   905 000039BB 48BB80060002000000- <1>     mov rbx, 00000000002000680h ;Get config descriptor
   905 000039C4 00                  <1>
   906 000039C5 4489C1              <1>     mov ecx, r8d    ;Adjust the packet data with bMaxPacketSize0
   907 000039C8 48C1E130            <1>     shl rcx, 8*6    ;cx contains bMaxPacketSize0
   908 000039CC 4809CB              <1>     or rbx, rcx
   909 000039CF 4488C8              <1>     mov al, r9b    ;Get address
   910 000039D2 664489C1            <1>     mov cx, r8w    ;Move endpoint size into cx
   911 000039D6 E8B4FCFFFF          <1>     call .ehciGetRequest
   912 000039DB 7265                <1>     jc .ehciedexit  ;Fast exit with carry set
   913                              <1> .eeb7:
   914 000039DD 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 8/0Ch)
   915                              <1> ;Find a valid interface in this config
   916 000039E0 E8CB020000          <1>     call .ehciFindValidInterface
   917 000039E5 7268                <1>     jc .ehciedbad    ;Dont set config, exit bad
   918                              <1> ;If success, ah has device type (0=msd, 1=hub), al = Interface to use
   919                              <1> ;rbx points to interface descriptor
   920 000039E7 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 9/0Dh)
   921 000039EA E889000000          <1>     call .ehciAddDeviceToTables
   922 000039EF 725E                <1>     jc .ehciedbad    ;Failed to be added to internal tables
   923 000039F1 FE0425[35020000]    <1>     inc byte [usbDevices]   ;Device added successfully, inc byte
   924                              <1> ;Set configuration 1 (wie OG Windows, consider upgrading soon)
   925 000039F8 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 0Ah/0Ch)
   926                              <1> .eeb8:
   927 000039FB 48BB00090100000000- <1>     mov rbx, 00000000000010900h    ;Set configuration 1 (function 09h)
   927 00003A04 00                  <1>
   928 00003A05 4488C8              <1>     mov al, r9b    ;Get address
   929 00003A08 664489C1            <1>     mov cx, r8w    ;Move endpoint size into cx
   930 00003A0C E8DFFBFFFF          <1>     call .ehciSetNoData
   931 00003A11 722F                <1>     jc .ehciedexit  ;Fast exit with carry set
   932                              <1> .eeb9:
   933 00003A13 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 0Bh/0Dh)
   934                              <1> .eeb10:
   935 00003A16 48BB80080000000001- <1>     mov rbx, 0001000000000880h  ;Get device config (sanity check)
   935 00003A1F 00                  <1>
   936 00003A20 410FB7C8            <1>     movzx ecx, r8w              ;bMaxPacketSize0
   937 00003A24 4488C8              <1>     mov al, r9b                 ;Get device address
   938 00003A27 E863FCFFFF          <1>     call .ehciGetRequest
   939 00003A2C 7214                <1>     jc .ehciedexit  ;Fast exit with carry set
   940                              <1> .eeb11:
   941 00003A2E 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 0Ch/0Eh)
   942 00003A31 803C25[C0030000]01  <1>     cmp byte [ehciDataIn], 01
   943 00003A39 7531                <1>     jne .ehcibadremtables
   944                              <1> ;Device is now configured and ready to go to set/reset
   945 00003A3B 88F4                <1>     mov ah, dh  ;Move bus number
   946 00003A3D 4488C8              <1>     mov al, r9b ;Move address number
   947 00003A40 31D2                <1>     xor edx, edx  ;This will always set the zero flag
   948                              <1> .ehciedexit:
   949 00003A42 415B                <1>     pop r11
   950 00003A44 415A                <1>     pop r10
   951 00003A46 4159                <1>     pop r9
   952 00003A48 4158                <1>     pop r8
   953 00003A4A 5D                  <1>     pop rbp
   954 00003A4B 5A                  <1>     pop rdx
   955 00003A4C 59                  <1>     pop rcx
   956 00003A4D 5B                  <1>     pop rbx
   957 00003A4E C3                  <1>     ret
   958                              <1> .ehciedbad:
   959                              <1> .ehciedbadnoport:
   960 00003A4F 50                  <1>     push rax
   961 00003A50 B486                <1>     mov ah, 86h
   962 00003A52 B9F4010000          <1>     mov ecx, 500    ;500 ms wait between failed attempts
   963 00003A57 CD35                <1>     int 35h
   964 00003A59 58                  <1>     pop rax
   965                              <1> .ehciedbadnotimeout:
   966 00003A5A 88C4                <1>     mov ah, al    ;Save subproc error code
   967 00003A5C 30C0                <1>     xor al, al    ;Zero byte
   968 00003A5E 6609E8              <1>     or ax, bp    ;Add proc error stage code into al
   969 00003A61 86E0                <1>     xchg ah, al
   970 00003A63 6631ED              <1>     xor bp, bp
   971 00003A66 66FFC5              <1>     inc bp      ;This will always clear the Zero flag
   972 00003A69 F8                  <1>     clc         ;This will force clear the Carry flag
   973 00003A6A EBD6                <1>     jmp short .ehciedexit
   974                              <1> .ehcibadremtables:
   975 00003A6C 4488C8              <1>     mov al, r9b ;Get address low
   976 00003A6F 88F4                <1>     mov ah, dh  
   977 00003A71 E87F010000          <1>     call .ehciRemoveDevFromTables
   978 00003A76 EBE2                <1>     jmp short .ehciedbadnotimeout
   979                              <1> 
   980                              <1> .ehciAddDeviceToTables:
   981                              <1> ;This function adds a valid device to the internal tables.
   982                              <1> ;Interrupts are off for this to avoid dead entries
   983                              <1> ;Input: ah = device type (0=msd, 1=hub)
   984                              <1> ;       al = Interface Value to use (USB bInterfaceNumber)
   985                              <1> ;       rbx = Ptr to valid Interface descriptor
   986                              <1> ;       r8b = MaxPacketSize0
   987                              <1> ;       r9b = Device Address
   988                              <1> ;       dh = Bus number
   989                              <1> ;       dl = Physical Port number - 1
   990                              <1> ;       r10b = Host hub address
   991 00003A78 4153                <1>     push r11
   992 00003A7A 55                  <1>     push rbp    ;Error counter
   993 00003A7B 57                  <1>     push rdi
   994 00003A7C 53                  <1>     push rbx
   995 00003A7D 52                  <1>     push rdx
   996 00003A7E 9C                  <1>     pushfq
   997 00003A7F FEC2                <1>     inc dl      ;Add one to the Physical port number (kludge for root hub enum)
   998 00003A81 6631ED              <1>     xor bp, bp  ;Zero error counter (Stage 0)
   999 00003A84 B90A000000          <1>     mov ecx, usbMaxDevices
  1000 00003A89 380C25[35020000]    <1>     cmp byte [usbDevices], cl   ;Max number of devices, check
  1001 00003A90 0F8458010000        <1>     je .eadttbad        ;If max, fail
  1002 00003A96 66FFC5              <1>     inc bp      ;Increment error counter (Stage 1)
  1003 00003A99 48BF-               <1>     mov rdi, usbDevTbl
  1003 00003A9B [4C02000000000000]  <1>
  1004 00003AA3 B10A                <1>     mov cl, usbDevTblE  ;Within the length of the table
  1005                              <1> ;Write Common table first
  1006                              <1> .eadtt0:
  1007 00003AA5 800F00              <1>     or byte [rdi], 0   ;Check if there exists a free entry
  1008 00003AA8 7411                <1>     jz .eadtt1
  1009 00003AAA 4881C703000000      <1>     add rdi, usbDevTblEntrySize ;Go to next entry
  1010 00003AB1 FEC9                <1>     dec cl
  1011 00003AB3 0F8435010000        <1>     jz .eadttbad
  1012 00003AB9 EBEA                <1>     jmp short .eadtt0
  1013                              <1> .eadtt1:
  1014 00003ABB 66FFC5              <1>     inc bp      ;Increment error counter (Stage 2)
  1015 00003ABE 80C408              <1>     add ah, 08h ;hub is 09h
  1016                              <1> ;Add device here, rdi points to entry
  1017 00003AC1 44880F              <1>     mov byte [rdi], r9b
  1018 00003AC4 887701              <1>     mov byte [rdi + 1], dh
  1019 00003AC7 886702              <1>     mov byte [rdi + 2], ah
  1020                              <1> ;Entry written
  1021 00003ACA 66FFC5              <1>     inc bp      ;Increment error counter (Stage 3)
  1022                              <1> ;Individual Device table writing
  1023 00003ACD 80FC08              <1>     cmp ah, 08h
  1024 00003AD0 740E                <1>     je .eadttmsd
  1025 00003AD2 80FC09              <1>     cmp ah, 09h
  1026 00003AD5 0F84C9000000        <1>     je .eadtthub
  1027 00003ADB E90E010000          <1>     jmp .eadttbad
  1028                              <1> .eadttmsd:
  1029 00003AE0 48BF-               <1>     mov rdi, msdDevTbl
  1029 00003AE2 [BA02000000000000]  <1>
  1030 00003AEA B10A                <1>     mov cl, msdDevTblE  ;Max entries possible
  1031 00003AEC 66FFC5              <1>     inc bp      ;Increment error counter (Stage 4)
  1032                              <1> .eadttmsd0:
  1033 00003AEF 800F00              <1>     or byte [rdi], 0
  1034 00003AF2 7411                <1>     jz .eadttmsd1
  1035 00003AF4 4881C710000000      <1>     add rdi, msdDevTblEntrySize
  1036 00003AFB FEC9                <1>     dec cl
  1037 00003AFD 0F84EB000000        <1>     jz .eadttbad
  1038 00003B03 EBEA                <1>     jmp short .eadttmsd0
  1039                              <1> .eadttmsd1:
  1040                              <1> ;rdi points to correct offset into table
  1041                              <1> ;rbx points to interface
  1042 00003B05 8A4B04              <1>     mov cl, byte [rbx + 4]   ;Get number of endpoints to check
  1043 00003B08 88CD                <1>     mov ch, cl
  1044 00003B0A 66FFC5              <1>     inc bp      ;Increment error counter (Stage 5)
  1045 00003B0D 4989DB              <1>     mov r11, rbx    ;Save Interface Pointer in r11
  1046 00003B10 4881C309000000      <1>     add rbx, 9  ;Go to first IF
  1047                              <1> .eadttmsd11:
  1048 00003B17 50                  <1>     push rax
  1049 00003B18 668B4302            <1>     mov ax, word [rbx + 2]
  1050 00003B1C 66C1E804            <1>     shr ax, 4   ;Remove low 4 bits
  1051 00003B20 663D2800            <1>     cmp ax, 28h     ;Bulk/In bits
  1052 00003B24 58                  <1>     pop rax         ;Doesnt ruin flags
  1053 00003B25 7411                <1>     je .eadttmsd2   ;Not zero only if valid
  1054 00003B27 4881C307000000      <1>     add rbx, 7   ;Go to next endpoint
  1055 00003B2E FEC9                <1>     dec cl
  1056 00003B30 0F84B8000000        <1>     jz .eadttbad
  1057 00003B36 EBDF                <1>     jmp short .eadttmsd11
  1058                              <1> .eadttmsd2:
  1059 00003B38 44880F              <1>     mov byte [rdi], r9b      ;Device Address
  1060 00003B3B 887701              <1>     mov byte [rdi + 1], dh   ;Root hub/bus
  1061 00003B3E 44885702            <1>     mov byte [rdi + 2], r10b ;Address of parent device if not root
  1062 00003B42 885703              <1>     mov byte [rdi + 3], dl   ;Port number we are inserted in
  1063 00003B45 884704              <1>     mov byte [rdi + 4], al   ;Save Interface number
  1064 00003B48 418A4306            <1>     mov al, byte [r11 + 6]   ;bInterfaceSubclass is +6
  1065 00003B4C 884705              <1>     mov byte [rdi + 5], al
  1066 00003B4F 418A4307            <1>     mov al, byte [r11 + 7]   ;Protocol
  1067 00003B53 884706              <1>     mov byte [rdi + 6], al
  1068 00003B56 44884707            <1>     mov byte [rdi + 7], r8b  ;MaxPacketSize0
  1069                              <1> ;Valid In EP found, write table entries
  1070 00003B5A 8A4302              <1>     mov al, byte [rbx + 2]  ;Get address
  1071 00003B5D 884708              <1>     mov byte [rdi + 8], al
  1072 00003B60 668B4304            <1>     mov ax, word [rbx + 4]  ;Get maxPacketSizeIn
  1073 00003B64 66894709            <1>     mov word [rdi + 9], ax
  1074                              <1> 
  1075 00003B68 498D5B09            <1>     lea rbx, qword [r11 + 9]   ;Return rbx to first IF
  1076 00003B6C 66FFC5              <1>     inc bp      ;Increment error counter (Stage 6)
  1077                              <1> .eadttmsd21:
  1078 00003B6F 668B4302            <1>     mov ax, word [rbx + 2]  ;Bulk/Out bits
  1079 00003B73 66C1E804            <1>     shr ax, 4
  1080 00003B77 663D2000            <1>     cmp ax, 20h
  1081 00003B7B 740D                <1>     je .eadttmsd3   ;Not zero only if valid
  1082 00003B7D 4881C307000000      <1>     add rbx, 7   ;Go to next endpoint
  1083 00003B84 FECD                <1>     dec ch
  1084 00003B86 7466                <1>     jz .eadttbad
  1085 00003B88 EBE5                <1>     jmp short .eadttmsd21
  1086                              <1> .eadttmsd3:
  1087 00003B8A 8A4302              <1>     mov al, byte [rbx + 2]  ;Get address
  1088 00003B8D 88470B              <1>     mov byte [rdi + 11], al
  1089 00003B90 668B4304            <1>     mov ax, word [rbx + 4]  ;Get maxPacketSizeIn
  1090 00003B94 6689470C            <1>     mov word [rdi + 12], ax
  1091 00003B98 6631C0              <1>     xor ax, ax  ;Zero ax
  1092 00003B9B 6689470E            <1>     mov word [rdi + 14], ax ;Make dt bits for I/O EPs zero
  1093                              <1> ;Table entry written for MSD device
  1094 00003B9F E93F000000          <1>     jmp .eadttpass
  1095                              <1> .eadtthub:
  1096 00003BA4 48BF-               <1>     mov rdi, hubDevTbl
  1096 00003BA6 [6A02000000000000]  <1>
  1097 00003BAE B10A                <1>     mov cl,  hubDevTblE ;Max entries possible
  1098 00003BB0 66BD0700            <1>     mov bp, 7      ;Increment error counter (Stage 7)
  1099                              <1> .eadtthub0:
  1100 00003BB4 800F00              <1>     or byte [rdi], 0
  1101 00003BB7 740D                <1>     jz .eadtthub1
  1102 00003BB9 4881C708000000      <1>     add rdi, hubDevTblEntrySize
  1103 00003BC0 FEC9                <1>     dec cl
  1104 00003BC2 742A                <1>     jz .eadttbad
  1105 00003BC4 EBEE                <1>     jmp short .eadtthub0
  1106                              <1> .eadtthub1:
  1107                              <1> ;Valid table space found
  1108 00003BC6 44880F              <1>     mov byte [rdi], r9b      ;Device Address
  1109 00003BC9 887701              <1>     mov byte [rdi + 1], dh   ;Root hub/bus
  1110 00003BCC 44885702            <1>     mov byte [rdi + 2], r10b ;Address of parent device if not root
  1111 00003BD0 885703              <1>     mov byte [rdi + 3], dl   ;Port number we are inserted in
  1112 00003BD3 44884704            <1>     mov byte [rdi + 4], r8b  ;MaxPacketSize0
  1113 00003BD7 66B800FF            <1>     mov ax, 0FF00h  ;Res byte is 0FFh, Num ports (byte 6) is 0
  1114 00003BDB 66894705            <1>     mov word [rdi + 5], ax   ;Number of ports and PowerOn2PowerGood
  1115 00003BDF C64707FF            <1>     mov byte [rdi + 7], 0FFh    ;EP address, currently reserved
  1116                              <1> .eadttpass:
  1117 00003BE3 9D                  <1>     popfq   ;If IF was clear, it will be set clear by popf
  1118 00003BE4 6631C0              <1>     xor ax, ax  ;Clear ax and clc
  1119                              <1> .eadttexit:
  1120 00003BE7 5A                  <1>     pop rdx
  1121 00003BE8 5B                  <1>     pop rbx
  1122 00003BE9 5F                  <1>     pop rdi
  1123 00003BEA 5D                  <1>     pop rbp
  1124 00003BEB 415B                <1>     pop r11
  1125 00003BED C3                  <1>     ret
  1126                              <1> .eadttbad:
  1127 00003BEE 9D                  <1>     popfq   ;If IF was clear, it will be set clear by popf
  1128 00003BEF F9                  <1>     stc
  1129 00003BF0 6689E8              <1>     mov ax, bp
  1130 00003BF3 EBF2                <1>     jmp short .eadttexit
  1131                              <1> .ehciRemoveDevFromTables:
  1132                              <1> ;This function removes a function from internal tables
  1133                              <1> ;Input: al = Address number, ah = Bus number
  1134                              <1> ;Output: Internal tables zeroed out, ax destroyed, Carry clear
  1135                              <1> ;    If invalid argument, Carry set
  1136 00003BF5 57                  <1>     push rdi
  1137 00003BF6 51                  <1>     push rcx
  1138 00003BF7 53                  <1>     push rbx
  1139 00003BF8 48BF-               <1>     mov rdi, usbDevTbl
  1139 00003BFA [4C02000000000000]  <1>
  1140 00003C02 B10A                <1>     mov cl, usbDevTblE    ;10 entries possible
  1141                              <1> .erdft0:
  1142 00003C04 66AF                <1>     scasw
  1143 00003C06 7409                <1>     je .erdft1    ;Device signature found
  1144 00003C08 48FFC7              <1>     inc rdi
  1145 00003C0B FEC9                <1>     dec cl
  1146 00003C0D 7478                <1>     jz .erdftbad
  1147 00003C0F EBF3                <1>     jmp short .erdft0
  1148                              <1> .erdft1:
  1149 00003C11 4881EF02000000      <1>     sub rdi, 2  ;scasw pointers to the next word past the comparison
  1150 00003C18 8A6702              <1>     mov ah, byte [rdi + 2]    ;Save class code in ah
  1151 00003C1B 80FC08              <1>     cmp ah, 08h ;USB MSD Class device
  1152 00003C1E 7507                <1>     jne .erdft11    ;Skip the dec if it is a hub class device
  1153 00003C20 FE0C25[4B020000]    <1>     dec byte [numMSD]   ;Device is being removed from tables, decrement count
  1154                              <1> .erdft11:
  1155                              <1> ;Clear usbDevTbl entry for usb device
  1156 00003C27 50                  <1>     push rax
  1157 00003C28 B903000000          <1>     mov ecx, usbDevTblEntrySize    ;Table entry size
  1158 00003C2D 30C0                <1>     xor al, al
  1159 00003C2F F3AA                <1>     rep stosb    ;Store zeros for entry
  1160 00003C31 58                  <1>     pop rax
  1161                              <1> 
  1162 00003C32 48BB-               <1>     mov rbx, hubDevTbl
  1162 00003C34 [6A02000000000000]  <1>
  1163 00003C3C 48B9-               <1>     mov rcx, msdDevTbl
  1163 00003C3E [BA02000000000000]  <1>
  1164 00003C46 80FC09              <1>     cmp ah, 09h
  1165 00003C49 480F44CB            <1>     cmove rcx, rbx ;If 09h (Hub), change table pointed to by rcx
  1166 00003C4D 4889CF              <1>     mov rdi, rcx    ;Point rdi to appropriate table
  1167 00003C50 BB08000000          <1>     mov ebx, hubDevTblEntrySize    ;Size of hub table entry
  1168 00003C55 B910000000          <1>     mov ecx, msdDevTblEntrySize    ;Size of msd table entry
  1169 00003C5A 80FC09              <1>     cmp ah, 09h
  1170 00003C5D 0F44CB              <1>     cmove ecx, ebx    ;If hub, move size into cx
  1171                              <1> ;cx has entry size, rdi points to appropriate table
  1172 00003C60 4889FB              <1>     mov rbx, rdi
  1173 00003C63 31FF                <1>     xor edi, edi
  1174 00003C65 29CF                <1>     sub edi, ecx
  1175 00003C67 B411                <1>     mov ah, 11h
  1176                              <1> .erdft2:
  1177 00003C69 FECC                <1>     dec ah
  1178 00003C6B 741A                <1>     jz .erdftbad    ;Somehow, address not found
  1179 00003C6D 01CF                <1>     add edi, ecx
  1180 00003C6F 3A043B              <1>     cmp al, byte [rbx + rdi]
  1181 00003C72 75F5                <1>     jne .erdft2
  1182 00003C74 4801DF              <1>     add rdi, rbx    ;point rdi to table entry
  1183 00003C77 30C0                <1>     xor al, al
  1184 00003C79 F3AA                <1>     rep stosb    ;ecx contains table entry size in bytes
  1185 00003C7B FE0C25[35020000]    <1>     dec byte [usbDevices]   ;Decrement total usb devices
  1186 00003C82 F8                  <1>     clc
  1187                              <1> .erdftexit:
  1188 00003C83 5B                  <1>     pop rbx
  1189 00003C84 59                  <1>     pop rcx
  1190 00003C85 5F                  <1>     pop rdi
  1191 00003C86 C3                  <1>     ret
  1192                              <1> .erdftbad:
  1193 00003C87 F9                  <1>     stc
  1194 00003C88 EBF9                <1>     jmp short .erdftexit 
  1195                              <1> .ehciGiveValidAddress:
  1196                              <1> ;This function will return a valid value to use as an address
  1197                              <1> ;for a new device.
  1198                              <1> ;Input: al = Controller number [0-3]
  1199                              <1> ;Output: al = Address, or 80h => No valid available address
  1200 00003C8A 57                  <1>     push rdi
  1201 00003C8B 51                  <1>     push rcx
  1202 00003C8C 88C4                <1>     mov ah, al    ;Move bus number high
  1203 00003C8E B000                <1>     mov al, 0 ;Address 0, start at addr 1
  1204                              <1> .egva0:
  1205 00003C90 FEC0                <1>     inc al
  1206 00003C92 3C80                <1>     cmp al, 80h
  1207 00003C94 7317                <1>     jae .egvaexit
  1208 00003C96 48BF-               <1>     mov rdi, usbDevTbl
  1208 00003C98 [4C02000000000000]  <1>
  1209 00003CA0 B10A                <1>     mov cl, usbDevTblE    ;10 entries possible
  1210                              <1> .egva1:
  1211 00003CA2 66AF                <1>     scasw
  1212 00003CA4 74EA                <1>     je .egva0
  1213 00003CA6 48FFC7              <1>     inc rdi    ;Pass third byte in table entry
  1214 00003CA9 FEC9                <1>     dec cl
  1215 00003CAB 75F5                <1>     jnz .egva1    ;Check every entry for any addresses being used
  1216                              <1> .egvaexit:
  1217 00003CAD 59                  <1>     pop rcx
  1218 00003CAE 5F                  <1>     pop rdi
  1219 00003CAF C3                  <1>     ret 
  1220                              <1> .ehciFindValidInterface:
  1221                              <1> ;A proc to check a valid interface descriptor is present. 
  1222                              <1> ;Input: Nothing [Assumes Get Config was called in standard buffer]
  1223                              <1> ;Output: Carry set if invalid. Carry clear if valid.
  1224                              <1> ;    On success: ah = device type (0 is msd, 1 is hub)
  1225                              <1> ;                al = interface number to set
  1226                              <1> ;               rbx = Pointer to Interface Descriptor
  1227                              <1> ;   On fail: al contains error code, registers rbx, cx, dx destroyed
  1228 00003CB0 56                  <1>     push rsi
  1229 00003CB1 57                  <1>     push rdi
  1230 00003CB2 51                  <1>     push rcx
  1231 00003CB3 52                  <1>     push rdx
  1232                              <1> 
  1233 00003CB4 48BE-               <1>     mov rsi, ehciDataIn    ;Shift to buffer
  1233 00003CB6 [C003000000000000]  <1>
  1234 00003CBE 30D2                <1>     xor dl, dl    ;Error code counter
  1235 00003CC0 807E0102            <1>     cmp byte [rsi + 1], 02h    ;Check if valid config descriptor
  1236 00003CC4 753F                <1>     jne .ecvifail
  1237 00003CC6 FEC2                <1>     inc dl
  1238                              <1> ;cl counts ep's per interface, ch counts possible interfaces
  1239 00003CC8 8A6E05              <1>     mov ch, byte [rsi + 5]        ;Get number of interfaces
  1240                              <1> .ecvi0:
  1241 00003CCB 84ED                <1>     test ch, ch
  1242 00003CCD 7436                <1>     jz .ecvifail    ;Zero interfaces is invalid for us
  1243 00003CCF FEC2                <1>     inc dl
  1244                              <1> 
  1245 00003CD1 4889F3              <1>     mov rbx, rsi    ;Save this descriptor in rbx
  1246 00003CD4 480FB633            <1>     movzx rsi, byte [rbx]    ;get the size of the config to skip
  1247 00003CD8 4801DE              <1>     add rsi, rbx    ;point rsi to head of first interface descriptor
  1248 00003CDB 807E0104            <1>     cmp byte [rsi + 1], 04h    ;Check if valid interface descriptor
  1249 00003CDF 7524                <1>     jne .ecvifail
  1250 00003CE1 FEC2                <1>     inc dl
  1251 00003CE3 8A4E04              <1>     mov cl, byte [rsi + 4]
  1252                              <1> ;Cmp IF has valid class/prototcol
  1253 00003CE6 4831C0              <1>     xor rax, rax    ;Device signature, 0 is msd, 1 is hub
  1254 00003CE9 E859000000          <1>     call .ehciCheckMsdIf
  1255 00003CEE 7309                <1>     jnc    .ecviif    ;Not clear => valid interface
  1256 00003CF0 FEC4                <1>     inc ah    ;Device signature, 0 is msd, 1 is hub
  1257 00003CF2 E831000000          <1>     call .ehciCheckHubIf
  1258 00003CF7 7213                <1>     jc    .ecvibadif    ;Clear => bad interface
  1259                              <1> .ecviif:    ;Valid interface found
  1260 00003CF9 8A4602              <1>     mov al, byte [rsi + 2]    ;Get interface number into al
  1261 00003CFC 4889F3              <1>     mov rbx, rsi    ;Save pointer in rbx for return
  1262 00003CFF F8                  <1>     clc ;Clear carry
  1263                              <1> .ecviexit:
  1264 00003D00 5A                  <1>     pop rdx
  1265 00003D01 59                  <1>     pop rcx
  1266 00003D02 5F                  <1>     pop rdi
  1267 00003D03 5E                  <1>     pop rsi
  1268 00003D04 C3                  <1>     ret
  1269                              <1> .ecvifail:
  1270 00003D05 31DB                <1>     xor ebx, ebx    ;Zero rbx for bad returns
  1271 00003D07 F9                  <1>     stc
  1272 00003D08 88D0                <1>     mov al, dl    ;Move error code
  1273 00003D0A EBF4                <1>     jmp short .ecviexit
  1274                              <1> .ecvibadif:    ;Bad interface, goto next interface
  1275 00003D0C 84C9                <1>     test cl, cl
  1276 00003D0E 740B                <1>     jz .ecvibadif1
  1277 00003D10 FEC9                <1>     dec cl
  1278 00003D12 4881C607000000      <1>     add rsi, 7
  1279 00003D19 EBF1                <1>     jmp short .ecvibadif
  1280                              <1> .ecvibadif1:
  1281 00003D1B 4881C609000000      <1>     add rsi, 9
  1282 00003D22 FECD                <1>     dec ch
  1283 00003D24 B201                <1>     mov dl, 1
  1284 00003D26 EBA3                <1>     jmp short .ecvi0
  1285                              <1> .ehciCheckHubIf:
  1286                              <1> ;Input: rsi points to interface descriptor
  1287                              <1> ;Output: All registers preserved, carry set if NOT valid hub
  1288 00003D28 56                  <1>     push rsi
  1289 00003D29 807E0509            <1>     cmp byte [rsi + 5], 09h
  1290 00003D2D 7515                <1>     jne .ecdhfail
  1291 00003D2F 807E0600            <1>     cmp byte [rsi + 6], 0
  1292 00003D33 750F                <1>     jne .ecdhfail
  1293 00003D35 807E0702            <1>     cmp byte [rsi + 7], 2
  1294 00003D39 7709                <1>     ja .ecdhfail
  1295 00003D3B 807E0401            <1>     cmp byte [rsi + 4], 1    ;One endpoint to rule them all
  1296 00003D3F 7503                <1>     jne .ecdhfail
  1297 00003D41 F8                  <1>     clc 
  1298                              <1> .ecdhexit:
  1299 00003D42 5E                  <1>     pop rsi
  1300 00003D43 C3                  <1>     ret
  1301                              <1> .ecdhfail:
  1302 00003D44 F9                  <1>     stc
  1303 00003D45 EBFB                <1>     jmp short .ecdhexit
  1304                              <1> .ehciCheckMsdIf:
  1305                              <1> ;Input: rsi points to interface descriptor
  1306                              <1> ;Output: Carry set if fail, ax destroyed
  1307                              <1> ;    rsi points to good descriptor if all ok
  1308                              <1> ;Note we only accept 09/00/50 and 09/06/50
  1309 00003D47 56                  <1>     push rsi
  1310 00003D48 53                  <1>     push rbx
  1311 00003D49 51                  <1>     push rcx
  1312 00003D4A 807E0508            <1>     cmp byte [rsi + 5], 08h    ;MSD class
  1313 00003D4E 7517                <1>     jne .ecdmfail
  1314                              <1> ;Subclass check
  1315 00003D50 807E0606            <1>     cmp byte [rsi + 6], 06h    ;SCSI actual
  1316 00003D54 7406                <1>     je .ecdmprot
  1317 00003D56 807E0600            <1>     cmp byte [rsi + 6], 00h    ;SCSI defacto
  1318 00003D5A 750B                <1>     jne .ecdmfail
  1319                              <1> .ecdmprot:
  1320 00003D5C 807E0750            <1>     cmp byte [rsi + 7], 50h    ;BBB
  1321 00003D60 7505                <1>     jne .ecdmfail
  1322                              <1> .ecdmprotUAF:   ;Dummy label to find where to add this later
  1323                              <1> .ecdmpass:
  1324 00003D62 F8                  <1>     clc
  1325                              <1> .ecdmexit:
  1326 00003D63 59                  <1>     pop rcx
  1327 00003D64 5B                  <1>     pop rbx
  1328 00003D65 5E                  <1>     pop rsi
  1329 00003D66 C3                  <1>     ret
  1330                              <1> .ecdmfail:
  1331 00003D67 F9                  <1>     stc
  1332 00003D68 EBF9                <1>     jmp short .ecdmexit
  1333                              <1> .ehciGetDevicePtr:
  1334                              <1> ;Gets address/bus pair and returns in rax a pointer to the data
  1335                              <1> ;structure of the device, in the data table.
  1336                              <1> ;Input: ah = bus number, al = Address number
  1337                              <1> ;Output: ax = Preserved, rsi = Pointer to table structure, bl = USB Class Code
  1338 00003D6A 51                  <1>     push rcx
  1339 00003D6B 52                  <1>     push rdx
  1340 00003D6C 55                  <1>     push rbp
  1341 00003D6D B90A000000          <1>     mov ecx, usbMaxDevices
  1342 00003D72 48BE-               <1>     mov rsi, usbDevTbl
  1342 00003D74 [4C02000000000000]  <1>
  1343                              <1> .egdp0:
  1344 00003D7C 663B06              <1>     cmp ax, word [rsi]
  1345 00003D7F 740E                <1>     je .egdp1   ;Device found
  1346 00003D81 4881C603000000      <1>     add rsi, usbDevTblEntrySize
  1347 00003D88 66FFC9              <1>     dec cx
  1348 00003D8B 7447                <1>     jz .egdpfail    ;Got to the end with no dev found, exit
  1349 00003D8D EBED                <1>     jmp short .egdp0
  1350                              <1> .egdp1:
  1351 00003D8F 48BD-               <1>     mov rbp, hubDevTbl
  1351 00003D91 [6A02000000000000]  <1>
  1352 00003D99 B908000000          <1>     mov ecx, hubDevTblEntrySize
  1353 00003D9E 0FB65E02            <1>     movzx ebx, byte [rsi + 2]  ;Return bl for device type
  1354 00003DA2 80FB09              <1>     cmp bl, 09h ;Are we hub?
  1355 00003DA5 48BE-               <1>     mov rsi, msdDevTbl  ;Set to msd
  1355 00003DA7 [BA02000000000000]  <1>
  1356 00003DAF BA10000000          <1>     mov edx, msdDevTblEntrySize
  1357 00003DB4 480F44F5            <1>     cmove rsi, rbp  ;If hub, reload rsi pointer to hub table
  1358 00003DB8 0F44D1              <1>     cmove edx, ecx    ;If hub, reload dx with hub table size
  1359 00003DBB B90A000000          <1>     mov ecx, usbMaxDevices
  1360                              <1> .egdp2:
  1361 00003DC0 663B06              <1>     cmp ax, word [rsi]
  1362 00003DC3 740A                <1>     je .egdp3
  1363 00003DC5 4801D6              <1>     add rsi, rdx    ;rdx contains size of entry for either table
  1364 00003DC8 66FFC9              <1>     dec cx
  1365 00003DCB 7407                <1>     jz .egdpfail
  1366 00003DCD EBF1                <1>     jmp short .egdp2
  1367                              <1> .egdp3:
  1368 00003DCF F8                  <1>     clc
  1369                              <1> .egdpexit:
  1370 00003DD0 5D                  <1>     pop rbp
  1371 00003DD1 5A                  <1>     pop rdx
  1372 00003DD2 59                  <1>     pop rcx
  1373 00003DD3 C3                  <1>     ret
  1374                              <1> .egdpfail:
  1375 00003DD4 6631DB              <1>     xor bx, bx
  1376 00003DD7 F9                  <1>     stc
  1377 00003DD8 EBF6                <1>     jmp short .egdpexit
  1378                              <1> 
  1379                              <1> .ehciProbeQhead:
  1380                              <1> ;A proc that returns a Queue Heads' status byte in bl.
  1381                              <1> ;Input:
  1382                              <1> ;   rbx = Address of QHead to probe
  1383                              <1> ;Output: 
  1384                              <1> ;   bl = Status byte, if 0, successful transfer!
  1385 00003DDA 8A5B18              <1>     mov bl, byte [rbx + 18h]  ;08h is offset in qTD
  1386 00003DDD C3                  <1>     ret
  1387                              <1> .ehciStandardErrorHandler:
  1388                              <1> ;Attempts to verify if something went wrong in previous transaction.
  1389                              <1> ;May only be called if eActiveInt has bit USBSTS bit set
  1390                              <1> ;Input:  al = Device Address
  1391                              <1> ;        cx = Default Endpoint Size
  1392                              <1> ;Output: CF=CY: Host error, Reset host system
  1393                              <1> ;        CF=NC: Proceed with below
  1394                              <1> ;        al = 0 => Benign error, Make request again/Verify data.
  1395                              <1> ;        al = 1 => Stall, Transaction error or Handshake error, corrected.
  1396                              <1> ;        al = 80h => Fatal error, EPClear errored out, but no clear reason why
  1397                              <1> ;        al > 80h => Bits 6-0 give the status byte for the error on EP Clear.
  1398                              <1> ;                  Bit 7 is the fatal error bit. 
  1399                              <1> ;                  If set, recommend device is port reset.
  1400                              <1> ;All other registers preserved
  1401 00003DDE 53                  <1>     push rbx
  1402 00003DDF 4150                <1>     push r8
  1403 00003DE1 4151                <1>     push r9
  1404                              <1> 
  1405 00003DE3 4989C0              <1>     mov r8, rax
  1406 00003DE6 4989C9              <1>     mov r9, rcx
  1407 00003DE9 30C0                <1>     xor al, al                  ;Set error counter and clear CF
  1408 00003DEB F60425[48020000]02  <1>     test byte [eActiveInt], 2   ;Error Interrupt
  1409 00003DF3 744B                <1>     jz .esehexit                ;No error found, should not have been called
  1410 00003DF5 488B1C25[3E020000]  <1>     mov rbx, qword [eCurrAsyncHead] ;Get the current transacting QHead address
  1411 00003DFD E8D8FFFFFF          <1>     call .ehciProbeQhead    ;Ret in bl status byte
  1412 00003E02 80E378              <1>     and bl, 01111000b       ;Check if it is something we should clear EP for
  1413 00003E05 7439                <1>     jz .esehexit            ;If it is not, benign error. al = 0
  1414                              <1> 
  1415 00003E07 488B1C25[3E020000]  <1>     mov rbx, qword [eCurrAsyncHead] ;Get current AsyncHead again
  1416 00003E0F 4488C0              <1>     mov al, r8b        ;Device Address
  1417 00003E12 664489C9            <1>     mov cx, r9w        ;EP size
  1418 00003E16 8A5B05              <1>     mov bl, byte [rbx + 05h]  ;Get Endpoint to reset
  1419 00003E19 80E30F              <1>     and bl, 0Fh ;Lo nybble only
  1420 00003E1C E828000000          <1>     call .ehciClearEpStallHalt
  1421 00003E21 721D                <1>     jc .esehexit        ;HC error!
  1422 00003E23 B001                <1>     mov al, 1           ;Stall cleared
  1423 00003E25 F60425[48020000]02  <1>     test byte [eActiveInt], 2   ;Check if interrupt returned an error
  1424 00003E2D 7411                <1>     jz .esehexit                ;No error found, return al=1, stall cleared
  1425 00003E2F B080                <1>     mov al, 80h                 ;Fatal error indication
  1426 00003E31 488B1C25[3E020000]  <1>     mov rbx, qword [eCurrAsyncHead] ;Get the current transacting QHead address
  1427 00003E39 E89CFFFFFF          <1>     call .ehciProbeQhead   
  1428 00003E3E 08D8                <1>     or al, bl          ;Add error bits to al for Fatal error indication.
  1429                              <1> .esehexit:
  1430 00003E40 4C89C9              <1>     mov rcx, r9
  1431 00003E43 4159                <1>     pop r9
  1432 00003E45 4158                <1>     pop r8
  1433 00003E47 5B                  <1>     pop rbx
  1434 00003E48 C3                  <1>     ret
  1435                              <1> 
  1436                              <1> .ehciClearEpStallHalt:
  1437                              <1> ;Clears a halt or stall on an endpoint.
  1438                              <1> ;Input: bl=Endpoint (0 for control)
  1439                              <1> ;       al=Device Address
  1440                              <1> ;       cx=Ctrl Endpoint Size
  1441                              <1> ;Output:
  1442                              <1> ;   CF=CY: Host error, Reset host system
  1443                              <1> ;   CF=NC: Transaction succeeded, check interrupt error bit for confirmation
  1444 00003E49 53                  <1>     push rbx
  1445 00003E4A 480FB6DB            <1>     movzx rbx, bl
  1446 00003E4E 48C1E320            <1>     shl rbx, 2*10h  ;Shift wIndex by two words
  1447 00003E52 4881CB02010000      <1>     or rbx, 0102h   ;01=bRequest(CLEAR_FEATURE) 02h=bmRequestType (Endpoint)
  1448 00003E59 E892F7FFFF          <1>     call .ehciSetNoData
  1449 00003E5E 5B                  <1>     pop rbx ;Get original bx
  1450 00003E5F C3                  <1>     ret
  1451                              <1> 
  1452                              <1> .ehciWriteQHead:
  1453                              <1> ;Writes a Queue head at rdi, and clears the space for the transfer descriptor
  1454                              <1> ;rdi points at the head of the qhead on return
  1455                              <1> ;All non argument registers preserved
  1456                              <1> ;r8d=Horizontal Ptr + Typ + T
  1457                              <1> ;r9d=Endpoint Characteristics
  1458                              <1> ;r10d=Endpoint Capabilities
  1459                              <1> ;r11d=Next qTD Pointer
  1460 00003E60 50                  <1>     push rax
  1461 00003E61 51                  <1>     push rcx
  1462 00003E62 57                  <1>     push rdi
  1463 00003E63 31C0                <1>     xor eax, eax
  1464 00003E65 4489C0              <1>     mov eax, r8d
  1465 00003E68 AB                  <1>     stosd
  1466 00003E69 4489C8              <1>     mov eax, r9d
  1467 00003E6C AB                  <1>     stosd
  1468 00003E6D 4489D0              <1>     mov eax, r10d
  1469 00003E70 AB                  <1>     stosd
  1470 00003E71 31C0                <1>     xor eax, eax
  1471 00003E73 AB                  <1>     stosd            ;Enter 0 for the current qTD pointer entry
  1472 00003E74 4489D8              <1>     mov eax, r11d
  1473 00003E77 AB                  <1>     stosd
  1474 00003E78 B90A000000          <1>     mov ecx, 10
  1475 00003E7D 31C0                <1>     xor eax, eax
  1476 00003E7F F3AB                <1>     rep stosd
  1477 00003E81 5F                  <1>     pop rdi
  1478 00003E82 59                  <1>     pop rcx
  1479 00003E83 58                  <1>     pop rax
  1480 00003E84 C3                  <1>     ret
  1481                              <1> .ehciWriteQHeadTD:
  1482                              <1> ;Writes a transfer descriptor at the location pointed at by rdi
  1483                              <1> ;rdi points at the head of the qheadTD on return
  1484                              <1> ;All registers except passed arguments, preserved
  1485                              <1> ;rdi=location for current linked list element
  1486                              <1> ;r8d=Next qTD ptr
  1487                              <1> ;r9d=Alternate Next qTD ptr
  1488                              <1> ;r10d=Transfer Descriptor Token
  1489                              <1> ;r11=Buffer Ptr 0 + Current Offset
  1490 00003E85 50                  <1>     push rax
  1491 00003E86 57                  <1>     push rdi
  1492 00003E87 4489C0              <1>     mov eax, r8d
  1493 00003E8A AB                  <1>     stosd
  1494 00003E8B 4489C8              <1>     mov eax, r9d
  1495 00003E8E AB                  <1>     stosd
  1496 00003E8F 4489D0              <1>     mov eax, r10d
  1497 00003E92 AB                  <1>     stosd
  1498 00003E93 4489D8              <1>     mov eax, r11d
  1499 00003E96 AB                  <1>     stosd
  1500 00003E97 2500F0FFFF          <1>     and eax, 0FFFFF000h
  1501 00003E9C 0500100000          <1>     add eax, 1000h
  1502 00003EA1 AB                  <1>     stosd
  1503 00003EA2 0500100000          <1>     add eax, 1000h
  1504 00003EA7 AB                  <1>     stosd
  1505 00003EA8 0500100000          <1>     add eax, 1000h
  1506 00003EAD AB                  <1>     stosd
  1507 00003EAE 0500100000          <1>     add eax, 1000h
  1508 00003EB3 AB                  <1>     stosd
  1509                              <1> 
  1510 00003EB4 4C89D8              <1>     mov rax, r11
  1511 00003EB7 48C1C820            <1>     ror rax, 20h
  1512 00003EBB AB                  <1>     stosd
  1513 00003EBC 48C1C820            <1>     ror rax, 20h
  1514 00003EC0 482500F0FFFF        <1>     and rax, 0FFFFFFFFFFFFF000h
  1515 00003EC6 480500100000        <1>     add rax, 1000h
  1516 00003ECC 48C1C820            <1>     ror rax, 20h
  1517 00003ED0 AB                  <1>     stosd
  1518 00003ED1 48C1C820            <1>     ror rax, 20h
  1519 00003ED5 480500100000        <1>     add rax, 1000h
  1520 00003EDB 48C1C820            <1>     ror rax, 20h
  1521 00003EDF AB                  <1>     stosd  
  1522 00003EE0 48C1C820            <1>     ror rax, 20h
  1523 00003EE4 480500100000        <1>     add rax, 1000h
  1524 00003EEA 48C1C820            <1>     ror rax, 20h
  1525 00003EEE AB                  <1>     stosd
  1526 00003EEF 48C1C820            <1>     ror rax, 20h
  1527 00003EF3 480500100000        <1>     add rax, 1000h
  1528 00003EF9 48C1C820            <1>     ror rax, 20h
  1529 00003EFD AB                  <1>     stosd
  1530 00003EFE 5F                  <1>     pop rdi
  1531 00003EFF 58                  <1>     pop rax
  1532 00003F00 C3                  <1>     ret
  1533                              <1> 
  1534                              <1> 
  1535                              <1> .ehciDevSetupHub:
  1536                              <1> ;Device specific setup. Takes rsi as a ptr to the 
  1537                              <1> ; specific device parameter block.
  1538 00003F01 53                  <1>     push rbx
  1539 00003F02 51                  <1>     push rcx
  1540 00003F03 56                  <1>     push rsi
  1541 00003F04 55                  <1>     push rbp
  1542 00003F05 6631ED              <1>     xor bp, bp    ;Error Stage 0
  1543                              <1> .edshub:
  1544 00003F08 E839030000          <1>     call .ehciHubClassDescriptor
  1545 00003F0D 0F82DA000000        <1>     jc .edsfail
  1546 00003F13 66FFC5              <1>     inc bp  ;Error Stage 1
  1547 00003F16 8A4E05              <1>     mov cl, byte [rsi + 5] ;Get number of ports here
  1548 00003F19 B201                <1>     mov dl, 1   ;Start port number to begin enum on (hub ports start at 1)
  1549                              <1> .edshub1:
  1550 00003F1B 49BC03000000000000- <1>     mov r12, 3
  1550 00003F24 00                  <1>
  1551                              <1> .edshub11:
  1552 00003F25 E8CB000000          <1>     call .ehciEnumerateHubPort    ;dl for port to scan/enumerate
  1553 00003F2A 7413                <1>     jz .edshub13    ;If ZF=ZR, valid device found!
  1554 00003F2C 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h  ;General Controller Failure
  1555 00003F34 0F8448F3FFFF        <1>     je USB.ehciCriticalErrorWrapper
  1556 00003F3A 49FFCC              <1>     dec r12
  1557 00003F3D 75E6                <1>     jnz .edshub11   ;Still not zero but failed, try again.
  1558                              <1> .edshub13:
  1559 00003F3F FEC2                <1>     inc dl  ;Start with port 1
  1560 00003F41 38D1                <1>     cmp cl, dl
  1561 00003F43 73D6                <1>     jae .edshub1
  1562                              <1> .edshub2:
  1563                              <1> ;Need to write bHostHub for any detected devices here
  1564 00003F45 F8                  <1>     clc    ;Common success exit
  1565 00003F46 5D                  <1>     pop rbp
  1566 00003F47 5E                  <1>     pop rsi
  1567 00003F48 59                  <1>     pop rcx
  1568 00003F49 5B                  <1>     pop rbx
  1569 00003F4A C3                  <1>     ret
  1570                              <1> 
  1571                              <1> .ehciDeviceSetupMsd:
  1572                              <1> ; Input:  rsi = MSD Device Parameter Block
  1573                              <1> ; Output: CF=CY if catastrophic host error.
  1574                              <1> ;         CF=NC then ax = Return code
  1575                              <1> ;         ax = 0 if successful setup
  1576                              <1> ;         ax = 1 if device did not reset the first time
  1577                              <1> ;         ax = 2 if device did not return a valid LUN
  1578                              <1> ;         ax = 3 if device did not reset the second time
  1579                              <1> ;         Device must me removed from tables and port reset if ax != 0
  1580 00003F4B 51                  <1>     push rcx
  1581 00003F4C 55                  <1>     push rbp
  1582 00003F4D 4150                <1>     push r8
  1583 00003F4F 6631ED              <1>     xor bp, bp    ;Error Stage 0
  1584                              <1> .edsmsd:
  1585 00003F52 49B810000000000000- <1>     mov r8, 10h ;Loop counter setup
  1585 00003F5B 00                  <1>
  1586                              <1> .edsm1:
  1587 00003F5C E8BD030000          <1>     call .ehciMsdDeviceReset
  1588 00003F61 0F8281000000        <1>     jc .edsexit
  1589                              <1> ;Check eActiveInterrupt for confirmation if we need to handle error
  1590 00003F67 F60425[48020000]02  <1>     test byte [eActiveInt], 2   ;If this is set, handle error
  1591 00003F6F 7416                <1>     jz .edsms2
  1592 00003F71 668B4E07            <1>     mov cx, word [rsi + 7]    ;Pass endpoint size
  1593 00003F75 8A06                <1>     mov al, byte [rsi]  ;Device address
  1594 00003F77 E862FEFFFF          <1>     call .ehciStandardErrorHandler
  1595 00003F7C A880                <1>     test al, 80h 
  1596 00003F7E 756D                <1>     jnz .edsfail   ;If bit 7 is set, something is seriously wrong, fail dev!
  1597 00003F80 49FFC8              <1>     dec r8                ;Dec loop counter
  1598 00003F83 7468                <1>     jz .edsfail           ;Fatal error if after 16 goes nothing was resolved
  1599 00003F85 EBD5                <1>     jmp short .edsm1
  1600                              <1> .edsms2:
  1601 00003F87 66FFC5              <1>     inc bp  ;Error Stage 1
  1602                              <1> .edsms3:
  1603 00003F8A E8B9030000          <1>     call .ehciMsdGetMaxLun  ;If stall, clear endpoint and proceed. No loop
  1604 00003F8F 7257                <1>     jc .edsexit
  1605 00003F91 F60425[48020000]02  <1>     test byte [eActiveInt], 2   ;If this is set, handle error
  1606 00003F99 740F                <1>     jz .edsms4
  1607                              <1> 
  1608 00003F9B 668B4E07            <1>     mov cx, word [rsi + 7]    ;Pass endpoint size
  1609 00003F9F 8A06                <1>     mov al, byte [rsi]  ;Device address
  1610 00003FA1 E838FEFFFF          <1>     call .ehciStandardErrorHandler
  1611 00003FA6 A880                <1>     test al, 80h 
  1612 00003FA8 7543                <1>     jnz .edsfail   ;If bit 7 is set, something is seriously wrong, fail dev!
  1613                              <1> .edsms4:
  1614 00003FAA 66FFC5              <1>     inc bp  ;Error Stage 2
  1615 00003FAD 49B810000000000000- <1>     mov r8, 10h ;Loop counter setup
  1615 00003FB6 00                  <1>
  1616                              <1> .edsms5:
  1617 00003FB7 E862030000          <1>     call .ehciMsdDeviceReset  ;Reset once again to clear issues
  1618 00003FBC 722A                <1>     jc .edsexit
  1619 00003FBE F60425[48020000]02  <1>     test byte [eActiveInt], 2   ;If this is set, handle error
  1620 00003FC6 7416                <1>     jz .edsms6
  1621                              <1> 
  1622 00003FC8 668B4E07            <1>     mov cx, word [rsi + 7]    ;Pass endpoint size
  1623 00003FCC 8A06                <1>     mov al, byte [rsi]  ;Device address
  1624 00003FCE E80BFEFFFF          <1>     call .ehciStandardErrorHandler
  1625 00003FD3 A880                <1>     test al, 80h 
  1626 00003FD5 7516                <1>     jnz .edsfail   ;If bit 7 is set, something is seriously wrong, fail dev!
  1627 00003FD7 49FFC8              <1>     dec r8                 ;Dec loop counter
  1628 00003FDA 7411                <1>     jz .edsfail           ;Fatal error if after 16 goes nothing was resolved
  1629 00003FDC EBD9                <1>     jmp short .edsms5
  1630                              <1> .edsms6:
  1631 00003FDE FE0425[4B020000]    <1>     inc byte [numMSD] 
  1632 00003FE5 6631C0              <1>     xor ax, ax  ;Note that xor also clears CF
  1633                              <1> .edsexit:
  1634 00003FE8 4158                <1>     pop r8
  1635 00003FEA 5D                  <1>     pop rbp
  1636 00003FEB 59                  <1>     pop rcx
  1637 00003FEC C3                  <1>     ret
  1638                              <1> .edsfail:
  1639                              <1> ;If a fail occurs, then the entry needs to be removed from the data tables
  1640 00003FED 6689E8              <1>     mov ax, bp
  1641 00003FF0 E9F3FFFFFF          <1>     jmp .edsexit
  1642                              <1> 
  1643                              <1> .ehciEnumerateHubPort:
  1644                              <1> ;Enumerates devices on an external Hub.
  1645                              <1> ;Use rsi to get device properties
  1646                              <1> ;Input: rsi = ptr to hub device block
  1647                              <1> ;       dl = Port number to reset
  1648                              <1> ;Output: None, CF
  1649                              <1> 
  1650 00003FF5 53                  <1>     push rbx
  1651 00003FF6 51                  <1>     push rcx
  1652 00003FF7 52                  <1>     push rdx
  1653 00003FF8 55                  <1>     push rbp
  1654 00003FF9 4150                <1>     push r8
  1655 00003FFB 4151                <1>     push r9
  1656 00003FFD 4152                <1>     push r10
  1657 00003FFF 4153                <1>     push r11
  1658                              <1> 
  1659 00004001 0FB6D2              <1>     movzx edx, dl
  1660 00004004 48C1E220            <1>     shl rdx, 4*8    ;Shift port number to right bits
  1661                              <1> .eehdeinit:
  1662 00004008 6631ED              <1>     xor bp, bp  ;Error counter
  1663 0000400B 4C0FB70E            <1>     movzx r9, word [rsi]        ;Save hub bus/addr in r9w
  1664 0000400F 4C0FB64604          <1>     movzx r8, byte [rsi + 4]    ;Get MaxPacketSize0
  1665                              <1> 
  1666                              <1> .eehde0:
  1667 00004014 48BB23030800000000- <1>     mov rbx, 0000000000080323h  ;Set port power feature
  1667 0000401D 00                  <1>
  1668 0000401E 4809D3              <1>     or rbx, rdx ;Add port number into descriptor
  1669 00004021 664489C1            <1>     mov cx, r8w
  1670 00004025 4488C8              <1>     mov al, r9b
  1671 00004028 E8C3F5FFFF          <1>     call .ehciSetNoData   ;Turn on power to port on device in addr al
  1672 0000402D 0F829F010000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1673                              <1> .eehde1:
  1674                              <1> ;Power on debounce!
  1675 00004033 B486                <1>     mov ah, 86h
  1676 00004035 0FB64E06            <1>     movzx ecx, byte [rsi + 6]   ;poweron2powergood
  1677 00004039 D1E1                <1>     shl ecx, 1
  1678 0000403B CD35                <1>     int 35h
  1679                              <1> 
  1680 0000403D 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 1)
  1681                              <1> .eehde2:
  1682 00004040 48BB23011000000000- <1>     mov rbx, 0000000000100123h  ;Clear port set connection bit
  1682 00004049 00                  <1>
  1683 0000404A 4809D3              <1>     or rbx, rdx ;Add port number into descriptor
  1684 0000404D 4488C1              <1>     mov cl, r8b
  1685 00004050 4488C8              <1>     mov al, r9b
  1686 00004053 E898F5FFFF          <1>     call .ehciSetNoData
  1687 00004058 0F8274010000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1688                              <1> .eehde3:
  1689                              <1> 
  1690 0000405E 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 2)
  1691                              <1> .eehde31:
  1692 00004061 48BBA3000000000004- <1>     mov rbx, 00040000000000A3h ;Get port status
  1692 0000406A 00                  <1>
  1693 0000406B 4809D3              <1>     or rbx, rdx
  1694 0000406E 4488C1              <1>     mov cl, r8b
  1695 00004071 4488C8              <1>     mov al, r9b
  1696 00004074 E816F6FFFF          <1>     call .ehciGetRequest
  1697 00004079 0F8253010000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1698                              <1> .eehde4:
  1699 0000407F 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 3)
  1700                              <1> 
  1701 00004082 8A0C25[C0030000]    <1>     mov cl, byte [ehciDataIn]   ;Get the first byte in into cx
  1702 00004089 F6C101              <1>     test cl, 1  ;Check device in port
  1703 0000408C 0F8436010000        <1>     jz .eehdebadnotimeout
  1704                              <1> 
  1705                              <1> .eehde41:   ;EP for first port reset state
  1706 00004092 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 4)
  1707 00004095 E83D010000          <1>     call .eehdereset    ;First port reset
  1708 0000409A 0F8232010000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1709                              <1> 
  1710 000040A0 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 5)
  1711                              <1> 
  1712 000040A3 49BB10000000000000- <1>     mov r11, 10h
  1712 000040AC 00                  <1>
  1713                              <1> .eehde5:
  1714 000040AD 48BBA3000000000004- <1>     mov rbx, 00040000000000A3h ;Get port status again
  1714 000040B6 00                  <1>
  1715 000040B7 4809D3              <1>     or rbx, rdx
  1716 000040BA 4488C1              <1>     mov cl, r8b
  1717 000040BD 4488C8              <1>     mov al, r9b
  1718 000040C0 E8CAF5FFFF          <1>     call .ehciGetRequest
  1719 000040C5 0F8207010000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1720                              <1> .eehde6:
  1721 000040CB 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 6)
  1722                              <1> ;Now check for high speed
  1723                              <1> 
  1724 000040CE 668B0C25[C0030000]  <1>     mov cx, word [ehciDataIn]
  1725 000040D6 6681E1FF07          <1>     and cx, 7FFh    ;Zero upper bits
  1726 000040DB 66C1E909            <1>     shr cx, 9   ;Bring bits [10:9] low
  1727 000040DF 6681F90200          <1>     cmp cx, 2   ;2 is High Speed device
  1728 000040E4 0F85DE000000        <1>     jne .eehdebadnotimeout
  1729 000040EA 48C70425[C0030000]- <1>     mov qword [ehciDataIn], 0
  1729 000040F2 00000000            <1>
  1730                              <1> 
  1731 000040F6 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 7)
  1732                              <1> 
  1733 000040F9 57                  <1>     push rdi
  1734 000040FA 48BF-               <1>     mov rdi, ehciDataIn
  1734 000040FC [C003000000000000]  <1>
  1735 00004104 B908000000          <1>     mov ecx, 8
  1736 00004109 31C0                <1>     xor eax, eax
  1737 0000410B F348AB              <1>     rep stosq
  1738 0000410E 5F                  <1>     pop rdi
  1739                              <1> .eehde7:
  1740 0000410F 48BB23011200000000- <1>     mov rbx, 0000000000120123h  ;Clear port suspend
  1740 00004118 00                  <1>
  1741 00004119 4809D3              <1>     or rbx, rdx ;Add port number into descriptor
  1742 0000411C 4488C1              <1>     mov cl, r8b
  1743 0000411F 4488C8              <1>     mov al, r9b
  1744 00004122 E8C9F4FFFF          <1>     call .ehciSetNoData
  1745 00004127 0F82A5000000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1746                              <1> 
  1747                              <1> .eehde10:
  1748 0000412D 48BB80060001000008- <1>     mov rbx, 00008000001000680h    ;Pass get minimal device descriptor
  1748 00004136 00                  <1>
  1749 00004137 66B94000            <1>     mov cx, 40h    ;Pass default endpoint size
  1750 0000413B 30C0                <1>     xor al, al
  1751 0000413D E84DF5FFFF          <1>     call .ehciGetRequest
  1752 00004142 0F828A000000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1753                              <1> .eehde101:
  1754 00004148 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 8)
  1755                              <1> 
  1756 0000414B 803C25[C1030000]01  <1>     cmp byte [ehciDataIn + 1], 01h    ;Verify this is a valid dev descriptor
  1757 00004153 756E                <1>     jne .eehdebad       ;ehciDataIn contains error signature
  1758                              <1> 
  1759                              <1> ;Sanity check the returned descriptor here
  1760                              <1> .eehde11:
  1761 00004155 66813C25[C2030000]- <1>     cmp word [ehciDataIn + 2], 0200h    ;Verify this is a USB 2.0+ device or
  1761 0000415D 0002                <1>
  1762 0000415F 7262                <1>     jb .eehdebad
  1763 00004161 803C25[C4030000]00  <1>     cmp byte [ehciDataIn + 4], 0    ;Check interfaces
  1764 00004169 7414                <1>     je .eehde12
  1765 0000416B 803C25[C4030000]08  <1>     cmp byte [ehciDataIn + 4], 08h    ;MSD?
  1766 00004173 740A                <1>     je .eehde12
  1767 00004175 803C25[C4030000]09  <1>     cmp byte [ehciDataIn + 4], 09h    ;Hub?
  1768 0000417D 7544                <1>     jne .eehdebad
  1769                              <1> 
  1770                              <1> .eehde12:    ;Valid device detected
  1771 0000417F 440FB60425-         <1>     movzx r8d, byte [ehciDataIn + 7]   ;Save attached device max ep size
  1771 00004184 [C7030000]          <1>
  1772                              <1> .eehde13: 
  1773 00004188 E84A000000          <1>     call .eehdereset    ;Do second reset
  1774 0000418D 7243                <1>     jc .eehdecritical  ;Fast exit with carry set
  1775                              <1> ;Clear the data in buffer
  1776 0000418F 57                  <1>     push rdi
  1777 00004190 48BF-               <1>     mov rdi, ehciDataIn
  1777 00004192 [C003000000000000]  <1>
  1778 0000419A B908000000          <1>     mov ecx, 8
  1779 0000419F 31C0                <1>     xor eax, eax
  1780 000041A1 F348AB              <1>     rep stosq
  1781 000041A4 5F                  <1>     pop rdi
  1782                              <1> 
  1783                              <1> ;Device on port now ready to have an address set to it, and be enumerated
  1784 000041A5 48C1EA20            <1>     shr rdx, 4*8    ;Shift port number back down to dl
  1785 000041A9 668B06              <1>     mov ax, word [rsi]  ;Get hub bus/addr pair
  1786 000041AC 88E6                <1>     mov dh, ah          ;Move the bus number into dh
  1787 000041AE 440FB6D0            <1>     movzx r10d, al      ;Move hub address into r10b
  1788                              <1> ;Ensure dl=port number - 1, dh=Root hub (Bus) number, r10b=Host hub number
  1789                              <1> ;       r8b=Max Control EP endpoint size
  1790 000041B2 49BB64000000000000- <1>     mov r11, 100    ;Address settle time
  1790 000041BB 00                  <1>
  1791 000041BC FECA                <1>     dec dl
  1792 000041BE E998F7FFFF          <1>     jmp .ehciEnumCommonEp
  1793                              <1> 
  1794                              <1> .eehdebad:
  1795                              <1> .eehdebadnoport:    ;EP if done without disabling port
  1796 000041C3 E987F8FFFF          <1>     jmp .ehciedbadnoport
  1797                              <1> .eehdebadnotimeout:
  1798 000041C8 E98DF8FFFF          <1>     jmp .ehciedbadnotimeout
  1799                              <1> .eehdebadremtables:
  1800 000041CD E99AF8FFFF          <1>     jmp .ehcibadremtables
  1801                              <1> .eehdecritical:
  1802 000041D2 E96BF8FFFF          <1>     jmp .ehciedexit  ;Fast exit with carry set
  1803                              <1> .eehdereset:
  1804                              <1> ;rsi must point to valid Hub device block
  1805 000041D7 48BB23030400000000- <1>     mov rbx, 0000000000040323h  ;Reset port 
  1805 000041E0 00                  <1>
  1806 000041E1 4809D3              <1>     or rbx, rdx ;Add device address
  1807 000041E4 4488C1              <1>     mov cl, r8b
  1808 000041E7 4488C8              <1>     mov al, r9b
  1809 000041EA E801F4FFFF          <1>     call .ehciSetNoData
  1810 000041EF 7254                <1>     jc .eehcritexit
  1811                              <1> 
  1812 000041F1 49BB88130000000000- <1>     mov r11, 5000 ;Just keep trying
  1812 000041FA 00                  <1>
  1813                              <1> .eehder1:
  1814 000041FB B486                <1>     mov ah, 86h
  1815 000041FD B914000000          <1>     mov ecx, 20     ;20 ms is max according to USB 2.0 standard
  1816 00004202 CD35                <1>     int 35h
  1817                              <1> 
  1818 00004204 48BBA3000000000004- <1>     mov rbx, 00040000000000A3h ;Get port status
  1818 0000420D 00                  <1>
  1819 0000420E 4809D3              <1>     or rbx, rdx
  1820 00004211 4488C1              <1>     mov cl, r8b
  1821 00004214 4488C8              <1>     mov al, r9b
  1822 00004217 E873F4FFFF          <1>     call .ehciGetRequest
  1823 0000421C 8A0C25[C0030000]    <1>     mov cl, byte [ehciDataIn]   ;Get low byte of in data
  1824 00004223 F6C110              <1>     test cl, 10h    ;If bit not set, reset over, proceed
  1825 00004226 7405                <1>     jz .eehder2
  1826 00004228 49FFCB              <1>     dec r11
  1827 0000422B 75CE                <1>     jnz .eehder1
  1828                              <1> .eehder2:
  1829 0000422D 48BB23011400000000- <1>     mov rbx, 0000000000140123h ;Clear port reset bit
  1829 00004236 00                  <1>
  1830 00004237 4809D3              <1>     or rbx, rdx
  1831 0000423A 4488C1              <1>     mov cl, r8b
  1832 0000423D 4488C8              <1>     mov al, r9b
  1833 00004240 E8ABF3FFFF          <1>     call .ehciSetNoData
  1834                              <1> .eehcritexit:
  1835 00004245 C3                  <1>     ret
  1836                              <1> 
  1837                              <1> .ehciHubClassDescriptor:
  1838                              <1> ;Gets the Hub class descriptor
  1839                              <1> ;Get Hub descriptor for device pointed to by rsi
  1840                              <1> ;If invalid data, returns error
  1841                              <1> ;Input: rsi = Ptr to hub data block
  1842                              <1> ;Output:
  1843                              <1> ;   Carry Clear if success
  1844                              <1> ;   Carry Set if fail, al contains error code
  1845 00004246 53                  <1>     push rbx
  1846 00004247 51                  <1>     push rcx
  1847 00004248 55                  <1>     push rbp
  1848 00004249 66BD0300            <1>     mov bp, 3
  1849                              <1> 
  1850 0000424D 48BBA0060029000007- <1>     mov rbx, 00070000290006A0h  ;Get Hub descriptor (only first 7 bytes)
  1850 00004256 00                  <1>
  1851 00004257 0FB64E04            <1>     movzx ecx, byte [rsi + 4]  ;bMaxPacketSize0
  1852 0000425B 8A06                <1>     mov al, byte [rsi]      ;Get device address
  1853 0000425D E82DF4FFFF          <1>     call .ehciGetRequest
  1854 00004262 7226                <1>     jc .ehcdfail    ;Errors 0-2 live here
  1855                              <1> 
  1856 00004264 66FFC5              <1>     inc bp
  1857 00004267 803C25[C1030000]29  <1>     cmp byte [ehciDataIn + 1], 29h  ;Is this a valid hub descriptor
  1858 0000426F 7519                <1>     jne .ehcdfail
  1859                              <1> 
  1860 00004271 8A0C25[C2030000]    <1>     mov cl, byte [ehciDataIn + 2]   ;Get number of downstream ports
  1861 00004278 884E05              <1>     mov byte [rsi + 5], cl  ;Store in variable, marking device as configured
  1862                              <1> 
  1863 0000427B 8A0C25[C5030000]    <1>     mov cl, byte [ehciDataIn + 5]   ;Get PowerOn2PowerGood
  1864 00004282 884E06              <1>     mov byte [rsi + 6], cl  ;Store in variable
  1865 00004285 F8                  <1>     clc
  1866                              <1> .ehcdexit:
  1867 00004286 5D                  <1>     pop rbp
  1868 00004287 59                  <1>     pop rcx
  1869 00004288 5B                  <1>     pop rbx
  1870 00004289 C3                  <1>     ret
  1871                              <1> .ehcdfail:
  1872 0000428A 4088E8              <1>     mov al, bpl
  1873 0000428D F9                  <1>     stc
  1874 0000428E EBF6                <1>     jmp short .ehcdexit
  1875                              <1> ;                        ---------MSD functions---------
  1876                              <1> .ehciMsdInitialise:
  1877                              <1> ;Initialises an MSD device.
  1878                              <1> ;Input: rsi = Valid MSD device block
  1879                              <1> ;Output: CF=CY: Init did not complete
  1880                              <1> ;        al = 0 => Device initialised
  1881                              <1> ;        al = 1 => Host/Schedule error
  1882                              <1> ;        al = 2 => Device failed to initialise
  1883                              <1> ;        CF=NC: Init complete, rsi points to complete USB MSD device block
  1884 00004290 51                  <1>     push rcx
  1885 00004291 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the bus number into al
  1886 00004294 E800F2FFFF          <1>     call .ehciAdjustAsyncSchedCtrlr
  1887 00004299 B001                <1>     mov al, 1
  1888 0000429B 7249                <1>     jc .ehciMsdInitFail
  1889 0000429D E8A9FCFFFF          <1>     call .ehciDeviceSetupMsd
  1890 000042A2 B002                <1>     mov al, 2
  1891 000042A4 7240                <1>     jc .ehciMsdInitFail
  1892 000042A6 E8EB040000          <1>     call .ehciMsdBOTInquiry
  1893 000042AB 7239                <1>     jc .ehciMsdInitFail
  1894 000042AD B905000000          <1>     mov ecx, 5
  1895                              <1> .emi0:
  1896 000042B2 E82C050000          <1>     call .ehciMsdBOTReadFormatCapacities
  1897 000042B7 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h   ;Host error
  1898 000042BF 7439                <1>     je .ehciMsdInitialisePfail  ;Protocol fail
  1899 000042C1 E88C010000          <1>     call .ehciMsdBOTCheckTransaction
  1900 000042C6 6685C0              <1>     test ax, ax
  1901 000042C9 7538                <1>     jnz .emipf0
  1902 000042CB E8F6060000          <1>     call .ehciMsdBOTModeSense6
  1903 000042D0 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h   ;Host error
  1904 000042D8 7420                <1>     je .ehciMsdInitialisePfail  ;Protocol fail
  1905 000042DA E873010000          <1>     call .ehciMsdBOTCheckTransaction
  1906 000042DF 6685C0              <1>     test ax, ax     ;Also clears CF if zero
  1907 000042E2 751F                <1>     jnz .emipf0
  1908                              <1> .ehciMsdInitExit:
  1909 000042E4 59                  <1>     pop rcx
  1910 000042E5 C3                  <1>     ret
  1911                              <1> .ehciMsdInitFail:
  1912 000042E6 668B06              <1>     mov ax, word [rsi]
  1913 000042E9 E807F9FFFF          <1>     call .ehciRemoveDevFromTables
  1914 000042EE FE0C25[4B020000]    <1>     dec byte [numMSD]   ;Device was removed from tables, decrement
  1915 000042F5 F9                  <1>     stc
  1916 000042F6 B002                <1>     mov al, 2
  1917 000042F8 EBEA                <1>     jmp short .ehciMsdInitExit
  1918                              <1> .ehciMsdInitialisePfail:
  1919 000042FA E873000000          <1>     call .ehciMsdBOTResetRecovery
  1920 000042FF FFC9                <1>     dec ecx
  1921 00004301 74E3                <1>     jz .ehciMsdInitFail
  1922                              <1> .emipf0:
  1923 00004303 E836060000          <1>     call .ehciMsdBOTRequestSense
  1924 00004308 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h
  1925 00004310 74E8                <1>     je .ehciMsdInitialisePfail
  1926 00004312 E83B010000          <1>     call .ehciMsdBOTCheckTransaction
  1927 00004317 6685C0              <1>     test ax, ax
  1928 0000431A 7496                <1>     jz .emi0
  1929 0000431C EBDC                <1>     jmp short .ehciMsdInitialisePfail
  1930                              <1> 
  1931                              <1> .ehciMsdDeviceReset:
  1932                              <1> ;Reset an MSD device on current active EHCI bus
  1933                              <1> ;Input: rsi = Pointer to table data structure
  1934                              <1> ;Output:
  1935                              <1> ;   CF=CY: Host error, Reset host system
  1936                              <1> ;   CF=NC: Transaction succeeded, check reset occurred successfully 
  1937                              <1> ;          (If eActiveIntr AND 2 != 0, then error in transfer)
  1938 0000431E 51                  <1>     push rcx
  1939 0000431F 52                  <1>     push rdx
  1940 00004320 53                  <1>     push rbx
  1941 00004321 50                  <1>     push rax
  1942                              <1> 
  1943 00004322 0FB64E07            <1>     movzx ecx, byte [rsi + 7]  ;Get bMaxPacketSize0
  1944 00004326 480FB65604          <1>     movzx rdx, byte [rsi + 4]  ;Get Interface Number
  1945 0000432B 48C1E228            <1>     shl rdx, 5*8 ;Send to 5th byte
  1946 0000432F 48BB21FF0000000000- <1>     mov rbx, 0FF21h            ;MSD Reset
  1946 00004338 00                  <1>
  1947 00004339 4809D3              <1>     or rbx, rdx                ;And those bytes
  1948 0000433C 8A06                <1>     mov al, byte [rsi]
  1949 0000433E E8ADF2FFFF          <1>     call .ehciSetNoData
  1950                              <1> 
  1951 00004343 58                  <1>     pop rax
  1952 00004344 5B                  <1>     pop rbx
  1953 00004345 5A                  <1>     pop rdx
  1954 00004346 59                  <1>     pop rcx
  1955 00004347 C3                  <1>     ret
  1956                              <1> 
  1957                              <1> .ehciMsdGetMaxLun:
  1958                              <1> ;Get max LUN of an MSD device on current active EHCI bus
  1959                              <1> ;Input: rsi = Pointer to table data structure
  1960                              <1> ;       al = Address
  1961                              <1> ;Output:
  1962                              <1> ;   CF=CY: Host error, Reset host system
  1963                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  1964                              <1> ;   Max Lun saved at DataIn Buffer (first byte)
  1965                              <1> ;   Check this was transferred, by checking total data transferred value
  1966 00004348 51                  <1>     push rcx
  1967 00004349 52                  <1>     push rdx
  1968 0000434A 53                  <1>     push rbx
  1969 0000434B 50                  <1>     push rax
  1970                              <1> 
  1971 0000434C 0FB64E07            <1>     movzx ecx, byte [rsi + 7]  ;Get bMaxPacketSize0
  1972 00004350 480FB65604          <1>     movzx rdx, byte [rsi + 4]  ;Get Interface Number
  1973 00004355 48C1E228            <1>     shl rdx, 5*8 ;Send to 5th byte
  1974 00004359 48BBA1FE0000000001- <1>     mov rbx, 000100000000FEA1h            ;MSD Get Max LUN
  1974 00004362 00                  <1>
  1975 00004363 4809D3              <1>     or rbx, rdx                ;And those bytes
  1976 00004366 8A06                <1>     mov al, byte [rsi]
  1977 00004368 E822F3FFFF          <1>     call .ehciGetRequest
  1978                              <1> 
  1979 0000436D 58                  <1>     pop rax
  1980 0000436E 5B                  <1>     pop rbx
  1981 0000436F 5A                  <1>     pop rdx
  1982 00004370 59                  <1>     pop rcx
  1983 00004371 C3                  <1>     ret
  1984                              <1> 
  1985                              <1> .ehciMsdBOTResetRecovery:
  1986                              <1> ;----------------------------------------------------------------
  1987                              <1> ;Calls the reset recovery procedure on a device ptd to by rsi   :
  1988                              <1> ;Input:  rsi = Pointer to MSD device parameter block            :
  1989                              <1> ;Output: CF=CY if something went wrong. Else CF=NC              :
  1990                              <1> ;----------------------------------------------------------------
  1991                              <1> ;Calls an MSDBBB reset then calls StandardErrorHandler AFTER    : 
  1992                              <1> ; writing the Qhead for each Bulk EP.                           :
  1993                              <1> ;----------------------------------------------------------------
  1994 00004372 50                  <1>     push rax
  1995 00004373 53                  <1>     push rbx
  1996 00004374 51                  <1>     push rcx
  1997 00004375 66C7460E0000        <1>     mov word [rsi + 14], 00h    ;Reset clear both endpoint dt bits 
  1998                              <1> 
  1999 0000437B E89EFFFFFF          <1>     call .ehciMsdDeviceReset    ;Call the device reset
  2000 00004380 721E                <1>     jc .embrrexit
  2001                              <1> ;Now clear stall on IN EP
  2002 00004382 8A06                <1>     mov al, byte [rsi]          ;Get the address
  2003 00004384 8A5E08              <1>     mov bl, byte [rsi + 8]      ;Get the 4 byte EP address
  2004 00004387 0FB64E07            <1>     movzx ecx, byte [rsi + 7]   ;Get the Max packet size for the ctrl EP
  2005 0000438B E8B9FAFFFF          <1>     call .ehciClearEpStallHalt
  2006 00004390 720E                <1>     jc .embrrexit
  2007                              <1> ;Now clear stall on OUT EP
  2008 00004392 8A06                <1>     mov al, byte [rsi]          ;Get the address
  2009 00004394 8A5E0B              <1>     mov bl, byte [rsi + 11]     ;Get the 4 byte EP address
  2010 00004397 0FB64E07            <1>     movzx ecx, byte [rsi + 7]   ;Get the Max packet size for the ctrl EP
  2011 0000439B E8A9FAFFFF          <1>     call .ehciClearEpStallHalt
  2012                              <1> .embrrexit:
  2013 000043A0 59                  <1>     pop rcx
  2014 000043A1 5B                  <1>     pop rbx
  2015 000043A2 58                  <1>     pop rax
  2016 000043A3 C3                  <1>     ret
  2017                              <1> .ehciMsdBOTCheckValidCSW:
  2018                              <1> ; This function checks that the recieved CSW was valid.
  2019                              <1> ; If this function returns a non-zero value in al, 
  2020                              <1> ; a reset recovery of the device is required
  2021                              <1> ; Output: al = 0 : valid CSW
  2022                              <1> ;         If CSW not valid, al contains a bitfield describing what failed
  2023                              <1> ;         al = 1h   : CSW is not 13 bytes in length
  2024                              <1> ;         al = 2h   : dCSWSignature is not equal to 053425355h
  2025                              <1> ;         al = 4h   : dCSWTag does not match the dCBWTag
  2026                              <1> ;         al = 0F8h : Reserved
  2027                              <1> ;   rax destroyed
  2028 000043A4 53                  <1>     push rbx
  2029 000043A5 51                  <1>     push rcx
  2030 000043A6 31C0                <1>     xor eax, eax
  2031 000043A8 66B90100            <1>     mov cx, 1
  2032 000043AC 668B1C25[8A010000]  <1>     mov bx, word [ehciTDSpace + 2*ehciSizeOfTD + 0Ah]   
  2033                              <1> ;Get total bytes to transfer from third QHeadTD to see if 13h bytes were 
  2034                              <1> ; transferred
  2035 000043B4 6681E3FF7F          <1>     and bx, 7FFFh   ;Clear upper bit
  2036 000043B9 660F45C1            <1>     cmovnz ax, cx   ;If the result for the and is not zero, <>13 bytes were sent
  2037                              <1> 
  2038 000043BD 66D1E1              <1>     shl cx, 1     
  2039 000043C0 6609C1              <1>     or cx, ax
  2040 000043C3 813C25[C0050000]55- <1>     cmp dword [msdCSW], CSWSig
  2040 000043CB 534253              <1>
  2041 000043CE 660F45C1            <1>     cmovne ax, cx
  2042                              <1> 
  2043 000043D2 66B90400            <1>     mov cx, 4h
  2044 000043D6 6609C1              <1>     or cx, ax
  2045 000043D9 0FB61C25[4A020000]  <1>     movzx ebx, byte [cbwTag]
  2046 000043E1 FECB                <1>     dec bl
  2047 000043E3 3A1C25[C4050000]    <1>     cmp bl, byte [msdCSW + 4h]
  2048 000043EA 660F45C1            <1>     cmovne ax, cx
  2049                              <1> 
  2050 000043EE 59                  <1>     pop rcx
  2051 000043EF 5B                  <1>     pop rbx
  2052 000043F0 C3                  <1>     ret
  2053                              <1> 
  2054                              <1> .ehciMsdBOTCheckMeaningfulCSW:
  2055                              <1> ; This function checks if the CSW was meaningful.
  2056                              <1> ; If this function returns a non-zero value in al, it is up to the
  2057                              <1> ; caller to decide what action to take. The possible set of actions that
  2058                              <1> ; can be taken is outlined in Section 6.7 of the USB MSC BOT Revision 1.0 
  2059                              <1> ; specification.
  2060                              <1> ; Output :  al = 0h  : Invalid
  2061                              <1> ;           al = 1h  : bCSWStatus = 0
  2062                              <1> ;           al = 2h  : bCSWStatus = 1
  2063                              <1> ;           al = 4h  : bCSWStatus = 2
  2064                              <1> ;           al = 8h  : bCSWStatus > 2
  2065                              <1> ;           al = 10h : dCSWDataResidue = 0
  2066                              <1> ;           al = 20h : dCSWDataResidue < dCBWDataTransferLength
  2067                              <1> ;           al = 40h : dCSWDataResidue > dCBWDataTransferLength
  2068                              <1> ;           al = 80h : Reserved
  2069                              <1> ;   rax destroyed
  2070 000043F1 53                  <1>     push rbx
  2071 000043F2 51                  <1>     push rcx
  2072                              <1> 
  2073 000043F3 31C0                <1>     xor eax, eax  ;In the event that things go completely wrong
  2074 000043F5 66BB0800            <1>     mov bx, 8h
  2075 000043F9 8A0C25[CC050000]    <1>     mov cl, byte [msdCSW + 0Ch]
  2076                              <1> 
  2077 00004400 80F902              <1>     cmp cl, 2
  2078 00004403 660F47C3            <1>     cmova ax, bx
  2079 00004407 7718                <1>     ja .embcmcResidueCheck
  2080                              <1> 
  2081 00004409 66D1EB              <1>     shr bx, 1       ;Shift it down to 4
  2082 0000440C 660F44C3            <1>     cmove ax, bx    ;If bCSWStatus = 2, move it in
  2083 00004410 740F                <1>     je .embcmcResidueCheck
  2084                              <1> 
  2085 00004412 66D1EB              <1>     shr bx, 1       ;Shift down to 2
  2086 00004415 80F901              <1>     cmp cl, 1
  2087 00004418 660F44C3            <1>     cmove ax, bx    ;If bCSWStatus = 1, move bx into ax
  2088 0000441C 7403                <1>     je .embcmcResidueCheck
  2089                              <1> 
  2090 0000441E 66FFC0              <1>     inc ax          ;Otherwise bCSWStatus = 0
  2091                              <1> .embcmcResidueCheck:
  2092 00004421 8B0C25[C8050000]    <1>     mov ecx, dword [msdCSW + 8] ;Get dCSWDataResidue
  2093                              <1> 
  2094 00004428 66BB1000            <1>     mov bx, 10h
  2095 0000442C 6609C3              <1>     or bx, ax   
  2096 0000442F 85C9                <1>     test ecx, ecx
  2097 00004431 660F44C3            <1>     cmovz ax, bx    ;If its zero, move bx with added bit from ax into ax
  2098 00004435 7418                <1>     jz .embcmcExit
  2099                              <1> 
  2100 00004437 66BB2000            <1>     mov bx, 20h
  2101 0000443B 6609C3              <1>     or bx, ax 
  2102 0000443E 3B0C25[88030000]    <1>     cmp ecx, dword [ehciDataOut + 8];ehciDataOut + 8 = dCBWDataTransferLength
  2103 00004445 660F42C3            <1>     cmovb ax, bx
  2104 00004449 7204                <1>     jb .embcmcExit
  2105                              <1> 
  2106 0000444B 660D4000            <1>     or ax, 40h  ;Else, it must be above, fail
  2107                              <1> .embcmcExit:
  2108 0000444F 59                  <1>     pop rcx
  2109 00004450 5B                  <1>     pop rbx
  2110 00004451 C3                  <1>     ret
  2111                              <1> 
  2112                              <1> .ehciMsdBOTCheckTransaction:
  2113                              <1> ;Check successful return data here
  2114                              <1> ;Output: ax = 0                                 : CSW Valid and Meaningful
  2115                              <1> ;        ah = 1, al = CSW Validity bitfield     : CSW NOT valid
  2116                              <1> ;        ah = 2, al = CSW Meaningful bitfield   : CSW NOT meaningful
  2117                              <1> ;   rax destroyed
  2118 00004452 30E4                <1>     xor ah, ah
  2119 00004454 E84BFFFFFF          <1>     call .ehciMsdBOTCheckValidCSW
  2120 00004459 84C0                <1>     test al, al
  2121 0000445B 7407                <1>     jz .embhiehcswmeaningful
  2122 0000445D B401                <1>     mov ah, 1       ; CSW Not Valid signature
  2123 0000445F E90B000000          <1>     jmp .embhiehexit
  2124                              <1> .embhiehcswmeaningful:
  2125 00004464 E888FFFFFF          <1>     call .ehciMsdBOTCheckMeaningfulCSW
  2126 00004469 244C                <1>     and al, 4Ch     ;Check bad bits first and bCSWStatus=02 40h|08h|04h
  2127 0000446B 7402                <1>     jz .embhiehexit
  2128 0000446D B402                <1>     mov ah, 2       ; CSW Not Meaningful signature
  2129                              <1> .embhiehexit:
  2130 0000446F C3                  <1>     ret
  2131                              <1> .ehciMsdBOTOO64I:   ;For devices with 64 byte max packet size
  2132                              <1> .ehciMsdBOTOI64I:   ;For devices with 64 byte max packet size
  2133 00004470 C60425[A9010000]BB  <1>     mov byte [msdStatus], 0BBh   ;Undefined error
  2134 00004478 C3                  <1>     ret
  2135                              <1> .ehciMsdBOTOOI:     ;Out Out In transfer
  2136                              <1> ;Input - rsi = MSD device parameter block
  2137                              <1> ;        rbx = Input buffer for Data In
  2138                              <1> ;        ecx = Number of milliseconds to wait between Out and In packets
  2139                              <1> ;        r8  = Number of bytes to be transferred (for the DATA phase)
  2140                              <1> ;        r10 = LUN Value
  2141                              <1> ;        r11 = Length of CBW command block
  2142 00004479 57                  <1>     push rdi
  2143 0000447A 4150                <1>     push r8
  2144 0000447C 4151                <1>     push r9
  2145 0000447E 4152                <1>     push r10
  2146 00004480 4153                <1>     push r11
  2147 00004482 4154                <1>     push r12
  2148 00004484 51                  <1>     push rcx
  2149 00004485 FC                  <1>     cld
  2150                              <1> 
  2151 00004486 4D89C4              <1>     mov r12, r8     ;Save number of bytes to transfer to MSD device
  2152 00004489 51                  <1>     push rcx
  2153                              <1> ;Write QHead for CBW
  2154 0000448A 49BB-               <1>     mov r11, ehciTDSpace ;First TD is the head of the Out buffer
  2154 0000448C [0001000000000000]  <1>
  2155 00004494 E840020000          <1>     call .ehciMsdWriteOutQHead
  2156                              <1> ;Write TD for CBW send
  2157 00004499 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
  2158 0000449C 49B801000000000000- <1>     mov r8, 1
  2158 000044A5 00                  <1>
  2159 000044A6 4D89C1              <1>     mov r9, r8
  2160 000044A9 440FB6560F          <1>     movzx r10d, byte [rsi + 15]   ;Get Out EP dt bit
  2161 000044AE 80760F01            <1>     xor byte [rsi + 15], 1  ;Toggle bit
  2162 000044B2 41D1CA              <1>     ror r10d, 1 ;Roll dt bit to upper bit of dword
  2163 000044B5 4181CA808C1F00      <1>     or r10d, 001F8C80h 
  2164                              <1> ; Active TD, OUT EP, Error ctr = 3, 01Fh = 31 byte transfer
  2165 000044BC 49BB-               <1>     mov r11, ehciDataOut ; Data out buffer
  2165 000044BE [8003000000000000]  <1>
  2166 000044C6 E8BAF9FFFF          <1>     call .ehciWriteQHeadTD
  2167                              <1> 
  2168 000044CB B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2169 000044CD E8E6F2FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2170 000044D2 59                  <1>     pop rcx    ;Wait ecx ms for "motors to spin up"
  2171 000044D3 0F824B010000        <1>     jc .emboexit    ;If catastrophic Host system error, exit!
  2172                              <1> 
  2173 000044D9 50                  <1>     push rax
  2174 000044DA B486                <1>     mov ah, 86h
  2175 000044DC CD35                <1>     int 35h
  2176 000044DE 58                  <1>     pop rax
  2177                              <1> ;Write Qhead to Send data
  2178 000044DF 49BB80000000000000- <1>     mov r11, ehciSizeOfTD + ehciSizeOfTD
  2178 000044E8 00                  <1>
  2179 000044E9 E8EB010000          <1>     call .ehciMsdWriteOutQHead
  2180                              <1> ;Write TD for data send
  2181 000044EE 4C89DF              <1>     mov rdi, r11
  2182 000044F1 49B801000000000000- <1>     mov r8, 1
  2182 000044FA 00                  <1>
  2183 000044FB 4D89C1              <1>     mov r9, r8
  2184 000044FE 4D89E2              <1>     mov r10, r12     ;Get back number of bytes to transfer
  2185 00004501 49C1E210            <1>     shl r10, 8*2    ;Shift into 3rd byte
  2186 00004505 4181CA808C0000      <1>     or r10d, 00008C80h ;Add control bits: Active TD, OUT EP, Error ctr = 3
  2187 0000450C 0FB64E0F            <1>     movzx ecx, byte [rsi + 15]  ;Get Out EP dt bit in r9d
  2188 00004510 80760F01            <1>     xor byte [rsi + 15], 1  ;Toggle bit
  2189 00004514 D1C9                <1>     ror ecx, 1 ;Roll dt bit to upper bit of dword
  2190 00004516 4109CA              <1>     or r10d, ecx    ;Add dt bit to r10d
  2191 00004519 4989DB              <1>     mov r11, rbx    ;Get the address of Data buffer
  2192 0000451C E864F9FFFF          <1>     call .ehciWriteQHeadTD
  2193                              <1> 
  2194 00004521 B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2195 00004523 E890F2FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2196 00004528 0F82F6000000        <1>     jc .emboexit    ;If catastrophic Host system error, exit!
  2197                              <1> ;Write Qhead for CSW
  2198 0000452E 49BB-               <1>     mov r11, ehciTDSpace + 2*ehciSizeOfTD ;Third TD
  2198 00004530 [8001000000000000]  <1>
  2199 00004538 E8DB010000          <1>     call .ehciMsdWriteInQHead
  2200 0000453D 4C89DF              <1>     mov rdi, r11
  2201 00004540 E9A9000000          <1>     jmp .emboiicommonep
  2202                              <1> .ehciMsdBOTOII: ;Out In In transfer
  2203                              <1> ;Input - rsi = MSD device parameter block
  2204                              <1> ;        rbx = Input buffer for Data In
  2205                              <1> ;        ecx = Number of milliseconds to wait between Out and In packets
  2206                              <1> ;        r8  = Number of bytes to be transferred (for the DATA phase)
  2207                              <1> ;        r10 = LUN Value
  2208                              <1> ;        r11 = Length of CBW command block
  2209                              <1> 
  2210 00004545 57                  <1>     push rdi
  2211 00004546 4150                <1>     push r8
  2212 00004548 4151                <1>     push r9
  2213 0000454A 4152                <1>     push r10
  2214 0000454C 4153                <1>     push r11
  2215 0000454E 4154                <1>     push r12
  2216 00004550 51                  <1>     push rcx
  2217 00004551 FC                  <1>     cld
  2218                              <1> 
  2219 00004552 4D89C4              <1>     mov r12, r8 ;Save the number of bytes to be transferred
  2220 00004555 51                  <1>     push rcx
  2221                              <1> 
  2222                              <1> ;Write the OUT Queue Head
  2223 00004556 49BB-               <1>     mov r11, ehciTDSpace ;First TD is the head of the Out buffer
  2223 00004558 [0001000000000000]  <1>
  2224 00004560 E874010000          <1>     call .ehciMsdWriteOutQHead
  2225                              <1> 
  2226 00004565 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
  2227 00004568 49B801000000000000- <1>     mov r8, 1
  2227 00004571 00                  <1>
  2228 00004572 4D89C1              <1>     mov r9, r8
  2229 00004575 440FB6560F          <1>     movzx r10d, byte [rsi + 15]   ;Get Out EP dt bit
  2230 0000457A 80760F01            <1>     xor byte [rsi + 15], 1  ;Toggle bit
  2231 0000457E 41D1CA              <1>     ror r10d, 1 ;Roll dt bit to upper bit of dword
  2232 00004581 4181CA808C1F00      <1>     or r10d, 001F8C80h 
  2233                              <1> ; Active TD, OUT EP, Error ctr = 3, 01Fh = 31 byte transfer
  2234 00004588 49BB-               <1>     mov r11, ehciDataOut ; Data out buffer
  2234 0000458A [8003000000000000]  <1>
  2235 00004592 E8EEF8FFFF          <1>     call .ehciWriteQHeadTD
  2236                              <1> 
  2237 00004597 B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2238 00004599 E81AF2FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2239 0000459E 59                  <1>     pop rcx    ;Wait ecx ms for "motors to spin up"
  2240 0000459F 0F827F000000        <1>     jc .emboexit    ;If catastrophic Host system error, exit!
  2241                              <1>          
  2242 000045A5 50                  <1>     push rax
  2243 000045A6 B486                <1>     mov ah, 86h
  2244 000045A8 CD35                <1>     int 35h
  2245 000045AA 58                  <1>     pop rax
  2246                              <1> ;Write the IN Queue Head
  2247 000045AB 49BB-               <1>     mov r11, ehciTDSpace + ehciSizeOfTD ;Move to position 2 to preserve OUT TD
  2247 000045AD [4001000000000000]  <1>
  2248 000045B5 E85E010000          <1>     call .ehciMsdWriteInQHead
  2249                              <1> 
  2250 000045BA 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
  2251 000045BD 4C8D4740            <1>     lea r8, qword [rdi + ehciSizeOfTD]  ;Point to next TD
  2252 000045C1 4D89C1              <1>     mov r9, r8
  2253 000045C4 4D89E2              <1>     mov r10, r12     ;Get back number of bytes to transfer from the stack
  2254 000045C7 49C1E210            <1>     shl r10, 8*2    ;Shift into 3rd byte
  2255 000045CB 4181CA800D0000      <1>     or r10d, 00000D80h ;Add control bits: Active TD, IN EP, Error ctr = 3
  2256 000045D2 0FB64E0E            <1>     movzx ecx, byte [rsi + 14]  ;Get IN EP dt bit in r9d
  2257 000045D6 80760E01            <1>     xor byte [rsi + 14], 1  ;Toggle bit
  2258 000045DA D1C9                <1>     ror ecx, 1 ;Roll dt bit to upper bit of dword
  2259 000045DC 4109CA              <1>     or r10d, ecx    ;Add dt bit to r10d
  2260 000045DF 4989DB              <1>     mov r11, rbx ; Data out buffer, default ehciDataIn
  2261 000045E2 E89EF8FFFF          <1>     call .ehciWriteQHeadTD
  2262                              <1> 
  2263 000045E7 4881C740000000      <1>     add rdi, ehciSizeOfTD     ;Go to next TD space
  2264                              <1> .emboiicommonep:
  2265 000045EE 49B801000000000000- <1>     mov r8, 1
  2265 000045F7 00                  <1>
  2266 000045F8 4D89C1              <1>     mov r9, r8
  2267 000045FB 41BA808D0D00        <1>     mov r10d, 000D8D80h     ;Active TD, IN EP, Error ctr = 3, 0Dh = 13 byte CSW
  2268 00004601 0FB64E0E            <1>     movzx ecx, byte [rsi + 14]  ;Get IN EP dt bit in r9d
  2269 00004605 80760E01            <1>     xor byte [rsi + 14], 1  ;Toggle bit
  2270 00004609 D1C9                <1>     ror ecx, 1 ;Roll dt bit to upper bit of dword
  2271 0000460B 4109CA              <1>     or r10d, ecx    ;Add dt bit to r10d
  2272 0000460E 49BB-               <1>     mov r11, msdCSW
  2272 00004610 [C005000000000000]  <1>
  2273                              <1> 
  2274 00004618 E868F8FFFF          <1>     call .ehciWriteQHeadTD
  2275                              <1> 
  2276 0000461D B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2277 0000461F E894F1FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2278                              <1> .emboexit:
  2279 00004624 59                  <1>     pop rcx
  2280 00004625 415C                <1>     pop r12
  2281 00004627 415B                <1>     pop r11
  2282 00004629 415A                <1>     pop r10
  2283 0000462B 4159                <1>     pop r9
  2284 0000462D 4158                <1>     pop r8
  2285 0000462F 5F                  <1>     pop rdi
  2286 00004630 C3                  <1>     ret
  2287                              <1> .ehciMsdBOTOI: ;Out In transfer
  2288                              <1> ;Input - rsi = MSD device parameter block
  2289                              <1> ;        rbx = Input buffer for Data In
  2290                              <1> ;        ecx = Number of milliseconds to wait between Out and In packets
  2291                              <1> ;        r8  = Number of bytes to be transferred (for the DATA phase)
  2292                              <1> ;        r10 = LUN Value
  2293                              <1> ;        r11 = Length of CBW command block
  2294                              <1> 
  2295 00004631 57                  <1>     push rdi
  2296 00004632 4150                <1>     push r8
  2297 00004634 4151                <1>     push r9
  2298 00004636 4152                <1>     push r10
  2299 00004638 4153                <1>     push r11
  2300 0000463A 51                  <1>     push rcx
  2301 0000463B FC                  <1>     cld
  2302                              <1> 
  2303                              <1> 
  2304                              <1> ;Write the OUT Queue Head
  2305 0000463C 49BB-               <1>     mov r11, ehciTDSpace ;First TD is the head of the Out buffer
  2305 0000463E [0001000000000000]  <1>
  2306 00004646 E88E000000          <1>     call .ehciMsdWriteOutQHead
  2307                              <1> 
  2308 0000464B 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
  2309 0000464E 49B801000000000000- <1>     mov r8, 1
  2309 00004657 00                  <1>
  2310 00004658 4D89C1              <1>     mov r9, r8
  2311 0000465B 440FB6560F          <1>     movzx r10d, byte [rsi + 15]   ;Get Out EP dt bit
  2312 00004660 80760F01            <1>     xor byte [rsi + 15], 1  ;Toggle bit
  2313 00004664 41D1CA              <1>     ror r10d, 1 ;Roll dt bit to upper bit of dword
  2314 00004667 4181CA808C1F00      <1>     or r10d, 001F8C80h 
  2315                              <1> ; Active TD, OUT EP, Error ctr = 3, 01Fh = 31 byte transfer
  2316 0000466E 49BB-               <1>     mov r11, ehciDataOut ; Data out buffer
  2316 00004670 [8003000000000000]  <1>
  2317 00004678 E808F8FFFF          <1>     call .ehciWriteQHeadTD
  2318                              <1> 
  2319 0000467D B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2320 0000467F E834F1FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2321 00004684 7248                <1>     jc .emboiexit    ;If catastrophic Host system error, exit!
  2322                              <1>          
  2323                              <1> ;Write the IN Queue Head
  2324 00004686 49BB-               <1>     mov r11, ehciTDSpace + ehciSizeOfTD ;Move to position 2 to preserve OUT TD
  2324 00004688 [4001000000000000]  <1>
  2325 00004690 E883000000          <1>     call .ehciMsdWriteInQHead
  2326                              <1> 
  2327 00004695 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
  2328 00004698 49B801000000000000- <1>     mov r8, 1
  2328 000046A1 00                  <1>
  2329 000046A2 4D89C1              <1>     mov r9, r8
  2330 000046A5 41BA808D0D00        <1>     mov r10d, 000D8D80h     ;Active TD, IN EP, Error ctr = 3, 0Dh = 13 byte CSW
  2331 000046AB 0FB64E0E            <1>     movzx ecx, byte [rsi + 14]  ;Get IN EP dt bit in r9d
  2332 000046AF 80760E01            <1>     xor byte [rsi + 14], 1  ;Toggle bit
  2333 000046B3 D1C9                <1>     ror ecx, 1 ;Roll dt bit to upper bit of dword
  2334 000046B5 4109CA              <1>     or r10d, ecx    ;Add dt bit to r10d
  2335 000046B8 49BB-               <1>     mov r11, msdCSW
  2335 000046BA [C005000000000000]  <1>
  2336                              <1> 
  2337 000046C2 E8BEF7FFFF          <1>     call .ehciWriteQHeadTD
  2338                              <1> 
  2339 000046C7 B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2340 000046C9 E8EAF0FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2341                              <1> .emboiexit:
  2342 000046CE 59                  <1>     pop rcx
  2343 000046CF 415B                <1>     pop r11
  2344 000046D1 415A                <1>     pop r10
  2345 000046D3 4159                <1>     pop r9
  2346 000046D5 4158                <1>     pop r8
  2347 000046D7 5F                  <1>     pop rdi
  2348 000046D8 C3                  <1>     ret
  2349                              <1> .ehciMsdWriteOutQHead:
  2350                              <1> ;Input: rsi = Valid MSD device
  2351                              <1> ;       r11 = Ptr to First QHTD
  2352 000046D9 E84CEEFFFF          <1>     call .ehciGetNewQHeadAddr
  2353 000046DE 4181C802000000      <1>     or r8d, 2    ;Process QHs
  2354 000046E5 41B900600000        <1>     mov r9d, 00006000h  ;Default mask, no nak counter
  2355 000046EB 0FB74E0C            <1>     movzx ecx, word [rsi + 12]  ;wMaxPacketSizeOut
  2356 000046EF C1E110              <1>     shl ecx, 8*2
  2357 000046F2 4109C9              <1>     or r9d, ecx
  2358 000046F5 0FB64E0B            <1>     movzx ecx, byte [rsi + 11]  ;EP address
  2359 000046F9 81E10F000000        <1>     and ecx, 0Fh
  2360 000046FF C1E108              <1>     shl ecx, 8  ;Shift to second byte 
  2361 00004702 4109C9              <1>     or r9d, ecx ;Add bits
  2362 00004705 8A06                <1>     mov al, byte [rsi]  ;Get device address
  2363 00004707 247F                <1>     and al, 7Fh    ;Force clear upper bit of al
  2364 00004709 4108C1              <1>     or r9b, al    ;Set lower 8 bits of r9 correctly
  2365 0000470C 41BA00000040        <1>     mov r10d, 40000000h    ;1 transaction/ms
  2366 00004712 E849F7FFFF          <1>     call .ehciWriteQHead
  2367 00004717 C3                  <1>     ret
  2368                              <1> .ehciMsdWriteInQHead:
  2369                              <1> ;Input: rsi = Valid MSD device
  2370                              <1> ;       r11 = Ptr to First QHTD
  2371 00004718 E80DEEFFFF          <1>     call .ehciGetNewQHeadAddr
  2372 0000471D 4981C802000000      <1>     or r8, 2
  2373 00004724 41B900600000        <1>     mov r9d, 00006000h  ;Default mask
  2374 0000472A 0FB74E09            <1>     movzx ecx, word [rsi + 9]  ;wMaxPacketSizeIn
  2375 0000472E C1E110              <1>     shl ecx, 8*2
  2376 00004731 4109C9              <1>     or r9d, ecx
  2377 00004734 0FB64E08            <1>     movzx ecx, byte [rsi + 8]  ;EP address
  2378 00004738 81E10F000000        <1>     and ecx, 0Fh
  2379 0000473E C1E108              <1>     shl ecx, 8  ;Shift to second byte 
  2380 00004741 4109C9              <1>     or r9d, ecx ;Add bits
  2381 00004744 8A06                <1>     mov al, byte [rsi]  ;Get device address
  2382 00004746 247F                <1>     and al, 7Fh    ;Force clear upper bit of al
  2383 00004748 4108C1              <1>     or r9b, al    ;Set lower 8 bits of r9 correctly
  2384 0000474B 41BA00000040        <1>     mov r10d, 40000000h    ;1 transaction/ms
  2385 00004751 E80AF7FFFF          <1>     call .ehciWriteQHead
  2386 00004756 C3                  <1>     ret
  2387                              <1> .ehciMsdBOTRequest:
  2388                              <1> ;Input: ecx = Number of miliseconds to wait between Out and In requests
  2389                              <1> ;       rbx = Data in Buffer
  2390                              <1> ;       r8  = Number of bytes to be returned by command
  2391                              <1> ;       r11 = Length of SCSI command block
  2392                              <1> ;       r14 = Pointer to EHCI(USB) transaction function
  2393                              <1> ;       r15 = Pointer to SCSI command function
  2394                              <1> ;Output:
  2395                              <1> ;   CF=CY: Host error, Reset host system
  2396                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2397 00004757 50                  <1>     push rax
  2398 00004758 51                  <1>     push rcx
  2399 00004759 57                  <1>     push rdi
  2400 0000475A 4151                <1>     push r9
  2401 0000475C 4152                <1>     push r10
  2402                              <1> ;Clear the previous CSW
  2403 0000475E 48BF-               <1>     mov rdi, msdCSW
  2403 00004760 [C005000000000000]  <1>
  2404 00004768 30C0                <1>     xor al, al
  2405 0000476A B90D000000          <1>     mov ecx, 13
  2406 0000476F F3AA                <1>     rep stosb
  2407                              <1> ;Write the CBW
  2408 00004771 48BF-               <1>     mov rdi, ehciDataOut    ;Write the CBW at the data out point
  2408 00004773 [8003000000000000]  <1>
  2409                              <1> 
  2410 0000477B 41B180              <1>     mov r9b, 80h            ;Recieve an IN packet
  2411 0000477E 4D31D2              <1>     xor r10, r10            ;LUN 0
  2412 00004781 E865030000          <1>     call .msdWriteCBW       ;Write the 15 byte CBW
  2413                              <1> ;Append the Command Block to the CBW
  2414 00004786 30C0                <1>     xor al, al              ;LUN 0 device
  2415 00004788 41FFD7              <1>     call r15                ;Write the valid CBW Command block
  2416                              <1> ;Enact transaction
  2417 0000478B 41FFD6              <1>     call r14
  2418                              <1> 
  2419 0000478E 415A                <1>     pop r10
  2420 00004790 4159                <1>     pop r9
  2421 00004792 5F                  <1>     pop rdi
  2422 00004793 59                  <1>     pop rcx
  2423 00004794 58                  <1>     pop rax
  2424 00004795 C3                  <1>     ret
  2425                              <1> 
  2426                              <1> .ehciMsdBOTInquiry:
  2427                              <1> ;Input: 
  2428                              <1> ; rsi = Pointer to MSD table data structure that we want to Inqure
  2429                              <1> ;Output:
  2430                              <1> ;   CF=CY: Host error, Reset host system
  2431                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2432 00004796 53                  <1>     push rbx
  2433 00004797 51                  <1>     push rcx
  2434 00004798 4150                <1>     push r8
  2435 0000479A 4153                <1>     push r11
  2436 0000479C 4156                <1>     push r14
  2437 0000479E 4157                <1>     push r15
  2438 000047A0 48BB-               <1>     mov rbx, ehciDataIn
  2438 000047A2 [C003000000000000]  <1>
  2439 000047AA B900000000          <1>     mov ecx, 0
  2440 000047AF 41B824000000        <1>     mov r8d, 024h           ;36 bytes to be returned
  2441 000047B5 49BB0C000000000000- <1>     mov r11, 0Ch            ;The command block is 12 bytes (As per Bootability)
  2441 000047BE 00                  <1>
  2442 000047BF 49BF-               <1>     mov r15, .scsiInquiry
  2442 000047C1 [1C4B000000000000]  <1>
  2443 000047C9 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2443 000047CB [4545000000000000]  <1>
  2444 000047D3 E87FFFFFFF          <1>     call .ehciMsdBOTRequest
  2445 000047D8 415F                <1>     pop r15
  2446 000047DA 415E                <1>     pop r14
  2447 000047DC 415B                <1>     pop r11
  2448 000047DE 4158                <1>     pop r8
  2449 000047E0 59                  <1>     pop rcx
  2450 000047E1 5B                  <1>     pop rbx
  2451 000047E2 C3                  <1>     ret
  2452                              <1> 
  2453                              <1> .ehciMsdBOTReadFormatCapacities:
  2454                              <1> ;Input: 
  2455                              <1> ; rsi = Pointer to MSD table data structure
  2456                              <1> ;Output:
  2457                              <1> ;   CF=CY: Host error, Reset host system
  2458                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2459 000047E3 53                  <1>     push rbx
  2460 000047E4 51                  <1>     push rcx
  2461 000047E5 4150                <1>     push r8
  2462 000047E7 4153                <1>     push r11
  2463 000047E9 4156                <1>     push r14
  2464 000047EB 4157                <1>     push r15
  2465 000047ED 48BB-               <1>     mov rbx, ehciDataIn
  2465 000047EF [C003000000000000]  <1>
  2466 000047F7 B900000000          <1>     mov ecx, 0
  2467 000047FC 49B8FC000000000000- <1>     mov r8, 0FCh            ;Return 252 bytes
  2467 00004805 00                  <1>
  2468 00004806 49BB0A000000000000- <1>     mov r11, 0Ah            ;The command block is 10 bytes
  2468 0000480F 00                  <1>
  2469 00004810 49BF-               <1>     mov r15, .scsiReadFormatCapacities
  2469 00004812 [7B4B000000000000]  <1>
  2470 0000481A 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2470 0000481C [4545000000000000]  <1>
  2471 00004824 E82EFFFFFF          <1>     call .ehciMsdBOTRequest
  2472 00004829 415F                <1>     pop r15
  2473 0000482B 415E                <1>     pop r14
  2474 0000482D 415B                <1>     pop r11
  2475 0000482F 4158                <1>     pop r8
  2476 00004831 59                  <1>     pop rcx
  2477 00004832 5B                  <1>     pop rbx
  2478 00004833 C3                  <1>     ret
  2479                              <1> 
  2480                              <1> .ehciMsdBOTReadCapacity10:
  2481                              <1> ;Input: 
  2482                              <1> ; rsi = Pointer to MSD table data structure that we want to Read Capcities
  2483                              <1> ;Output:
  2484                              <1> ;   CF=CY: Host error, Reset host system
  2485                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2486 00004834 53                  <1>     push rbx
  2487 00004835 51                  <1>     push rcx
  2488 00004836 4150                <1>     push r8
  2489 00004838 4153                <1>     push r11
  2490 0000483A 4156                <1>     push r14
  2491 0000483C 4157                <1>     push r15
  2492 0000483E 48BB-               <1>     mov rbx, ehciDataIn
  2492 00004840 [C003000000000000]  <1>
  2493 00004848 B900000000          <1>     mov ecx, 0
  2494 0000484D 49B808000000000000- <1>     mov r8, 8
  2494 00004856 00                  <1>
  2495 00004857 49BB0A000000000000- <1>     mov r11, 0Ah
  2495 00004860 00                  <1>
  2496 00004861 49BF-               <1>     mov r15, .scsiReadCap10
  2496 00004863 [8B4B000000000000]  <1>
  2497 0000486B 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2497 0000486D [4545000000000000]  <1>
  2498 00004875 E8DDFEFFFF          <1>     call .ehciMsdBOTRequest
  2499 0000487A 415F                <1>     pop r15
  2500 0000487C 415E                <1>     pop r14
  2501 0000487E 415B                <1>     pop r11
  2502 00004880 4158                <1>     pop r8
  2503 00004882 59                  <1>     pop rcx
  2504 00004883 5B                  <1>     pop rbx
  2505 00004884 C3                  <1>     ret
  2506                              <1> .ehciMsdBOTFormatUnit:
  2507                              <1> ;Input: 
  2508                              <1> ; rsi = Pointer to MSD table data structure that we want to Format
  2509                              <1> ;Output:
  2510                              <1> ;   CF=CY: Host error, Reset host system
  2511                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2512 00004885 50                  <1>     push rax
  2513 00004886 4150                <1>     push r8
  2514 00004888 4153                <1>     push r11
  2515 0000488A 4156                <1>     push r14
  2516 0000488C 4157                <1>     push r15
  2517 0000488E 4D31C0              <1>     xor r8, r8  ;Request no data
  2518 00004891 49BB06000000000000- <1>     mov r11, 06h  ;Command length is 6 bytes
  2518 0000489A 00                  <1>
  2519 0000489B 49BE-               <1>     mov r14, .ehciMsdBOTOI
  2519 0000489D [3146000000000000]  <1>
  2520 000048A5 49BF-               <1>     mov r15, .scsiFormatUnit
  2520 000048A7 [954B000000000000]  <1>
  2521 000048AF E8A3FEFFFF          <1>     call .ehciMsdBOTRequest
  2522 000048B4 7236                <1>     jc .embfuerror
  2523 000048B6 E897FBFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2524 000048BB 6685C0              <1>     test ax, ax
  2525 000048BE 752C                <1>     jnz .embfuerror
  2526                              <1> .embfu0:
  2527 000048C0 E8CA000000          <1>     call .ehciMsdBOTTestReady
  2528 000048C5 7225                <1>     jc .embfuerror
  2529 000048C7 E886FBFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2530 000048CC 6685C0              <1>     test ax, ax
  2531 000048CF 7411                <1>     jz .embfuexit
  2532 000048D1 E868000000          <1>     call .ehciMsdBOTRequestSense
  2533 000048D6 7214                <1>     jc .embfuerror
  2534 000048D8 E875FBFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2535 000048DD 6685C0              <1>     test ax, ax
  2536 000048E0 75DE                <1>     jnz .embfu0
  2537                              <1> .embfuexit:
  2538 000048E2 415F                <1>     pop r15
  2539 000048E4 415E                <1>     pop r14
  2540 000048E6 415B                <1>     pop r11
  2541 000048E8 4158                <1>     pop r8
  2542 000048EA 58                  <1>     pop rax
  2543 000048EB C3                  <1>     ret
  2544                              <1> .embfuerror:
  2545 000048EC F9                  <1>     stc
  2546 000048ED EBF3                <1>     jmp short .embfuexit
  2547                              <1> .ehciMsdBOTVerify:
  2548                              <1> ;Input: 
  2549                              <1> ; rsi = Pointer to MSD table data structure that we want to Verify Sectors
  2550                              <1> ; edx = Starting LBA to verify
  2551                              <1> ;Output:
  2552                              <1> ;   CF=CY: Host error, Reset host system
  2553                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2554 000048EF 50                  <1>     push rax
  2555 000048F0 4150                <1>     push r8
  2556 000048F2 4153                <1>     push r11
  2557 000048F4 4154                <1>     push r12
  2558 000048F6 4156                <1>     push r14
  2559 000048F8 4157                <1>     push r15
  2560 000048FA 4D31C0              <1>     xor r8, r8  ;Request no data
  2561 000048FD 49BB0A000000000000- <1>     mov r11, 0Ah  ;Command length is 10 bytes
  2561 00004906 00                  <1>
  2562 00004907 4189D4              <1>     mov r12d, edx
  2563 0000490A 49BE-               <1>     mov r14, .ehciMsdBOTOI
  2563 0000490C [3146000000000000]  <1>
  2564 00004914 49BF-               <1>     mov r15, .scsiVerify
  2564 00004916 [AA4B000000000000]  <1>
  2565 0000491E E834FEFFFF          <1>     call .ehciMsdBOTRequest
  2566 00004923 7216                <1>     jc .embvbad
  2567 00004925 E828FBFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2568 0000492A 6685C0              <1>     test ax, ax
  2569 0000492D 750C                <1>     jnz .embvbad
  2570                              <1> .embvexit:
  2571 0000492F 415F                <1>     pop r15
  2572 00004931 415E                <1>     pop r14
  2573 00004933 415C                <1>     pop r12
  2574 00004935 415B                <1>     pop r11
  2575 00004937 4158                <1>     pop r8
  2576 00004939 59                  <1>     pop rcx
  2577 0000493A C3                  <1>     ret
  2578                              <1> .embvbad:
  2579 0000493B F9                  <1>     stc
  2580 0000493C EBF1                <1>     jmp short .embvexit
  2581                              <1> .ehciMsdBOTRequestSense:
  2582                              <1> ;Input: 
  2583                              <1> ; rsi = Pointer to device MSD table data structure
  2584                              <1> ;Output:
  2585                              <1> ;   CF=CY: Host error, Reset host system
  2586                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2587 0000493E 53                  <1>     push rbx
  2588 0000493F 51                  <1>     push rcx
  2589 00004940 4150                <1>     push r8
  2590 00004942 4153                <1>     push r11
  2591 00004944 4156                <1>     push r14
  2592 00004946 4157                <1>     push r15
  2593 00004948 48BB-               <1>     mov rbx, ehciDataIn
  2593 0000494A [C003000000000000]  <1>
  2594 00004952 B900000000          <1>     mov ecx, 0
  2595 00004957 49B812000000000000- <1>     mov r8, 12h         ;Request 18 bytes
  2595 00004960 00                  <1>
  2596 00004961 49BB06000000000000- <1>     mov r11, 6          ;Command length is 6
  2596 0000496A 00                  <1>
  2597 0000496B 49BF-               <1>     mov r15, .scsiRequestSense
  2597 0000496D [5E4B000000000000]  <1>
  2598 00004975 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2598 00004977 [4545000000000000]  <1>
  2599 0000497F E8D3FDFFFF          <1>     call .ehciMsdBOTRequest
  2600 00004984 415F                <1>     pop r15
  2601 00004986 415E                <1>     pop r14
  2602 00004988 415B                <1>     pop r11
  2603 0000498A 4158                <1>     pop r8
  2604 0000498C 59                  <1>     pop rcx
  2605 0000498D 5B                  <1>     pop rbx
  2606 0000498E C3                  <1>     ret
  2607                              <1> 
  2608                              <1> .ehciMsdBOTTestReady:
  2609                              <1> ;Input: 
  2610                              <1> ; rsi = Pointer to MSD table data structure that we want to Test Ready
  2611                              <1> ;Output:
  2612                              <1> ;   CF=CY: Host error, Reset host system
  2613                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2614 0000498F 4150                <1>     push r8
  2615 00004991 4153                <1>     push r11
  2616 00004993 4156                <1>     push r14
  2617 00004995 4157                <1>     push r15
  2618 00004997 4D31C0              <1>     xor r8, r8  ;Request no data
  2619 0000499A 49BB06000000000000- <1>     mov r11, 6  ;Command length is 6
  2619 000049A3 00                  <1>
  2620 000049A4 49BE-               <1>     mov r14, .ehciMsdBOTOI
  2620 000049A6 [3146000000000000]  <1>
  2621 000049AE 49BF-               <1>     mov r15, .scsiTestUnitReady
  2621 000049B0 [714B000000000000]  <1>
  2622 000049B8 E89AFDFFFF          <1>     call .ehciMsdBOTRequest
  2623 000049BD 415F                <1>     pop r15
  2624 000049BF 415E                <1>     pop r14
  2625 000049C1 415B                <1>     pop r11
  2626 000049C3 4158                <1>     pop r8
  2627 000049C5 C3                  <1>     ret
  2628                              <1> .ehciMsdBOTModeSense6:
  2629                              <1> ;Input: 
  2630                              <1> ; rsi = Pointer to MSD table data structure that we want to Test Ready
  2631                              <1> ;Output:
  2632                              <1> ;   CF=CY: Host error, Reset host system
  2633                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2634 000049C6 53                  <1>     push rbx
  2635 000049C7 51                  <1>     push rcx
  2636 000049C8 4150                <1>     push r8
  2637 000049CA 4153                <1>     push r11
  2638 000049CC 4156                <1>     push r14
  2639 000049CE 4157                <1>     push r15
  2640 000049D0 48BB-               <1>     mov rbx, ehciDataIn
  2640 000049D2 [C003000000000000]  <1>
  2641 000049DA B900000000          <1>     mov ecx, 0
  2642 000049DF 49B8C0000000000000- <1>     mov r8, 0C0h        ;Request 192 bytes
  2642 000049E8 00                  <1>
  2643 000049E9 49BB06000000000000- <1>     mov r11, 6          ;Command length is 6
  2643 000049F2 00                  <1>
  2644 000049F3 49BF-               <1>     mov r15, .scsiModeSense6
  2644 000049F5 [CB4B000000000000]  <1>
  2645 000049FD 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2645 000049FF [4545000000000000]  <1>
  2646 00004A07 E84BFDFFFF          <1>     call .ehciMsdBOTRequest
  2647 00004A0C 415F                <1>     pop r15
  2648 00004A0E 415E                <1>     pop r14
  2649 00004A10 415B                <1>     pop r11
  2650 00004A12 4158                <1>     pop r8
  2651 00004A14 59                  <1>     pop rcx
  2652 00004A15 5B                  <1>     pop rbx
  2653 00004A16 C3                  <1>     ret
  2654                              <1> 
  2655                              <1> ;.ehciMsdBOTOutSector64:
  2656                              <1> .ehciMsdBOTOutSector512:
  2657                              <1> ;Input: 
  2658                              <1> ; rsi = Pointer to MSD table data structure that we want to read
  2659                              <1> ; rbx = Address of the buffer to read the segment from
  2660                              <1> ; edx = Starting LBA to read to
  2661                              <1> ;Output:
  2662                              <1> ;   CF=CY: Host error, Reset host system
  2663                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2664 00004A17 4151                <1>     push r9
  2665 00004A19 4156                <1>     push r14
  2666 00004A1B 4157                <1>     push r15
  2667 00004A1D 50                  <1>     push rax
  2668 00004A1E 4D31C9              <1>     xor r9, r9 ;Send an OUT packet
  2669 00004A21 49BE-               <1>     mov r14, .ehciMsdBOTOOI
  2669 00004A23 [7944000000000000]  <1>
  2670 00004A2B 49BF-               <1>     mov r15, .scsiWrite10
  2670 00004A2D [374B000000000000]  <1>
  2671 00004A35 E860000000          <1>     call .ehciMsdBOTSector512
  2672 00004A3A 7223                <1>     jc .emboseerror
  2673 00004A3C E811FAFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2674 00004A41 6685C0              <1>     test ax, ax
  2675 00004A44 7519                <1>     jnz .emboseerror
  2676 00004A46 E844FFFFFF          <1>     call .ehciMsdBOTTestReady   ;Seems to flush data onto disk
  2677 00004A4B 7212                <1>     jc .emboseerror
  2678 00004A4D E800FAFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2679 00004A52 6685C0              <1>     test ax, ax
  2680 00004A55 7508                <1>     jnz .emboseerror
  2681                              <1> .embosexit:
  2682 00004A57 58                  <1>     pop rax
  2683 00004A58 415F                <1>     pop r15
  2684 00004A5A 415E                <1>     pop r14
  2685 00004A5C 4159                <1>     pop r9
  2686 00004A5E C3                  <1>     ret
  2687                              <1> .emboseerror:
  2688 00004A5F F9                  <1>     stc
  2689 00004A60 EBF5                <1>     jmp short .embosexit
  2690                              <1> ;.ehciMsdBOTInSector64:
  2691                              <1> .ehciMsdBOTInSector512:
  2692                              <1> ;Input: 
  2693                              <1> ; rsi = Pointer to MSD table data structure that we want to read
  2694                              <1> ; rbx = Address of the buffer to read the segment into
  2695                              <1> ; edx = Starting LBA to read from
  2696                              <1> ;Output:
  2697                              <1> ;   CF=CY: Host error, Reset host system
  2698                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2699 00004A62 4151                <1>     push r9
  2700 00004A64 4156                <1>     push r14
  2701 00004A66 4157                <1>     push r15
  2702 00004A68 50                  <1>     push rax
  2703 00004A69 49B980000000000000- <1>     mov r9, 80h ;Recieve an IN packet
  2703 00004A72 00                  <1>
  2704 00004A73 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2704 00004A75 [4545000000000000]  <1>
  2705 00004A7D 49BF-               <1>     mov r15, .scsiRead10
  2705 00004A7F [3B4B000000000000]  <1>
  2706 00004A87 E80E000000          <1>     call .ehciMsdBOTSector512
  2707 00004A8C 72D1                <1>     jc .emboseerror
  2708 00004A8E E8BFF9FFFF          <1>     call .ehciMsdBOTCheckTransaction
  2709 00004A93 6685C0              <1>     test ax, ax
  2710 00004A96 75C7                <1>     jnz .emboseerror
  2711 00004A98 EBBD                <1>     jmp short .embosexit
  2712                              <1> .ehciMsdBOTSector512:
  2713                              <1> ;Input: 
  2714                              <1> ; rsi = Pointer to MSD table data structure that we want to read
  2715                              <1> ; rbx = Address of the buffer to read the segment into
  2716                              <1> ; edx = Starting LBA to read to/from
  2717                              <1> ; r9  = CBW flag (IN or OUT transaction)
  2718                              <1> ; r15 = SCSI function
  2719                              <1> ;Output:
  2720                              <1> ;   CF=CY: Host error, Reset host system
  2721                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2722 00004A9A 57                  <1>     push rdi
  2723 00004A9B 4150                <1>     push r8
  2724 00004A9D 4152                <1>     push r10
  2725 00004A9F 4153                <1>     push r11
  2726                              <1> 
  2727 00004AA1 48BF-               <1>     mov rdi, ehciDataOut    ;Write the CBW at the data out point
  2727 00004AA3 [8003000000000000]  <1>
  2728 00004AAB 41B800020000        <1>     mov r8d, 200h           ;512 bytes to be transferred
  2729 00004AB1 4D31D2              <1>     xor r10, r10            ;LUN 0
  2730 00004AB4 49BB0C000000000000- <1>     mov r11, 0Ch            ;The command block is 10 bytes long
  2730 00004ABD 00                  <1>
  2731 00004ABE E828000000          <1>     call .msdWriteCBW     ;Write the CBW
  2732                              <1> 
  2733 00004AC3 50                  <1>     push rax                ;Temp push ax
  2734 00004AC4 4150                <1>     push r8                 ;Temp save # of bytes for transfer
  2735 00004AC6 30C0                <1>     xor al, al              ;LUN 0 device
  2736 00004AC8 4189D0              <1>     mov r8d, edx            ;Starting LBA to read from
  2737 00004ACB 49B901000000000000- <1>     mov r9, 1               ;Number of LBAs to read
  2737 00004AD4 00                  <1>
  2738 00004AD5 41FFD7              <1>     call r15                ;Write the valid CBW Command block
  2739 00004AD8 4158                <1>     pop r8
  2740 00004ADA 58                  <1>     pop rax
  2741                              <1> 
  2742 00004ADB B90A000000          <1>     mov ecx, 10              ;Wait for data preparation, 10ms
  2743 00004AE0 41FFD6              <1>     call r14
  2744                              <1> 
  2745 00004AE3 415B                <1>     pop r11
  2746 00004AE5 415A                <1>     pop r10
  2747 00004AE7 4158                <1>     pop r8
  2748 00004AE9 5F                  <1>     pop rdi
  2749 00004AEA C3                  <1>     ret
  2750                              <1> .msdWriteCBW:
  2751                              <1> ;Writes a Command Block Wrapper at the location pointed to by rdi
  2752                              <1> ; without a functional command block. Must be appended by user.
  2753                              <1> ; Input:  rdi=Pointer to CBW buffer
  2754                              <1> ;         r8d=Command Block Wrapper Data Transfer Length
  2755                              <1> ;         r9b=Command Block Wrapper Flags
  2756                              <1> ;         r10b=Command Block Wrapper LUN nybble
  2757                              <1> ;         r11b=Command Block Wrapper Command Block Length
  2758                              <1> ; Output: rdi = Pointer to CBW's (SCSI) Command Descriptor Block buffer
  2759 00004AEB 50                  <1>     push rax
  2760 00004AEC B855534243          <1>     mov eax, CBWSig
  2761 00004AF1 AB                  <1>     stosd
  2762 00004AF2 0FB60425[4A020000]  <1>     movzx eax, byte [cbwTag]
  2763 00004AFA FE0425[4A020000]    <1>     inc byte [cbwTag]
  2764 00004B01 AB                  <1>     stosd
  2765 00004B02 4489C0              <1>     mov eax, r8d
  2766 00004B05 AB                  <1>     stosd
  2767 00004B06 4488C8              <1>     mov al, r9b
  2768 00004B09 AA                  <1>     stosb
  2769 00004B0A 4488D0              <1>     mov al, r10b
  2770 00004B0D AA                  <1>     stosb
  2771 00004B0E 4488D8              <1>     mov al, r11b
  2772 00004B11 AA                  <1>     stosb
  2773 00004B12 31C0                <1>     xor eax, eax
  2774 00004B14 57                  <1>     push rdi
  2775 00004B15 48AB                <1>     stosq   ;16 bytes in csw command block
  2776 00004B17 48AB                <1>     stosq   ;Clear memory
  2777 00004B19 5F                  <1>     pop rdi
  2778 00004B1A 58                  <1>     pop rax
  2779 00004B1B C3                  <1>     ret
  2780                              <1> 
  2781                              <1> ;                        --------SCSI functions---------
  2782                              <1> 
  2783                              <1> .scsiInquiry:
  2784                              <1> ;Writes an inquiry scsi command block to the location pointed to by rdi
  2785                              <1> ;al contains the LUN of the device we are accessing. (lower 3 bits considered)
  2786                              <1> ;al not preserved
  2787 00004B1C B412                <1>     mov ah, 12h        ;Move inquiry command value high
  2788 00004B1E C0E005              <1>     shl al, 5        ;Shift left by five to align LUN properly
  2789 00004B21 86E0                <1>     xchg ah, al        ;swap ah and al
  2790 00004B23 66AB                <1>     stosw            ;Store command and shifted LUN together
  2791 00004B25 4831C0              <1>     xor rax, rax
  2792 00004B28 66AB                <1>     stosw            ;Store two zeros (reserved fields)
  2793 00004B2A 48B824000000000000- <1>     mov rax, 24h    ;Allocation length (36 bytes)
  2793 00004B33 00                  <1>
  2794 00004B34 48AB                <1>     stosq
  2795 00004B36 C3                  <1>     ret
  2796                              <1> ;NOTE! Using read/write 10 means can't read beyond the first 4 Gb of Medium.
  2797                              <1> .scsiWrite10:
  2798                              <1> ;Writes a scsi write 10 transfer command to the location pointed at by rdi
  2799                              <1> ;al contains the LUN of the device we are accessing
  2800                              <1> ;r8d contains the LBA start address
  2801                              <1> ;r9w contains the Verification Length
  2802 00004B37 B42A                <1>     mov ah, 2Ah        ;Operation code for command
  2803 00004B39 EB02                <1>     jmp short .scsirw
  2804                              <1> .scsiRead10:
  2805                              <1> ;Writes a scsi Read 10 command to the location pointed to by rdi
  2806                              <1> ;al contains the LUN of the device we are accessing.
  2807                              <1> ;r8d contains the LBA to read from
  2808                              <1> ;r9w contains the number of contiguous blocks to read (should be 1 for us)
  2809 00004B3B B428                <1>     mov ah, 28h        ;Move read(10) command value high
  2810                              <1> .scsirw:
  2811 00004B3D C0E005              <1>     shl al, 5        ;Shift left by five to align LUN properly
  2812 00004B40 86E0                <1>     xchg ah, al        ;swap ah and al
  2813 00004B42 66AB                <1>     stosw            ;Store command and shifted LUN together
  2814 00004B44 410FC8              <1>     bswap r8d        ;swap endianness of r8d
  2815 00004B47 4489C0              <1>     mov eax, r8d
  2816 00004B4A AB                  <1>     stosd
  2817 00004B4B 4831C0              <1>     xor rax, rax    ;Clear for a Reserved byte
  2818 00004B4E AA                  <1>     stosb
  2819 00004B4F 664489C8            <1>     mov ax, r9w        ;move into ax to use xchg on upper and lower bytes
  2820 00004B53 86C4                <1>     xchg al, ah        ;MSB first, yuck yuck yuck
  2821 00004B55 66AB                <1>     stosw
  2822 00004B57 C1E810              <1>     shr eax, 16        ;Bring zeros down onto lower word
  2823 00004B5A 66AB                <1>     stosw            ;Store one reserved byte and two padding bytes
  2824 00004B5C AA                  <1>     stosb            
  2825 00004B5D C3                  <1>     ret
  2826                              <1> .scsiRequestSense:
  2827                              <1> ;Writes a scsi Request Sense command to the location pointer to by rdi
  2828                              <1> ;al contains the LUN of the device we are accessing.
  2829 00004B5E B403                <1>     mov ah, 03h        ;Move reqsense command value high
  2830 00004B60 C0E005              <1>     shl al, 5        ;Shift left by five to align LUN properly
  2831 00004B63 86E0                <1>     xchg ah, al        ;swap ah and al
  2832 00004B65 66AB                <1>     stosw            ;Store command and shifted LUN together
  2833 00004B67 4831C0              <1>     xor rax, rax    
  2834 00004B6A 66AB                <1>     stosw            ;Reserved word
  2835 00004B6C B012                <1>     mov al, 12h    ;Move alloc length byte into al
  2836 00004B6E 48AB                <1>     stosq
  2837 00004B70 C3                  <1>     ret
  2838                              <1> .scsiTestUnitReady:
  2839                              <1> ;Writes a scsi test unit ready command to the location pointed to by rdi
  2840                              <1> ;al contains the LUN of the device we are accessing.
  2841 00004B71 30E4                <1>     xor ah, ah        ;Operation code zero
  2842 00004B73 C0E005              <1>     shl al, 5
  2843 00004B76 86E0                <1>     xchg ah, al
  2844 00004B78 66AB                <1>     stosw            ;Store shifted LUN and command code
  2845 00004B7A C3                  <1>     ret
  2846                              <1> .scsiReadFormatCapacities:
  2847                              <1> ;al contains the LUN of the device
  2848 00004B7B 88C4                <1>     mov ah, al
  2849 00004B7D B023                <1>     mov al, 23h        ;Operation code for command
  2850 00004B7F 66AB                <1>     stosw            ;Store shifted LUN and command code
  2851 00004B81 4831C0              <1>     xor rax, rax
  2852 00004B84 AB                  <1>     stosd          ;Reserved dword    
  2853 00004B85 66AB                <1>     stosw           ;Reserved word
  2854 00004B87 B0FC                <1>     mov al, 0FCh    ;Move alloc length byte into al
  2855 00004B89 AA                  <1>     stosb
  2856 00004B8A C3                  <1>     ret
  2857                              <1> .scsiReadCap10:
  2858                              <1> ;Writes a scsi read capacity command to the location pointed to by rdi
  2859                              <1> ;al contains the LUN of the device we are accessing
  2860 00004B8B B425                <1>     mov ah, 25h        ;Operation code for command
  2861 00004B8D C0E005              <1>     shl al, 5
  2862 00004B90 86E0                <1>     xchg ah, al
  2863 00004B92 66AB                <1>     stosw            ;Store shifted LUN and command code
  2864 00004B94 C3                  <1>     ret
  2865                              <1> .scsiFormatUnit:
  2866                              <1> ;Writes a scsi format unit command to the location pointed to by rdi
  2867                              <1> ;al contains the LUN of the device we are accessing
  2868 00004B95 B404                <1>     mov ah, 04h        ;Operation code for format command
  2869 00004B97 C0E005              <1>     shl al, 5
  2870 00004B9A 0C17                <1>     or al, 17h      ;Set bits [3:0] and 5, keep bit 4 clear
  2871 00004B9C 86E0                <1>     xchg ah, al
  2872 00004B9E 66AB                <1>     stosw
  2873 00004BA0 30C0                <1>     xor al, al
  2874 00004BA2 66AB                <1>     stosw            ;Vender specific, set to 0!!
  2875 00004BA4 4831C0              <1>     xor rax, rax
  2876 00004BA7 48AB                <1>     stosq            ;Store LSB byte and all the 0 padding
  2877 00004BA9 C3                  <1>     ret
  2878                              <1> .scsiVerify:
  2879                              <1> ;Writes a scsi verify transfer command to the location pointed at by rdi
  2880                              <1> ;al contains the LUN of the device we are accessing
  2881                              <1> ;r12d contains the LBA for the sector address
  2882                              <1> ;Verifies one sector
  2883 00004BAA B42F                <1>     mov ah, 2Fh        ;Operation code for command
  2884 00004BAC C0E005              <1>     shl al, 5        ;Hardcode bytecheck (byte [1]) to 0
  2885 00004BAF 86E0                <1>     xchg ah, al
  2886 00004BB1 66AB                <1>     stosw            ;Store shifted LUN and command code
  2887 00004BB3 410FCC              <1>     bswap r12d        ;swap endianness of r12d
  2888 00004BB6 4489E0              <1>     mov eax, r12d
  2889 00004BB9 AB                  <1>     stosd
  2890 00004BBA 4831C0              <1>     xor rax, rax    ;Clear for a Reserved byte
  2891 00004BBD AA                  <1>     stosb
  2892 00004BBE 66B80001            <1>     mov ax, 0100h    ;Write the number 1 in Big endian
  2893 00004BC2 66AB                <1>     stosw
  2894 00004BC4 C1E810              <1>     shr eax, 16        ;Bring zeros down onto lower word
  2895 00004BC7 66AB                <1>     stosw            ;Store one reserved byte and two padding bytes
  2896 00004BC9 AA                  <1>     stosb        
  2897 00004BCA C3                  <1>     ret
  2898                              <1> .scsiModeSense6:
  2899                              <1> ;al contains the LUN of the device we are accessing
  2900 00004BCB B41A                <1>     mov ah, 1Ah     ;Operation code for Mode Sense 6
  2901 00004BCD C0E005              <1>     shl al, 5       ;Move LUN
  2902 00004BD0 86E0                <1>     xchg ah, al
  2903 00004BD2 66AB                <1>     stosw
  2904 00004BD4 B83F00C000          <1>     mov eax, 0C0003Fh    
  2905                              <1>     ;Request all pages, reserve byte, 192 bytes and 0 end byte
  2906 00004BD9 AB                  <1>     stosd
  2907 00004BDA C3                  <1>     ret
  2908                              <1> ;                    -------------------------------
  2909                              <1> .ehciGetOpBase:
  2910                              <1> ;Gets opbase from mmio base (aka adds caplength) into eax
  2911                              <1> ;Input:
  2912                              <1> ; al = offset into ehci table
  2913                              <1> ;Return:
  2914                              <1> ; eax = opbase (low 4Gb)
  2915 00004BDB 53                  <1>     push rbx
  2916 00004BDC 4831DB              <1>     xor rbx, rbx
  2917 00004BDF 480FB6C0            <1>     movzx rax, al
  2918 00004BE3 8B04C5[19020000]    <1>     mov eax, dword [eControllerList + 4 + 8*rax]    ;get mmiobase into eax
  2919 00004BEA 85C0                <1>     test eax, eax             ;addrress of 0 means no controller
  2920 00004BEC 7406                <1>     jz .egob1
  2921 00004BEE 670FB618            <1>     movzx ebx, byte [eax]    ;get the offset to opbase into ebx
  2922 00004BF2 01D8                <1>     add eax, ebx            ;add this offset to mmiobase to get opbase
  2923                              <1> .egob1:
  2924 00004BF4 5B                  <1>     pop rbx
  2925 00004BF5 C3                  <1>     ret
   110                                  ;====================================CPU Interrupts=============================
   111                                  %include "./Resident/Hardware/CPU/xception.asm"
   112                              <1> i0:
   113 00004BF6 4831C0              <1>     xor rax, rax
   114 00004BF9 E936010000          <1>     jmp cpu_2args
   115                              <1> i1:
   116 00004BFE 48B801000000000000- <1>     mov rax, 1
   116 00004C07 00                  <1>
   117 00004C08 E927010000          <1>     jmp cpu_2args
   118                              <1> i2:
   119 00004C0D 48B802000000000000- <1>     mov rax, 2
   119 00004C16 00                  <1>
   120 00004C17 E918010000          <1>     jmp cpu_2args
   121                              <1> i3:
   122 00004C1C 48B803000000000000- <1>     mov rax, 3
   122 00004C25 00                  <1>
   123 00004C26 E909010000          <1>     jmp cpu_2args
   124                              <1> i4:
   125 00004C2B 48B804000000000000- <1>     mov rax, 4
   125 00004C34 00                  <1>
   126 00004C35 E9FA000000          <1>     jmp cpu_2args
   127                              <1> i5:
   128 00004C3A 48B805000000000000- <1>     mov rax, 5
   128 00004C43 00                  <1>
   129 00004C44 E9EB000000          <1>     jmp cpu_2args
   130                              <1> i6:
   131 00004C49 48B806000000000000- <1>     mov rax, 6
   131 00004C52 00                  <1>
   132 00004C53 E9DC000000          <1>     jmp cpu_2args
   133                              <1> i7:
   134 00004C58 48B807000000000000- <1>     mov rax, 7
   134 00004C61 00                  <1>
   135 00004C62 E9CD000000          <1>     jmp cpu_2args
   136                              <1> i8:
   137 00004C67 48B808000000000000- <1>     mov rax, 8
   137 00004C70 00                  <1>
   138 00004C71 E9B2000000          <1>     jmp cpu_3args
   139                              <1> i9:
   140 00004C76 48B809000000000000- <1>     mov rax, 9
   140 00004C7F 00                  <1>
   141 00004C80 E9AF000000          <1>     jmp cpu_2args
   142                              <1> i10:
   143 00004C85 48B80A000000000000- <1>     mov rax, 0Ah
   143 00004C8E 00                  <1>
   144 00004C8F E994000000          <1>     jmp cpu_3args
   145                              <1> i11:
   146 00004C94 48B80B000000000000- <1>     mov rax, 0Bh
   146 00004C9D 00                  <1>
   147 00004C9E E985000000          <1>     jmp cpu_3args
   148                              <1> i12:
   149 00004CA3 48B80C000000000000- <1>     mov rax, 0Ch
   149 00004CAC 00                  <1>
   150 00004CAD E976000000          <1>     jmp cpu_3args
   151                              <1> i13:
   152 00004CB2 48B80D000000000000- <1>     mov rax, 0Dh
   152 00004CBB 00                  <1>
   153 00004CBC EB6A                <1>     jmp short cpu_3args
   154                              <1> i14:
   155 00004CBE 48B80E000000000000- <1>     mov rax, 0Eh
   155 00004CC7 00                  <1>
   156 00004CC8 EB52                <1>     jmp short cpu_4args
   157                              <1> i15:
   158 00004CCA 48B80F000000000000- <1>     mov rax, 0Fh
   158 00004CD3 00                  <1>
   159 00004CD4 EB5E                <1>     jmp short cpu_2args
   160                              <1> i16:
   161 00004CD6 48B810000000000000- <1>     mov rax, 10h
   161 00004CDF 00                  <1>
   162 00004CE0 EB52                <1>     jmp short cpu_2args
   163                              <1> i17:
   164 00004CE2 48B811000000000000- <1>     mov rax, 11h
   164 00004CEB 00                  <1>
   165 00004CEC EB3A                <1>     jmp short cpu_3args
   166                              <1> i18:
   167 00004CEE 48B812000000000000- <1>     mov rax, 12h
   167 00004CF7 00                  <1>
   168 00004CF8 EB3A                <1>     jmp short cpu_2args
   169                              <1> i19:
   170 00004CFA 48B813000000000000- <1>     mov rax, 13h
   170 00004D03 00                  <1>
   171 00004D04 EB2E                <1>     jmp short cpu_2args
   172                              <1> i20:
   173 00004D06 48B814000000000000- <1>     mov rax, 14h
   173 00004D0F 00                  <1>
   174 00004D10 EB22                <1>     jmp short cpu_2args
   175                              <1> i21:
   176 00004D12 48B815000000000000- <1>     mov rax, 15h
   176 00004D1B 00                  <1>
   177                              <1> cpu_4args:
   178 00004D1C 48B903000000000000- <1>     mov rcx, 3
   178 00004D25 00                  <1>
   179 00004D26 EB16                <1>     jmp short cpu_exception
   180                              <1> cpu_3args:
   181 00004D28 48B902000000000000- <1>     mov rcx, 2
   181 00004D31 00                  <1>
   182 00004D32 EB0A                <1>     jmp short cpu_exception
   183                              <1> cpu_2args:
   184 00004D34 48B901000000000000- <1>     mov rcx, 1
   184 00004D3D 00                  <1>
   185                              <1> cpu_exception:
   186 00004D3E 50                  <1>     push rax
   187 00004D3F 51                  <1>     push rcx
   188 00004D40 66BB1F00            <1>     mov bx, 001Fh    ;cls attribs
   189 00004D44 E8AEB3FFFF          <1>     call cls
   190                              <1> 
   191 00004D49 48B800020000000000- <1>     mov rax, 0200h
   191 00004D52 00                  <1>
   192 00004D53 4831DB              <1>     xor rbx, rbx
   193 00004D56 48BA22070000000000- <1>     mov rdx, 0722h    ;7 Rows down, 24 columns across
   193 00004D5F 00                  <1>
   194 00004D60 48BD-               <1>     mov rbp, .fatalt0
   194 00004D62 [AB4E000000000000]  <1>
   195 00004D6A 66BB7100            <1>     mov bx, 0071h     ;blue grey attribs, page 0
   196 00004D6E 66B80113            <1>     mov ax, 1301h     ;print zero 8 chars, with bh attrib
   197 00004D72 48B908000000000000- <1>     mov rcx, 8
   197 00004D7B 00                  <1>
   198 00004D7C CD30                <1>     int 30h
   199                              <1> 
   200 00004D7E 48B800020000000000- <1>     mov rax, 0200h
   200 00004D87 00                  <1>
   201 00004D88 30FF                <1>     xor bh, bh
   202 00004D8A 48BA040A0000000000- <1>     mov rdx, 0A04h    ;11 Rows down, 24 columns across
   202 00004D93 00                  <1>
   203 00004D94 CD30                <1>     int 30h
   204 00004D96 48BD-               <1>     mov rbp, .fatal1
   204 00004D98 [B34E000000000000]  <1>
   205 00004DA0 30FF                <1>     xor bh, bh        ;blue grey attribs, page 0
   206 00004DA2 66B80413            <1>     mov ax, 1304h            ;print zero terminated string
   207 00004DA6 CD30                <1>     int 30h
   208                              <1> 
   209 00004DA8 59                  <1>     pop rcx
   210 00004DA9 58                  <1>     pop rax                ;pop the exception number back into rax
   211 00004DAA E8DF000000          <1>     call .printbyte
   212                              <1> 
   213 00004DAF 48B804130000000000- <1>     mov rax, 1304h
   213 00004DB8 00                  <1>
   214 00004DB9 30FF                <1>     xor bh, bh
   215 00004DBB 48BD-               <1>     mov rbp, .fatal2
   215 00004DBD [F44F000000000000]  <1>
   216 00004DC5 CD30                <1>     int 30h
   217                              <1> 
   218 00004DC7 80F901              <1>     cmp cl, 1
   219 00004DCA 773A                <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   220                              <1> .cpurollprint:
   221 00004DCC 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   222                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   223 00004DD0 B108                <1>     mov cl, 8    ;8 bytes
   224                              <1> .cpurollprint1:
   225 00004DD2 48C1C208            <1>     rol rdx, 8
   226 00004DD6 88D0                <1>     mov al, dl
   227 00004DD8 52                  <1>     push rdx
   228 00004DD9 E8B0000000          <1>     call .printbyte
   229 00004DDE 5A                  <1>     pop rdx
   230 00004DDF FEC9                <1>     dec cl
   231 00004DE1 75EF                <1>     jnz .cpurollprint1
   232                              <1> 
   233                              <1> .cpuexendloop:
   234 00004DE3 6631C0              <1>     xor ax, ax
   235 00004DE6 CD36                <1>     int 36h
   236 00004DE8 3C1B                <1>     cmp al, 1Bh    ;Check for escape pressed (unlikely?)
   237 00004DEA 740F                <1>     je .cpu_exception_appret
   238 00004DEC 3C0D                <1>     cmp al, 0Dh ;Check for enter pressed
   239 00004DEE 75F3                <1>     jne .cpuexendloop
   240                              <1> 
   241 00004DF0 66BB0700            <1>     mov bx, 0007h    ;cls attribs
   242 00004DF4 E8FEB2FFFF          <1>     call cls
   243 00004DF9 CD38                <1>     int 38h    ;Jump to debugger
   244                              <1> .cpu_exception_appret:
   245 00004DFB 66BB0700            <1>     mov bx, 0007h    ;cls attribs
   246 00004DFF E8F3B2FFFF          <1>     call cls
   247 00004E04 48CF                <1>     iretq ;Return to address on stack
   248                              <1> 
   249                              <1> .cpuextendederror:
   250 00004E06 5A                  <1>     pop rdx
   251 00004E07 48FFC9              <1>     dec rcx
   252 00004E0A 51                  <1>     push rcx
   253 00004E0B B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   254                              <1> .pr1:
   255 00004E0D C1C208              <1>     rol edx, 8    ;Print just edx
   256 00004E10 88D0                <1>     mov al, dl
   257 00004E12 52                  <1>     push rdx
   258 00004E13 E876000000          <1>     call .printbyte
   259 00004E18 5A                  <1>     pop rdx
   260 00004E19 FEC9                <1>     dec cl
   261 00004E1B 75F0                <1>     jnz .pr1
   262                              <1> 
   263 00004E1D 48B804130000000000- <1>     mov rax, 1304h
   263 00004E26 00                  <1>
   264 00004E27 48BB17000000000000- <1>     mov rbx, 17h
   264 00004E30 00                  <1>
   265 00004E31 48BD-               <1>     mov rbp, .fatal2
   265 00004E33 [F44F000000000000]  <1>
   266 00004E3B CD30                <1>     int 30h
   267 00004E3D 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   268                              <1>     
   269 00004E3E 48FFC9              <1>     dec rcx
   270 00004E41 7489                <1>     jz .cpurollprint
   271                              <1> 
   272 00004E43 B108                <1>     mov cl, 8
   273 00004E45 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   274                              <1> .pr2:
   275 00004E48 48C1C208            <1>     rol rdx, 8    ;Print rdx
   276 00004E4C 88D0                <1>     mov al, dl
   277 00004E4E 52                  <1>     push rdx
   278 00004E4F E83A000000          <1>     call .printbyte
   279 00004E54 5A                  <1>     pop rdx
   280 00004E55 FEC9                <1>     dec cl
   281 00004E57 75EF                <1>     jnz .pr2
   282                              <1> 
   283 00004E59 48B804130000000000- <1>     mov rax, 1304h
   283 00004E62 00                  <1>
   284 00004E63 48BB17000000000000- <1>     mov rbx, 17h
   284 00004E6C 00                  <1>
   285 00004E6D 48BD-               <1>     mov rbp, .fatal2
   285 00004E6F [F44F000000000000]  <1>
   286 00004E77 CD30                <1>     int 30h
   287                              <1>     
   288 00004E79 E94EFFFFFF          <1>     jmp .cpurollprint
   289                              <1> 
   290                              <1> 
   291                              <1> .char:    ;Print a single character
   292 00004E7E 48BB-               <1>     mov rbx, .ascii
   292 00004E80 [F84F000000000000]  <1>
   293 00004E88 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   294                              <1>     ;xor bh, bh
   295 00004E89 B40E                <1>     mov ah, 0Eh
   296 00004E8B CD30                <1>     int 30h    ;print char
   297 00004E8D C3                  <1>     ret
   298                              <1> .printbyte:
   299 00004E8E 88C2                <1>     mov dl, al            ;save byte in dl
   300 00004E90 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   301 00004E94 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   302 00004E99 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   303 00004E9D E8DCFFFFFF          <1>     call .char
   304 00004EA2 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   305 00004EA5 E8D4FFFFFF          <1>     call .char
   306 00004EAA C3                  <1>     ret    
   307 00004EAB 5343502F42494F53    <1> .fatalt0:  db "SCP/BIOS"
   308 00004EB3 4120706F74656E7469- <1> .fatal1:   db "A potentially fatal error has occured. To continue: ",0Ah,0Ah,0Dh
   308 00004EBC 616C6C792066617461- <1>
   308 00004EC5 6C206572726F722068- <1>
   308 00004ECE 6173206F6363757265- <1>
   308 00004ED7 642E20546F20636F6E- <1>
   308 00004EE0 74696E75653A200A0A- <1>
   308 00004EE9 0D                  <1>
   309 00004EEA 202020205072657373- <1> db "    Press Enter to launch SYSDEBUG, or",0Ah,0Ah,0Dh 
   309 00004EF3 20456E74657220746F- <1>
   309 00004EFC 206C61756E63682053- <1>
   309 00004F05 595344454255472C20- <1>
   309 00004F0E 6F720A0A0D          <1>
   310 00004F13 202020205072657373- <1> db "    Press ESC to try and return to the application which caused the error," 
   310 00004F1C 2045534320746F2074- <1>
   310 00004F25 727920616E64207265- <1>
   310 00004F2E 7475726E20746F2074- <1>
   310 00004F37 6865206170706C6963- <1>
   310 00004F40 6174696F6E20776869- <1>
   310 00004F49 636820636175736564- <1>
   310 00004F52 20746865206572726F- <1>
   310 00004F5B 722C                <1>
   311 00004F5D 6F720A0A0D          <1> db "or", 0Ah, 0Ah,0Dh,
   312 00004F62 202020205072657373- <1> db "    Press CTRL+ALT+DEL to restart your system. If you do this,",0Ah,0Dh
   312 00004F6B 204354524C2B414C54- <1>
   312 00004F74 2B44454C20746F2072- <1>
   312 00004F7D 65737461727420796F- <1>
   312 00004F86 75722073797374656D- <1>
   312 00004F8F 2E20496620796F7520- <1>
   312 00004F98 646F20746869732C0A- <1>
   312 00004FA1 0D                  <1>
   313 00004FA2 20202020796F752077- <1> db "    you will lose any unsaved information in all open applications.",0Ah, 
   313 00004FAB 696C6C206C6F736520- <1>
   313 00004FB4 616E7920756E736176- <1>
   313 00004FBD 656420696E666F726D- <1>
   313 00004FC6 6174696F6E20696E20- <1>
   313 00004FCF 616C6C206F70656E20- <1>
   313 00004FD8 6170706C6963617469- <1>
   313 00004FE1 6F6E732E0A          <1>
   314 00004FE6 0A0D                <1> db 0Ah, 0Dh
   315 00004FE8 202020204572726F72- <1> db "    Error: ",0
   315 00004FF1 3A2000              <1>
   316 00004FF4 203A2000            <1> .fatal2:   db " : ",0
   317 00004FF8 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   317 00005001 39414243444546      <1>
   112                                  ;==========================Dummy Interrupts======================
   113                                  %include "./Resident/Hardware/dummyInt.asm"
   114                              <1> dummy_interrupt:
   115                              <1> .pic2:
   116 00005008 50                  <1>     push rax
   117 00005009 B020                <1>     mov al, EOI
   118 0000500B E6A0                <1>     out pic2command, al    ;EOI to pic2
   119 0000500D EB01                <1>     jmp short .p1
   120                              <1> .pic1:
   121 0000500F 50                  <1>     push rax
   122                              <1> .p1:
   123 00005010 B020                <1>     mov al, EOI
   124 00005012 E620                <1>     out pic1command, al    ;EOI to pic2
   125 00005014 58                  <1>     pop rax
   126                              <1> dummy_return_64:
   127 00005015 48CF                <1>     iretq
   114                                  %include "./Resident/Misc/version.asm"
   115                              <1> ;----------------------------------------------------------------
   116 00005017 76302E392053435042- <1> signature:    db "v0.9 SCPBIOS"    ;12 byte signature
   116 00005020 494F53              <1>
   117 00005023 436F70797269676874- <1> signature2:   db "Copyright (C) Yll Buzoku"
   117 0000502C 2028432920596C6C20- <1>
   117 00005035 42757A6F6B75        <1>
   118 0000503B 30332F31322F323032- <1>               db "03/12/2021"
   118 00005044 31                  <1>
   115                                  codeResidentEndPtr:
   116                                  residentLength  equ $-$$
