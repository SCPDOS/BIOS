     1                                  [map all ./Source/scpbios.map]
     2                                  ;-----------------------------------SCPBIOS-----------------------------------
     3                                  %include "./Source/Include/equates.inc"
     4                              <1> ;------------------------------------Equates------------------------------------
     5                              <1> permissionflags equ 003h    ;Page table Permission flags
     6                              <1> codedescriptor     equ 0008h
     7                              <1> 
     8                              <1> BIOSStartAddr   equ 00110000h   ;Start just after HMA + 16 bytes
     9                              <1> BIOSInitAddr    equ 800h
    10                              <1> 
    11                              <1> e820Seg         equ 1000h
    12                              <1> e820SizeOff     equ 0000h    ;First word is # of entries
    13                              <1> e820BaseOff     equ e820SizeOff + 2
    14                              <1> e820SizeAddr    equ (e820Seg<<4) + e820SizeOff
    15                              <1> ;---------------------PIC Chip IO values---------------------
    16                              <1> pic1command     equ 020h        ;Command port
    17                              <1> pic2command     equ 0A0h        ;Command port
    18                              <1> pic1data        equ 021h        ;Data port
    19                              <1> pic2data        equ 0A1h        ;Data port
    20                              <1> ;------------------------------------------------------------
    21                              <1> ;-----------------PS/2 IO port commands----------------------
    22                              <1> ps2command      equ 64h            ;Command Port (write)
    23                              <1> ps2status       equ 64h            ;Status Port  (read)
    24                              <1> ps2data         equ 60h           ;Data Port     (read/write)
    25                              <1> ;------------------------------------------------------------
    26                              <1> ;--------------------Serial port equates---------------------
    27                              <1> com1_base       equ 03F8h
    28                              <1> com2_base       equ 02F8h
    29                              <1> com3_base       equ 03E8h
    30                              <1> com4_base       equ 02E8h
    31                              <1> ;------------------------------------------------------------
    32                              <1> ;---------------------PIT port equates-----------------------
    33                              <1> PITbase         equ 40h
    34                              <1> PIT0            equ PITbase
    35                              <1> PIT1            equ PITbase + 1
    36                              <1> PIT2            equ PITbase + 2
    37                              <1> PITcommand      equ PITbase + 3
    38                              <1> ;------------------------------------------------------------
    39                              <1> ;---------------------CMOS port equates----------------------
    40                              <1> cmos_base        equ 70h
    41                              <1> cmos_data        equ 71h
    42                              <1> ;------------------------------------------------------------
    43                              <1> ;--------------------Keyboard equates------------------------
    44                              <1> kb_flag_rshift   equ    01h    ;Right Shift is being held
    45                              <1> kb_flag_lshift   equ    02h    ;Left Shift is being held
    46                              <1> kb_flag_ctrl     equ    04h    ;Ctrl is being held
    47                              <1> kb_flag_alt      equ    08h    ;Alt is being held
    48                              <1> kb_flag_scrlset  equ    10h    ;Scroll lock is set
    49                              <1> kb_flag_numset   equ    20h    ;Num lock is set
    50                              <1> kb_flag_capsset  equ    40h    ;Caps lock is set
    51                              <1> kb_flag_insset   equ    80h    ;Insert mode is set
    52                              <1> 
    53                              <1> kb_flag2_e1      equ    01h    ;0E1h scancode procedure being processed
    54                              <1> kb_flag2_e0      equ    02h    ;0E0h scancode procedure being processed
    55                              <1> ;------------------------------------------------------------
    56                              <1> ;--------------------Screen equates--------------------------
    57                              <1> vga_index        equ    03D4h
    58                              <1> vga_data         equ    03D5h
    59                              <1> ;---------------- New Equates ----------------
    60                              <1> vga_aindex       equ    03B4h    ;Alt (MDA) IO Base
    61                              <1> vga_adata        equ    03B5h
    62                              <1> ;These equates are SEGMENTS, need to be SHL 4 to become addrs
    63                              <1> vga_bpage0       equ    0A0000h
    64                              <1> vga_bpage1       equ    0B0000h
    65                              <1> vga_bpage2       equ    0B8000h
    66                              <1> ;------------------------------------------------------------
    67                              <1> ;----------------------PCI equates---------------------------
    68                              <1> pci_index        equ    0CF8h
    69                              <1> pci_data         equ    0CFCh
    70                              <1> ;------------------------------------------------------------
    71                              <1> ;----------------------USB equates---------------------------
    72                              <1> usb_class        equ    0Ch    ;pci class
    73                              <1> usb_subclass     equ    03h    ;pci subclase
    74                              <1> uhci_interface   equ    00h    ;usb 1.0
    75                              <1> uhcimask         equ    10h
    76                              <1> ohci_interface   equ    10h    ;usb 1.0 alt
    77                              <1> ohcimask         equ    20h
    78                              <1> ehci_interface   equ    20h    ;usb 2.0
    79                              <1> ehcimask         equ    40h
    80                              <1> xhci_interface   equ    30h    ;usb 3.0
    81                              <1> xhcimask         equ    80h
    82                              <1> lousbtablesize   equ    0000E000h    ;Location of the table size, uword
    83                              <1> lousbtablebase   equ    lousbtablesize + 2 ;base of the table, tword entries
    84                              <1> debounceperiod   equ 200 ;double 200ms as per Windows, for inaccuracies
    85                              <1> ;                ------EHCI equates------
    86                              <1> ehcicaplength    equ    00h    ;Add this to base addr in table to find opparams
    87                              <1> ehciversion      equ    02h    ;Interface Version number
    88                              <1> ehcistrucparams  equ    04h    ;Structural Parameters
    89                              <1> ehcihccparams    equ    08h    ;Capability Parameters
    90                              <1> ehciportroute    equ    0Ch    ;Companion Port Route Description (v1 ignore)
    91                              <1> 
    92                              <1> ;Operational registers below
    93                              <1> 
    94                              <1> ehcicmd          equ    00h    ;USB command register
    95                              <1> ehcists          equ    04h    ;USB status register
    96                              <1> ehciintr         equ    08h    ;USB Interrupt Enable
    97                              <1> ehcifrindex      equ    0Ch    ;USB Frame Index
    98                              <1> ehcictrlseg      equ    10h    ;4Gb Segment Selector
    99                              <1> ehciperiodbase   equ    14h    ;Frame List Base Address
   100                              <1> ehciasyncaddr    equ    18h    ;Next Asynchronus List Address
   101                              <1> ehciconfigflag   equ    40h    ;Configured Flag Register
   102                              <1> ehciportsc       equ    44h    ;Read = 1 - # of ports, Write = port ctrl
   103                              <1> ;                ------------------------
   104                              <1> ;                -------MSD equates------
   105                              <1> setupReset       equ 0FFh
   106                              <1> setupGetMaxLUN   equ 0FEh
   107                              <1> ;                ------------------------
   108                              <1> ;                ------Bulk Storage equates------
   109                              <1> CBWSig           equ    043425355h
   110                              <1> CSWSig           equ 053425355h
   111                              <1> CBWFlagOut       equ    00h    ;Switch to send to device
   112                              <1> CBWFlagIn        equ    80h    ;Switch to recieve from
   113                              <1> bCSWPassed       equ    00h
   114                              <1> bCSWFailed       equ    01h
   115                              <1> bCSWPhase        equ    02h
   116                              <1> ;                ------------------------
   117                              <1> ;------------------USB Device table entry sizes------------------
   118                              <1> msdDevTblEntrySize    equ 10h
   119                              <1> hubDevTblEntrySize    equ 8h
   120                              <1> usbDevTblEntrySize    equ 3h
   121                              <1> usbMaxDevices         equ 10
   122                              <1> ;                ------------------------
   123                              <1> ;------------------EHCI Transfer Descriptor size------------------
   124                              <1> ehciSizeOfQH    equ 60h
   125                              <1> ehciSizeOfTD    equ 40h
   126                              <1> ;------------------------------------------------------------
   127                              <1> ;----------------------ATA equates---------------------------
   128                              <1> ata0_base       equ    1F0h
   129                              <1> ata0_ctrl       equ    3F6h
   130                              <1> ata1_base       equ    170h
   131                              <1> ata1_ctrl       equ    376h
   132                              <1> 
   133                              <1> msd_class       equ    01h
   134                              <1> ide_subclass    equ    01h
   135                              <1> sata_subclass   equ    06h
   136                              <1> ;------------------------------------------------------------
   137                              <1> ;----------------------IDE equates---------------------------
   138                              <1> ideTableEntrySize     equ 10h
   139                              <1> ;----------------------FDD equates---------------------------
   140                              <1> fdd_base        equ    3F0h
   141                              <1> ;----------------------ATA equates---------------------------
   142                              <1> struc fdiskEntry
   143 00000000 ??                  <1>     .signature  resb 1 
   144                              <1>     ;CHS really shouldnt be used
   145 00000001 ????                <1>     .wHeads     resw 1  ;Number of CHS Heads
   146 00000003 ????                <1>     .wCylinder  resw 1  ;Number of CHS Cylinders
   147 00000005 ????                <1>     .wSecTrc    resw 1  ;Number of CHS Sectors per Track
   148 00000007 ????????            <1>     .lbaMax     resd 1  ;Number of maximum sector accessible by LBA28
   149 0000000B ????????????????    <1>     .lbaMax48   resq 1  ;Number of maximum sector accessible by LBA48
   150 00000013 ????                <1>     .ioBase     resw 1  ;IO Base address
   151 00000015 ??                  <1>     .msBit      resb 1  ;Master Slave bit in 0A0h/0B0h format
   152                              <1> endstruc
   153                              <1> ;.signature is as follows:
   154                              <1> ;.signature[0] set = Device present and OK to use.
   155                              <1> ;.signature[1] set = LBA 28 supported, detected by non-zero LBA28 field
   156                              <1> ;.signature[2] set = LBA 48 supported, detected by bit set AND non-zero 
   157                              <1> ;                       LBA 48 sectors field
   158                              <1> ;.signature[7:3] = Reserved
   159                              <1> ;Bitfield equates
   160                              <1>     fdePresent  equ 1
   161                              <1>     fdeLBA28    equ 2
   162                              <1>     fdeLBA48    equ 4
   163                              <1> 
   164                              <1> ;Equates for the ATA identify command
   165                              <1>     idCurrCyl   equ 2*54    ;54th word
   166                              <1>     idCurrHed   equ 2*55    ;55th word
   167                              <1>     idCurrSecTk equ 2*56    ;56th word
   168                              <1>     idLBASectrs equ 2*60    ;60th word
   169                              <1>     idLBA48Sec  equ 2*100   ;100th word
   170                              <1> ;----------------------Int 33h Equates-----------------------
   171                              <1> int33TblEntrySize     equ 10h
   172                              <1> ;------------------------------------------------------------
   173                              <1> ;------------------------------------------------------------
   174                              <1> ;------------------------Misc--------------------------------
   175                              <1> port61h         equ 61h         ;I/O port 61h
   176                              <1> EOI             equ 20h         ;End of interrupt signal
   177                              <1> waitp           equ 80h         ;debug port used to wait for io cycles
   178                              <1> bochsout        equ 0E9h        ;Emulator debug port
   179                              <1> BREAKPOINT      equ 0CCh        ;Use to manually encode breakpoints in program
   180                              <1> sizeOfMCPAlloc  equ 800h        ;2Kb allocated space
   181                              <1> ;------------------------------------------------------------
     4                                  ;----------------------------------------------------------------
     5                                  ;                 BIOS SYSTEM TABLE AREA                        :
     6                                  ;----------------------------------------------------------------
     7                                  Segment BIOSTables nobits start=BIOSStartAddr align=1
     8                                  %include "./Source/BSS/gtables.asm"
     9                              <1> ;Global Data BIOS tables
    10 00000000 <res 1000h>         <1> BIOSIDTable     resq 2*256  ;256 paragraph entries reserved for IDT
    11 00001000 <res 6000h>         <1> BIOSPageTbl     resq 0C00h  ;6000 bytes for page tables
    12 00007000 <res 18h>           <1> BIOSGDTable     resq 3      ;3 entries in basic GDT
    13 00007018 ????????????????    <1>                 resq 1      ;Alignment qword
     9                                  ;----------------------------------------------------------------
    10                                  ;                    BIOS DATA AREA STARTS HERE                 :
    11                                  ;----------------------------------------------------------------
    12                                  Segment data nobits follows=BIOSTables align=1 
    13                                  %include "./Source/BSS/bda.asm"
    14                              <1> ;Refer to MEMMAP.TXT for memory address reference!
    15                              <1> ;If Interrupt call is faulty, Carry will be set AND either:
    16                              <1> ;                    ah=80h => Invalid function.
    17                              <1> ;                    ah=86h => Not (yet) supported.
    18                              <1> ;------------------------------Data Area-------------------------
    19 00000000 ????                <1> IDTlength       resw 1 ;Maximum number of Interrupts is 256
    20                              <1> IDTpointer:
    21 00000002 ????                <1> .Limit          resw 1
    22 00000004 ????????????????    <1> .Base           resq 1
    23                              <1> 
    24 0000000C ????                <1> GDTlength       resw 1
    25                              <1> GDTpointer:
    26 0000000E ????                <1> .Limit          resw 1
    27 00000010 ????????????????    <1> .Base           resq 1
    28                              <1> 
    29 00000018 ????????????????    <1> pageTablePtr:   resq 1
    30                              <1> ;----------------------------------------
    31                              <1> ;       Spurious Interrupt counter      :
    32                              <1> ;----------------------------------------
    33 00000020 ??                  <1> spurint1        resb 1    ;Keep track of how many spur ints on pic1
    34 00000021 ??                  <1> spurint2        resb 1    ;pic 2
    35                              <1> ;----------------------------------------
    36                              <1> ;            Keyboard Data Area         :
    37                              <1> ;----------------------------------------
    38 00000022 <res 20h>           <1> kb_buffer       resw 10h
    39 00000042 ????????????????    <1> kb_buf_head     resq 1    ;Pointer to Keyboard buffer head
    40 0000004A ????????????????    <1> kb_buf_tail     resq 1    ;Pointer to Keyboard buffer tail 
    41 00000052 ????????????????    <1> kb_buf_start    resq 1    ;Pointer for circular buffer start
    42 0000005A ????????????????    <1> kb_buf_end      resq 1    ;Ditto..., for end
    43 00000062 ??                  <1> kb_flags        resb 1    ;Keyboard state flags
    44 00000063 ??                  <1> kb_flags_1      resb 1    ;Extended flags, empty for now
    45 00000064 ??                  <1> kb_flags_2      resb 1    ;Bit 0 = E1 present, Bit 1 = E0 present
    46 00000065 ??                  <1> break_flag      resb 1    ;Well, its not for the Print Screen key
    47                              <1> ;----------------------------------------
    48                              <1> ;            Serial Data Area           :
    49                              <1> ;----------------------------------------
    50 00000066 ??                  <1> numCOM          resb 1  ;Number of Serial Ports
    51 00000067 ????????????????    <1> com_addresses   resw 4     ;Space for 4 IO addresses
    52                              <1> 
    53                              <1> comX_buffer:
    54 0000006F <res 10h>           <1> com1_buffer     resb 10h 
    55 0000007F <res 10h>           <1> com2_buffer     resb 10h
    56 0000008F <res 10h>           <1> com3_buffer     resb 10h
    57 0000009F <res 10h>           <1> com4_buffer     resb 10h
    58                              <1> 
    59                              <1> comX_buf_head:
    60 000000AF ????????????????    <1> com1_buf_head   resq 1
    61 000000B7 ????????????????    <1> com2_buf_head   resq 1
    62 000000BF ????????????????    <1> com3_buf_head   resq 1
    63 000000C7 ????????????????    <1> com4_buf_head   resq 1
    64                              <1> 
    65                              <1> comX_buf_tail:
    66 000000CF ????????????????    <1> com1_buf_tail   resq 1
    67 000000D7 ????????????????    <1> com2_buf_tail   resq 1
    68 000000DF ????????????????    <1> com3_buf_tail   resq 1
    69 000000E7 ????????????????    <1> com4_buf_tail   resq 1
    70                              <1> 
    71                              <1> comX_buf_start:
    72 000000EF ????????????????    <1> com1_buf_start  resq 1
    73 000000F7 ????????????????    <1> com2_buf_start  resq 1
    74 000000FF ????????????????    <1> com3_buf_start  resq 1
    75 00000107 ????????????????    <1> com4_buf_start  resq 1
    76                              <1> 
    77                              <1> comX_buf_end:
    78 0000010F ????????????????    <1> com1_buf_end    resq 1
    79 00000117 ????????????????    <1> com2_buf_end    resq 1
    80 0000011F ????????????????    <1> com3_buf_end    resq 1
    81 00000127 ????????????????    <1> com4_buf_end    resq 1
    82                              <1> 
    83                              <1> ;----------------------------------------
    84                              <1> ;            Printer Data Area          :
    85                              <1> ;----------------------------------------
    86 0000012F ????????????        <1> prt_addresses   resw 3    ;Space for 3 IO addresses
    87                              <1> ;----------------------------------------
    88                              <1> ;            Timer Data Area            :
    89                              <1> ;----------------------------------------
    90 00000135 ????                <1> pit_divisor     resw 1
    91 00000137 ????????            <1> pit_ticks       resd 1    ;Similar to IBM PC, only with default divisor
    92                              <1> ;[31]=OF cnt, [30:21]=Res [20:16]=Hi cnt, [15,0]=Lo cnt
    93 0000013B ????????????????    <1> rtc_ticks       resq 1
    94                              <1> ;----------------------------------------
    95                              <1> ;            Screen Data Area           :
    96                              <1> ;----------------------------------------
    97 00000143 <res 10h>           <1> scr_curs_pos    resw 8    ;Cursor pos, hi byte = row / lo byte = column
    98 00000153 ??                  <1> scr_cols        resb 1    ;80 Cols
    99 00000154 ??                  <1> scr_rows        resb 1    ;25 Rows
   100 00000155 ????                <1> scr_curs_shape  resw 1    ;Packed start/end scan line
   101 00000157 ??                  <1> scr_char_attr   resb 1    ;Grey text on black background
   102 00000158 ??                  <1> scr_mode        resb 1    ;80x25, 16 colours default
   103 00000159 ??                  <1> scr_active_page resb 1    ;Mode dependent
   104 0000015A ????                <1> scr_crtc_base   resw 1    ;03D4h for Graphics, 03B4h for MDA
   105 0000015C ????????            <1> scr_page_addr   resd 1    ;CRTC Register 12 changes base address accessed
   106 00000160 ????????????????    <1> scr_mode_params resq 1    ;Stub pointer location for future mode parameters
   107 00000168 <res 40h>           <1> scr_vga_ptrs    resq 8  ;VGA pointers
   108                              <1> ;----------------------------------------
   109                              <1> ;       Mass storage Data Area          :
   110                              <1> ;----------------------------------------
   111 000001A8 ??                  <1> i33Devices      resb 1  ;Number of devices Int 33h is aware of
   112 000001A9 ??                  <1> msdStatus       resb 1  ;Status byte. Used by BIOS for all transfers with Int 33h.
   113 000001AA ??                  <1> fdiskNum        resb 1  ;Number of fixed disks
   114 000001AB ??                  <1> ata0CmdByte     resb 1  ;Contains bitfield of instructions, Bit 0 is master/slave, Bit 1 is Data Mutex
   115 000001AC ??                  <1> ata0Status      resb 1  ;Contains the status of the last transaction
   116 000001AD ??                  <1> ata1CmdByte     resb 1
   117 000001AE ??                  <1> ata1Status      resb 1
   118 000001AF ????????????????    <1> diskDptPtr      resq 1
   119 000001B7 ????????????????    <1> fdiskDptPtr     resq 1
   120                              <1> ;----------------------------------------
   121                              <1> ;            SysInit Data Area          :
   122                              <1> ;----------------------------------------
   123 000001BF ????????????????    <1> nextFilePtr     resq 1  ;Pointer to next file to load
   124 000001C7 ????                <1> numSectors      resw 1  ;Number of sectors to copy 
   125                              <1> ;----------------------------------------
   126                              <1> ;            Memory Data Area           :
   127                              <1> ;----------------------------------------
   128 000001C9 ????                <1> MachineWord     resw 1    ;Really Legacy Hardware Bitfield
   129 000001CB ????                <1> convRAM         resw 1  ;Conventional memory word
   130 000001CD ????????????????    <1> userBase        resq 1    ;Start address of the user space
   131 000001D5 ??                  <1> bigmapSize      resb 1    ;First byte, in units of 24 bytes
   132 000001D6 ????????????????    <1> srData          resw 4  ;4 words for memory64MB word 0 is ax word 1 is bx etc.
   133 000001DE ????                <1> srData1         resw 1  ;Reserve 1 word for memory16MB
   134 000001E0 ????????????????    <1> sysMem          resq 1  ;Size of usable system RAM (without SCP/BIOS)
   135 000001E8 ????????            <1> scpSize         resd 1  ;Size of SCP/BIOS allocation
   136                              <1> ;----------------------------------------
   137                              <1> ;            MCP Data Area              :
   138                              <1> ;----------------------------------------
   139 000001EC ????????????????    <1> mcpUserBase     resq 1  ;Pointer to register save space
   140 000001F4 ????????????????    <1> mcpUserRip      resq 1  ;Save the custom user RIP for new jumps
   141 000001FC ????????????????    <1> mcpUserkeybf    resq 1  ;Pointer to the keyboard buffer
   142 00000204 ????????????????    <1> mcpUserRaxStore resq 1  ;Temp rax save space
   143 0000020C ????????????????    <1> mcpStackPtr     resq 1  ;Address of base of user Stack Pointer
   144                              <1> ;----------------------------------------
   145                              <1> ;            USB Data Area              :
   146                              <1> ;----------------------------------------
   147 00000214 ??                  <1> eControllers    resb 1    ;Number of EHCI controllers
   148 00000215 <res 20h>           <1> eControllerList resq 4    ;Entry = PCI space addr|MMIO addrs
   149 00000235 ??                  <1> usbDevices      resb 1    ;Max value, 10 for now!
   150 00000236 ????????????????    <1> eHCErrorHandler resq 1  ;Address of default error handler
   151                              <1> ;----------------------------------------
   152                              <1> ;            EHCI Async Area            :
   153                              <1> ;----------------------------------------
   154 0000023E ????????????????    <1> eCurrAsyncHead  resq 1      ;Point to the current head of the async list
   155 00000246 ??                  <1> eNewBus         resb 1      ;Default to 0, if 1, a new bus was selected
   156 00000247 ??                  <1> eActiveCtrlr    resb 1        ;Current working controller (default -1)
   157 00000248 ??                  <1> eActiveInt      resb 1        ;Gives a copy of the usbsts intr bits
   158 00000249 ??                  <1> eAsyncMutex     resb 1    
   159                              <1>     ;Mutex, x1b=data NOT ready, wait. x0b=ready, data ready to access.
   160                              <1>     ;        1xb=Internal buffer. 0xb=user provided buffer.
   161                              <1>     ;        bits [7:2], number of interrupts to ignore (if any)
   162                              <1>     ;            a value of 0 means dont ignore
   163                              <1> ;----------------------------------------
   164                              <1> ;            MSD Data Area              :
   165                              <1> ;----------------------------------------
   166 0000024A ??                  <1> cbwTag          resb 1        ;cbw transaction unique id (inc post use)
   167 0000024B ??                  <1> numMSD          resb 1        ;Number of MSD devices
   168                              <1> ;----------------------------------------
   169                              <1> ;           USB Tables                  :
   170                              <1> ;----------------------------------------
   171 0000024C <res 1Eh>           <1> usbDevTbl       resb 10*usbDevTblEntrySize
   172                              <1> usbDevTblEnd    equ $
   173                              <1> usbDevTblE      equ ($ - usbDevTbl)/usbDevTblEntrySize ;Number of Entries
   174                              <1> ;Byte 0 = Dev Addr, Byte 1 = Root hub, Byte 2 = Class Code (USB standard)
   175                              <1> ; i.e. 08h=MSD, 09h=Hub
   176 0000026A <res 50h>           <1> hubDevTbl       resb 10*hubDevTblEntrySize
   177                              <1> hubDevTblEnd    equ $
   178                              <1> hubDevTblE      equ ($ - hubDevTbl)/hubDevTblEntrySize
   179                              <1> ;bAddress - The assigned device address
   180                              <1> ;bBus - Host Bus [Root hub]
   181                              <1> ;bHostHub - Address of Hub we are attached to or 0 for Root
   182                              <1> ;bHubPort - Port number we are inserted in
   183                              <1> ;bMaxPacketSize0 - Max packet size to endpoint 0
   184                              <1> ;bNumPorts - Number of downstream ports on hub
   185                              <1> ;bPowerOn2PowerGood - Time in units of 2ms for device on port to turn on
   186                              <1> ;bRes- Endpoint address, for when we add interrupt eps
   187                              <1> ;   If bNumPorts=0 => Hub needs to undergo Hub Config
   188 000002BA <res A0h>           <1> msdDevTbl       resb 10*msdDevTblEntrySize
   189                              <1> msdDevTblEnd    equ $
   190                              <1> msdDevTblE      equ    ($ - msdDevTbl)/msdDevTblEntrySize
   191                              <1> ;bAddress - The assigned device address [+ 0]
   192                              <1> ;bBus - Host Bus [Root hub] [+ 1]
   193                              <1> ;bHostHub - Address of Hub we are attached to or 0 for Root [+ 2]
   194                              <1> ;bHubPort - Port number we are inserted in  [+ 3]
   195                              <1> ;bInerfaceNumber - Interface number being used  [+ 4]
   196                              <1> ;bInterfaceSubclass - 00h (defacto SCSI), 06h (SCSI), 04h (UFI)     [+ 5]
   197                              <1> ;bInterfaceProtocol - 50h (BBB), 00h (CBI), 01h (CBI w/o interrupt) [+ 6]
   198                              <1> ;bMaxPacketSize0 - Max packet size to endpoint 0                    [+ 7]
   199                              <1> ;bEndpointInAddress - 4 bit address of IN EP                        [+ 8]
   200                              <1> ;wMaxPacketSizeIn - Max packet size to chosen In endpoint           [+ 9]
   201                              <1> ;bEndpointOutAddress - 4 bit address of OUT EP                      [+ 11]
   202                              <1> ;wMaxPacketSizeOut - Max packet size to OUT endpoint                [+ 12]
   203                              <1> ;bInEPdt - In Endpoints' dt bit                                     [+ 14]
   204                              <1> ;bOutEPdt - Out Endpoints' dt bit                                   [+ 15]
   205                              <1> ;These past two bytes are temporarily kept separate! Will bitstuff later
   206                              <1> ;----------------------------------------
   207                              <1> ;           IDE Tables                  :
   208                              <1> ;----------------------------------------
   209                              <1> ;Support up to two IDE controllers
   210 0000035A ??                  <1> ideNumberOfControllers: resb 1
   211 0000035B <res 20h>           <1> ideControllerTable:     resb  2*ideTableEntrySize ;Max 2 controllers
   212                              <1> ;dPCIAddress   - PCI IO address of controller   [+0]
   213                              <1> ;dPCIBAR4 - PCI BAR4, the Bus Mastery address [+4]
   214                              <1> ; Note that this address is given with the bottom nybble indicating
   215                              <1> ; if the address is IO or MMIO. Bit set => IO
   216                              <1> ;----------------------------------------
   217                              <1> ;           ATA Tables                  :
   218                              <1> ;----------------------------------------
   219 0000037B <res 58h>           <1> fdiskTable:     resb 4*fdiskEntry_size  ;Max 4 fixed disks
   220                              <1> ;----------------------------------------
   221                              <1> ;            Int33h Table Area          :
   222                              <1> ;----------------------------------------
   223 000003D3 <res A0h>           <1> diskDevices:    resb 10*int33TblEntrySize
   224                              <1> diskDevicesE    equ ($ - diskDevices)/int33TblEntrySize
   225                              <1> ;bDevType - 0 = Unasigned, 1 = MSD EHCI, 2 = MSD xHCI, 3 = Floppy Physical,
   226                              <1> ;           4 = ATA device, 5 = ATAPI device   [+ 0]
   227                              <1> ;wDeviceAddress - USB Address/Bus pair OR local device table address  [+ 1]
   228                              <1> ;dBlockSize - Dword size of LBA block (should be 512 for remdev) [+ 3]
   229                              <1> ;qLastLBANum - Last LBA address (OS MAY minus 1 to avoid crashing device) [+ 7]
   230                              <1> ;bEPSize - 1 = 64 byte, 2 = 512 byte (EP size for sector transfer)  [+ 15]
   231                              <1> ;NOTE: LBA SECTOR 0 IS CHS SECTOR 0,0,1 !!
   232                              <1> ;----------------------------------------------------------------
    14                                  ;----------------------------------------------------------------
    15                                  ;                   MCP Transaction area                        :
    16                                  ;----------------------------------------------------------------
    17                                  Segment MCPseg nobits follows=codeResident align=1
    18 00000000 <res 800h>                              resb sizeOfMCPAlloc   ;2KB space
    19                                  MCPsegEnd:  ;Pointer to the end of the segment
    20                                  ;----------------------------------------------------------------
    21                                  ;                  BIOS Transaction area                        :
    22                                  ;                                                               :
    23                                  ;                   Must be the last segment                    :
    24                                  ;----------------------------------------------------------------
    25                                  Segment xdata nobits follows=MCPseg align=40h    ;eXtra data seg
    26                                  %include "./Source/BSS/xbda.asm"
    27                              <1> ;eXtended BDA area for data transfers
    28                              <1> 
    29                              <1> ;This segment comes after the resident code and is the transaction
    30                              <1> ;area. The ehci async schedule (and eventually periodic) live here.
    31                              <1> ;They are BOTH always postfixed by the big memory map.
    32                              <1> ehciAschedule:                  ;Static label for head of the asyncschedule
    33 00000000 <res 60h>           <1> ehciQHead0      resb ehciSizeOfQH ;96 bytes, for address 0 device only
    34 00000060 <res 20h>           <1>     alignb 40h
    35 00000080 <res 60h>           <1> ehciQHead1      resb ehciSizeOfQH ;Used for cmds with an addressed usb device
    36 000000E0 <res 20h>           <1>     alignb 40h
    37 00000100 <res 280h>          <1> ehciTDSpace     resb 10*ehciSizeOfTD   ;640 bytes of transfer space
    38                              <1>     alignb 40h
    39 00000380 <res 20h>           <1> ehciDataOut     resb 20h               ;32 bytes
    40 000003A0 <res 20h>           <1>     alignb 40h
    41                              <1> sectorbuffer:                       ;Same buffer for multiple purposes
    42 000003C0 <res 200h>          <1> ehciDataIn      resb 200h           ;512 bytes, to get as much data as needed
    43                              <1>     alignb 40h
    44 000005C0 <res 10h>           <1> msdCSW          resb 10h                
    45                              <1> ;13 bytes, special, to be saved after each transfer
    46 000005D0 <res 10h>           <1>     alignb 20h      
    47 000005E0 <res 10h>           <1> prdt:           resq 2      ;2 entries in the prdt
    48                              <1> bigmapptr:                        ;Pointer to big mem map
    27                                  ;----------------------------------------------------------------
    28                                  ;                      SysInit Table                            :
    29                                  ;----------------------------------------------------------------
    30                                  Segment SysInitParams   nobits start=600h
    31                                  ;Use the bootsector reload space (600h-800h) as a temporary stack
    32                                  ; and a storage space for the SysInit table
    33                                  SysInitTable:
    34 00000000 ????                    .numSecW        resw 1
    35 00000002 ????????????????        .FileLBA        resq 1
    36 0000000A ????                    loMachineWord   resw 1
    37                                  ;----------------------------------------------------------------
    38                                  ;                      Real Mode Stack                          :
    39                                  ;----------------------------------------------------------------
    40                                  Segment lowStack    nobits  start=700h
    41 00000000 <res 100h>                              resb 100h
    42                                  lowStackPtr:
    43                                  ;----------------------------------------------------------------
    44                                  ORG 800h
    45                                  ;----------------------------------------------------------------
    46                                  ;                    INIT CODE STARTS HERE                      :
    47                                  ;----------------------------------------------------------------
    48                                  Segment codeInit start=BIOSInitAddr align=1
    49                                  BITS 16
    50                                  %include "./Source/Init/RealInit.asm"
    51                              <1> ;First set stack and save the SysInit Ptr, then set A20, check CPUID and 
    52                              <1> ; exended features. Then tell BIOS that we are going long and perhaps 
    53                              <1> ; protected then get the Int 11h word, store at 0:800h
    54                              <1> realInit:
    55                              <1> ;The Caller Far Jumps to set cs to 0
    56 00000000 FA                  <1>     cli     ;Stop interrupts as we dont know where the stack is
    57 00000001 31C0                <1>     xor ax, ax
    58 00000003 8ED8                <1>     mov ds, ax
    59 00000005 8ED0                <1>     mov ss, ax
    60 00000007 BC[0001]            <1>     mov sp, lowStackPtr ;Set up stack pointer
    61 0000000A FB                  <1>     sti
    62 0000000B 26803F0C            <1>     cmp byte [es:bx], 0Ch   ;Check length
    63 0000000F 0F85F200            <1>     jne .fail   ;If thats not it, error 0
    64 00000013 268B4701            <1>     mov ax, word [es:bx + 1]    ;Get number of sectors into ax 
    65 00000017 B92A00              <1>     mov cx, 42  ;42 sectors maximum
    66 0000001A 39C8                <1>     cmp ax, cx
    67 0000001C 0F43C1              <1>     cmovnb ax, cx
    68 0000001F A3[0000]            <1>     mov word [SysInitTable.numSecW], ax
    69 00000022 26668B4704          <1>     mov eax, dword [es:bx + 4]      ;Get low dword
    70 00000027 66A3[0200]          <1>     mov dword [SysInitTable.FileLBA], eax
    71 0000002B 26668B4708          <1>     mov eax, dword [es:bx + 8]      ;Get high dword
    72 00000030 66A3[0600]          <1>     mov dword [SysInitTable.FileLBA + 4], eax
    73                              <1> 
    74 00000034 B80300              <1>     mov ax, 03
    75 00000037 CD10                <1>     int 10h ;Reset the video graphics mode using BIOS 
    76                              <1>     
    77 00000039 06                  <1>     push es
    78                              <1> .a20Proc:
    79 0000003A 50                  <1>     push ax
    80 0000003B 51                  <1>     push cx ;preserve ax and cx
    81 0000003C 31C9                <1>     xor cx, cx ;clear to use as a timeout counter
    82                              <1>     
    83                              <1> .a20FastEnable:
    84 0000003E E492                <1>     in al, 92h
    85 00000040 A802                <1>     test al, 2
    86 00000042 750B                <1>     jnz .no92
    87 00000044 0C02                <1>     or al, 2
    88 00000046 24FE                <1>     and al, 0FEh
    89 00000048 E692                <1>     out 92h, al
    90                              <1>     
    91 0000004A FEC1                <1>     inc cl    ;increments the time out counter
    92 0000004C E94900              <1>     jmp .a20Check
    93                              <1>     
    94                              <1> .no92:
    95 0000004F B104                <1>     mov cl, 4
    96 00000051 E96A00              <1>     jmp .a20Fail
    97                              <1>     
    98                              <1> .a20KeybEnable: ;communicating with the keyboard controller
    99 00000054 FA                  <1>     cli
   100                              <1>  
   101 00000055 E83200              <1>     call .a20wait
   102 00000058 B0AD                <1>     mov al,0ADh
   103 0000005A E664                <1>     out 64h,al ;disable the keyboard
   104 0000005C E82B00              <1>     call .a20wait
   105 0000005F B0D0                <1>     mov al,0D0h
   106 00000061 E664                <1>     out 64h,al ;read from the keyboard input
   107 00000063 E82B00              <1>     call .a20wait2
   108 00000066 E460                <1>     in al,60h
   109 00000068 6650                <1>     push eax    ;get the keyboard data and push it to the stack
   110 0000006A E81D00              <1>     call .a20wait
   111 0000006D B0D1                <1>     mov al,0D1h
   112 0000006F E664                <1>     out 64h,al    ;output the command to prep to go a20 
   113 00000071 E81600              <1>     call .a20wait
   114 00000074 6658                <1>     pop eax    ;need this be eax and not just ax?
   115 00000076 0C02                <1>     or  al,2
   116 00000078 E660                <1>     out 60h,al    ;output to go a20
   117 0000007A E80D00              <1>     call .a20wait
   118 0000007D B0AE                <1>     mov al,0AEh
   119 0000007F E664                <1>     out 64h,al    ;reenable keyboard
   120 00000081 E80600              <1>     call .a20wait    ;done!
   121 00000084 FB                  <1>     sti
   122                              <1> 
   123 00000085 FEC1                <1>     inc cl    ;increments the time out counter
   124 00000087 E90E00              <1>     jmp .a20Check
   125                              <1>     
   126                              <1> .a20wait:
   127 0000008A E464                <1>     in al,64h
   128 0000008C A802                <1>     test al,2
   129 0000008E 75FA                <1>     jnz .a20wait
   130 00000090 C3                  <1>     ret
   131                              <1>  
   132                              <1> .a20wait2: 
   133 00000091 E464                <1>     in al,64h
   134 00000093 A801                <1>     test al,1
   135 00000095 74FA                <1>     jz .a20wait2
   136 00000097 C3                  <1>     ret
   137                              <1> 
   138                              <1> .a20Check:
   139 00000098 B8FFFF              <1>     mov ax, 0FFFFh
   140 0000009B 50                  <1>     push ax
   141 0000009C 07                  <1>     pop es ;es to FFFF
   142 0000009D BF1000              <1>     mov di, 0010h ;FFFF:0010 == 0000:0000
   143 000000A0 31F6                <1>     xor si, si    ;remember ds = 0000
   144 000000A2 268A05              <1>     mov al, byte [es:di]
   145 000000A5 3E3804              <1>     cmp byte [ds:si], al
   146 000000A8 7414                <1>     je .a20Fail
   147 000000AA FEC0                <1>     inc al    ;make change to al
   148 000000AC 3E8804              <1>     mov byte [ds:si], al ;al is now incremented and saved at address 0000:0000
   149 000000AF 263805              <1>     cmp byte [es:di], al ;check against overflown version
   150 000000B2 740A                <1>     je .a20Fail
   151                              <1>     
   152                              <1> .a20Pass:
   153 000000B4 FEC8                <1>     dec al    ;return al to its original value
   154 000000B6 3E8804              <1>     mov byte [ds:si], al ;return to original position
   155                              <1>     
   156 000000B9 59                  <1>     pop cx
   157 000000BA 58                  <1>     pop ax
   158 000000BB 07                  <1>     pop es
   159 000000BC EB11                <1>     jmp short .a20Exit
   160                              <1>     
   161                              <1> .a20Fail:
   162 000000BE 80F903              <1>     cmp cl, 3
   163 000000C1 0F8E79FF            <1>     jle .a20FastEnable
   164 000000C5 80F906              <1>     cmp cl, 6
   165 000000C8 7E8A                <1>     jle .a20KeybEnable
   166                              <1>     
   167 000000CA 59                  <1>     pop cx
   168 000000CB 58                  <1>     pop ax
   169 000000CC 07                  <1>     pop es
   170 000000CD EB2E                <1>     jmp short .noa20
   171                              <1> 
   172                              <1> .a20Exit:
   173 000000CF 669C                <1>     pushfd
   174 000000D1 6658                <1>     pop eax
   175 000000D3 6689C1              <1>     mov ecx, eax ;save original flag state for later
   176 000000D6 663500002000        <1>     xor eax, 00200000h ;21st bit - CPUID bit, switch it!!
   177 000000DC 6650                <1>     push eax
   178 000000DE 669D                <1>     popfd
   179                              <1>     
   180 000000E0 669C                <1>     pushfd
   181 000000E2 6658                <1>     pop eax
   182 000000E4 6685C8              <1>     test eax, ecx ; compare the registers. If they are the same
   183 000000E7 7416                <1>     je .noCPUID
   184 000000E9 6651                <1>     push ecx
   185 000000EB 669D                <1>     popfd
   186                              <1> 
   187                              <1> .extCheck:
   188 000000ED 66B800000080        <1>     mov eax, 80000000h
   189 000000F3 0FA2                <1>     cpuid
   190 000000F5 663D01000080        <1>     cmp eax, 80000001h ;If this is true, CPU supports extended functionality
   191 000000FB 733C                <1>     jae tellBIOS
   192                              <1> .noa20:
   193 000000FD B401                <1>     mov ah, 1    ;noa20 error code
   194                              <1> .noCPUID:
   195 000000FF B402                <1>     mov ah, 2    ;noCPUID error code
   196 00000101 EB02                <1>     jmp short .fail
   197 00000103 B403                <1>     mov ah, 3    ;no Extended functionality error code
   198                              <1> .fail:
   199 00000105 88E2                <1>     mov dl, ah    ;store ax to get error code printed
   200 00000107 BE[2D01]            <1>     mov si, .msg
   201 0000010A E81100              <1>     call .write
   202 0000010D 88D0                <1>     mov al, dl
   203 0000010F BB0700              <1>     mov bx, 0007h    ;Attribs
   204 00000112 B40E                <1>     mov ah, 0Eh        ;TTY print char
   205 00000114 0430                <1>     add al, 30h        ;add '0' to digit
   206 00000116 CD10                <1>     int 10h
   207 00000118 31C0                <1>     xor ax, ax
   208 0000011A CD16                <1>     int 16h    ;await keystroke
   209 0000011C CD18                <1>     int 18h
   210                              <1> ;Error codes: 
   211                              <1> ;   00h - Bad SysInit Data
   212                              <1> ;   01h - No A20 Line
   213                              <1> ;   02h - No CPUID 
   214                              <1> ;   03h - No Extended Functionality
   215                              <1> .write: ;destroys registers ax and bx
   216 0000011E AC                  <1>     lodsb
   217 0000011F 3C00                <1>     cmp al, 0 ;check for zero
   218 00000121 7409                <1>     je .return
   219 00000123 B40E                <1>     mov ah, 0Eh    ;TTY output
   220 00000125 BB0700              <1>     mov bx, 0007h ;colour
   221 00000128 CD10                <1>     int 10h
   222 0000012A EBF2                <1>     jmp short .write
   223                              <1> .return:
   224 0000012C C3                  <1>     ret
   225 0000012D 426F6F74206572726F- <1> .msg: db 'Boot error:',0
   225 00000136 723A00              <1>
   226                              <1> tellBIOS:
   227 00000139 66B800EC0000        <1>     mov eax, 0EC00h ;Tell BIOS we are going long
   228 0000013F B303                <1>     mov bl, 03h     ;Both Long and Protected modes
   229 00000141 CD15                <1>     int 15h         ;Ignore response
   230 00000143 CD11                <1>     int 11h
   231 00000145 A3[0A00]            <1>     mov word [loMachineWord], ax
   232                              <1> ;Getting Memory Map
   233                              <1> rmE820Map:
   234 00000148 06                  <1>     push es
   235 00000149 1E                  <1>     push ds
   236 0000014A B80010              <1>     mov ax, e820Seg
   237 0000014D 8ED8                <1>     mov ds, ax
   238 0000014F 8EC0                <1>     mov es, ax
   239 00000151 BF0200              <1>     mov di,    e820BaseOff
   240 00000154 6631DB              <1>     xor ebx, ebx
   241 00000157 31ED                <1>     xor bp,bp
   242 00000159 66BA50414D53        <1>     mov edx, 0534D4150h    ;Magic dword
   243 0000015F 66B820E80000        <1>     mov eax, 0E820h
   244 00000165 2666C7451401000000  <1>     mov dword [es:di + 20], 1
   245 0000016E 66B918000000        <1>     mov ecx, 24            ;Get 24 bytes
   246 00000174 CD15                <1>     int 15h
   247 00000176 7257                <1>     jc .mapfail            ;Carry set => Fail
   248 00000178 66BA50414D53        <1>     mov edx, 0534D4150h    ;Magic dword
   249 0000017E 6639D0              <1>     cmp eax, edx        ;Must be equal on success
   250 00000181 754C                <1>     jne .mapfail
   251 00000183 6685DB              <1>     test ebx, ebx         ;One table entry, bad
   252 00000186 7447                <1>     jz .mapfail
   253 00000188 EB1F                <1>     jmp short .map1
   254                              <1> .map0:
   255 0000018A 66B820E80000        <1>     mov eax, 0E820h
   256 00000190 2666C7451401000000  <1>     mov dword  [es:di + 20], 1
   257 00000199 66B918000000        <1>     mov ecx, 24
   258 0000019F CD15                <1>     int 15h
   259 000001A1 722C                <1>     jc .mapexit
   260 000001A3 66BA50414D53        <1>     mov edx, 0534D4150h
   261                              <1> .map1:
   262 000001A9 E31D                <1>     jcxz .map3
   263 000001AB 80F914              <1>     cmp cl, 20
   264 000001AE 7607                <1>     jbe .map2
   265 000001B0 26F6451401          <1>     test byte [es:di + 20], 1
   266 000001B5 7411                <1>     je .map3
   267                              <1> .map2:
   268 000001B7 26668B4D08          <1>     mov ecx, dword [es:di + 8]
   269 000001BC 26660B4D0C          <1>     or ecx, [es:di + 12]
   270 000001C1 7405                <1>     jz .map3
   271 000001C3 45                  <1>     inc bp
   272 000001C4 81C71800            <1>     add di, 24
   273                              <1> .map3:
   274 000001C8 6685DB              <1>     test ebx, ebx
   275 000001CB 75BD                <1>     jne .map0
   276 000001CD EB00                <1>     jmp short .mapexit
   277                              <1> .mapfail:
   278                              <1> .mapexit:
   279 000001CF 26892E0000          <1>     mov word [es:e820SizeOff], bp  ;Num entries in var space (3 qwords/entry)
   280                              <1> ;Second memory test
   281 000001D4 31C9                <1>     xor cx, cx
   282 000001D6 31D2                <1>     xor dx, dx
   283 000001D8 B801E8              <1>     mov ax, 0E801h
   284 000001DB CD15                <1>     int 15h
   285 000001DD 7216                <1>     jc .badmem2
   286 000001DF 80FC86              <1>     cmp ah, 86h    ;unsupported command
   287 000001E2 7411                <1>     je .badmem2
   288 000001E4 3D8000              <1>     cmp ax, 80h    ;invalid command
   289 000001E7 740C                <1>     je .badmem2
   290                              <1> .mem2write:
   291 000001E9 AB                  <1>     stosw
   292 000001EA 89D8                <1>     mov ax, bx
   293 000001EC AB                  <1>     stosw
   294 000001ED 89C8                <1>     mov ax, cx
   295 000001EF AB                  <1>     stosw
   296 000001F0 89D0                <1>     mov ax, dx
   297 000001F2 AB                  <1>     stosw
   298 000001F3 EB0B                <1>     jmp short .mem3test
   299                              <1> .badmem2:
   300 000001F5 31C0                <1>     xor ax, ax
   301 000001F7 31DB                <1>     xor bx, bx
   302 000001F9 31C9                <1>     xor cx, cx
   303 000001FB 31D2                <1>     xor dx, dx
   304 000001FD E9E9FF              <1>     jmp .mem2write
   305                              <1> .mem3test:
   306 00000200 F8                  <1>     clc
   307 00000201 B488                <1>     mov ah, 88h
   308 00000203 CD15                <1>     int 15h
   309 00000205 31DB                <1>     xor bx, bx 
   310 00000207 0F42C3              <1>     cmovc ax, bx    ;if error, store zero
   311 0000020A 3D8600              <1>     cmp ax, 86h
   312 0000020D 0F44C3              <1>     cmovz ax, bx
   313 00000210 3D8000              <1>     cmp ax, 80h
   314 00000213 0F44C3              <1>     cmovz ax, bx
   315 00000216 AB                  <1>     stosw
   316                              <1> .finalmemtest:
   317 00000217 F8                  <1>     clc
   318 00000218 CD12                <1>     int 12h
   319 0000021A 0F42C3              <1>     cmovc ax, bx    ;If carry on, store a zero
   320 0000021D AB                  <1>     stosw    ;Store the word
   321                              <1> rmGetFontPointers:
   322                              <1> ;Get ROM Font Pointers, immediately after Memory map
   323                              <1> ;Each entry is 8 bytes long: es=Seg, bp=Off, cx=bytes/char, dx=# of rows - 1
   324 0000021E 31DB                <1>     xor bx, bx         ;Clear bh
   325                              <1> .gfp1:    
   326                              <1> ;Over protective routine in the event that the BIOS routine clobbers registers
   327 00000220 BE0010              <1>     mov si, 1000h    ;Save segment loader
   328 00000223 31C9                <1>     xor cx, cx
   329 00000225 31D2                <1>     xor dx, dx
   330 00000227 31ED                <1>     xor bp, bp
   331 00000229 53                  <1>     push bx            ;Save bx
   332                              <1> 
   333 0000022A B83011              <1>     mov ax, 1130h    ;Get font pointer function
   334 0000022D CD10                <1>     int 10h
   335                              <1> 
   336 0000022F 8CC0                <1>     mov ax, es        ;Get segment into ax to store
   337 00000231 8EC6                <1>     mov es, si        ;Reload segment for stos to work
   338 00000233 AB                  <1>     stosw
   339 00000234 89E8                <1>     mov ax, bp        ;Get offset
   340 00000236 AB                  <1>     stosw
   341 00000237 89C8                <1>     mov ax, cx        ;bytes/char
   342 00000239 AB                  <1>     stosw
   343 0000023A 88D0                <1>     mov al, dl        ;dl contains # of rows, but zero extended for alignment
   344 0000023C 30E4                <1>     xor ah, ah
   345 0000023E AB                  <1>     stosw
   346 0000023F 5B                  <1>     pop bx            ;Get the count back
   347 00000240 FEC7                <1>     inc bh
   348 00000242 80FF07              <1>     cmp bh, 7
   349 00000245 76D9                <1>     jbe .gfp1        ;Once above 7, fall through
   350                              <1> 
   351 00000247 1F                  <1>     pop ds
   352 00000248 07                  <1>     pop es    ;Bring back original es value
   353                              <1> rmSetTables:
   354                              <1> ;Memory tables live in 0:8000h - 0:E000h range
   355 00000249 66BF00800000        <1>     mov edi, 8000h
   356 0000024F 0F22DF              <1>     mov cr3, edi    ;Cannot lsh cr3
   357 00000252 B90030              <1>     mov cx, 3000h    ;6000h bytes (6x4Kb) of zero to clear table area
   358 00000255 57                  <1>     push di
   359 00000256 31C0                <1>     xor ax, ax
   360 00000258 F3AB                <1>     rep stosw        ;Store 3000h words of zero
   361                              <1> 
   362 0000025A 5F                  <1>     pop di            ;Return zero to the head of the table, at 08000h
   363 0000025B B80390              <1>     mov ax, 9000h|permissionflags    ;9000h is the low word of the address.
   364 0000025E AB                  <1>     stosw    ;store the low word of the address
   365 0000025F 81C7FE0F            <1>     add di, 0FFEh
   366 00000263 B90400              <1>     mov cx, 4
   367                              <1> rmUtables:            ;di should point to 8000h
   368 00000266 050010              <1>     add ax, 1000h
   369 00000269 AB                  <1>     stosw    ;ax is now A003h,B003h,C003h,D003h
   370 0000026A 81C70600            <1>     add di, 6    ;qword alignment
   371 0000026E 49                  <1>     dec cx
   372 0000026F 75F5                <1>     jnz rmUtables
   373                              <1> 
   374 00000271 B90008              <1>     mov cx, 800h    ;4x512 consecutive entries
   375 00000274 31C0                <1>     xor ax, ax
   376 00000276 50                  <1>     push ax            ;push for algorithm to work
   377 00000277 BF00A0              <1>     mov di, 0A000h
   378                              <1> rmPDTentries:
   379 0000027A B88300              <1>     mov ax, 83h        ;bit 7|permission flags
   380 0000027D AB                  <1>     stosw            ;di incremented twice
   381 0000027E 58                  <1>     pop ax            ;get current address
   382 0000027F AB                  <1>     stosw            ;di incremented twice. store the address
   383 00000280 052000              <1>     add ax, 20h        ;add the offset to the next page
   384 00000283 50                  <1>     push ax            ;push current address into memory
   385 00000284 81C70400            <1>     add di, 4        ;qword Align
   386 00000288 49                  <1>     dec cx
   387 00000289 75EF                <1>     jnz rmPDTentries
   388                              <1> 
   389 0000028B 0F20E0              <1>     mov eax, cr4                 
   390 0000028E 660DA0000000        <1>     or eax, 0A0h ;Set PAE and PGE, for glbl page and physical page extensions
   391 00000294 0F22E0              <1>     mov cr4, eax 
   392                              <1>     
   393 00000297 66B9800000C0        <1>     mov ecx, 0C0000080h    ;Read EFER MSD into EDX:EAX
   394 0000029D 0F32                <1>     rdmsr    ; Read information from the msr.
   395 0000029F 660D00010000        <1>     or eax, 00000100h ; Set the Long mode bit!
   396 000002A5 0F30                <1>     wrmsr  ; Write the data back
   397                              <1>     
   398 000002A7 FA                  <1>     cli
   399 000002A8 B0FF                <1>     mov al, 0FFh             ; Out 0xFF to 0xA1 and 0x21 to disable all IRQs.
   400 000002AA E6A1                <1>     out 0A1h, al
   401 000002AC E621                <1>     out 21h, al
   402                              <1> 
   403 000002AE 0F0116[DE02]        <1>     lgdt [GDT.Pointer] ;Load the Global Descriptor Table pointer
   404                              <1> 
   405 000002B3 0F20C0              <1>     mov eax, cr0
   406 000002B6 660D01000080        <1>     or eax, 80000001h ;Set the Paging and Protected Mode bits (Bits 31 and 0)
   407 000002BC 0F22C0              <1>     mov cr0, eax  ;write it back!
   408 000002BF EA[E802]0800        <1>     jmp GDT.Code:longmode_ep
   409                              <1> 
   410                              <1> GDT:                    ;Global Descriptor Table (64-bit).
   411                              <1> .Null: equ $ - GDT      ;The null descriptor.
   412 000002C4 0000000000000000    <1>     dq 0
   413                              <1> .Code: equ $ - GDT      ;The 32-bit code descriptor. Limit = FFFFFh, Base=0
   414 000002CC FFFF                <1>     dw 0FFFFh           ;Limit 0:15
   415 000002CE 0000                <1>     dw 00000h           ;Base 0:15
   416 000002D0 00                  <1>     db 00h              ;Base 16:23
   417 000002D1 9A                  <1>     db 09Ah             ;Access Byte
   418 000002D2 3F                  <1>     db 03Fh             ;Limit 16:19
   419 000002D3 00                  <1>     db 00b              ;Base 24:31
   420                              <1> 
   421                              <1> .Data: equ $ - GDT      ;The 32-bit data descriptor. 
   422 000002D4 FFFF                <1>     dw 0FFFFh           ;Limit 0:15
   423 000002D6 0000                <1>     dw 00000h           ;Base 0:15
   424 000002D8 00                  <1>     db 0h               ;Base 16:23
   425 000002D9 92                  <1>     db 092h             ;Access Byte
   426 000002DA 1F                  <1>     db 01Fh             ;Limit 16:19 then Flags
   427 000002DB 00                  <1>     db 00h              ;Base 24:31
   428                              <1> ALIGN 4
   429 000002DC 0000                <1>     dw 0
   430 000002DE 1900                <1> .Pointer    dw $ - GDT - 1      ; GDT pointer.
   431 000002E0 [C402000000000000]  <1> .Base       dq GDT                 ; GDT offset.
   432                              <1> ;----------------------------------------------------------------
    51                                  BITS 64
    52                                  %include "./Source/Init/LongInit.asm"
    53                              <1> ;----------------------------------------------------------------
    54                              <1> ;                    Long Mode Initialisation                   :
    55                              <1> ;----------------------------------------------------------------
    56                              <1> ;----------------------------------------------------------------
    57                              <1> ; Sets up Segment registers, copies the resident portion of SCPBIOS
    58                              <1> ; high, initialises the BDA, copies data from real mode BIOS to 
    59                              <1> ; SCPBIOS internal area, Identity maps the first 4 Gb, creates 
    60                              <1> ; an IVT and moves the GDT to its final resting place,
    61                              <1> ; and directs cr3, gdtr and idtr to the BDA vars and reinits the video
    62                              <1> ; to VGA Mode 3. Finish by printing boot message and memory sizes.
    63                              <1> ;----------------------------------------------------------------
    64                              <1> longmode_ep:
    65 000002E8 66B81000            <1>     mov ax, 10h
    66 000002EC 668ED8              <1>     mov ds, ax
    67 000002EF 668EC0              <1>     mov es, ax
    68 000002F2 668EE0              <1>     mov fs, ax
    69 000002F5 668EE8              <1>     mov gs, ax
    70 000002F8 668ED0              <1>     mov ss, ax
    71                              <1> ;-----------------Write BDA constants-----------------
    72 000002FB 48BF-               <1>     mov rdi, section.data.start
    72 000002FD [0000000000000000]  <1>
    73 00000305 66B80001            <1>     mov ax, 100h
    74 00000309 66AB                <1>     stosw            ;IDT Length
    75 0000030B 66B8FF0F            <1>     mov ax, (100h*10h) - 1    ;IDT Limit
    76 0000030F 66AB                <1>     stosw
    77 00000311 48B8-               <1>     mov rax, BIOSIDTable    ;IDT Base
    77 00000313 [0000000000000000]  <1>
    78 0000031B 48AB                <1>     stosq
    79 0000031D 66B80300            <1>     mov ax, 3h
    80 00000321 66AB                <1>     stosw
    81 00000323 66B81700            <1>     mov ax, (3h*8h)-1
    82 00000327 66AB                <1>     stosw
    83 00000329 48B8-               <1>     mov rax, BIOSGDTable
    83 0000032B [0070000000000000]  <1>
    84 00000333 48AB                <1>     stosq
    85 00000335 48B8-               <1>     mov rax, BIOSPageTbl
    85 00000337 [0010000000000000]  <1>
    86 0000033F 48AB                <1>     stosq
    87 00000341 31C0                <1>     xor eax, eax    ;Clears upper dword too
    88                              <1> ;Clear spur int counters
    89 00000343 66AB                <1>     stosw
    90                              <1> ;Keyboard area
    91 00000345 B904000000          <1>     mov ecx, 4h
    92 0000034A F348AB              <1>     rep stosq    ;Clear kb buffer for 16 words
    93 0000034D 48B8-               <1>     mov rax, kb_buffer
    93 0000034F [2200000000000000]  <1>
    94 00000357 66B90300            <1>     mov cx, 3h    ;Circular pointers
    95 0000035B F348AB              <1>     rep stosq
    96 0000035E 480520000000        <1>     add rax, 20h    ;End of buffer pointer
    97 00000364 48AB                <1>     stosq
    98 00000366 31C0                <1>     xor eax, eax
    99 00000368 AB                  <1>     stosd    ;Store keyboard flags bytes
   100                              <1> ;Serial Area
   101 00000369 AA                  <1>     stosb   ;Clear number of COM devices byte
   102 0000036A 48AB                <1>     stosq    ;Clear com_addresses (4 words)
   103 0000036C 66B90800            <1>     mov cx, 8
   104 00000370 F348AB              <1>     rep stosq    ;Store 8 qwords for COM buffers
   105                              <1> ;Buffer heads
   106 00000373 48B8-               <1>     mov rax, com1_buffer
   106 00000375 [6F00000000000000]  <1>
   107 0000037D 48AB                <1>     stosq
   108 0000037F 480510000000        <1>     add rax, 10h    ;Com2
   109 00000385 48AB                <1>     stosq
   110 00000387 480510000000        <1>     add rax, 10h    ;Com3
   111 0000038D 48AB                <1>     stosq
   112 0000038F 480510000000        <1>     add rax, 10h    ;Com4
   113 00000395 48AB                <1>     stosq
   114                              <1> ;Buffer Tails
   115 00000397 482D30000000        <1>     sub rax, 30h
   116 0000039D 48AB                <1>     stosq
   117 0000039F 480510000000        <1>     add rax, 10h    ;Com2
   118 000003A5 48AB                <1>     stosq
   119 000003A7 480510000000        <1>     add rax, 10h    ;Com3
   120 000003AD 48AB                <1>     stosq
   121 000003AF 480510000000        <1>     add rax, 10h    ;Com4
   122 000003B5 48AB                <1>     stosq
   123                              <1> ;Buffer start
   124 000003B7 482D30000000        <1>     sub rax, 30h
   125 000003BD 48AB                <1>     stosq
   126 000003BF 480510000000        <1>     add rax, 10h    ;Com2
   127 000003C5 48AB                <1>     stosq
   128 000003C7 480510000000        <1>     add rax, 10h    ;Com3
   129 000003CD 48AB                <1>     stosq
   130 000003CF 480510000000        <1>     add rax, 10h    ;Com4
   131 000003D5 48AB                <1>     stosq
   132                              <1> ;Buffer end
   133 000003D7 482D20000000        <1>     sub rax, 20h
   134 000003DD 48AB                <1>     stosq
   135 000003DF 480510000000        <1>     add rax, 10h    ;Com2
   136 000003E5 48AB                <1>     stosq
   137 000003E7 480510000000        <1>     add rax, 10h    ;Com3
   138 000003ED 48AB                <1>     stosq
   139 000003EF 480510000000        <1>     add rax, 10h    ;Com4
   140 000003F5 48AB                <1>     stosq
   141                              <1> ;Printer area
   142 000003F7 31C0                <1>     xor eax, eax
   143 000003F9 66B90300            <1>     mov cx, 3h
   144 000003FD F366AB              <1>     rep stosw
   145                              <1> ;Timers area
   146 00000400 66AB                <1>     stosw   ;Default pit_divisor, 0 = 65536
   147 00000402 AB                  <1>     stosd    ;pit_ticks
   148 00000403 48AB                <1>     stosq    ;rtc_ticks
   149                              <1> ;Screen area
   150 00000405 66B90200            <1>     mov cx, 2h
   151 00000409 F348AB              <1>     rep stosq    ;rax, is 0
   152 0000040C 66B85000            <1>     mov ax, 50h
   153 00000410 AA                  <1>     stosb
   154 00000411 66B81900            <1>     mov ax, 19h
   155 00000415 AA                  <1>     stosb
   156 00000416 6631C0              <1>     xor ax, ax
   157 00000419 66AB                <1>     stosw
   158 0000041B 66B80700            <1>     mov ax, 07
   159 0000041F AA                  <1>     stosb
   160 00000420 66B80300            <1>     mov ax, 03
   161 00000424 AA                  <1>     stosb
   162 00000425 6631C0              <1>     xor ax, ax
   163 00000428 AA                  <1>     stosb
   164 00000429 66B8D403            <1>     mov ax, vga_index
   165 0000042D 66AB                <1>     stosw
   166 0000042F B800800B00          <1>     mov eax, vga_bpage2
   167 00000434 AB                  <1>     stosd
   168 00000435 31C0                <1>     xor eax, eax    ;zero rax
   169                              <1> ;Store scr_mode_params and scr_vga_ptrs
   170 00000437 B909000000          <1>     mov ecx, 9
   171 0000043C F348AB              <1>     rep stosq
   172                              <1> ;HDD/FDD data area
   173 0000043F 31C0                <1>     xor eax, eax
   174 00000441 66AB                <1>     stosw   ;Int 33h entries and msdStatus
   175 00000443 AA                  <1>     stosb   ;Fixed disk entries
   176 00000444 AB                  <1>     stosd   ;Hard drive status entries
   177 00000445 48B8-               <1>     mov rax, diskdpt
   177 00000447 [8B1A000000000000]  <1>
   178 0000044F 48AB                <1>     stosq   ;Store the address of the default remdev format table
   179 00000451 48B8-               <1>     mov rax, fdiskdpt
   179 00000453 [961A000000000000]  <1>
   180 0000045B 48AB                <1>     stosq
   181 0000045D 31C0                <1>     xor eax, eax
   182                              <1> ;SysInit area
   183 0000045F 488B0425[02000000]  <1>     mov rax, qword [SysInitTable.FileLBA]
   184 00000467 48AB                <1>     stosq   ;NextFileLBA
   185 00000469 0FB70425[00000000]  <1>     movzx eax, word [SysInitTable.numSecW] 
   186 00000471 66AB                <1>     stosw   ;numSectors Word
   187 00000473 31C0                <1>     xor eax, eax
   188                              <1> ;Memory Data area
   189 00000475 AB                  <1>     stosd    ;0 MachineWord and convRAM 
   190 00000476 48AB                <1>     stosq   ;0 userBase
   191 00000478 AA                  <1>     stosb    ;0 bigmapSize
   192 00000479 48AB                <1>     stosq   ;0 srData, 4 words
   193 0000047B 66AB                <1>     stosw   ;0 srData1, 1 word
   194 0000047D 48AB                <1>     stosq   ;0 sysMem, 1 qword
   195 0000047F AB                  <1>     stosd   ;0 scpSize, 1 dword
   196                              <1> ;MCP data area
   197 00000480 48C70425[EC010000]- <1>     mov qword [mcpUserBase], section.MCPseg.start
   197 00000488 [00000000]          <1>
   198 0000048C 48C70425[F4010000]- <1>     mov qword [mcpUserRip], section.MCPseg.start + 180h
   198 00000494 [80010000]          <1>
   199 00000498 48C70425[FC010000]- <1>     mov qword [mcpUserkeybf], section.MCPseg.start + 100h
   199 000004A0 [00010000]          <1>
   200 000004A4 48C70425[0C020000]- <1>     mov qword [mcpStackPtr], MCPsegEnd
   200 000004AC [00080000]          <1>
   201 000004B0 48C70425[04020000]- <1>     mov qword [mcpUserRaxStore], 0
   201 000004B8 00000000            <1>
   202 000004BC 4881C728000000      <1>     add rdi, 5*8    ;Go forwards by 5 entries
   203                              <1> ;USB Area
   204 000004C3 AA                  <1>     stosb
   205 000004C4 66B90400            <1>     mov cx, 4
   206 000004C8 F348AB              <1>     rep stosq    ;eControllerList
   207 000004CB AA                  <1>     stosb
   208 000004CC 48B8-               <1>     mov rax, USB.ehciCriticalErrorHandler ;Get the critical error handler ptr
   208 000004CE [103A000000000000]  <1>
   209 000004D6 48AB                <1>     stosq       ;Install eHCErrorHandler
   210 000004D8 31C0                <1>     xor eax, eax    ;Rezero rax
   211 000004DA 66FFC8              <1>     dec ax
   212 000004DD 48AB                <1>     stosq       ;eCurrAsyncHead
   213 000004DF AA                  <1>     stosb       ;eActiveAddr
   214 000004E0 AA                  <1>     stosb        ;eActiveCtrlr
   215 000004E1 66FFC0              <1>     inc ax
   216 000004E4 AB                  <1>     stosd
   217                              <1> ;USB Tables
   218 000004E5 66B91E00            <1>     mov cx, 10*usbDevTblEntrySize
   219 000004E9 F3AA                <1>     rep stosb
   220 000004EB 66B95000            <1>     mov cx, 10*hubDevTblEntrySize
   221 000004EF F3AA                <1>     rep stosb
   222 000004F1 66B9A000            <1>     mov cx, 10*msdDevTblEntrySize
   223 000004F5 F3AA                <1>     rep stosb
   224                              <1> ;IDE and Int 33h stuff
   225 000004F7 AA                  <1>     stosb       ;ideNumberOfControllers
   226 000004F8 66B92000            <1>     mov cx, 2*ideTableEntrySize ;ideControllerTable
   227 000004FC F3AA                <1>     rep stosb
   228 000004FE 66B95800            <1>     mov cx, 4*fdiskEntry_size
   229 00000502 F3AA                <1>     rep stosb
   230 00000504 66B9A000            <1>     mov cx, 10*int33TblEntrySize
   231 00000508 F3AA                <1>     rep stosb
   232                              <1> ;End of BDA variable init
   233                              <1> 
   234                              <1> ;Copy the resident portion of SCPBIOS.SYS to its offset
   235                              <1> Relocate:
   236 0000050A 48BE-               <1>     mov rsi, section.codeResident.start
   236 0000050C [0000000000000000]  <1>
   237 00000514 48BF-               <1>     mov rdi, section.codeResident.vstart    ;address for the end of the section
   237 00000516 [0000000000000000]  <1>
   238 0000051E 48B9FA0A0000000000- <1>     mov rcx, (residentLength/8) + 1
   238 00000527 00                  <1>
   239 00000528 F348A5              <1>     rep movsq    ;Copy resident portion high
   240                              <1> 
   241                              <1> ;Copy machine word into var from 600h
   242 0000052B 668B0425[0A000000]  <1>     mov ax, word [loMachineWord]
   243 00000533 66890425[C9010000]  <1>     mov word [MachineWord], ax
   244                              <1> 
   245                              <1> ;Copy Memory Maps DIRECTLY after USB dynamic space.
   246 0000053B 48BF-               <1>     mov rdi, bigmapptr
   246 0000053D [F005000000000000]  <1>
   247                              <1> .move820_0:    ;Add to the end
   248 00000545 48BE00000100000000- <1>     mov rsi, e820SizeAddr
   248 0000054E 00                  <1>
   249 0000054F 66AD                <1>     lodsw    ;Get number of entries for big map
   250 00000551 480FB6C0            <1>     movzx rax, al    ;zero extend
   251 00000555 488D0C40            <1>     lea rcx, qword [rax + 2*rax]    ;Save 3*#of entries for countdown loop
   252                              <1> .mv0:
   253 00000559 F348A5              <1>     rep movsq    ;Transfer 3*al qwords
   254 0000055C 0402                <1>     add al, 2    ;Two more entries for BIOS
   255 0000055E 880425[D5010000]    <1>     mov byte [bigmapSize], al    ;Save entries in al
   256                              <1> ;Compute the size of BIOS allocation + space for two more entries up to next KB
   257 00000565 4881C718000000      <1>     add rdi, 3*8 ;rdi now points to start of last allocated entry (added)
   258 0000056C 4889FB              <1>     mov rbx, rdi 
   259 0000056F 4881C318000000      <1>     add rbx, 3*8h   ;Add size of last new entry
   260                              <1> ;Round to nearest KB
   261 00000576 4881E300FCFFFF      <1>     and rbx, ~3FFh
   262 0000057D 4881C300040000      <1>     add rbx, 400h
   263 00000584 48891C25[CD010000]  <1>     mov qword [userBase], rbx    ;Save userbase
   264 0000058C 4881EB00001100      <1>     sub rbx, BIOSStartAddr 
   265 00000593 891C25[E8010000]    <1>     mov dword [scpSize], ebx    ;Save Size
   266                              <1> ;Calculate amount of system RAM available
   267                              <1> .readSystemSize:
   268 0000059A 48BB-               <1>     mov rbx, bigmapptr
   268 0000059C [F005000000000000]  <1>
   269 000005A4 48BA01000000010000- <1>     mov rdx, 0000000100000001h      ;Valid entry signature
   269 000005AD 00                  <1>
   270 000005AE 0FB6C8              <1>     movzx ecx, al       ;Get the number of 24 byte entries
   271 000005B1 81E902000000        <1>     sub ecx, 2          ;Remove the allocated entries from the count
   272 000005B7 31C0                <1>     xor eax, eax                    ;Zero rax, use to hold cumulative sum
   273                              <1> .rss1:
   274 000005B9 48395310            <1>     cmp qword [rbx + 2*8], rdx   ;Check valid entry
   275 000005BD 7504                <1>     jnz .rss2
   276 000005BF 48034308            <1>     add rax, qword [rbx + 8]    ;Add size to rax
   277                              <1> .rss2:
   278 000005C3 4881C318000000      <1>     add rbx, 3*8                ;Goto next entry
   279 000005CA FFC9                <1>     dec ecx                     ;Decrement count
   280 000005CC 75EB                <1>     jnz .rss1                   ;Not at zero, keep going
   281 000005CE 48890425[E0010000]  <1>     mov qword [sysMem], rax
   282                              <1> ;Create and insert new entry. If no space found for new, just add to end
   283                              <1> .addEntry:
   284 000005D6 0FB60C25[D5010000]  <1>     movzx ecx, byte [bigmapSize]
   285 000005DE 81E902000000        <1>     sub ecx, 2          ;Remove the allocated entries from the count   
   286 000005E4 31D2                <1>     xor edx, edx    ;Use as index pointer
   287                              <1> .ae0:
   288 000005E6 4881BA[F0050000]00- <1>     cmp qword [bigmapptr+rdx], 100000h    ;Start of extended memory
   288 000005EE 001000              <1>
   289 000005F1 7438                <1>     je .ae1
   290 000005F3 4881C218000000      <1>     add rdx, 18h    ;Go to next entry
   291 000005FA FFC9                <1>     dec ecx 
   292 000005FC 75E8                <1>     jnz .ae0
   293                              <1> ;If address not found, just add it to the end, deal with that here
   294                              <1> ;Ignore the extra calculated allocated entry
   295                              <1> ;rdi points to last new entry, so sub rdi to point to second to last entry
   296 000005FE 4881EF18000000      <1>     sub rdi, 3*8h
   297 00000605 48C70700001100      <1>     mov qword [rdi], BIOSStartAddr
   298 0000060C 488B0425[E8010000]  <1>     mov rax, qword [scpSize]
   299 00000614 48894708            <1>     mov qword [rdi + 8h], rax
   300 00000618 48B802000000010000- <1>     mov rax, 100000002h
   300 00000621 00                  <1>
   301 00000622 48894708            <1>     mov qword [rdi + 8h], rax
   302 00000626 E99F000000          <1>     jmp .altRAM
   303                              <1> .ae1:
   304                              <1> ;Address found, add new entry
   305                              <1> ;ecx contains number of entries that need to be shifted + 1
   306 0000062B 56                  <1>     push rsi
   307 0000062C 57                  <1>     push rdi
   308 0000062D 4889FE              <1>     mov rsi, rdi
   309 00000630 4881EE30000000      <1>     sub rsi, 2*18h
   310 00000637 FFC9                <1>     dec ecx
   311 00000639 89C8                <1>     mov eax, ecx    ;Use eax as row counter
   312                              <1> .ae2:
   313 0000063B B903000000          <1>     mov ecx, 3      ;3 8 byte entries
   314 00000640 F348A5              <1>     rep movsq
   315 00000643 4881EE30000000      <1>     sub rsi, 2*18h
   316 0000064A 4881EF30000000      <1>     sub rdi, 2*18h
   317 00000651 FFC8                <1>     dec eax
   318 00000653 75E6                <1>     jnz .ae2
   319 00000655 5F                  <1>     pop rdi
   320 00000656 5E                  <1>     pop rsi
   321                              <1> ;Values copied, time to change values
   322                              <1> ;Change HMA entry
   323 00000657 4881C2[F0050000]    <1>     add rdx, bigmapptr    ;Add offset into table to rdx
   324 0000065E 488B4A08            <1>     mov rcx, qword [rdx + 8h]       ;Save size from entry into rax
   325 00000662 48C7420800000100    <1>     mov qword [rdx + 8h], 10000h    ;Free 64Kb entry (HMA)
   326 0000066A 4881C218000000      <1>     add rdx, 3*8h   ;Move to new SCP reserved entry
   327                              <1> ;Now Create the SCPBIOS Space Entry
   328 00000671 48C70200001100      <1>     mov qword [rdx], BIOSStartAddr
   329 00000678 31DB                <1>     xor ebx, ebx
   330 0000067A 8B1C25[E8010000]    <1>     mov ebx, dword [scpSize]
   331 00000681 48895A08            <1>     mov qword [rdx + 8h], rbx
   332 00000685 48BB02000000010000- <1>     mov rbx, 100000002h
   332 0000068E 00                  <1>
   333 0000068F 48895A10            <1>     mov qword [rdx + 10h], rbx  ;Reserved flags
   334 00000693 4881C218000000      <1>     add rdx, 3*8h
   335                              <1> ;Now modify the Free space entry
   336 0000069A 488B0425[CD010000]  <1>     mov rax, qword [userBase]
   337 000006A2 488902              <1>     mov qword [rdx], rax
   338 000006A5 31C0                <1>     xor eax, eax
   339 000006A7 8B0425[E8010000]    <1>     mov eax, dword [scpSize]
   340 000006AE 4829C1              <1>     sub rcx, rax
   341 000006B1 4881E900000100      <1>     sub rcx, 10000h ;Sub HMA size
   342 000006B8 48894A08            <1>     mov qword [rdx + 8h], rcx    ;Put entry back
   343 000006BC 48BB01000000010000- <1>     mov rbx, 100000001h
   343 000006C5 00                  <1>
   344 000006C6 48895A10            <1>     mov qword [rdx + 10h], rbx  ;Free flags
   345                              <1> .altRAM:
   346                              <1> ;Copy Alt RAM values
   347 000006CA 8B1C25[E8010000]    <1>     mov ebx, dword [scpSize]
   348 000006D1 C1EB0A              <1>     shr ebx, 0Ah    ;Rescale from byts to KB
   349 000006D4 81C340000000        <1>     add ebx, 40h    ;Add the HMA (64Kb)
   350 000006DA 48BF-               <1>     mov rdi, srData    ;Save qword in srData ah=E801h
   350 000006DC [D601000000000000]  <1>
   351 000006E4 48AD                <1>     lodsq    ;Get into rax, inc rsi
   352 000006E6 6629D8              <1>     sub ax, bx      ;bx preserved, contains number of KB's plus 1
   353 000006E9 48C1C820            <1>     ror rax, 20h    ;Rotate over 32 bits
   354 000006ED 6629D8              <1>     sub ax, bx
   355 000006F0 48C1C820            <1>     ror rax, 20h    ;Rotate over 32 bits again
   356 000006F4 48AB                <1>     stosq            ;Save, inc rdi
   357 000006F6 48BF-               <1>     mov rdi, srData1    ;Save word for ah=88h
   357 000006F8 [DE01000000000000]  <1>
   358 00000700 66A5                <1>     movsw    ;Save value, then reduce by BIOS size
   359 00000702 66295FFE            <1>     sub word [rdi - 2], bx    ;Reduce the size of the previous stored val
   360 00000706 48BF-               <1>     mov rdi, convRAM    ;Int 12h value
   360 00000708 [CB01000000000000]  <1>
   361 00000710 66A5                <1>     movsw
   362                              <1> ;Copy VGA fonts to Internal Int 30h area
   363 00000712 48BF-               <1>     mov rdi, scr_vga_ptrs
   363 00000714 [6801000000000000]  <1>
   364 0000071C 48B908000000000000- <1>     mov rcx, 8
   364 00000725 00                  <1>
   365 00000726 F348A5              <1>     rep movsq
   366                              <1> ;-----------------Write Long Mode Page Tables-----------------
   367                              <1> ;Creates a 4Gb ID mapped page 
   368 00000729 48BF-               <1>     mov rdi, BIOSPageTbl
   368 0000072B [0010000000000000]  <1>
   369 00000733 57                  <1>     push rdi
   370                              <1> Ptablefinal:
   371 00000734 48B9000C0000000000- <1>     mov rcx, 6000h/8;6000h bytes (6x4Kb) of zero to clear table area
   371 0000073D 00                  <1>
   372 0000073E 57                  <1>     push rdi
   373 0000073F 4831C0              <1>     xor rax, rax
   374 00000742 F348AB              <1>     rep stosq        ;Clear the space
   375                              <1> 
   376 00000745 5F                  <1>     pop rdi            ;Return zero to the head of the table, at 08000h
   377 00000746 4889F8              <1>     mov rax, rdi    ;Load rax with the PML4 table location
   378 00000749 480500100000        <1>     add rax, 1000h  ;Move rax to point to PDPT
   379 0000074F 480D03000000        <1>     or rax, permissionflags    ;Write the PDPT entry as present and r/w
   380 00000755 48AB                <1>     stosq    ;store the low word of the address
   381 00000757 4881C7F80F0000      <1>     add rdi, 0FF8h
   382 0000075E B904000000          <1>     mov ecx, 4
   383                              <1> .utables:
   384 00000763 480500100000        <1>     add rax, 1000h  ;Write four entries in PDPT for each GB range
   385 00000769 48AB                <1>     stosq
   386 0000076B FFC9                <1>     dec ecx
   387 0000076D 75F4                <1>     jnz .utables
   388                              <1> 
   389 0000076F 4881C7E00F0000      <1>     add rdi, 0FE0h  ;rdi points to the new page tables, copy!
   390 00000776 48BE00A00000000000- <1>     mov rsi, 0A000h ;Get the first Page table
   390 0000077F 00                  <1>
   391 00000780 B900080000          <1>     mov ecx, 4000h/8 ;Number of bytes to copy 
   392 00000785 F348A5              <1>     rep movsq       ;Get the 4Gb tables into place
   393 00000788 5F                  <1>     pop rdi            ;Bring back Table base
   394 00000789 0F22DF              <1>     mov cr3, rdi    ;Finalise change in paging address
   395                              <1> 
   396                              <1> ;----------------------Write Interrupts----------------------
   397 0000078C 48B900010000000000- <1>     mov rcx, 0100h    ;256 entries
   397 00000795 00                  <1>
   398 00000796 48B8-               <1>     mov rax, dummy_return_64
   398 00000798 [9C57000000000000]  <1>
   399 000007A0 BB08000000          <1>     mov ebx, codedescriptor
   400 000007A5 31F6                <1>     xor esi, esi
   401 000007A7 66BA008F            <1>     mov dx, 8F00h    
   402                              <1>     ;Toggle attribs. 8F = Interrupt Present, accessable from ring 0 and greater,
   403                              <1>     ;0 (so collectively 08h) and gate type 0Fh (64-bit trap gate (gate which 
   404                              <1>     ;leaves interrupts on))
   405                              <1> idtFillDummy:
   406 000007AB E8(CB000000)        <1>     call idtWriteEntry
   407 000007B0 66FFC9              <1>     dec cx
   408 000007B3 75F6                <1>     jnz idtFillDummy
   409                              <1> 
   410 000007B5 31F6                <1>     xor esi, esi
   411 000007B7 48B940000000000000- <1>     mov rcx, ((IDT_TABLE_Length >> 3))
   411 000007C0 00                  <1>
   412 000007C1 48BD-               <1>     mov rbp, IDT_TABLE
   412 000007C3 [BF18000000000000]  <1>
   413                              <1> idtLoop:
   414 000007CB 488B44F500          <1>     mov rax, qword [rbp+(rsi*8)]
   415 000007D0 E8(CB000000)        <1>     call idtWriteEntry
   416 000007D5 48FFC9              <1>     dec rcx
   417 000007D8 75F1                <1>     jnz idtLoop
   418                              <1> 
   419 000007DA 48BC00000800000000- <1>     mov rsp, 80000h    ;Realign stack pointer
   419 000007E3 00                  <1>
   420                              <1> ;Reload the interrupt table
   421 000007E4 0F011C25[02000000]  <1>     lidt [IDTpointer]
   422                              <1> ;Write GDT to its final High location
   423 000007EC 48BE-               <1>     mov rsi, GDT
   423 000007EE [C402000000000000]  <1>
   424 000007F6 48BF-               <1>     mov rdi, BIOSGDTable
   424 000007F8 [0070000000000000]  <1>
   425 00000800 48B903000000000000- <1>     mov rcx, 3
   425 00000809 00                  <1>
   426 0000080A F348A5              <1>     rep movsq    ;copy the three descriptors high
   427                              <1> ;Reload the GDT Pointer
   428 0000080D 0F011425[0E000000]  <1>     lgdt [GDTpointer]
   429                              <1> 
   430                              <1> ;Video Initialisation: VGA mode, CRTC at 3D4h, Mode 03h, 128k VRAM
   431                              <1> ;For now, only unlock upper WO CRTC registers, by using undocumented 
   432                              <1> ; CRTC register 11h.
   433 00000815 668B1425[5A010000]  <1>     mov dx, word [scr_crtc_base]    ;Get current set CRTC index register
   434 0000081D B011                <1>     mov al, 11h     ;Register 11
   435 0000081F 88D8                <1>     mov al, bl
   436 00000821 EE                  <1>     out dx, al
   437 00000822 E680                <1>     out waitp, al   ;Wait an I/O cycle
   438 00000824 66FFC2              <1>     inc dx  ;Point to data register
   439 00000827 EC                  <1>     in al, dx   ;get register 11h
   440 00000828 247F                <1>     and al, 7Fh ;Clear upper bit
   441 0000082A 86C3                <1>     xchg al, bl ;Get address back into al, save new register value in bl  
   442 0000082C 66FFCA              <1>     dec dx  ;Return to index
   443 0000082F EE                  <1>     out dx, al
   444 00000830 FEC2                <1>     inc dl
   445 00000832 86C3                <1>     xchg al, bl
   446 00000834 EE                  <1>     out dx, al  ;Output new byte, unlock upper WO CRTC registers for use!
   447                              <1> ;Boot message/Verification of successful VGA card reset!
   448                              <1> ;Print Boot Message
   449 00000835 66B80413            <1>     mov ax, 1304h
   450 00000839 48BD-               <1>     mov rbp, startboot
   450 0000083B [F915000000000000]  <1>
   451 00000843 CD30                <1>     int 30h
   452                              <1> 
   453 00000845 E8A30E0000          <1>     call memprint    ;Print Memory status
   454                              <1> 
   455                              <1> ;----------------------------------------------------------------
   456                              <1> ;                        End of Initialisation                  :
   457                              <1> ;----------------------------------------------------------------
    53                                  %include "./Source/Init/Hardware/PIC/picinit.asm"
    54                              <1> ;----------------------------------------------------------------
    55                              <1> ;                PIC Initialisation procedure                   :
    56                              <1> ;----------------------------------------------------------------
    57                              <1> ;Remapping the IO ports to Interrupt 0x40
    58                              <1> PICremap:
    59 0000084A B011                <1>     mov al, 11h        ;bit 10h and 1h = Start initialisation
    60 0000084C E620                <1>     out pic1command, al
    61 0000084E E680                <1>     out waitp, al    
    62 00000850 E6A0                <1>     out pic2command, al
    63 00000852 E680                <1>     out waitp, al    
    64                              <1>     
    65 00000854 B020                <1>     mov al, 20h       ;PIC1 to take Int 20h - 27h
    66 00000856 E621                <1>     out pic1data, al
    67 00000858 E680                <1>     out waitp, al    
    68 0000085A 0408                <1>     add al, 8        ;PIC2 to take Int 28h - 2Fh
    69 0000085C E6A1                <1>     out pic2data, al 
    70 0000085E E680                <1>     out waitp, al    
    71                              <1>     
    72 00000860 B004                <1>     mov al, 4
    73 00000862 E621                <1>     out pic1data, al    ;Tell PIC 1 that there is a PIC 2 at IRQ2 (00000100)
    74 00000864 E680                <1>     out waitp, al    
    75 00000866 FEC8                <1>     dec al
    76 00000868 FEC8                <1>     dec al
    77 0000086A E6A1                <1>     out pic2data, al    ;Tell PIC 2 its cascade identity (00000010)
    78 0000086C E680                <1>     out waitp, al
    79                              <1>     
    80 0000086E B001                <1>     mov al, 01h        ;Initialise in 8086 mode
    81 00000870 E621                <1>     out pic1data, al
    82 00000872 E680                <1>     out waitp, al    
    83 00000874 E6A1                <1>     out pic2data, al
    84 00000876 E680                <1>     out waitp, al    
    85                              <1>     
    86 00000878 B0FF                <1>     mov al, 0FFh    ;Mask all interrupts 
    87 0000087A E621                <1>     out pic1data, al
    88 0000087C E6A1                <1>     out pic2data, al
    89                              <1> 
    90                              <1> ;Ensure that interrupts are still masked
    91                              <1> ;----------------------------------------------------------------
    92                              <1> ;                        End of Initialisation                  :
    93                              <1> ;----------------------------------------------------------------
    54                                  %include "./Source/Init/Hardware/PCI/init.asm"
    55                              <1> ;----------------------------------------------------------------
    56                              <1> ;                            PCI Enumeration                    :
    57                              <1> ;----------------------------------------------------------------
    58                              <1> ; This proc enumerates only the PCI devices we care for
    59                              <1> ;----------------------------------------------------------------
    60 0000087E 4831ED              <1>     xor rbp, rbp
    61 00000881 66892C2500E00000    <1>     mov word [lousbtablesize], bp
    62 00000889 4889E9              <1>     mov rcx, rbp    ;reset cx now too, for below
    63                              <1> pci_scan:    ;Enumerate PCI devices (formerly, USB devices)
    64 0000088C 4831DB              <1>     xor rbx, rbx       ;Used to save the value of eax temporarily
    65 0000088F 48B808000081000000- <1>     mov rax, 81000008h ;Set bit 31 and lower byte to 2, for register 2/offset 8
    65 00000898 00                  <1>
    66                              <1>                        ;also make it the largest register so that we enumerate 
    67                              <1>                        ;backwards and set up USB controllers in order from 
    68                              <1>                        ;newest to oldest.
    69                              <1> .u1:
    70 00000899 2D00010000          <1>     sub eax, 100h      ;mov eax into valid PCI range, go to next device
    71 0000089E 66BAF80C            <1>     mov dx, pci_index  ;PCI index register
    72 000008A2 EF                  <1>     out dx, eax   ;output the next packed bus,device,function,register combo
    73                              <1> 
    74 000008A3 89C3                <1>     mov ebx, eax       ;save to be used later, to access PCI BARS
    75                              <1>     
    76 000008A5 66BAFC0C            <1>     mov dx, pci_data   ;PCI data register
    77 000008A9 ED                  <1>     in eax, dx    ;Get Class, subclass and interface value in upper three bytes
    78                              <1>     
    79 000008AA C1E808              <1>     shr eax, 8                ;shift down the details by a byte
    80                              <1> ;IF any of these are satisfied, remember ebx has the device index
    81 000008AD 3D00030C00          <1>     cmp eax, ((usb_class << 16) +(usb_subclass << 8)+uhci_interface)
    82 000008B2 0F844B010000        <1>     je .uhci_found
    83 000008B8 3D10030C00          <1>     cmp eax, ((usb_class << 16) +(usb_subclass << 8)+ohci_interface)
    84 000008BD 0F8482010000        <1>     je .ohci_found
    85 000008C3 3D20030C00          <1>     cmp eax, ((usb_class << 16) +(usb_subclass << 8)+ehci_interface)
    86 000008C8 0F8481010000        <1>     je .ehci_found
    87 000008CE 3D30030C00          <1>     cmp eax, ((usb_class << 16) +(usb_subclass << 8)+xhci_interface)
    88 000008D3 0F84D5010000        <1>     je .xhci_found
    89 000008D9 50                  <1>     push rax
    90 000008DA C1E808              <1>     shr eax, 8              ;roll over rid of function number
    91 000008DD 3D01010000          <1>     cmp eax, (msd_class << 8) + (ide_subclass)
    92 000008E2 7452                <1>     je .idePCIEnum
    93 000008E4 3D06010000          <1>     cmp eax, (msd_class << 8) + (sata_subclass)
    94 000008E9 7414                <1>     je .sataPCIEnum
    95 000008EB 58                  <1>     pop rax
    96                              <1> .u11:    ;After a device found, jump here to continue enumeration
    97 000008EC 6681E50F00          <1>     and bp, 000Fh       ;Zero the upper nybble again.
    98 000008F1 89D8                <1>     mov eax, ebx        ;Return pci value into eax
    99 000008F3 3D08000080          <1>     cmp eax, 80000008h  ;The lowest value
   100 000008F8 7F9F                <1>     jg .u1
   101 000008FA E9AE040000          <1>     jmp pciExit
   102                              <1> .sataPCIEnum:
   103 000008FF 58                  <1>     pop rax
   104 00000900 50                  <1>     push rax
   105 00000901 55                  <1>     push rbp
   106 00000902 66B80413            <1>     mov ax, 1304h
   107 00000906 48BD-               <1>     mov rbp, .spemsg
   107 00000908 [1909000000000000]  <1>
   108 00000910 CD30                <1>     int 30h
   109 00000912 5D                  <1>     pop rbp
   110 00000913 58                  <1>     pop rax
   111 00000914 E9D3FFFFFF          <1>     jmp .u11
   112 00000919 0A0D41484349205341- <1> .spemsg: db 0Ah, 0Dh, "AHCI SATA controller found", 0
   112 00000922 544120636F6E74726F- <1>
   112 0000092B 6C6C657220666F756E- <1>
   112 00000934 6400                <1>
   113                              <1> .idePCIEnum:
   114 00000936 58                  <1>     pop rax
   115 00000937 50                  <1>     push rax
   116 00000938 55                  <1>     push rbp
   117 00000939 66B80413            <1>     mov ax, 1304h
   118 0000093D 48BD-               <1>     mov rbp, .ipemsg
   118 0000093F [B109000000000000]  <1>
   119 00000947 CD30                <1>     int 30h
   120 00000949 5D                  <1>     pop rbp
   121 0000094A 58                  <1>     pop rax
   122 0000094B 50                  <1>     push rax
   123 0000094C B404                <1>     mov ah, 04h
   124 0000094E CD30                <1>     int 30h
   125 00000950 58                  <1>     pop rax
   126                              <1> ;If function is 80h, then it will respond to default IO addresses
   127 00000951 A880                <1>     test al, 80h ;Check if bus mastery is enabled. Only support DMA transfers
   128 00000953 7497                <1>     jz .u11      ;Exit if not enabled
   129 00000955 3C80                <1>     cmp al, 80h  ;If 80h, device hardwired bus master legacy mode, all good.
   130 00000957 742B                <1>     je .ipeWriteTable
   131                              <1> ;Bit bash, and reread, if it works, yay, if not, fail cancel
   132 00000959 66BAF80C            <1>     mov dx, pci_index
   133 0000095D 89D8                <1>     mov eax, ebx
   134 0000095F EF                  <1>     out dx, eax     ;Register offset 8
   135 00000960 6681C20400          <1>     add dx, 4       ;Point to pci_data
   136 00000965 25FFFAFFFF          <1>     and eax, 0FFFFFAFFh     ;Zero bits 0 and 2 of nybble 3
   137 0000096A EF                  <1>     out dx, eax
   138 0000096B 6681EA0400          <1>     sub dx, 4
   139 00000970 89D8                <1>     mov eax, ebx
   140 00000972 EF                  <1>     out dx, eax
   141 00000973 6681C20400          <1>     add dx, 4
   142 00000978 ED                  <1>     in eax, dx
   143 00000979 A900050000          <1>     test eax, 00000500h  ;Test bits 0 and 2 of nybble 3 have been zeroed
   144 0000097E 0F8568FFFFFF        <1>     jnz .u11    ;IF not, fail
   145                              <1> .ipeWriteTable:
   146                              <1> ;Now the controller and devices have been set to legacy, they should
   147                              <1> ; respond to the default IO addresses and IRQ. Save BAR 5 for Bus mastering.
   148 00000984 50                  <1>     push rax
   149 00000985 55                  <1>     push rbp
   150 00000986 48BD-               <1>     mov rbp, .ipemsg2
   150 00000988 [D409000000000000]  <1>
   151 00000990 66B80413            <1>     mov ax, 1304h
   152 00000994 CD30                <1>     int 30h
   153 00000996 5D                  <1>     pop rbp
   154 00000997 58                  <1>     pop rax
   155 00000998 89D8                <1>     mov eax, ebx    
   156 0000099A B020                <1>     mov al, 20h ;BAR4 Address
   157 0000099C 66BAF80C            <1>     mov dx, pci_index
   158 000009A0 EF                  <1>     out dx, eax
   159 000009A1 6681C20400          <1>     add dx, 4
   160 000009A6 ED                  <1>     in eax, dx  ;Get BAR 4 address
   161 000009A7 E8B5080000          <1>     call IDE.addControllerTable ;Function will not add if we maxed out controllers
   162 000009AC E93BFFFFFF          <1>     jmp .u11
   163 000009B1 0A0D49444520415441- <1> .ipemsg:    db 0Ah, 0Dh,"IDE ATA Controller found. Type: ", 0
   163 000009BA 20436F6E74726F6C6C- <1>
   163 000009C3 657220666F756E642E- <1>
   163 000009CC 20547970653A2000    <1>
   164 000009D4 0A0D49444520415441- <1> .ipemsg2:   db 0Ah, 0Dh, "IDE ATA Controller set to compatibility mode",0
   164 000009DD 20436F6E74726F6C6C- <1>
   164 000009E6 65722073657420746F- <1>
   164 000009EF 20636F6D7061746962- <1>
   164 000009F8 696C697479206D6F64- <1>
   164 00000A01 6500                <1>
   165                              <1> ;bp lo = status register, 
   166                              <1> ;bp hi = controller being serviced (ie 1000xxxx => xHCI being serviced)
   167                              <1> .uhci_found:
   168 00000A03 6681CD1100          <1>     or bp, 00010001b    ;set bit 0/mask = 1
   169 00000A08 55                  <1>     push rbp
   170 00000A09 50                  <1>     push rax
   171 00000A0A 53                  <1>     push rbx
   172 00000A0B 66B80413            <1>     mov ax, 1304h
   173 00000A0F 30FF                <1>     xor bh, bh
   174 00000A11 48BD-               <1>     mov rbp, .uhci_succ
   174 00000A13 [250A000000000000]  <1>
   175 00000A1B CD30                <1>     int 30h
   176 00000A1D 5B                  <1>     pop rbx
   177 00000A1E 58                  <1>     pop rax
   178 00000A1F 5D                  <1>     pop rbp
   179 00000A20 E9A6000000          <1>     jmp .controlController
   180 00000A25 0A0D5548434920636F- <1> .uhci_succ:    db    0Ah, 0Dh,'UHCI controller found on IRQ ', 0
   180 00000A2E 6E74726F6C6C657220- <1>
   180 00000A37 666F756E64206F6E20- <1>
   180 00000A40 4952512000          <1>
   181                              <1> .ohci_found:
   182 00000A45 6681CD2200          <1>     or bp, 00100010b    ;set bit 1/mask = 2
   183 00000A4A E99DFEFFFF          <1>     jmp .u11
   184                              <1> .ehci_found:
   185 00000A4F 6681CD4400          <1>     or bp, 01000100b    ;set bit 2/mask = 4
   186 00000A54 55                  <1>     push rbp
   187 00000A55 50                  <1>     push rax
   188 00000A56 53                  <1>     push rbx
   189 00000A57 66B80413            <1>     mov ax, 1304h
   190 00000A5B 30FF                <1>     xor bh, bh
   191 00000A5D 48BD-               <1>     mov rbp, .ehci_succ
   191 00000A5F [6E0A000000000000]  <1>
   192 00000A67 CD30                <1>     int 30h
   193 00000A69 5B                  <1>     pop rbx
   194 00000A6A 58                  <1>     pop rax
   195 00000A6B 5D                  <1>     pop rbp
   196 00000A6C EB5D                <1>     jmp short .controlController
   197 00000A6E 0A0D4548434920636F- <1> .ehci_succ:    db    0Ah, 0Dh,'EHCI controller found on IRQ ', 0
   197 00000A77 6E74726F6C6C657220- <1>
   197 00000A80 666F756E64206F6E20- <1>
   197 00000A89 4952512000          <1>
   198 00000A8E 0A0D7848434920636F- <1> .xhci_succ:    db    0Ah, 0Dh,'xHCI controller found on IRQ ', 0
   198 00000A97 6E74726F6C6C657220- <1>
   198 00000AA0 666F756E64206F6E20- <1>
   198 00000AA9 4952512000          <1>
   199                              <1> .xhci_found:
   200 00000AAE 55                  <1>     push rbp
   201 00000AAF 50                  <1>     push rax
   202 00000AB0 53                  <1>     push rbx
   203 00000AB1 66B80413            <1>     mov ax, 1304h
   204 00000AB5 30FF                <1>     xor bh, bh
   205 00000AB7 48BD-               <1>     mov rbp, .xhci_succ
   205 00000AB9 [8E0A000000000000]  <1>
   206 00000AC1 CD30                <1>     int 30h
   207 00000AC3 5B                  <1>     pop rbx
   208 00000AC4 58                  <1>     pop rax
   209 00000AC5 5D                  <1>     pop rbp
   210 00000AC6 6681CD8800          <1>     or bp, 10001000b    ;set bit 3/mask = 8
   211                              <1> 
   212                              <1> .controlController:
   213                              <1> ;This for now will get the IRQ line for all controllers,
   214                              <1> ;and install a USB handler there, then disabling the HC rather than just the 
   215                              <1> ;legacy support.
   216                              <1> ;EAX doesnt need to be saved since the first instruction of .u11 is to move the 
   217                              <1> ;value of ebx back into eax.
   218                              <1> ;EDX doesnt need to be saved since the port data gets loaded in the proc above
   219                              <1> ;DO NOT MODIFY EBX
   220 00000ACB 31D2                <1>     xor edx, edx
   221 00000ACD 89D8                <1>     mov eax, ebx    ;Move a copy of ebx, the PCI config space device address
   222 00000ACF B03C                <1>     mov al, 3Ch     ;offset 3C has interrupt masks in lower word
   223 00000AD1 66BAF80C            <1>     mov dx, pci_index
   224 00000AD5 EF                  <1>     out dx, eax       ;set to give interrupt masks
   225 00000AD6 66BAFC0C            <1>     mov dx, pci_data
   226 00000ADA ED                  <1>     in eax, dx        ;Get info into eax (formally, al)
   227 00000ADB 50                  <1>     push rax
   228 00000ADC 240F                <1>     and al, 0Fh
   229 00000ADE B404                <1>     mov ah, 04h
   230 00000AE0 CD30                <1>     int 30h
   231 00000AE2 58                  <1>     pop rax
   232 00000AE3 66F7C54000          <1>     test bp, 40h      ;Check if EHCI
   233 00000AE8 0F8490000000        <1>     jz .cc1           ;Skip mapping
   234 00000AEE 240F                <1>     and al, 0Fh       ;Clear upper nybble for good measure
   235 00000AF0 3C10                <1>     cmp al, 10h
   236 00000AF2 0F8786000000        <1>     ja .cc1           ;Cant map it
   237 00000AF8 3C08                <1>     cmp al, 08h        
   238 00000AFA 733E                <1>     jae .cc0
   239 00000AFC 56                  <1>     push rsi
   240 00000AFD 52                  <1>     push rdx
   241 00000AFE 50                  <1>     push rax
   242 00000AFF 53                  <1>     push rbx
   243 00000B00 480FB6F0            <1>     movzx rsi, al
   244 00000B04 81C620000000        <1>     add esi, 20h
   245 00000B0A 66BA008F            <1>     mov dx, 8F00h
   246 00000B0E 48B8-               <1>     mov rax, ehci_IRQ.pic1    ;PIC1 ep
   246 00000B10 [010B000000000000]  <1>
   247 00000B18 BB08000000          <1>     mov ebx, codedescriptor
   248 00000B1D E8(CB000000)        <1>     call idtWriteEntry
   249 00000B22 5B                  <1>     pop rbx
   250 00000B23 58                  <1>     pop rax
   251 00000B24 5A                  <1>     pop rdx
   252 00000B25 5E                  <1>     pop rsi
   253 00000B26 51                  <1>     push rcx
   254 00000B27 88C1                <1>     mov cl, al
   255 00000B29 B001                <1>     mov al, 1
   256 00000B2B D2E0                <1>     shl al, cl          ;Shift bit to appropriate position
   257 00000B2D F6D0                <1>     not al              ;Turn into a bitmask
   258 00000B2F 88C4                <1>     mov ah, al          ;Save in ah
   259 00000B31 E421                <1>     in al, pic1data
   260 00000B33 20E0                <1>     and al, ah          ;Add bitmask to current mask
   261 00000B35 E621                <1>     out pic1data, al    ;Unmask this line
   262 00000B37 59                  <1>     pop rcx
   263 00000B38 EB44                <1>     jmp short .cc1
   264                              <1> .cc0:
   265 00000B3A 56                  <1>     push rsi
   266 00000B3B 52                  <1>     push rdx
   267 00000B3C 50                  <1>     push rax
   268 00000B3D 53                  <1>     push rbx
   269 00000B3E 480FB6F0            <1>     movzx rsi, al
   270 00000B42 81C620000000        <1>     add esi, 20h    ;Start of PIC range
   271 00000B48 66BA008F            <1>     mov dx, 8F00h
   272 00000B4C 48B8-               <1>     mov rax, ehci_IRQ
   272 00000B4E [FA0A000000000000]  <1>
   273 00000B56 BB08000000          <1>     mov ebx, codedescriptor
   274 00000B5B E8(CB000000)        <1>     call idtWriteEntry
   275 00000B60 5B                  <1>     pop rbx
   276 00000B61 58                  <1>     pop rax
   277 00000B62 5A                  <1>     pop rdx
   278 00000B63 5E                  <1>     pop rsi
   279 00000B64 51                  <1>     push rcx
   280 00000B65 2C08                <1>     sub al, 8
   281 00000B67 88C1                <1>     mov cl, al
   282 00000B69 E421                <1>     in al, pic1data
   283 00000B6B 24FB                <1>     and al, 0FBh  ;Clear Cascade bit
   284 00000B6D E621                <1>     out pic1data, al
   285 00000B6F B001                <1>     mov al, 1
   286 00000B71 D2E0                <1>     shl al, cl    ;Shift bit to appropriate position
   287 00000B73 F6D0                <1>     not al        ;Turn into a bitmask
   288 00000B75 88C4                <1>     mov ah, al    ;Save in ah
   289 00000B77 E4A1                <1>     in al, pic2data
   290 00000B79 20E0                <1>     and al, ah    ;Add bitmask to current mask
   291 00000B7B E6A1                <1>     out pic2data, al    ;Unmask this line
   292 00000B7D 59                  <1>     pop rcx
   293                              <1> .cc1:
   294 00000B7E 89D8                <1>     mov eax, ebx    ;Bring back a copy of ebx, the PCI config space addr to eax
   295 00000B80 B010                <1>     mov al, 10h     ;Change the register from Class code to BAR0
   296                              <1>     
   297 00000B82 66BAF80C            <1>     mov dx, pci_index
   298 00000B86 EF                  <1>     out dx, eax        ;Set to give BAR0
   299 00000B87 66BAFC0C            <1>     mov dx, pci_data
   300 00000B8B ED                  <1>     in eax, dx        ;get unrefined BAR0/BASE pointer into eax
   301                              <1> 
   302 00000B8C 2500FFFFFF          <1>     and eax, 0FFFFFF00h    ;refine eax into an mmio register
   303 00000B91 50                  <1>     push rax    ;push BASE pointer onto stack
   304                              <1> 
   305                              <1> ;Write USB controller table:
   306                              <1> ;Each table entry (tword), as follows:
   307                              <1> ;Offset:
   308                              <1> ; 00h - hci type (bp) [word]
   309                              <1> ; 02h - PCI address (ebx) [dword]
   310                              <1> ; 06h - MMIO address (eax) [dword]
   311                              <1> ;ALL REGISTERS PRESERVED, data stored at usbtablebase, size at usbtablesize
   312 00000B92 56                  <1>     push rsi
   313 00000B93 51                  <1>     push rcx
   314 00000B94 0FB70C2500E00000    <1>     movzx ecx, word [lousbtablesize]    ;get number of table entries
   315 00000B9C 89CE                <1>     mov esi, ecx
   316 00000B9E D1E1                <1>     shl ecx, 1    ;Multiply by 2
   317 00000BA0 678DB4F102E00000    <1>     lea esi, [8*esi + ecx + lousbtablebase] 
   318                              <1>     ;multiply esi by 10 to get table offset & add to table base
   319                              <1>     ;store table offset back in esi
   320 00000BA8 6667892E            <1>     mov word [esi], bp    ;Store controller type
   321 00000BAC 81C602000000        <1>     add esi, 2
   322 00000BB2 67891E              <1>     mov dword [esi], ebx    
   323                              <1>         ;Store PCI device config space address (set to register 2)
   324 00000BB5 81C604000000        <1>     add esi, 4
   325 00000BBB 678906              <1>     mov dword [esi], eax    ;Store device MMIO Address (refined BAR0 value)
   326 00000BBE 59                  <1>     pop rcx
   327 00000BBF 5E                  <1>     pop rsi
   328 00000BC0 66FF042500E00000    <1>     inc word [lousbtablesize]
   329                              <1> 
   330 00000BC8 6681FD8000          <1>     cmp bp, 80h    ;Are we servicing xHCI, EHCI or UHCI?
   331 00000BCD 7D7A                <1>     jge .controlxHCI
   332 00000BCF 6681FD4000          <1>     cmp bp, 40h    ;Are we servicing EHCI or UHCI? 
   333 00000BD4 0F8DC9000000        <1>     jge .controlEHCI
   334                              <1> ;If neither of these, collapse into UHCI
   335                              <1> .controlUHCI:
   336                              <1> ;eax points to the refined base pointer
   337 00000BDA 53                  <1>     push rbx                    ;temp stack save 
   338 00000BDB 89D8                <1>     mov eax, ebx     ;get the current packed bus,device,function,register combo
   339 00000BDD 2500F8FFFF          <1>     and eax, 0FFFFF800h         ;Clear bottom 10 bytes.
   340 00000BE2 0DC0020000          <1>     or eax, 2C0h                ;Function 2, register offset C0h
   341                              <1> 
   342 00000BE7 50                  <1>     push rax                    ;temp save address value on stack
   343                              <1> 
   344 00000BE8 66BAF80C            <1>     mov dx, pci_index
   345 00000BEC EF                  <1>     out dx, eax
   346 00000BED 80C204              <1>     add dl, 4                   ;dx now points to pci_index
   347 00000BF0 ED                  <1>     in eax, dx                  ;Bring register value into eax
   348                              <1> 
   349 00000BF1 66B8008F            <1>     mov ax, 8F00h               ;Clear all SMI bits (no SMI pls)
   350 00000BF5 89C3                <1>     mov ebx, eax                ;save temporarily in ebx
   351                              <1> 
   352 00000BF7 58                  <1>     pop rax                     ;bring back address value from stack
   353                              <1> 
   354 00000BF8 80EA04              <1>     sub dl, 4                   ;put dx back to pci_index
   355 00000BFB EF                  <1>     out dx, eax                 ;select legsup register
   356                              <1> 
   357 00000BFC 80C204              <1>     add dl, 4                   ;aim dx back to pci_data
   358 00000BFF 89D8                <1>     mov eax, ebx                ;bring back new legsup value
   359 00000C01 EF                  <1>     out dx, eax                 ;send it back!
   360                              <1> 
   361                              <1> ;Now set bit 6 of the command register to 1 (semaphore)
   362 00000C02 5B                  <1>     pop rbx                     ;Return original ebx value
   363 00000C03 89D8                <1>     mov eax, ebx  ;Move a copy of ebx, PCI config space device address (index)
   364 00000C05 B020                <1>     mov al, 20h                 ;Change the register from Class code to BAR4 
   365 00000C07 6681EA0400          <1>     sub dx, 4                   ;Point dx back to pci_index
   366 00000C0C EF                  <1>     out dx, eax                 ;Get the data we want!
   367 00000C0D 6681C20400          <1>     add dx, 4
   368 00000C12 ED                  <1>     in eax, dx              ;Bring the value of BAR4 into eax, to add to BASE
   369 00000C13 25FCFFFFFF          <1>     and eax, 0FFFFFFFCh         ;Refine the IO address that we got
   370 00000C18 6689C2              <1>     mov dx, ax                  ;Mov the base IO address into dx
   371                              <1> ;dx contains the base io address!
   372 00000C1B 66B80200            <1>     mov ax, 0002h               ;Reset the HC
   373 00000C1F 66EF                <1>     out dx, ax
   374 00000C21 51                  <1>     push rcx
   375                              <1> .cu0:
   376 00000C22 4831C9              <1>     xor rcx, rcx
   377 00000C25 FEC9                <1>     dec cl
   378                              <1> .cu1:
   379 00000C27 E2FE                <1>     loop .cu1    ;wait
   380                              <1> 
   381 00000C29 66ED                <1>     in ax, dx    ;Bring value in
   382 00000C2B 66250200            <1>     and ax, 0002h
   383 00000C2F 75F1                <1>     jnz .cu0     ;Reset still in progress, loop again
   384 00000C31 59                  <1>     pop rcx
   385                              <1> 
   386 00000C32 6631C0              <1>     xor ax, ax
   387 00000C35 6681C20400          <1>     add dx, 4   ;point to USBINTR
   388 00000C3A 66EF                <1>     out dx, ax
   389 00000C3C 6681EA0400          <1>     sub dx, 4   ;return to cmd
   390 00000C41 66EF                <1>     out dx, ax  ;zero everything.
   391                              <1> 
   392 00000C43 58                  <1>     pop rax     ;Get BASE (dereferenced BAR0) value back (stack align)
   393 00000C44 E9A3FCFFFF          <1>     jmp .u11                     ;return
   394                              <1> ;End UHCI
   395                              <1> 
   396                              <1> .controlxHCI:
   397                              <1> ;mov HCCPARAMS1 into edx, eax contains BASE pointer from BAR0 (offset 10h for 
   398                              <1> ; register)
   399 00000C49 678B5010            <1>     mov edx, dword [eax + 10h]    
   400 00000C4D 81E20000FFFF        <1>     and edx, 0FFFF0000h
   401                              <1> ;mov hi word into lo word and shl by 2 to adjust that we are in units of DWORDS
   402 00000C53 C1EA0E              <1>     shr edx, 0Eh            
   403 00000C56 01D0                <1>     add eax, edx            ;add offset from base onto base
   404                              <1>                             ;eax now pointing at USBLEGSUP
   405                              <1> .suohoc0: 
   406 00000C58 678B10              <1>     mov edx, dword [eax]    ;store upper byte of USBLEGSUP into dl
   407 00000C5B 81CA00000001        <1>     or edx, (1<<24)         ;Set the HCOSSEM Semaphore
   408 00000C61 678910              <1>     mov dword [eax], edx    ;replace the upper byte with HCOSSEM set
   409                              <1> 
   410 00000C64 51                  <1>     push rcx                ;push poll counter
   411 00000C65 4831C9              <1>     xor rcx, rcx            
   412                              <1> .suohoc1:    ;Remove control from BIOS and check for confirmation
   413 00000C68 66FFC9              <1>     dec cx                  ;drop counter by one
   414 00000C6B 0F84DE000000        <1>     jz .weirdEHCI1          ;temporary label
   415 00000C71 F390                <1>     pause                   ;wait
   416 00000C73 678B10              <1>     mov edx, dword [eax]    ;Check if owned by BIOS
   417 00000C76 81E200000100        <1>     and edx, (1<<16)
   418 00000C7C 75EA                <1>     jnz .suohoc1            ;not zero, keep polling
   419                              <1> 
   420 00000C7E 66B9FFFF            <1>     mov cx, 0FFFFh
   421                              <1> .suohoc2:    ;Check if control to OS has been given
   422 00000C82 66FFC9              <1>     dec cx
   423 00000C85 740D                <1>     jz .suohoc21            ;timeout, assume it has.
   424 00000C87 F390                <1>     pause                
   425 00000C89 678B10              <1>     mov edx, dword [eax]
   426 00000C8C 81E200000001        <1>     and edx, (1<<24)
   427 00000C92 74EE                <1>     jz .suohoc2             ;if zero, keep polling until bit set => owned by OS
   428                              <1> .suohoc21:    ;Check for legsup being present, assume for now.
   429 00000C94 59                  <1>     pop rcx                   ;return poll counter
   430                              <1> .suohoc3:
   431 00000C95 67C7400400000000    <1>     mov dword [eax + 4], 0    ;Set all SMI bytes to 0 so no SMIs will be set.
   432 00000C9D 58                  <1>     pop rax                   ;Bring back BAR0 into eax
   433 00000C9E E949FCFFFF          <1>     jmp .u11                  ;return
   434                              <1> 
   435                              <1> .controlEHCI:
   436 00000CA3 678B5008            <1>     mov edx, dword [eax + 8h]
   437 00000CA7 81E200FF0000        <1>     and edx, 0000FF00h
   438 00000CAD 66C1EA08            <1>     shr dx, 8
   439 00000CB1 81FA40000000        <1>     cmp edx, 40h        
   440 00000CB7 7C05                <1>     jl .ce0            ;No EECP pointer present, skip BIOS/OS EHCI handover
   441 00000CB9 E81B000000          <1>     call .ehcieecpsetup
   442                              <1> .ce0:
   443 00000CBE 31D2                <1>     xor edx, edx       ;clear edx
   444 00000CC0 58                  <1>     pop rax            ;Bring back refined base into eax
   445 00000CC1 678B10              <1>     mov edx, dword [eax]
   446 00000CC4 81E2FF000000        <1>     and edx, 000000FFh
   447 00000CCA 01D0                <1>     add eax, edx
   448 00000CCC 67816040FEFFFFFF    <1>     and dword [eax + 40h], 0FFFFFFFEh
   449                              <1>                             ;located at offset 40 of the opregs.
   450                              <1> 
   451 00000CD4 E913FCFFFF          <1>     jmp .u11                ;return
   452                              <1> .ehcieecpsetup:
   453                              <1> ;eax has hccparams
   454                              <1> ;ebx has pci register, to get class code
   455 00000CD9 50                  <1>     push rax
   456 00000CDA 52                  <1>     push rdx
   457 00000CDB 53                  <1>     push rbx
   458 00000CDC 51                  <1>     push rcx
   459 00000CDD 88D3                <1>     mov bl, dl       ;Move EECP pointer into low byte of PCI address
   460 00000CDF 89D8                <1>     mov eax, ebx     ;Move this address to eax
   461 00000CE1 66BAF80C            <1>     mov dx, pci_index
   462 00000CE5 EF                  <1>     out dx, eax      ;Return EHCI EECP register
   463 00000CE6 66BAFC0C            <1>     mov dx, pci_data
   464 00000CEA ED                  <1>     in eax, dx       ;Get this register into eax
   465 00000CEB 0D00000001          <1>     or eax, 1000000h ;Set bit 24, to tell bios to give up control!
   466 00000CF0 93                  <1>     xchg eax, ebx    ;Swap these two temporarily
   467 00000CF1 66BAF80C            <1>     mov dx, pci_index
   468 00000CF5 EF                  <1>     out dx, eax
   469 00000CF6 93                  <1>     xchg eax, ebx    ;Bring back out value to eax
   470 00000CF7 66BAFC0C            <1>     mov dx, pci_data
   471 00000CFB EF                  <1>     out dx, eax      ;Tell BIOS who is boss of the EHCI controller
   472                              <1>     
   473 00000CFC 4831C9              <1>     xor rcx, rcx
   474 00000CFF 89D8                <1>     mov eax, ebx     ;Get address back into eax
   475                              <1> .ees1:
   476 00000D01 66FFC9              <1>     dec cx
   477 00000D04 7449                <1>     jz .weirdEHCI1
   478 00000D06 E680                <1>     out waitp, al    ;Wait a bit, for device to process request
   479                              <1> 
   480 00000D08 66BAF80C            <1>     mov dx, pci_index
   481 00000D0C EF                  <1>     out dx, eax
   482 00000D0D 66BAFC0C            <1>     mov dx, pci_data
   483 00000D11 ED                  <1>     in eax, dx       ;Get word back into eax
   484 00000D12 2500000100          <1>     and eax, 10000h  ;BIOS should set this bit to zero
   485 00000D17 75E8                <1>     jnz .ees1        ;Not zero yet, try again!
   486                              <1> 
   487 00000D19 4831C9              <1>     xor rcx, rcx
   488 00000D1C 89D8                <1>     mov eax, ebx    ;Get address back into eax    
   489                              <1> .ees2:
   490 00000D1E 66FFC9              <1>     dec cx
   491 00000D21 742C                <1>     jz .weirdEHCI1
   492 00000D23 E680                <1>     out waitp, al    ;Wait a bit, for device to process request
   493                              <1> 
   494 00000D25 66BAF80C            <1>     mov dx, pci_index
   495 00000D29 EF                  <1>     out dx, eax
   496 00000D2A 66BAFC0C            <1>     mov dx, pci_data
   497 00000D2E ED                  <1>     in eax, dx        ;Get word back into eax
   498 00000D2F 2500000001          <1>     and eax, 1000000h    ;This should set this bit to one now (OS control)
   499 00000D34 74E8                <1>     jz .ees2        ;Not set yet, try again!
   500                              <1> ;Now we have control! :D Finally, now lets clear SMI bits
   501 00000D36 81C304000000        <1>     add ebx, 4h
   502 00000D3C 89D8                <1>     mov eax, ebx
   503 00000D3E 66BAF80C            <1>     mov dx, pci_index
   504 00000D42 EF                  <1>     out dx, eax
   505 00000D43 31C0                <1>     xor eax, eax
   506 00000D45 66BAFC0C            <1>     mov dx, pci_data
   507 00000D49 EF                  <1>     out dx, eax        ;NO MORE SMI INTERRUPTS
   508                              <1> 
   509 00000D4A 59                  <1>     pop rcx
   510 00000D4B 5B                  <1>     pop rbx
   511 00000D4C 5A                  <1>     pop rdx
   512 00000D4D 58                  <1>     pop rax
   513 00000D4E C3                  <1>     ret
   514                              <1> 
   515                              <1> .weirdEHCI1:
   516 00000D4F 48B804130000000000- <1>     mov rax, 1304h
   516 00000D58 00                  <1>
   517 00000D59 48BB07000000000000- <1>     mov rbx, 0007h
   517 00000D62 00                  <1>
   518 00000D63 48B931000000000000- <1>     mov rcx, failmsglen
   518 00000D6C 00                  <1>
   519 00000D6D 48BD-               <1>     mov rbp, .failmsg
   519 00000D6F [7C0D000000000000]  <1>
   520 00000D77 CD30                <1>     int 30h    ; write strng
   521 00000D79 F390                <1>     pause
   522 00000D7B F4                  <1>     hlt
   523 00000D7C 0A0D78484349206F72- <1> .failmsg: db 0Ah,0Dh,"xHCI or EHCI controller fail, halting system", 0Ah, 0Dh, 0
   523 00000D85 204548434920636F6E- <1>
   523 00000D8E 74726F6C6C65722066- <1>
   523 00000D97 61696C2C2068616C74- <1>
   523 00000DA0 696E67207379737465- <1>
   523 00000DA9 6D0A0D00            <1>
   524                              <1> failmsglen    equ    $ - .failmsg
   525                              <1> 
   526                              <1> pciExit:
   527                              <1> ;----------------------------------------------------------------
   528                              <1> ;                            End Proc                           :
   529                              <1> ;----------------------------------------------------------------
    55                                  %include "./Source/Init/Hardware/Timers/pitinit.asm"
    56                              <1> ;----------------------------------------------------------------
    57                              <1> ;                PIT Initialisation procedure                   :
    58                              <1> ;----------------------------------------------------------------
    59                              <1> PITreset:       ;Set Timer 0 to trigger every 55ms
    60 00000DAD B036                <1>     mov al, 36h    ;Set bitmap for frequency write to channel 0 of pit
    61 00000DAF E643                <1>     out PITcommand, al    ;43h = PIT command register
    62 00000DB1 668B0425[35010000]  <1>     mov ax, word [pit_divisor]
    63 00000DB9 E640                <1>     out PIT0, al    ;mov low byte into divisor register
    64 00000DBB 88E0                <1>     mov al, ah      ;bring hi byte into low byte
    65 00000DBD E640                <1>     out PIT0, al    ;mov hi byte into divisor register
    66                              <1> ;PIT unmasked below
    67                              <1> ;----------------------------------------------------------------
    68                              <1> ;                     End of Initialisation                     :
    69                              <1> ;----------------------------------------------------------------
    56                                  %include "./Source/Init/Hardware/Timers/rtcinit.asm"
    57                              <1> ;----------------------------------------------------------------
    58                              <1> ;                RTC Initialisation procedure                   :
    59                              <1> ;----------------------------------------------------------------
    60                              <1> rtc_init:
    61                              <1> ;Set tick rate to 1024Hz and ensure RTC doesnt generate IRQ8
    62 00000DBF 66B88A8A            <1>     mov ax, 8A8Ah    ;Status A register with NMI disable
    63 00000DC3 E670                <1>     out cmos_base, al
    64 00000DC5 E680                <1>     out waitp, al    ;Latch wait
    65 00000DC7 EB00                <1>     jmp short $+2
    66 00000DC9 B026                <1>     mov al, 00100110b ;32KHz timebase, 1024Hz square wave output
    67 00000DCB E671                <1>     out cmos_data, al
    68                              <1> ;Now ensure NO interrupts are cooked
    69 00000DCD FEC4                <1>     inc ah    ;ah=8Bh
    70 00000DCF 88E0                <1>     mov al, ah
    71 00000DD1 E670                <1>     out cmos_base, al
    72 00000DD3 E680                <1>     out waitp, al  ;Latch wait
    73 00000DD5 EB00                <1>     jmp short $+2
    74 00000DD7 B002                <1>     mov al, 02h    ;Zero all int bits, time: BCD, 24hr, Daylight saving off
    75 00000DD9 E671                <1>     out cmos_data, al
    76                              <1> ;Clear any cooked IRQs
    77 00000DDB FEC4                <1>     inc ah    ;ah=8Ch
    78 00000DDD 88E0                <1>     mov al, ah
    79 00000DDF E670                <1>     out cmos_base, al
    80 00000DE1 E680                <1>     out waitp, al    ;Latch wait
    81 00000DE3 EB00                <1>     jmp short $+2
    82 00000DE5 E471                <1>     in al, cmos_data
    83                              <1> ;Get final CMOS RAM status byte
    84 00000DE7 B00D                <1>     mov al, 0Dh     ;Status D register with NMI enable
    85 00000DE9 E670                <1>     out cmos_base, al
    86 00000DEB E680                <1>     out waitp, al    ;Latch wait
    87 00000DED EB00                <1>     jmp short $+2
    88 00000DEF E471                <1>     in al, cmos_data
    89                              <1> ;Unmask RTC and PIT here!
    90 00000DF1 E4A1                <1>     in al, pic2data    ;Get current state
    91 00000DF3 24FE                <1>     and al, 0FEh    ;Unmask RTC
    92 00000DF5 E6A1                <1>     out pic2data, al
    93 00000DF7 E421                <1>     in al, pic1data
    94 00000DF9 24FA                <1>     and al, 0FAh    ;Unmask PIT and Cascade
    95 00000DFB E621                <1>     out pic1data, al
    96 00000DFD FB                  <1>     sti             ;Enable maskable interrupts
    97                              <1> ;----------------------------------------------------------------
    98                              <1> ;                     End of Initialisation                     :
    99                              <1> ;----------------------------------------------------------------
    57                                  %include "./Source/Init/Hardware/Timers/beepOK.asm"
    58                              <1>     ;This is a short routine to just confirm 
    59                              <1>     ;that the timer initialisation worked fine
    60 00000DFE 48B9C8000000000000- <1>     mov rcx, 200    ;Beep for a 200ms
    60 00000E07 00                  <1>
    61 00000E08 BBA9040000          <1>     mov ebx, 04A9h  ;Frequency divisor for 1000Hz tone
    62 00000E0D 66B800C5            <1>     mov ax, 0C500h
    63 00000E11 CD35                <1>     int 35h
    58                                  %include "./Source/Init/Hardware/Serial/rs232ini.asm"
    59                              <1> ;----------------------------------------------------------------
    60                              <1> ;                Serial Port Initialisation procedure           :
    61                              <1> ;----------------------------------------------------------------
    62                              <1> ;Initial init procedure, check which ports exist and 
    63                              <1> ; write the address to Data area
    64 00000E13 66B85A5A            <1>     mov ax, 5A5Ah
    65 00000E17 4831C9              <1>     xor rcx, rcx
    66 00000E1A 48BD-               <1>     mov rbp, com_addresses
    66 00000E1C [6700000000000000]  <1>
    67                              <1> checkCOM:
    68 00000E24 668B9409[711D0000]  <1>     mov dx, word [serial_abt + rcx*2]    ;Multiplied by 2 for word offsets
    69 00000E2C 6681C20700          <1>     add dx, 7    ;Scratch register
    70 00000E31 EE                  <1>     out dx, al    ;Output
    71 00000E32 EB00                <1>     jmp short $ + 2
    72 00000E34 EC                  <1>     in al, dx    ;Read the value
    73 00000E35 38C4                <1>     cmp ah, al   ;Check if theyre the same 
    74 00000E37 7514                <1>     jne COMinitproceed ;Scratch register non-existant, IO registers not present
    75 00000E39 6681EA0700          <1>     sub dx, 7    ;point dx back to base
    76 00000E3E 66899409[67000000]  <1>     mov word [com_addresses + rcx*2], dx    ;Save dx into data area table
    77 00000E46 FEC1                <1>     inc cl
    78 00000E48 80F904              <1>     cmp cl, 4
    79 00000E4B 75D7                <1>     jne checkCOM    ;Keep looping
    80                              <1> COMinitproceed:
    81                              <1> ;Sets all active COM ports to 2400,N,8,1, FIFO on, hware handshaking
    82 00000E4D 880C25[66000000]    <1>     mov byte [numCOM], cl
    83 00000E54 30C9                <1>     xor cl, cl
    84                              <1> serialinit:
    85 00000E56 668B9409[67000000]  <1>     mov dx, word [com_addresses + rcx*2]  ;get the serial port base addr in dx
    86 00000E5E 6685D2              <1>     test dx, dx
    87 00000E61 743E                <1>     jz COMinitexit    ;invalid address, port doesnt exist, init complete
    88                              <1> ;Disable interrupts
    89 00000E63 66FFC2              <1>     inc dx        ;point at base + 1
    90 00000E66 30C0                <1>     xor al, al    ;get zero to out it to the interrupt register
    91 00000E68 EE                  <1>     out dx, al    ;Disable all interrupts
    92                              <1> ;Set DLAB
    93 00000E69 6681C20200          <1>     add dx, 2    ;point dx to the Line Control register (LCR)
    94 00000E6E EC                  <1>     in al, dx    ;get the LCR byte into al
    95 00000E6F 0C80                <1>     or al, 10000000b    ;set bit 7, DLAB bit on
    96 00000E71 EE                  <1>     out dx, al    ;output the set bit
    97                              <1> ;Set baud rate
    98 00000E72 6681EA0300          <1>     sub dx, 3    ;word of baud divisor
    99 00000E77 66B83000            <1>     mov ax, 0030h    ;the divisor for 2400 baud (cf table below)
   100 00000E7B 66EF                <1>     out dx, ax    ;out put the divisor word
   101                              <1> ;Clear DLAB, set the parity, break stop and word length
   102 00000E7D 6681C20300          <1>     add dx, 3    ;repoint at LCR (base + 3)
   103 00000E82 B003                <1>     mov al, 00000011b  ;DLAB off, 8,n,1, no break, no stick
   104 00000E84 EE                  <1>     out dx, al    ;out that byte
   105                              <1> ;Clear FIFO
   106 00000E85 66FFCA              <1>     dec dx        ;base + 2, FIFO register
   107 00000E88 B006                <1>     mov al, 00000110b    ;Clear FIFO, set char mode
   108 00000E8A EE                  <1>     out dx, al    ;out that stuff
   109                              <1> ;Enable interrupts and RTS/DTR
   110 00000E8B 66FFCA              <1>     dec dx        ;base + 1, Interrupt Enable Register
   111 00000E8E B001                <1>     mov al, 1     ;ONLY set the data receive interrupt, none of the other 
   112                              <1>                   ; status or transmit type interrupts
   113 00000E90 EE                  <1>     out dx, al
   114                              <1> 
   115 00000E91 6681C20300          <1>     add dx, 3    ;base + 4, Modem control register
   116 00000E96 EC                  <1>     in al, dx    ;preserve reserved upper bits
   117 00000E97 24E0                <1>     and al, 11100000b
   118 00000E99 0C0B                <1>     or al, 00001011b    ;Set OUT2 (ie IRQ enable), set RTS/DTR.
   119 00000E9B EE                  <1>     out dx, al
   120 00000E9C 66FFC1              <1>     inc cx
   121 00000E9F EBB5                <1>     jmp short serialinit
   122                              <1> COMinitexit:
   123                              <1> ;Unmask com ports here!
   124 00000EA1 E421                <1>     in al, pic1data
   125 00000EA3 24E7                <1>     and al, 0E7h    ;Unmask Com lines 1 and 2 (bits 3 and 4)
   126 00000EA5 E621                <1>     out pic1data, al
   127                              <1> ;----------------------------------------------------------------
   128                              <1> ;                     End of Initialisation                     :
   129                              <1> ;----------------------------------------------------------------
    59                                  %include "./Source/Init/Hardware/PS2/ps2init.asm"
    60                              <1> ;----------------------------------------------------------------
    61                              <1> ;             PS/2 Keyboard Initialisation procedure            :
    62                              <1> ;----------------------------------------------------------------
    63                              <1> keybsetup:
    64 00000EA7 48BD-               <1>     mov rbp, ps2Str.startMsg
    64 00000EA9 [5810000000000000]  <1>
    65 00000EB1 48B804130000000000- <1>     mov rax, 1304h    ;print 0 terminated string
    65 00000EBA 00                  <1>
    66 00000EBB 30FF                <1>     xor bh, bh
    67 00000EBD CD30                <1>     int 30h
    68                              <1> ;----------------------------------------------------------------
    69                              <1> ;Do all writes using ps2talk:
    70                              <1> ;    .rStat - Read Status port into al
    71                              <1> ;    .rDat - Read Data port into al
    72                              <1> ;    .wCmd - Write al into Command port 
    73                              <1> ;    .wDat - Write al into Data port
    74                              <1> ;----------------------------------------------------------------
    75                              <1> ;Step 1
    76 00000EBF B0AD                <1>     mov al, 0ADh
    77 00000EC1 E865010000          <1>     call ps2talk.wCmd
    78 00000EC6 B0A7                <1>     mov al, 0A7h        ;Cancel second interface if it exists (DO NOT REENABLE)
    79 00000EC8 E85E010000          <1>     call ps2talk.wCmd
    80                              <1> ;Step 2
    81 00000ECD B110                <1>     mov cl, 10h
    82                              <1> initFlush:
    83 00000ECF E460                <1>     in al, ps2data     ;manually flush ps2data port
    84 00000ED1 FEC9                <1>     dec cl
    85 00000ED3 75FA                <1>     jnz initFlush
    86                              <1> ;Step 3
    87                              <1> keyb0:
    88 00000ED5 B020                <1>     mov al, 20h
    89 00000ED7 E84F010000          <1>     call ps2talk.wCmd    ;out ps2command, al
    90 00000EDC E83D010000          <1>     call ps2talk.rDat    ;Read config byte into al
    91                              <1> ;Step 4
    92 00000EE1 88C3                <1>     mov bl, al        ;copy al into bl to check for bit 2
    93 00000EE3 80E3BC              <1>     and bl, 0BCh      ;Disable translation, enable later
    94                              <1> ;Step 5
    95 00000EE6 B060                <1>     mov al, 60h
    96 00000EE8 E83E010000          <1>     call ps2talk.wCmd    ;Write config byte command
    97 00000EED 88D8                <1>     mov al, bl
    98 00000EEF E83F010000          <1>     call ps2talk.wDat    ;Out new config byte
    99                              <1> ;Step 6
   100 00000EF4 B0AA                <1>     mov al, 0AAh ;Can reset the config byte, out bl to ps2data at end of stage
   101 00000EF6 E830010000          <1>     call ps2talk.wCmd
   102 00000EFB E81E010000          <1>     call ps2talk.rDat
   103 00000F00 3C55                <1>     cmp al, 55h
   104 00000F02 0F8533010000        <1>     jne ps2error
   105                              <1>     
   106 00000F08 B060                <1>     mov al, 60h  ;Previous code may have reset our new config byte, resend it!
   107 00000F0A E81C010000          <1>     call ps2talk.wCmd            ;Write config byte command
   108 00000F0F 88D8                <1>     mov al, bl
   109 00000F11 E81D010000          <1>     call ps2talk.wDat            ;Out new config byte
   110                              <1> ;Step 7
   111 00000F16 B0AB                <1>     mov al, 0ABh            ;Test port 1
   112 00000F18 E80E010000          <1>     call ps2talk.wCmd
   113 00000F1D E8FC000000          <1>     call ps2talk.rDat
   114 00000F22 84C0                <1>     test al, al             ;Check al is zero
   115 00000F24 0F8511010000        <1>     jnz ps2error
   116                              <1> ;Step 8
   117 00000F2A B0AE                <1>     mov al, 0AEh            ;Enable port 1
   118 00000F2C E8FA000000          <1>     call ps2talk.wCmd
   119                              <1> ;Step 9
   120 00000F31 31C9                <1>     xor ecx, ecx
   121                              <1> keyb1:
   122 00000F33 FEC9                <1>     dec cl ;timeout counter
   123 00000F35 0F8400010000        <1>     jz ps2error
   124 00000F3B B0FF                <1>     mov al, 0FFh        ;Reset device
   125 00000F3D E8F1000000          <1>     call ps2talk.wDat
   126                              <1> .k1:
   127 00000F42 E8D7000000          <1>     call ps2talk.rDat   ;read from ps2data
   128 00000F47 3CFA                <1>     cmp al, 0FAh
   129 00000F49 75E8                <1>     jne keyb1           ;If not ACK, restart the process
   130 00000F4B E8CE000000          <1>     call ps2talk.rDat   ;Now read operation status 
   131 00000F50 3CAA                <1>     cmp al, 0AAh        
   132 00000F52 75DF                <1>     jne keyb1           ;If not success, restart the whole process
   133                              <1>     
   134                              <1> ;Step 10
   135                              <1> keyb2:
   136 00000F54 B0EE                <1>     mov al, 0EEh     ;Echo command
   137 00000F56 E8D8000000          <1>     call ps2talk.wDat
   138 00000F5B 30C0                <1>     xor al, al       ;Zero al to ensure that the result is EEh
   139                              <1> .k1:
   140 00000F5D E8BC000000          <1>     call ps2talk.rDat
   141 00000F62 3CEE                <1>     cmp al, 0EEh
   142 00000F64 7410                <1>     je keyb3           ;If equal, continue
   143 00000F66 488D2C25[46100000]  <1>     lea rbp, ps2Str.noecho
   144 00000F6E 66B80413            <1>     mov ax, 1304h
   145 00000F72 30FF                <1>     xor bh, bh
   146 00000F74 CD30                <1>     int 30h
   147                              <1> 
   148                              <1> keyb3:    ;Set typematic rate/delay, 250ms, 30 reports/second
   149 00000F76 B0F3                <1>     mov al, 0F3h     ;Set typematic rate
   150 00000F78 E8B6000000          <1>     call ps2talk.wDat
   151 00000F7D E89C000000          <1>     call ps2talk.rDat
   152 00000F82 30C0                <1>     xor al, al       ;Set rate
   153 00000F84 E8AA000000          <1>     call ps2talk.wDat
   154 00000F89 30C9                <1>     xor cl, cl
   155                              <1> .k1:
   156 00000F8B FEC9                <1>     dec cl
   157 00000F8D 0F84A8000000        <1>     jz ps2error
   158 00000F93 E886000000          <1>     call ps2talk.rDat
   159 00000F98 3CFA                <1>     cmp al, 0FAh    ;Ack?
   160 00000F9A 75EF                <1>     jnz .k1
   161                              <1> 
   162                              <1> keyb4:      ;Set scancode 2
   163 00000F9C B1FF                <1>     mov cl, -1
   164 00000F9E B302                <1>     mov bl, 2   ;Scancode 2
   165                              <1> .k1:
   166 00000FA0 FEC9                <1>     dec cl
   167 00000FA2 0F8493000000        <1>     jz ps2error
   168 00000FA8 B0F0                <1>     mov al, 0F0h    ;Scancode command
   169 00000FAA E884000000          <1>     call ps2talk.wDat
   170 00000FAF E86A000000          <1>     call ps2talk.rDat
   171 00000FB4 3CFA                <1>     cmp al, 0FAh    ;Ack?
   172 00000FB6 75E8                <1>     jne .k1
   173                              <1> 
   174 00000FB8 B1FF                <1>     mov cl, -1
   175                              <1> .k2:
   176 00000FBA FEC9                <1>     dec cl
   177 00000FBC 747D                <1>     jz ps2error
   178 00000FBE 88D8                <1>     mov al, bl  ;Get scancode set into al
   179 00000FC0 E86E000000          <1>     call ps2talk.wDat
   180 00000FC5 E854000000          <1>     call ps2talk.rDat
   181 00000FCA 3CFA                <1>     cmp al, 0FAh    ;Ack?   
   182 00000FCC 75D2                <1>     jne .k1 ;Restart the whole process
   183                              <1> 
   184 00000FCE B1FF                <1>     mov cl, -1
   185                              <1> keyb5:
   186                              <1> ;Enable the keyboard to transmit scancodes
   187 00000FD0 FEC9                <1>     dec cl
   188 00000FD2 7467                <1>     jz ps2error
   189 00000FD4 B0F4                <1>     mov al, 0F4h    ;Enable scanning
   190 00000FD6 E858000000          <1>     call ps2talk.wDat
   191 00000FDB E83E000000          <1>     call ps2talk.rDat
   192 00000FE0 3CFA                <1>     cmp al, 0FAh    ;Ack?
   193 00000FE2 75EC                <1>     jne keyb5
   194                              <1> 
   195                              <1> keybinitend:
   196                              <1> ;Enable scancode translation and enable Interrupts on port 1
   197 00000FE4 B020                <1>     mov al, 20h      ;Get command byte from command port
   198 00000FE6 E840000000          <1>     call ps2talk.wCmd  ;al should contain command byte
   199 00000FEB E82E000000          <1>     call ps2talk.rDat
   200 00000FF0 88C4                <1>     mov ah, al       ;temp save cmd byte in ah
   201                              <1>     ;Set translate bit on and set scancode 2
   202 00000FF2 80CC41              <1>     or ah, 41h  ;Set translate on and IRQ on port 1 on
   203 00000FF5 80E4EF              <1>     and ah, 0EFh    ;Clear bit 4, to set port clock on
   204 00000FF8 B060                <1>     mov al, 60h
   205 00000FFA E82C000000          <1>     call ps2talk.wCmd
   206 00000FFF 88E0                <1>     mov al, ah  ;Move command with bit set into al
   207 00001001 E82D000000          <1>     call ps2talk.wDat   ;And send
   208                              <1> 
   209                              <1> ;Unmask IRQ1 here
   210 00001006 E421                <1>     in al, pic1data
   211 00001008 24FD                <1>     and al, 0FDh    ;Unmask bit 1
   212 0000100A E621                <1>     out pic1data, al
   213                              <1> ;Now keep looping until the keyboard buffer is empty
   214                              <1> .cleanBuffer:
   215 0000100C B401                <1>     mov ah, 01
   216 0000100E CD36                <1>     int 36h
   217 00001010 745F                <1>     jz endPS2Init
   218 00001012 30E4                <1>     xor ah, ah
   219 00001014 CD36                <1>     int 36h
   220 00001016 E9F1FFFFFF          <1>     jmp .cleanBuffer
   221                              <1> ;Relevant Procs for PS/2 keyboard setup
   222                              <1> ps2talk:
   223                              <1> ;    .rStat - Read Status port into al
   224                              <1> ;    .rDat - Read Data port into al
   225                              <1> ;    .wCmd - Write al into Command port 
   226                              <1> ;    .wDat - Write al into Data port
   227                              <1> .rStat:
   228 0000101B E464                <1>     in al, ps2status
   229 0000101D C3                  <1>     ret
   230                              <1> .rDat:
   231 0000101E EB00                <1>     jmp short $ + 2
   232 00001020 E464                <1>     in al, ps2status
   233 00001022 A801                <1>     test al, 1    ;Can something be read from KB?
   234 00001024 74F8                <1>     jz .rDat        ;Zero if no. Not zero = read.
   235 00001026 EB00                <1>     jmp short $ + 2
   236 00001028 E460                <1>     in al, ps2data  ;Read it in
   237 0000102A C3                  <1>     ret
   238                              <1> .wCmd:
   239 0000102B E8(B6000000)        <1>     call ps2wait    ;preserves ax
   240 00001030 E664                <1>     out ps2command, al
   241 00001032 C3                  <1>     ret
   242                              <1> .wDat:
   243 00001033 E8(B6000000)        <1>     call ps2wait
   244 00001038 E660                <1>     out ps2data, al
   245 0000103A C3                  <1>     ret
   246                              <1> ps2error:
   247 0000103B B0FF                <1>     mov al, -1  ;MASK IRQ lines if error
   248 0000103D E621                <1>     out pic1data, al
   249 0000103F E6A1                <1>     out pic2data, al
   250 00001041 F390                <1>     pause
   251 00001043 F4                  <1>     hlt
   252 00001044 EBF5                <1>     jmp short ps2error
   253                              <1> ps2Str:
   254 00001046 4E6F204563686F2072- <1> .noecho  db "No Echo recieved ", 0
   254 0000104F 656369657665642000  <1>
   255 00001058 0A0D50532F32204B65- <1> .startMsg db 0Ah, 0Dh,'PS/2 Keyboard... ',0 
   255 00001061 79626F6172642E2E2E- <1>
   255 0000106A 2000                <1>
   256 0000106C 4F4B0A0D00          <1> .okMsg  db "OK",0Ah,0Dh,0
   257                              <1> endPS2Init:
   258 00001071 48BD-               <1>     mov rbp, ps2Str.okMsg
   258 00001073 [6C10000000000000]  <1>
   259 0000107B 48B804130000000000- <1>     mov rax, 1304h    ;print 0 terminated string
   259 00001084 00                  <1>
   260 00001085 30FF                <1>     xor bh, bh
   261 00001087 CD30                <1>     int 30h
   262                              <1> ;----------------------------------------------------------------
   263                              <1> ;                      End of Initialisation                    :
   264                              <1> ;----------------------------------------------------------------
    60                                  %include "./Source/Sysdebug/init.asm"
    61                              <1> ;----------------------------------------------------------------
    62                              <1> ;              Debugger Initialisation procedures               :
    63                              <1> ;----------------------------------------------------------------
    64                              <1> debuggerInit:
    65                              <1> ;Int 40h can be used by the Debugger to return to it or if a DOS present, 
    66                              <1> ; to return to DOS.
    67 00001089 48B8-               <1>     mov rax, MCP_int ;The application return point
    67 0000108B [AC23000000000000]  <1>
    68 00001093 48BE40000000000000- <1>     mov rsi, 40h
    68 0000109C 00                  <1>
    69 0000109D 66BA008F            <1>     mov dx, 8F00h    ;Attribs
    70 000010A1 BB08000000          <1>     mov ebx, codedescriptor
    71 000010A6 E8(CB000000)        <1>     call idtWriteEntry    
    61                                  ;----------------------------------------------------------------
    62                                  ;              Drive Enum and Initialisation procedures         :
    63                                  ;----------------------------------------------------------------
    64                                  %include "./Source/Init/Hardware/IDE/ideinit.asm"
    65                              <1> 
    66                              <1> IDE:
    67                              <1> .ideInitialisation:
    68                              <1> ;Check primary and secondary bus for master and slave drives
    69                              <1> ; Maximum of 4 "fixed" ATA drives
    70                              <1> ;Due to being in compatibility mode, they respond to 
    71                              <1> ; default addresses.
    72                              <1> ;By default BIOS numbers will be assigned as follows: 
    73                              <1> ;               80h = Ctrlr 1, Master
    74                              <1> ;               81h = Ctrlr 1, Slave
    75                              <1> ;               82h = Ctrlr 2, Master
    76                              <1> ;               83h = Ctrlr 2, Slave
    77                              <1> 
    78                              <1> ;To make algorithm work, set ataXCmdByte to 1
    79 000010AB C60425[AB010000]01  <1>     mov byte [ata0CmdByte], 1
    80 000010B3 C60425[AD010000]01  <1>     mov byte [ata1CmdByte], 1
    81                              <1> 
    82                              <1> ;Here, consider resetting drives on both channels
    83                              <1>     ;ATA Channel 0 Master
    84 000010BB 488D1C25[7B030000]  <1>     lea rbx, fdiskTable
    85 000010C3 B0A0                <1>     mov al, 0A0h
    86 000010C5 88C4                <1>     mov ah, al  ;Save in ah
    87 000010C7 BAF0010000          <1>     mov edx, ata0_base
    88 000010CC E8(4C350000)        <1>     call ATA.selectDrive    ;Ignore status for master
    89 000010D1 88E0                <1>     mov al, ah  ;Bring back
    90 000010D3 7205                <1>     jc .ii0    ;If Master failed to select, ignore trying to identify it
    91 000010D5 E879000000          <1>     call .identifyDrive ;Master ata0
    92                              <1> .ii0:
    93                              <1>     ;ATA Channel 0 Slave
    94 000010DA 4881C316000000      <1>     add rbx, fdiskEntry_size
    95 000010E1 0C10                <1>     or al, 10h ;Change from A0h to B0h
    96 000010E3 88C4                <1>     mov ah, al
    97 000010E5 E8(4C350000)        <1>     call ATA.selectDrive ;Master should set slave status to 0 if non-existent
    98 000010EA 7302                <1>     jnc .ii1   ;If slave successfully was selected, skip the next line
    99 000010EC 30C0                <1>     xor al, al  ;Mock the "00" response that would be placed on the bus by the master
   100                              <1> .ii1:
   101 000010EE 84C0                <1>     test al, al
   102 000010F0 88E0                <1>     mov al, ah  ;Bring back
   103 000010F2 7405                <1>     jz .ii2 ;If al was zero, skip slave identification
   104 000010F4 E85A000000          <1>     call .identifyDrive  ;Slave ata0
   105                              <1> 
   106                              <1> .ii2:
   107                              <1>     ;ATA Channel 1 Master
   108 000010F9 4881C316000000      <1>     add rbx, fdiskEntry_size
   109 00001100 BA70010000          <1>     mov edx, ata1_base
   110 00001105 24EF                <1>     and al, 0EFh    ;Clear bit 4
   111 00001107 88C4                <1>     mov ah, al  ;Save in ah
   112 00001109 E8(4C350000)        <1>     call ATA.selectDrive    ;Ignore status for master
   113 0000110E 88E0                <1>     mov al, ah  ;Bring back
   114 00001110 7205                <1>     jc .ii3     ;If Master failed to select, ignore trying to identify it
   115 00001112 E83C000000          <1>     call .identifyDrive ;Master ata1
   116                              <1> .ii3:
   117                              <1>     ;ATA Channel 1 Slave
   118 00001117 4881C316000000      <1>     add rbx, fdiskEntry_size
   119 0000111E 0C10                <1>     or al, 10h ;Change from A0h to B0h
   120 00001120 88C4                <1>     mov ah, al
   121 00001122 E8(4C350000)        <1>     call ATA.selectDrive ;Master should set slave status to 0 if non-existent
   122 00001127 7302                <1>     jnc .ii4   ;If slave successfully was selected, skip the next line
   123 00001129 30C0                <1>     xor al, al  ;Mock the "00" response that would be placed on the bus by the master
   124                              <1> .ii4:
   125 0000112B 84C0                <1>     test al, al
   126 0000112D 88E0                <1>     mov al, ah  ;Bring back
   127 0000112F 7405                <1>     jz .ii5 ;If al was zero, skip slave identification
   128 00001131 E81D000000          <1>     call .identifyDrive ;Slave ata1
   129                              <1> .ii5:
   130                              <1> ;Now return the control of each host to the master drives
   131                              <1> 
   132 00001136 B0A0                <1>     mov al, 0A0h
   133 00001138 BAF0010000          <1>     mov edx, ata0_base
   134 0000113D E8(4C350000)        <1>     call ATA.selectDrive
   135                              <1> 
   136 00001142 B0A0                <1>     mov al, 0A0h
   137 00001144 BA70010000          <1>     mov edx, ata1_base
   138 00001149 E8(4C350000)        <1>     call ATA.selectDrive
   139                              <1> 
   140 0000114E E944010000          <1>     jmp .ideInitEnd
   141                              <1> ;===========================
   142                              <1> ;     Callable procs       :
   143                              <1> ;===========================
   144                              <1> .identifyDrive:
   145                              <1> ;Zeros out the sector buffer entries we check
   146                              <1> ; and calls identify device. If it succeeds, it then
   147                              <1> ; proceeds to add the entry to the appropriate position
   148                              <1> ; in the table.
   149                              <1> ;If it fails, doesnt inc the fixed drives number counter
   150                              <1> ;Called with:   dx = ataX base register
   151                              <1> ;               rbx = Points to table entry to write
   152                              <1> ;               al = A0h for master, B0h for slave
   153                              <1> 
   154 00001153 50                  <1>     push rax
   155 00001154 52                  <1>     push rdx
   156 00001155 31C9                <1>     xor ecx, ecx
   157 00001157 488D3C25[C0030000]  <1>     lea rdi, sectorbuffer
   158                              <1>     ;Clean entries we want to read before hand
   159 0000115F 66894F6C            <1>     mov word [rdi + idCurrCyl], cx     ;Clear current cylinders
   160 00001163 66894F6E            <1>     mov word [rdi + idCurrHed], cx     ;Clear current heads
   161 00001167 66894F70            <1>     mov word [rdi + idCurrSecTk], cx   ;Clear current sectors/track
   162 0000116B 66898FA6000000      <1>     mov word [rdi + 83*2], cx          ;Clear LBA48 supported bit word
   163 00001172 894F78              <1>     mov dword [rdi + idLBASectrs], ecx ;Clear UserAddressableSectors
   164 00001175 48898FC8000000      <1>     mov qword [rdi + idLBA48Sec], rcx  ;Clear UserAddressableSectors for LBA48
   165 0000117C 57                  <1>     push rdi
   166 0000117D E8(EF340000)        <1>     call ATA.identifyDevice
   167 00001182 5F                  <1>     pop rdi
   168 00001183 0F82D5000000        <1>     jc .idExit  ;If the carry flag set, the device timed out
   169                              <1>     ;Now get information and build tables here
   170 00001189 C60300              <1>     mov byte [rbx + fdiskEntry.signature], 0    ;Clear signature byte in table
   171 0000118C 66895313            <1>     mov word [rbx + fdiskEntry.ioBase], dx      ;Add iobase and masterslave status
   172 00001190 884315              <1>     mov byte [rbx + fdiskEntry.msBit], al       
   173                              <1> ;CHS, none of CHS is allowed to be 0 but may be because obsolete on new drives
   174 00001193 668B476C            <1>     mov ax, word [rdi + idCurrCyl]
   175 00001197 6685C0              <1>     test ax, ax
   176 0000119A 741E                <1>     jz .id0
   177 0000119C 66894303            <1>     mov word [rbx + fdiskEntry.wCylinder], ax
   178 000011A0 668B476E            <1>     mov ax, word [rdi + idCurrHed]
   179 000011A4 6685C0              <1>     test ax, ax
   180 000011A7 7411                <1>     jz .id0
   181 000011A9 66894301            <1>     mov word [rbx + fdiskEntry.wHeads], ax
   182 000011AD 668B4770            <1>     mov ax, word [rdi + idCurrSecTk]
   183 000011B1 6685C0              <1>     test ax, ax
   184 000011B4 7404                <1>     jz .id0
   185 000011B6 66894305            <1>     mov word [rbx + fdiskEntry.wSecTrc], ax
   186                              <1> .id0:
   187                              <1> ;LBA28
   188 000011BA 8B4778              <1>     mov eax, dword [rdi + idLBASectrs]
   189 000011BD 85C0                <1>     test eax, eax   ;Is this number 0? Check LBA48 or solely on CHS
   190 000011BF 740D                <1>     jz .id1
   191 000011C1 A9000000F0          <1>     test eax, 0F0000000h ;Test if we above max LBA 28 number
   192 000011C6 7506                <1>     jnz .id1 ;If above, ignore LBA28
   193 000011C8 800B02              <1>     or byte [rbx + fdiskEntry.signature], fdeLBA28 ;Set LBA28 present bit
   194 000011CB 894307              <1>     mov dword [rbx + fdiskEntry.lbaMax], eax
   195                              <1> .id1:
   196                              <1> ;LBA48
   197                              <1> ;Check LBA48 bit first
   198 000011CE 66F787A60000000004  <1>     test word [rdi + 83*2], 400h    ;If bit 10 set, LBA48 supported
   199 000011D7 741A                <1>     jz .id2
   200 000011D9 488B87C8000000      <1>     mov rax, qword [rdi + idLBA48Sec]
   201 000011E0 480FC8              <1>     bswap rax   ;Bring high word low
   202 000011E3 66A9FFFF            <1>     test ax, 0FFFFh ;Test if high word was set
   203 000011E7 480FC8              <1>     bswap rax
   204 000011EA 7507                <1>     jnz .id2    ;If above, ignore LBA 48
   205 000011EC 4889430B            <1>     mov qword [rbx + fdiskEntry.lbaMax48], rax
   206 000011F0 800B04              <1>     or byte [rbx + fdiskEntry.signature], fdeLBA48
   207                              <1> .id2:
   208                              <1> ;Now check if either LBA28 or LBA48 are set or CHS is non-zero
   209 000011F3 F60306              <1>     test byte [rbx + fdiskEntry.signature], fdeLBA28 | fdeLBA48
   210 000011F6 755C                <1>     jnz .idDeviceOK ;If either LBA28 or 48 set, confirm device OK!
   211                              <1>     ;We arrive here ONLY IF LBA 28 or LBA 48 not set
   212                              <1>     ; That means drive must be small, so floating bus values in CHS
   213                              <1>     ; cannot be valid.
   214                              <1>     ;Check C/H/S values are all non-zero
   215                              <1>     ;If any are zero, then device not configured for use
   216                              <1>     ;If any values dont make sense (such as 7F7Fh FFFFh) then fail those too
   217 000011F8 0FB74303            <1>     movzx eax, word [rbx + fdiskEntry.wCylinder]
   218 000011FC 85C0                <1>     test eax, eax
   219 000011FE 7434                <1>     jz .id3 ;If zero, dont confirm device
   220 00001200 663DFFFF            <1>     cmp ax, 0FFFFh
   221 00001204 742E                <1>     je .id3
   222 00001206 663D7F7F            <1>     cmp ax, 07F7Fh
   223 0000120A 7428                <1>     je .id3
   224 0000120C 0FB74301            <1>     movzx eax, word [rbx + fdiskEntry.wHeads]
   225 00001210 85C0                <1>     test eax, eax
   226 00001212 7420                <1>     jz .id3 ;If zero, dont confirm device
   227 00001214 663DFFFF            <1>     cmp ax, 0FFFFh
   228 00001218 741A                <1>     je .id3
   229 0000121A 663D7F7F            <1>     cmp ax, 07F7Fh
   230 0000121E 7414                <1>     je .id3
   231 00001220 0FB74305            <1>     movzx eax, word [rbx + fdiskEntry.wSecTrc]
   232 00001224 85C0                <1>     test eax, eax
   233 00001226 740C                <1>     jz .id3
   234 00001228 663DFFFF            <1>     cmp ax, 0FFFFh
   235 0000122C 7406                <1>     je .id3
   236 0000122E 663D7F7F            <1>     cmp ax, 7F7Fh
   237 00001232 7520                <1>     jne .idDeviceOK ;Values are probably sane, all ok
   238                              <1> .id3:
   239                              <1> ;Only arrive here if none of CHS, LBA28 or LBA48 were verified as ok
   240                              <1> ;Clean any data that mightve been copied (from Floating Bus reads perhaps)
   241 00001234 31C0                <1>     xor eax, eax
   242 00001236 8803                <1>     mov byte [rbx + fdiskEntry.signature], al
   243 00001238 894307              <1>     mov dword [rbx + fdiskEntry.lbaMax], eax
   244 0000123B 4889430B            <1>     mov qword [rbx + fdiskEntry.lbaMax48], rax
   245 0000123F 66894303            <1>     mov word [rbx + fdiskEntry.wCylinder], ax
   246 00001243 66894301            <1>     mov word [rbx + fdiskEntry.wHeads], ax
   247 00001247 66894305            <1>     mov word [rbx + fdiskEntry.wSecTrc], ax
   248 0000124B 66894313            <1>     mov word [rbx + fdiskEntry.ioBase], ax
   249 0000124F 884315              <1>     mov byte [rbx + fdiskEntry.msBit], al
   250 00001252 EB0A                <1>     jmp short .idExit
   251                              <1> .idDeviceOK:
   252 00001254 800B01              <1>     or byte [rbx + fdiskEntry.signature], fdePresent
   253 00001257 FE0425[AA010000]    <1>     inc byte [fdiskNum] ;Number of usable fixed disks increased
   254                              <1> .idExit:
   255 0000125E 5A                  <1>     pop rdx
   256 0000125F 58                  <1>     pop rax
   257 00001260 C3                  <1>     ret
   258                              <1> 
   259                              <1> .addControllerTable:
   260                              <1> ;Adds a PCI IDE controller to the internal data tables, if there is space
   261                              <1> ; If there is no space, returns with carry set.
   262                              <1> ;Input: eax = BAR5 address
   263                              <1> ;       ebx = PCI IO address
   264                              <1> ;Output: CF=NC, all ok, CF=CY, device not added.
   265 00001261 56                  <1>     push rsi
   266 00001262 803C25[5A030000]02  <1>     cmp byte [ideNumberOfControllers], 2
   267 0000126A 7428                <1>     je .actfail ;If it is 2, fail
   268 0000126C FE0425[5A030000]    <1>     inc byte [ideNumberOfControllers]
   269 00001273 48BE-               <1>     mov rsi, ideControllerTable
   269 00001275 [5B03000000000000]  <1>
   270 0000127D 803E00              <1>     cmp byte [rsi], 0   ;Is the first entry empty?
   271 00001280 7407                <1>     jz .act0    ;If yes, write entry
   272 00001282 4881C610000000      <1>     add rsi, ideTableEntrySize  ;Else, goto second entry space
   273                              <1> .act0:
   274 00001289 891E                <1>     mov dword [rsi], ebx    ;Move first PCI IO addr
   275 0000128B C60600              <1>     mov byte [rsi], 0       ;Zero the register index
   276 0000128E 894604              <1>     mov dword [rsi + 4], eax    ;Move next data
   277 00001291 F8                  <1>     clc
   278                              <1> .actexit:
   279 00001292 5E                  <1>     pop rsi
   280 00001293 C3                  <1>     ret
   281                              <1> .actfail:
   282 00001294 F9                  <1>     stc
   283 00001295 EBFB                <1>     jmp short .actexit
   284                              <1> 
   285                              <1> ;============================
   286                              <1> ;     Exit target label     :
   287                              <1> ;============================
   288                              <1> .ideInitEnd:
    65                                  %include "./Source/Init/Hardware/USB/EHCI/ehciinit.asm"
    66                              <1> ;            ------------USB section below------------
    67                              <1> ;                   ---- PCI table parse ----
    68                              <1> ;Parse the PCI tables for ehci controllers
    69                              <1> hciParse:
    70 00001297 C60425[4B020000]00  <1>     mov byte [numMSD], 0
    71 0000129F 4C0FB70C2500E00000  <1>     movzx r9, word [lousbtablesize]
    72 000012A8 BE02E00000          <1>     mov esi, lousbtablebase
    73 000012AD BF[15020000]        <1>     mov edi, eControllerList
    74                              <1> .hcip1:
    75 000012B2 6667F7064000        <1>     test word [esi], ehcimask    ;check if we at a ehci mask
    76 000012B8 7418                <1>     jz .hcip2   ;If not, skip adding to ehci table
    77                              <1>     ;First catch all clause (temporary for version 1 of BIOS with max 4 
    78                              <1>     ; controllers)
    79 000012BA 803C25[14020000]04  <1>     cmp byte [eControllers], 4
    80 000012C2 7430                <1>     je .pr0    ;escape this whole setup proc if at 4 controllers
    81 000012C4 67488B4602          <1>     mov rax, qword [esi + 2]    ;take pci and mmio address into rax
    82 000012C9 48AB                <1>     stosq                        ;store into rdi and inc rdi by 8 to next entry
    83 000012CB FE0425[14020000]    <1>     inc byte [eControllers]    ;increase the number of controllers variable
    84                              <1> .hcip2:
    85                              <1> ;Any additional data saving occurs here
    86 000012D2 81C60A000000        <1>     add esi, 10    ;Goto next table entry
    87 000012D8 41FEC9              <1>     dec r9b     ;Once all table entries exhausted, fall through
    88 000012DB 75D5                <1>     jnz .hcip1
    89                              <1>     
    90                              <1> ;               ---- EHCI controller enumeration ----
    91                              <1> ;Enumerate each ehci ctrlr root hub for valid usb devices (hubs and valid MSD)
    92 000012DD 8A0C25[14020000]    <1>     mov cl, byte [eControllers]
    93 000012E4 66B80413            <1>     mov ax, 1304h
    94 000012E8 48BD-               <1>     mov rbp, .echiInitMsg
    94 000012EA [6913000000000000]  <1>
    95 000012F2 CD30                <1>     int 30h
    96                              <1> .pr0:   ;If ctrlr failure or ports exhausted, ret to here for next ctrlr
    97 000012F4 84C9                <1>     test cl, cl
    98 000012F6 0F8496000000        <1>     jz .noEHCI    ;No EHCI controllers or last controler?
    99 000012FC FEC9                <1>     dec cl    ;Undo the absolute count from above
   100 000012FE 88C8                <1>     mov al, cl
   101 00001300 E8(443A0000)        <1>     call USB.setupEHCIcontroller
   102 00001305 72ED                <1>     jc .pr0    ;Continue to next controller
   103 00001307 E8(BF3B0000)        <1>     call USB.ehciRunCtrlr       ;Activate online controller
   104 0000130C 72E6                <1>     jc .pr0
   105 0000130E E8(203C0000)        <1>     call USB.ehciAdjustAsyncSchedCtrlr ;Start schedule and lock ctrlr as online
   106 00001313 72DF                <1>     jc .pr0
   107 00001315 E8(9D3C0000)        <1>     call USB.ehciCtrlrGetNumberOfPorts
   108 0000131A 88C2                <1>     mov dl, al      ;Save the number of ports in dl
   109 0000131C 8A3425[47020000]    <1>     mov dh, byte [eActiveCtrlr]    ;Save current active ctrlr in dh
   110 00001323 4D31D2              <1>     xor r10, r10    ;Host hub 0 [ie Root Hub enum only] (for enum)
   111                              <1> .pr1:
   112 00001326 FECA                <1>     dec dl
   113 00001328 49BC03000000000000- <1>     mov r12, 3      ;Attempt three times to enumerate
   113 00001331 00                  <1>
   114                              <1> .pr11:
   115 00001332 E8(39400000)        <1>     call USB.ehciEnumerateRootPort
   116 00001337 7413                <1>     jz .pr2
   117 00001339 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h  ;General Controller Failure
   118 00001341 0F84(093A0000)      <1>     je USB.ehciCriticalErrorWrapper
   119 00001347 49FFCC              <1>     dec r12
   120 0000134A 75E6                <1>     jnz .pr11
   121                              <1> .pr2:
   122 0000134C 84D2                <1>     test dl, dl
   123 0000134E 75D6                <1>     jnz .pr1
   124 00001350 84C9                <1>     test cl, cl ;Once cl is zero we have gone through all controllers
   125 00001352 75A0                <1>     jnz .pr0
   126                              <1> 
   127 00001354 B804130000          <1>     mov eax, 1304h
   128 00001359 48BD-               <1>     mov rbp, remDevInit.ok  ;Reuse the OK from the other proc
   128 0000135B [6F14000000000000]  <1>
   129 00001363 30FF                <1>     xor bh, bh
   130 00001365 CD30                <1>     int 30h
   131 00001367 EB2E                <1>     jmp short .exit
   132 00001369 0A0D496E697469616C- <1> .echiInitMsg db 0Ah,0Dh,"Initialising USB and EHCI root hubs...",0
   132 00001372 6973696E6720555342- <1>
   132 0000137B 20616E642045484349- <1>
   132 00001384 20726F6F7420687562- <1>
   132 0000138D 732E2E2E00          <1>
   133                              <1> .noEHCI:
   134                              <1> ;If no EHCI, skip MSD search on EHCI bus. Goto Int 33h init
   135 00001392 E95F010000          <1>     jmp int33hinit.i33iend  ;Could go to int33hinit, but this is minutely faster
   136                              <1> .exit:
    66                                  %include "./Source/Init/Hardware/USB/MSD/msdinit.asm"
    67                              <1> remDevInit:
    68                              <1> ;Devices on root hubs have been enumerated, and added to tables,
    69                              <1> ;Now we reset them (in the case of MSD) and enumerate further (on Hubs)
    70 00001397 66B80413            <1>     mov ax, 1304h
    71 0000139B 80F70B              <1>     xor bh, 0bh
    72 0000139E 48BD-               <1>     mov rbp, .rmhmsg
    72 000013A0 [5314000000000000]  <1>
    73 000013A8 CD30                <1>     int 30h
    74                              <1> .hubs_init:
    75 000013AA 48BE-               <1>     mov rsi, hubDevTbl
    75 000013AC [6A02000000000000]  <1>
    76                              <1> ;First we scan for hubs only
    77                              <1> .redi1:
    78 000013B4 803E00              <1>     cmp byte [rsi], 0   ;Not an entry
    79 000013B7 7417                <1>     jz .hubnextentry
    80 000013B9 807E0500            <1>     cmp byte [rsi + 5], 0   ;If number of ports on hub is 0, dev uncofigured
    81 000013BD 7511                <1>     jnz .hubnextentry  ;Device must be already enumerated
    82                              <1> 
    83 000013BF 8A4601              <1>     mov al, byte [rsi + 1]  ;Get bus number into al
    84                              <1> 
    85 000013C2 E8(203C0000)        <1>     call USB.ehciAdjustAsyncSchedCtrlr
    86 000013C7 7207                <1>     jc .hubnextentry
    87                              <1> 
    88 000013C9 E8(88460000)        <1>     call USB.ehciDevSetupHub  ;Only needs a valid device in rsi
    89 000013CE 7200                <1>     jc .hubnextentry
    90                              <1> .hubnextentry:
    91 000013D0 4881C608000000      <1>     add rsi, hubDevTblEntrySize ;Goto next table entry
    92 000013D7 4881FE[BA020000]    <1>     cmp rsi, hubDevTbl + 10*hubDevTblEntrySize  ;End of table address
    93 000013DE 72D4                <1>     jb .redi1  ;We are still in table
    94                              <1> .hub_rescan:
    95                              <1> ;Now we check that all hubs are initialised
    96 000013E0 48BE-               <1>     mov rsi, hubDevTbl  ;Return to head of table
    96 000013E2 [6A02000000000000]  <1>
    97                              <1> ;Leave as a stub for now. Dont support deeper than 1 level of devices
    98                              <1> ;The specification allows for a maximum of 7 levels of depth.
    99                              <1> .msds_init:
   100 000013EA 66B80413            <1>     mov ax, 1304h
   101 000013EE 80F70B              <1>     xor bh, 0bh
   102 000013F1 48BD-               <1>     mov rbp, .ok
   102 000013F3 [6F14000000000000]  <1>
   103 000013FB CD30                <1>     int 30h
   104 000013FD 66B80413            <1>     mov ax, 1304h
   105 00001401 80F70B              <1>     xor bh, 0bh
   106 00001404 48BD-               <1>     mov rbp, .msdmsg
   106 00001406 [7314000000000000]  <1>
   107 0000140E CD30                <1>     int 30h
   108 00001410 48BE-               <1>     mov rsi, msdDevTbl
   108 00001412 [BA02000000000000]  <1>
   109                              <1> .msd1:
   110 0000141A 803E00              <1>     cmp byte [rsi], 0   ;Not an entry
   111 0000141D 740F                <1>     jz .msdNextEntry
   112 0000141F E8(174A0000)        <1>     call USB.ehciMsdInitialise
   113 00001424 7308                <1>     jnc .msdNextEntry
   114 00001426 FEC8                <1>     dec al
   115 00001428 0F84(093A0000)      <1>     jz USB.ehciCriticalErrorWrapper ;al = 1 => Host error, 
   116                              <1> ;                                    al = 2 => Bad dev, removed from MSD tables
   117                              <1> .msdNextEntry:
   118 0000142E 4881C610000000      <1>     add rsi, msdDevTblEntrySize ;Goto next entry
   119 00001435 4881FE[5A030000]    <1>     cmp rsi, msdDevTbl + 10*msdDevTblEntrySize
   120 0000143C 75DC                <1>     jne .msd1
   121                              <1> .rediexit:
   122 0000143E 66B80413            <1>     mov ax, 1304h
   123 00001442 80F70B              <1>     xor bh, 0bh
   124 00001445 48BD-               <1>     mov rbp, .ok
   124 00001447 [6F14000000000000]  <1>
   125 0000144F CD30                <1>     int 30h
   126 00001451 EB3E                <1>     jmp short .exit
   127 00001453 0A0D496E697469616C- <1> .rmhmsg db 0Ah,0Dh,"Initialising USB ports...",0
   127 0000145C 6973696E6720555342- <1>
   127 00001465 20706F7274732E2E2E- <1>
   127 0000146E 00                  <1>
   128 0000146F 204F4B00            <1> .ok db " OK",0
   129 00001473 0A0D496E697469616C- <1> .msdmsg db 0Ah,0Dh,"Initialising MSD devices...",0
   129 0000147C 6973696E67204D5344- <1>
   129 00001485 20646576696365732E- <1>
   129 0000148E 2E2E00              <1>
   130                              <1> .exit:
    67                                  %include "./Source/Init/Hardware/MSD/i33init.asm"
    68                              <1> ;----------------------------------------------------------------
    69                              <1> ;                      Int 33h Initialisation                   :
    70                              <1> ;----------------------------------------------------------------    
    71                              <1> int33hinit:
    72                              <1> ;Create Int 33h data table entry for each MSD/floppy device using steps 1-3.
    73                              <1> ;Go through MSD table and add devices to diskDevices
    74 00001491 48BD-               <1>     mov rbp, usbDevTbl
    74 00001493 [4C02000000000000]  <1>
    75 0000149B 48BF-               <1>     mov rdi, diskDevices
    75 0000149D [D303000000000000]  <1>
    76                              <1> .i33i1:
    77 000014A5 807D0208            <1>     cmp byte [rbp + 2], 08h ;MSD USB Class code
    78 000014A9 7525                <1>     jne .i33proceed
    79                              <1> ;Successfully found a valid MSD device. Talk to it
    80 000014AB 668B4500            <1>     mov ax, word [rbp]  ;Get address/bus pair
    81 000014AF E8(F1440000)        <1>     call USB.ehciGetDevicePtr    ;Get pointer to MSD dev in rsi
    82 000014B4 E8(F7190000)        <1>     call disk_io.deviceInit
    83 000014B9 3C01                <1>     cmp al, 1   ;Critical error
    84 000014BB 0F84(093A0000)      <1>     je USB.ehciCriticalErrorWrapper
    85 000014C1 3C02                <1>     cmp al, 2   ;Device stopped responding, remove from USB data tables
    86 000014C3 7420                <1>     je .i33ibad 
    87 000014C5 3C03                <1>     cmp al, 3   ;Device not added to data tables
    88 000014C7 7407                <1>     je .i33proceed
    89                              <1> ;Valid device added, increment rdi to next diskDevices table entry
    90 000014C9 4881C710000000      <1>     add rdi, int33TblEntrySize
    91                              <1> .i33proceed:
    92 000014D0 4881FD[6A020000]    <1>     cmp rbp, usbDevTblEnd
    93 000014D7 741D                <1>     je .i33iend
    94 000014D9 4881C503000000      <1>     add rbp, usbDevTblEntrySize
    95 000014E0 E9C0FFFFFF          <1>     jmp .i33i1
    96                              <1> .i33ibad:   ;If it goes here, clear table entry
    97 000014E5 48C70700000000      <1>     mov qword [rdi], 0  ;Remove from diskDevice table
    98 000014EC 668B06              <1>     mov ax, word [rsi]
    99 000014EF E8(7C430000)        <1>     call USB.ehciRemoveDevFromTables    ;Remove from USB tables
   100 000014F4 EBDA                <1>     jmp short .i33proceed ;Goto next device
   101                              <1> .i33iend:
   102 000014F6 8A0425[4B020000]    <1>     mov al, byte [numMSD]
   103 000014FD 000425[A8010000]    <1>     add byte [i33Devices], al   ;Add the number of MSD devices to Int 33h total
   104 00001504 8A0425[AA010000]    <1>     mov al, byte [fdiskNum]
   105 0000150B 000425[A8010000]    <1>     add byte [i33Devices], al   ;Add the number of Fixed Disks to Int 33h total
    68                                  ;----------------------------------------------------------------
    69                                  ;                         End of Enum                           :
    70                                  ;----------------------------------------------------------------    
    71                                  %include "./Source/Init/InitEnd.asm"
    72                              <1> ;----------------------------------------------------------------
    73                              <1> ;                End of Enum and Initialisation                 :
    74                              <1> ;----------------------------------------------------------------   
    75                              <1> end:
    76                              <1> ;Finally, unmask all IRQ lines for usage
    77 00001512 30C0                <1>     xor al, al
    78 00001514 E6A1                <1>     out pic2data, al
    79 00001516 E621                <1>     out pic1data, al
    80                              <1> 
    81 00001518 66B80413            <1>     mov ax, 1304h
    82 0000151C 48BD-               <1>     mov rbp, dbgmsg
    82 0000151E [9F16000000000000]  <1>
    83 00001526 CD30                <1>     int 30h
    84 00001528 8A0425[4B020000]    <1>     mov al, byte [numMSD]
    85 0000152F B404                <1>     mov ah, 04h
    86 00001531 CD30                <1>     int 30h
    87                              <1> 
    88 00001533 66B80413            <1>     mov ax, 1304h
    89 00001537 48BD-               <1>     mov rbp, dbgmsg4
    89 00001539 [D716000000000000]  <1>
    90 00001541 CD30                <1>     int 30h
    91 00001543 8A0425[AA010000]    <1>     mov al, byte [fdiskNum]
    92 0000154A B404                <1>     mov ah, 04h
    93 0000154C CD30                <1>     int 30h
    94                              <1> 
    95 0000154E 66B80413            <1>     mov ax, 1304h
    96 00001552 48BD-               <1>     mov rbp, dbgmsg2
    96 00001554 [B516000000000000]  <1>
    97 0000155C CD30                <1>     int 30h
    98 0000155E 8A0425[A8010000]    <1>     mov al, byte [i33Devices]
    99 00001565 B404                <1>     mov ah, 04h
   100 00001567 CD30                <1>     int 30h
   101                              <1> 
   102 00001569 66B80413            <1>     mov ax, 1304h
   103 0000156D 48BD-               <1>     mov rbp, dbgmsg3
   103 0000156F [C916000000000000]  <1>
   104 00001577 CD30                <1>     int 30h
   105 00001579 8A0425[66000000]    <1>     mov al, byte [numCOM]
   106 00001580 B404                <1>     mov ah, 04h
   107 00001582 CD30                <1>     int 30h
   108                              <1> 
   109 00001584 803C25[A8010000]00  <1>     cmp byte [i33Devices], 0    ;If there are no i33 devices, skip bootstrap
   110 0000158C 7402                <1>     jz endNoDevFound
   111                              <1> 
   112 0000158E CD39                <1>     int 39h             ;Bootstrap loader
   113                              <1> endNoDevFound:
   114 00001590 48BD-               <1>     mov rbp, endboot
   114 00001592 [0F16000000000000]  <1>
   115 0000159A 66B80413            <1>     mov ax, 1304h
   116 0000159E CD30                <1>     int 30h
   117                              <1>     
   118 000015A0 6631C0              <1>     xor ax, ax  ;Pause for any key
   119 000015A3 CD36                <1>     int 36h
   120                              <1> 
   121 000015A5 66BB0700            <1>     mov bx, 0007h    ;cls attribs
   122 000015A9 E8(F7000000)        <1>     call cls
   123                              <1> 
   124 000015AE 6631C9              <1>     xor cx, cx
   125 000015B1 6631D2              <1>     xor dx, dx
   126 000015B4 B402                <1>     mov ah, 2
   127 000015B6 30FF                <1>     xor bh, bh
   128 000015B8 CD30                <1>     int 30h 
   129                              <1> 
   130 000015BA 66B80413            <1>     mov ax, 1304h
   131 000015BE 48BD-               <1>     mov rbp, endboot2
   131 000015C0 [7F16000000000000]  <1>
   132 000015C8 CD30                <1>     int 30h
   133                              <1> 
   134 000015CA 4831C0              <1>     xor rax, rax
   135 000015CD 4831DB              <1>     xor rbx, rbx
   136 000015D0 4831C9              <1>     xor rcx, rcx
   137 000015D3 4831D2              <1>     xor rdx, rdx
   138 000015D6 4831F6              <1>     xor rsi, rsi
   139 000015D9 4831FF              <1>     xor rdi, rdi
   140 000015DC 4831ED              <1>     xor rbp, rbp
   141 000015DF 4D31C0              <1>     xor r8, r8
   142 000015E2 4D31C9              <1>     xor r9, r9
   143 000015E5 4D31D2              <1>     xor r10, r10
   144 000015E8 4D31DB              <1>     xor r11, r11
   145 000015EB 4D31E4              <1>     xor r12, r12
   146 000015EE 4D31ED              <1>     xor r13, r13
   147 000015F1 4D31F6              <1>     xor r14, r14
   148 000015F4 4D31FF              <1>     xor r15, r15
   149                              <1> 
   150 000015F7 CD38                <1>     int 38h
   151                              <1> 
   152                              <1> 
   153 000015F9 4C6F6164696E672053- <1> startboot:  db "Loading SCP/BIOS...", 0Ah, 0Dh, 0
   153 00001602 43502F42494F532E2E- <1>
   153 0000160B 2E0A0D00            <1>
   154 0000160F 0A0D5343502F42494F- <1> endboot:    db    0Ah,0Dh,"SCP/BIOS system initialisation complete", 0Ah, 0Dh 
   154 00001618 532073797374656D20- <1>
   154 00001621 696E697469616C6973- <1>
   154 0000162A 6174696F6E20636F6D- <1>
   154 00001633 706C6574650A0D      <1>
   155 0000163A 4E6F204F7065726174- <1>         db "No Operating System detected. Strike any key to launch SYSDEBUG."
   155 00001643 696E67205379737465- <1>
   155 0000164C 6D2064657465637465- <1>
   155 00001655 642E20537472696B65- <1>
   155 0000165E 20616E79206B657920- <1>
   155 00001667 746F206C61756E6368- <1>
   155 00001670 205359534445425547- <1>
   155 00001679 2E                  <1>
   156 0000167A 2E2E0A0D00          <1>             db "..",0Ah, 0Dh,0
   157 0000167F 5374617274696E6720- <1> endboot2:   db "Starting SCP/BIOS SYSDEBUG...",0Ah,0Dh,0
   157 00001688 5343502F42494F5320- <1>
   157 00001691 53595344454255472E- <1>
   157 0000169A 2E2E0A0D00          <1>
   158 0000169F 0A0A0D555342205265- <1> dbgmsg:     db 0Ah,0Ah,0Dh,"USB Rem. Devices: ",0
   158 000016A8 6D2E20446576696365- <1>
   158 000016B1 733A2000            <1>
   159 000016B5 0A0D496E7420333368- <1> dbgmsg2:    db 0Ah,0Dh,"Int 33h Devices: ",0
   159 000016BE 20446576696365733A- <1>
   159 000016C7 2000                <1>
   160 000016C9 0A0D434F4D20506F72- <1> dbgmsg3:    db 0Ah,0Dh,"COM Ports: ",0
   160 000016D2 74733A2000          <1>
   161 000016D7 0A0D41544120466978- <1> dbgmsg4:    db 0Ah,0Dh,"ATA Fixed Devices: ", 0
   161 000016E0 656420446576696365- <1>
   161 000016E9 733A2000            <1>
   162                              <1> memprint:
   163                              <1> ;Simple proc to print memory status
   164 000016ED 6631DB              <1>     xor bx, bx 
   165 000016F0 48BD-               <1>     mov rbp, .convmemmsg
   165 000016F2 [4618000000000000]  <1>
   166 000016FA 66B80413            <1>     mov ax, 1304h
   167 000016FE CD30                <1>     int 30h
   168 00001700 CD32                <1>     int 32h    ;Get conv Size
   169 00001702 25FFFF0000          <1>     and eax, 0FFFFh ;Clear upper bits
   170 00001707 E8F4000000          <1>     call .printdecimalword
   171 0000170C 48BD-               <1>     mov rbp, .kb
   171 0000170E [BD18000000000000]  <1>
   172 00001716 66B80413            <1>     mov ax, 1304h
   173 0000171A CD30                <1>     int 30h
   174                              <1> 
   175 0000171C 66B801E8            <1>     mov ax, 0E801h
   176 00001720 CD35                <1>     int 35h
   177 00001722 25FFFF0000          <1>     and eax, 0FFFFh
   178 00001727 81E3FFFF0000        <1>     and ebx, 0FFFFh
   179 0000172D 81E1FFFF0000        <1>     and ecx, 0FFFFh
   180 00001733 81E2FFFF0000        <1>     and edx, 0FFFFh
   181 00001739 53                  <1>     push rbx
   182 0000173A 52                  <1>     push rdx
   183 0000173B 4839C8              <1>     cmp rax, rcx
   184 0000173E 740C                <1>     je .sense1    ;Sensible
   185 00001740 4885C0              <1>     test rax, rax
   186 00001743 480F44C1            <1>     cmovz rax, rcx
   187 00001747 4885C0              <1>     test rax, rax
   188 0000174A 7427                <1>     jz .pt2
   189                              <1> .sense1:
   190 0000174C 50                  <1>     push rax
   191 0000174D 48BD-               <1>     mov rbp, .extmemmsg
   191 0000174F [6318000000000000]  <1>
   192 00001757 66B80413            <1>     mov ax, 1304h
   193 0000175B CD30                <1>     int 30h
   194 0000175D 58                  <1>     pop rax
   195 0000175E E89D000000          <1>     call .printdecimalword
   196 00001763 48BD-               <1>     mov rbp, .kb
   196 00001765 [BD18000000000000]  <1>
   197 0000176D 66B80413            <1>     mov ax, 1304h
   198 00001771 CD30                <1>     int 30h
   199                              <1> .pt2:
   200 00001773 58                  <1>     pop rax
   201 00001774 59                  <1>     pop rcx
   202 00001775 4839C8              <1>     cmp rax, rcx
   203 00001778 740C                <1>     je .sense2    ;Sensible
   204 0000177A 4885C0              <1>     test rax, rax
   205 0000177D 480F44C1            <1>     cmovz rax, rcx
   206 00001781 4885C0              <1>     test rax, rax
   207 00001784 742B                <1>     jz .pt3
   208                              <1> .sense2:
   209 00001786 50                  <1>     push rax
   210 00001787 48BD-               <1>     mov rbp, .extmemmsg2
   210 00001789 [8118000000000000]  <1>
   211 00001791 66B80413            <1>     mov ax, 1304h
   212 00001795 CD30                <1>     int 30h
   213 00001797 58                  <1>     pop rax
   214                              <1> 
   215 00001798 48C1E006            <1>     shl rax, 6    ;Turn 64Kb into Kb
   216 0000179C E85F000000          <1>     call .printdecimalword
   217 000017A1 48BD-               <1>     mov rbp, .kb
   217 000017A3 [BD18000000000000]  <1>
   218 000017AB 66B80413            <1>     mov ax, 1304h
   219 000017AF CD30                <1>     int 30h
   220                              <1> .pt3:   ;Read total free size from big map
   221 000017B1 50                  <1>     push rax
   222 000017B2 48BD-               <1>     mov rbp, .totalmem
   222 000017B4 [A018000000000000]  <1>
   223 000017BC B804130000          <1>     mov eax, 1304h
   224 000017C1 CD30                <1>     int 30h
   225 000017C3 58                  <1>     pop rax
   226 000017C4 488B0425[E0010000]  <1>     mov rax, qword [sysMem]
   227 000017CC 31DB                <1>     xor ebx, ebx
   228 000017CE 8B1C25[E8010000]    <1>     mov ebx, dword [scpSize]
   229 000017D5 4829D8              <1>     sub rax, rbx
   230 000017D8 48C1E80A            <1>     shr rax, 0Ah                ;Get number of Kb's free
   231 000017DC E81F000000          <1>     call .printdecimalword  
   232 000017E1 48BD-               <1>     mov rbp, .kb
   232 000017E3 [BD18000000000000]  <1>
   233 000017EB 66B80413            <1>     mov ax, 1304h
   234 000017EF CD30                <1>     int 30h
   235                              <1> 
   236 000017F1 B80A0E0000          <1>     mov eax, 0E0Ah
   237 000017F6 CD30                <1>     int 30h
   238 000017F8 B80D0E0000          <1>     mov eax, 0E0Dh   ;CR/LF
   239 000017FD CD30                <1>     int 30h
   240                              <1> 
   241 000017FF C3                  <1>     ret
   242                              <1> 
   243                              <1> .printdecimalword:
   244                              <1> ;Takes the qword in rax and prints its decimal representation
   245 00001800 52                  <1>     push rdx
   246 00001801 51                  <1>     push rcx
   247 00001802 53                  <1>     push rbx
   248 00001803 50                  <1>     push rax
   249 00001804 55                  <1>     push rbp
   250 00001805 4831C9              <1>     xor rcx, rcx
   251 00001808 6631ED              <1>     xor bp, bp    ;Use bp as #of digits counter
   252 0000180B 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   252 00001814 00                  <1>
   253                              <1> .pdw0:
   254 00001815 FFC5                <1>     inc ebp
   255 00001817 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   256 0000181B 31D2                <1>     xor edx, edx
   257 0000181D 48F7F3              <1>     div rbx
   258 00001820 80C230              <1>     add dl, '0'
   259 00001823 80FA39              <1>     cmp dl, '9'
   260 00001826 7603                <1>     jbe .pdw1
   261 00001828 80C207              <1>     add dl, 'A'-'0'-10
   262                              <1> .pdw1:
   263 0000182B 88D1                <1>     mov cl, dl    ;Save remainder byte
   264 0000182D 4885C0              <1>     test rax, rax
   265 00001830 75E3                <1>     jnz .pdw0
   266                              <1> .pdw2:
   267 00001832 88C8                <1>     mov al, cl    ;Get most sig digit into al
   268 00001834 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   269 00001838 B40E                <1>     mov ah, 0Eh
   270 0000183A CD30                <1>     int 30h
   271 0000183C FFCD                <1>     dec ebp
   272 0000183E 75F2                <1>     jnz .pdw2
   273                              <1> 
   274 00001840 5D                  <1>     pop rbp
   275 00001841 58                  <1>     pop rax
   276 00001842 5B                  <1>     pop rbx
   277 00001843 59                  <1>     pop rcx
   278 00001844 5A                  <1>     pop rdx
   279 00001845 C3                  <1>     ret
   280 00001846 0A0D4672656520436F- <1> .convmemmsg:        db 0Ah,0Dh,"Free Conventional Memory: ",0
   280 0000184F 6E76656E74696F6E61- <1>
   280 00001858 6C204D656D6F72793A- <1>
   280 00001861 2000                <1>
   281 00001863 0A0D546F74616C204C- <1> .extmemmsg:         db 0Ah,0Dh,"Total Low Extended Memory: ",0    
   281 0000186C 6F7720457874656E64- <1>
   281 00001875 6564204D656D6F7279- <1>
   281 0000187E 3A2000              <1>
   282 00001881 0A0D546F74616C2048- <1> .extmemmsg2:        db 0Ah,0Dh,"Total High Extended Memory: ",0
   282 0000188A 69676820457874656E- <1>
   282 00001893 646564204D656D6F72- <1>
   282 0000189C 793A2000            <1>
   283 000018A0 0A0D546F74616C2046- <1> .totalmem:          db 0Ah,0Dh,"Total Free System Memory: ",0
   283 000018A9 726565205379737465- <1>
   283 000018B2 6D204D656D6F72793A- <1>
   283 000018BB 2000                <1>
   284 000018BD 4B00                <1> .kb:                db "K",0
    72                                  %include "./Source/Init/IntTable.asm"
    73                              <1> ;----------------------Interrupt Tables--------------------------
    74                              <1> IDT_TABLE:
    75                              <1> CPU_IDT:
    76 000018BF [7D53000000000000]  <1>     dq i0
    77 000018C7 [8553000000000000]  <1>     dq i1
    78 000018CF [9453000000000000]  <1>     dq i2
    79 000018D7 [A353000000000000]  <1>     dq i3
    80 000018DF [B253000000000000]  <1>     dq i4
    81 000018E7 [C153000000000000]  <1>     dq i5
    82 000018EF [D053000000000000]  <1>     dq i6
    83 000018F7 [DF53000000000000]  <1>     dq i7
    84 000018FF [EE53000000000000]  <1>     dq i8
    85 00001907 [FD53000000000000]  <1>     dq i9
    86 0000190F [0C54000000000000]  <1>     dq i10
    87 00001917 [1B54000000000000]  <1>     dq i11
    88 0000191F [2A54000000000000]  <1>     dq i12
    89 00001927 [3954000000000000]  <1>     dq i13
    90 0000192F [4554000000000000]  <1>     dq i14
    91 00001937 [5154000000000000]  <1>     dq i15
    92 0000193F [5D54000000000000]  <1>     dq i16
    93 00001947 [6954000000000000]  <1>     dq i17
    94 0000194F [7554000000000000]  <1>     dq i18
    95 00001957 [8154000000000000]  <1>     dq i19
    96 0000195F [8D54000000000000]  <1>     dq i20
    97 00001967 [9954000000000000]  <1>     dq i21
    98 0000196F [9C57000000000000]- <1>     times 0Ah dq dummy_return_64    ;just return, reserved interrupts!
    98 0000196F <rep Ah>            <1>
    99                              <1> HW_IDT:
   100                              <1> ;--------PIC1--------:    ;Int 20h-27h
   101 000019BF [0F01000000000000]  <1>     dq timer_IRQ0
   102 000019C7 [4F01000000000000]  <1>     dq kb_IRQ1
   103 000019CF [9657000000000000]  <1>     dq dummy_interrupt.pic1
   104 000019D7 [CD09000000000000]  <1>     dq ser_IRQ3
   105 000019DF [DF09000000000000]  <1>     dq ser_IRQ4
   106 000019E7 [9657000000000000]  <1>     dq dummy_interrupt.pic1
   107 000019EF [A80A000000000000]  <1>     dq fdd_IRQ6
   108 000019F7 [7C0B000000000000]  <1>     dq default_IRQ7
   109                              <1> ;--------PIC2--------:    ;Int 28h-2Fh
   110 000019FF [B00A000000000000]  <1>     dq rtc_IRQ8
   111 00001A07 [8F57000000000000]  <1>     dq dummy_interrupt.pic2
   112 00001A0F [8F57000000000000]  <1>     dq dummy_interrupt.pic2
   113 00001A17 [8F57000000000000]  <1>     dq dummy_interrupt.pic2
   114 00001A1F [8F57000000000000]  <1>     dq dummy_interrupt.pic2
   115 00001A27 [8F57000000000000]  <1>     dq dummy_interrupt.pic2
   116 00001A2F [E30A000000000000]  <1>     dq hdd_IRQ14
   117 00001A37 [9B0B000000000000]  <1>     dq default_IRQ15
   118                              <1> SW_IDT:    ;Int 30h onwards!
   119 00001A3F [750C000000000000]  <1>     dq scr_io            ;Int 30h, VGA Screen drawing/TTY functions
   120 00001A47 [FF12000000000000]  <1>     dq machineWord_io    ;Int 31h, Give the BIOS hardware bitfield
   121 00001A4F [3613000000000000]  <1>     dq convRAM_io        ;Int 32h, Give conv memory available
   122 00001A57 [5913000000000000]  <1>     dq disk_io           ;Int 33h, Storage device Functions
   123 00001A5F [791D000000000000]  <1>     dq serial_io         ;Int 34h, Serial Port Functions
   124 00001A67 [E71E000000000000]  <1>     dq misc_io           ;Int 35h, Misc functions
   125 00001A6F [8922000000000000]  <1>     dq kb_io             ;Int 36h, Keyboard functions
   126 00001A77 [0B23000000000000]  <1>     dq printer_io        ;Int 37h, Reserved [Who uses parallel anymore?]
   127 00001A7F [AC23000000000000]  <1>     dq MCP_int           ;Int 38h, launch MCP, and install its "API" handle
   128 00001A87 [B331000000000000]  <1>     dq bootstrapInt      ;Int 39h, restart the PC using an interrupt
   129 00001A8F [4C32000000000000]  <1>     dq timerInt          ;Int 3Ah, Time of day
   130 00001A97 [B734000000000000]  <1>     dq ctrlbreak_io      ;Int 3Bh, user Break
   131 00001A9F [9C57000000000000]  <1>     dq dummy_return_64   ;Int 3Ch, user IRQ0 hook
   132 00001AA7 [B934000000000000]  <1>     dq scr_params_io     ;Int 3Dh, Screen Mode parameters return function
   133 00001AAF [C534000000000000]  <1>     dq disk_params_io    ;Int 3Eh, disk parameters return function
   134 00001AB7 [D734000000000000]  <1>     dq cga_ret_io        ;Int 3Fh, video extention return function
   135                              <1> IDT_TABLE_Length equ $ - IDT_TABLE
    73                                  seg0len equ ($ - $$)
    74                                  
    75                                  ;----------------------------------------------------------------
    76                                  ;                BIOS RESIDENT CODE AREA STARTS HERE            :
    77                                  ;----------------------------------------------------------------
    78                                  Segment codeResident follows=codeInit vfollows=data align=1 valign=1
    79                                  %include "./Source/Resident/Misc/Procs/common.asm"
    80                              <1> ;A file containing common procs
    81                              <1> 
    82                              <1> ;---------------------------------Procs--------------------------
    83                              <1> e820print:
    84 00000000 56                  <1>     push rsi
    85 00000001 52                  <1>     push rdx
    86 00000002 51                  <1>     push rcx
    87 00000003 53                  <1>     push rbx
    88 00000004 50                  <1>     push rax
    89 00000005 48BE-               <1>     mov rsi, bigmapptr
    89 00000007 [F005000000000000]  <1>
    90 0000000F 480FB61425-         <1>     movzx rdx, byte [bigmapSize]    ;Get the number of 24 byte entries
    90 00000014 [D5010000]          <1>
    91                              <1> .e0:
    92 00000018 48AD                <1>     lodsq
    93 0000001A E82D000000          <1>     call .printqword
    94 0000001F E845000000          <1>     call .printpipe
    95 00000024 48AD                <1>     lodsq
    96 00000026 E821000000          <1>     call .printqword
    97 0000002B E839000000          <1>     call .printpipe
    98 00000030 48AD                <1>     lodsq   
    99 00000032 E815000000          <1>     call .printqword
   100 00000037 E844000000          <1>     call .printcrlf
   101 0000003C 6631C0              <1>     xor ax, ax
   102 0000003F CD36                <1>     int 36h
   103 00000041 48FFCA              <1>     dec rdx
   104 00000044 75D2                <1>     jnz .e0
   105 00000046 58                  <1>     pop rax
   106 00000047 5B                  <1>     pop rbx
   107 00000048 59                  <1>     pop rcx
   108 00000049 5A                  <1>     pop rdx
   109 0000004A 5E                  <1>     pop rsi
   110 0000004B C3                  <1>     ret
   111                              <1> .printqword:
   112 0000004C 4889C3              <1>     mov rbx, rax
   113 0000004F 480FCB              <1>     bswap rbx
   114 00000052 48B908000000000000- <1>     mov rcx, 8
   114 0000005B 00                  <1>
   115                              <1> .pq1:
   116 0000005C 88D8                <1>     mov al, bl
   117 0000005E B404                <1>     mov ah, 04h
   118 00000060 CD30                <1>     int 30h
   119 00000062 48C1EB08            <1>     shr rbx, 8
   120 00000066 E2F4                <1>     loop .pq1
   121 00000068 C3                  <1>     ret
   122                              <1> .printpipe:
   123 00000069 55                  <1>     push rbp
   124 0000006A 48BD-               <1>     mov rbp, .pipestr
   124 0000006C [7C00000000000000]  <1>
   125 00000074 66B80413            <1>     mov ax, 1304h
   126 00000078 CD30                <1>     int 30h
   127 0000007A 5D                  <1>     pop rbp
   128 0000007B C3                  <1>     ret
   129 0000007C 207C2000            <1> .pipestr:   db " | ",0
   130                              <1> .printcrlf:
   131 00000080 55                  <1>     push rbp
   132 00000081 48BD-               <1>     mov rbp, .crlfstr
   132 00000083 [9300000000000000]  <1>
   133 0000008B 66B80413            <1>     mov ax, 1304h
   134 0000008F CD30                <1>     int 30h
   135 00000091 5D                  <1>     pop rbp
   136 00000092 C3                  <1>     ret
   137 00000093 0A0D00              <1> .crlfstr: db 0Ah,0Dh, 0
   138                              <1> beep:
   139                              <1> ;Destroys old PIT2 divisor.
   140                              <1> ;Input: 
   141                              <1> ;   bx = Frequency divisor to use for tone
   142                              <1> ;   rcx = # of ms to beep for
   143                              <1> ;All registers preserved
   144 00000096 50                  <1>     push rax
   145 00000097 B0B6                <1>     mov al, 0B6h ;Get PIT command bitfield, PIT2, lo/hi, Mode 3, Binary
   146 00000099 E643                <1>     out PITcommand, al
   147                              <1> 
   148 0000009B 6689D8              <1>     mov ax, bx       ;Move frequency divisor into ax
   149 0000009E E642                <1>     out PIT2, al     ;Output lo byte of divisor
   150 000000A0 88E0                <1>     mov al, ah
   151 000000A2 E642                <1>     out PIT2, al     ;Output hi byte of divisor
   152                              <1> 
   153 000000A4 E461                <1>     in al, port61h  ;Save original state of port 61h in ah
   154 000000A6 0C03                <1>     or al, 3        ;Set bits 0 and 1 to turn on the speaker
   155 000000A8 E661                <1>     out port61h, al
   156                              <1> 
   157 000000AA B486                <1>     mov ah, 86h     ;Wait for beep to complete
   158 000000AC CD35                <1>     int 35h
   159                              <1> 
   160 000000AE E461                <1>     in al, port61h    ;Read state of port 61h afresh
   161 000000B0 24FC                <1>     and al, ~3        ;Clear bits 0 and 1 to turn off the speaker
   162 000000B2 E661                <1>     out port61h, al
   163                              <1> 
   164 000000B4 58                  <1>     pop rax
   165 000000B5 C3                  <1>     ret
   166                              <1> 
   167                              <1> ps2wait:
   168 000000B6 50                  <1>     push rax
   169                              <1> .wnok:
   170 000000B7 EB00                <1>     jmp short $ + 2
   171 000000B9 E464                <1>     in al, ps2status
   172 000000BB A801                <1>     test al, 1    ;Can something be read from KB?
   173 000000BD 7406                <1>     jz .wok       ;Zero = no, so loop back. Not zero = proceed to check if 
   174                              <1>                   ; something can be written
   175 000000BF EB00                <1>     jmp short $ + 2
   176 000000C1 E460                <1>     in al, ps2data    ;Read it in
   177 000000C3 EBF2                <1>     jmp short .wnok
   178                              <1> .wok:
   179 000000C5 A802                <1>     test al, 2   ;Can something be written to KB?
   180 000000C7 75EE                <1>     jnz .wnok    ;Zero if yes and proceed.
   181 000000C9 58                  <1>     pop rax
   182 000000CA C3                  <1>     ret
   183                              <1>     
   184                              <1> idtWriteEntry:
   185                              <1> ;----------------------------------------------------------------
   186                              <1> ;This proc writes an interrupt handler to a particular IDT entry.
   187                              <1> ; rax = Interrupt handler ptr    (qword)
   188                              <1> ; rsi = Interrupt Number         (qword)
   189                              <1> ; dx = Attributes word           (word)
   190                              <1> ; bx = Segment selector          (word)
   191                              <1> ;On return:
   192                              <1> ; rsi incremented by 1
   193                              <1> ; Entry written
   194                              <1> ;----------------------------------------------------------------
   195 000000CB 56                  <1>     push rsi
   196 000000CC 48C1E604            <1>     shl rsi, 4h     ;Multiply IDT entry number by 16
   197 000000D0 48033425[04000000]  <1>     add rsi, qword [IDTpointer.Base]    ;rsx points to IDT entry
   198 000000D8 668906              <1>     mov word [rsi], ax  ;Get low word into offset 15...0
   199 000000DB 66895E02            <1>     mov word [rsi + 2], bx  ;Move segment selector into place
   200 000000DF 66895604            <1>     mov word [rsi + 4], dx  ;Move attribute word into place
   201 000000E3 48C1E810            <1>     shr rax, 10h    ;Bring next word low
   202 000000E7 66894606            <1>     mov word [rsi + 6], ax  ;Get low word into offset 31...16
   203 000000EB 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
   204 000000EF 894608              <1>     mov dword [rsi + 8], eax
   205 000000F2 5E                  <1>     pop rsi
   206 000000F3 48FFC6              <1>     inc rsi         ;rsi contains number of next interrupt handler
   207 000000F6 C3                  <1>     ret
   208                              <1>     
   209                              <1> cls:    ;Clear the screen, bl attrib, always clear active scr
   210 000000F7 50                  <1>     push rax
   211 000000F8 52                  <1>     push rdx
   212 000000F9 B40F                <1>     mov ah, 0Fh
   213 000000FB CD30                <1>     int 30h ;Get current active page
   214                              <1> 
   215 000000FD B402                <1>     mov ah, 02h    ;Set cursor pos
   216 000000FF 6631D2              <1>     xor dx, dx
   217 00000102 CD30                <1>     int 30h
   218 00000104 88DF                <1>     mov bh, bl
   219                              <1> ;No need for coordinates since al=00 means reset fullscreen
   220 00000106 66B80006            <1>     mov ax, 0600h
   221 0000010A CD30                <1>     int 30h    ;scroll page with grey on black
   222 0000010C 5A                  <1>     pop rdx
   223 0000010D 58                  <1>     pop rax
   224 0000010E C3                  <1>     ret
    80                                  ;--------------------Interrupt Service routines------------------
    81                                  
    82                                  ;======================HARDWARE INTERRUPTS=======================
    83                                  %include "./Source/Resident/Hardware/Timers/pitInt.asm"
    84                              <1> ;----------------Timer Interrupt IRQ 0/Int 20h-------------------
    85                              <1> ;This interrupt simply increments an internal timer and 
    86                              <1> ; calls a software interrupt (5Ch) which can be used by user 
    87                              <1> ; applications.
    88                              <1> ;----------------------------------------------------------------
    89                              <1> timer_IRQ0:
    90 0000010F FB                  <1>     sti    
    91 00000110 50                  <1>     push rax
    92 00000111 FF0425[37010000]    <1>     inc dword [pit_ticks]
    93 00000118 8B0425[37010000]    <1>     mov eax, dword [pit_ticks]
    94 0000011F 25FFFF1F00          <1>     and eax, 1FFFFFh    ;Clear OF bit [mask on bits 20:0]
    95 00000124 3DB0001800          <1>     cmp eax, 1800B0h    ;Ticks in one full day
    96 00000129 7519                <1>     jnz .tret            ;Not quite there
    97 0000012B 66C70425[37010000]- <1>     mov word [pit_ticks], 0     ;Zero lo count
    97 00000133 0000                <1>
    98 00000135 C60425[39010000]00  <1>     mov byte [pit_ticks + 2], 0    ;Zero hi count
    99 0000013D FE0425[3A010000]    <1>     inc byte [pit_ticks + 3]    ;Increment day OF counter    
   100                              <1> .tret:
   101 00000144 CD3C                <1>     int 3Ch        ;Call user handler
   102                              <1> 
   103 00000146 B020                <1>     mov al, EOI
   104 00000148 E620                <1>     out pic1command, al
   105 0000014A E680                <1>     out waitp, al    ;allow one io cycle to run
   106                              <1> 
   107 0000014C 58                  <1>     pop rax
   108 0000014D 48CF                <1>     iretq
   109                              <1> ;-------------------------End of Interrupt-----------------------
    84                                  %include "./Source/Resident/Hardware/PS2/keybInt.asm"
    85                              <1> ;----------------Keyboard Interrupt IRQ 1/Int 21h----------------
    86                              <1> ;This interrupt takes scancodes from the PC keyboard, translates 
    87                              <1> ; them into scancode/ASCII char pair and stores the pair into 
    88                              <1> ; the buffer for the software keyboard interrupt to use.
    89                              <1> ;----------------------------------------------------------------
    90                              <1> kb_IRQ1:
    91 0000014F FB                  <1>     sti        ;Reenable interrupts
    92 00000150 50                  <1>     push rax
    93 00000151 53                  <1>     push rbx
    94 00000152 51                  <1>     push rcx
    95 00000153 57                  <1>     push rdi
    96 00000154 31C0                <1>     xor eax, eax
    97                              <1> 
    98                              <1> .k0:
    99 00000156 E460                <1>     in al, ps2data    ;Get the scancode (Set 1)
   100 00000158 85C0                <1>     test eax, eax    ;Check to see if we got an error code from the keyboard.
   101 0000015A 0F84A0020000        <1>     jz .kb_error
   102 00000160 483D80000000        <1>     cmp rax, 80h
   103 00000166 0F8ED8000000        <1>     jle .basickey    ;A normal keypress, nothing too magical.
   104 0000016C 483DE0000000        <1>     cmp rax, 0E0h    ;Compare against special keys
   105 00000172 7472                <1>     je .special_keys
   106 00000174 483DE1000000        <1>     cmp rax, 0E1h    ;Pause
   107 0000017A 747D                <1>     je .pause
   108 0000017C 483DAA000000        <1>     cmp rax, 0AAh    ;LShift released
   109 00000182 0F8490000000        <1>     je .lshift_released
   110 00000188 483DB6000000        <1>     cmp rax, 0B6h    ;RShift released
   111 0000018E 0F8488000000        <1>     je .rshift_released
   112 00000194 483DB8000000        <1>     cmp rax, 0B8h    ;Alt Shift released
   113 0000019A 7474                <1>     je .alt_shift_released
   114 0000019C 483D9D000000        <1>     cmp rax, 9Dh    ;Ctrl Shift released
   115 000001A2 7470                <1>     je .ctrl_shift_released
   116 000001A4 483DD2000000        <1>     cmp rax, 0D2h    ;Toggle Insert
   117 000001AA 7460                <1>     je .insert_released
   118 000001AC EB25                <1>     jmp short .kb1_exit    ;Just exit if something weird gets sent
   119                              <1> 
   120                              <1> .kb_store_in_buffer:
   121 000001AE 488B1C25[4A000000]  <1>     mov rbx, qword [kb_buf_tail]    ;point rbx to tail
   122 000001B6 4889DF              <1>     mov rdi, rbx ;Save bx in di for storing the data in AX after bx gets inc 
   123 000001B9 E834210000          <1>     call kb_io.kb_ptr_adv            ;safely advance the pointer
   124 000001BE 483B1C25[42000000]  <1>     cmp rbx, qword [kb_buf_head]    ;Have we wrapped around?
   125 000001C6 745F                <1>     je .kb_buf_full_beep            ;discard and beep
   126 000001C8 668907              <1>     mov word [rdi], ax                ;mov scancode/ascii pair into buffer
   127 000001CB 48891C25[4A000000]  <1>     mov qword [kb_buf_tail], rbx    ;store new pointer back into tail
   128                              <1> 
   129                              <1> .kb1_exit:
   130 000001D3 B0FC                <1>     mov al, ~(kb_flag2_e0 | kb_flag2_e1)        ;move the notted version into al
   131 000001D5 200425[64000000]    <1>     and byte [kb_flags_2], al        ;Nullify the e0 and e1 flag
   132                              <1> .kb1_exit_e0:
   133 000001DC B020                <1>     mov al, EOI
   134 000001DE E620                <1>     out pic1command, al    ;End of interrupt to pic1 command port
   135                              <1> 
   136 000001E0 5F                  <1>     pop rdi
   137 000001E1 59                  <1>     pop rcx
   138 000001E2 5B                  <1>     pop rbx
   139 000001E3 58                  <1>     pop rax
   140 000001E4 48CF                <1>     iretq
   141                              <1> 
   142                              <1> .special_keys:    ;An E0 process
   143 000001E6 B002                <1>     mov al, kb_flag2_e0         ;Set the bit for the flag
   144 000001E8 080425[64000000]    <1>     or byte [kb_flags_2], al    ;Set the flag
   145 000001EF 802425[64000000]FE  <1>     and byte [kb_flags_2], ~kb_flag2_e1    ;clear the E1 bit
   146 000001F7 EBE3                <1>     jmp short .kb1_exit_e0      ;Exit from IRQ without resetting flags 
   147                              <1> .pause:    ;An E1 process
   148 000001F9 B001                <1>     mov al, kb_flag2_e1         ;Set the bit for the flag
   149 000001FB 080425[64000000]    <1>     or byte [kb_flags_2], al    ;Toggle the flag, since 9D and C5 will be 
   150                              <1>                                 ; ignored by the Int handler
   151 00000202 802425[64000000]FD  <1>     and byte [kb_flags_2], ~kb_flag2_e0    ;clear the E0 bit
   152 0000020A EBD0                <1>     jmp short .kb1_exit_e0
   153                              <1> 
   154                              <1> .insert_released:
   155 0000020C B07F                <1>     mov al, ~kb_flag_insset     ;Flag negation
   156 0000020E EB0E                <1>     jmp short .shift_release_common
   157                              <1> .alt_shift_released:
   158 00000210 B0F7                <1>     mov al, ~kb_flag_alt        ;Flag negation
   159 00000212 EB0A                <1>     jmp short .shift_release_common
   160                              <1> .ctrl_shift_released:
   161 00000214 B0FB                <1>     mov al, ~kb_flag_ctrl       ;Flag negation
   162 00000216 EB06                <1>     jmp short .shift_release_common
   163                              <1> .lshift_released:
   164 00000218 B0FD                <1>     mov al, ~kb_flag_lshift     ;Flag negation
   165 0000021A EB02                <1>     jmp short .shift_release_common
   166                              <1> .rshift_released:
   167 0000021C B0FE                <1>     mov al, ~kb_flag_rshift     ;Flag negation
   168                              <1> .shift_release_common:
   169 0000021E 200425[62000000]    <1>     and byte [kb_flags], al     ;Clear the relevant bit
   170 00000225 EBAC                <1>     jmp short .kb1_exit
   171                              <1> 
   172                              <1> 
   173                              <1> .kb_buf_full_beep:
   174 00000227 53                  <1>     push rbx
   175 00000228 51                  <1>     push rcx
   176 00000229 BBA9040000          <1>     mov ebx, 04A9h ;Frequency divisor for 1000Hz tone
   177 0000022E 48B9F4010000000000- <1>     mov rcx, 500   ;Beep for a 1/2 second
   177 00000237 00                  <1>
   178 00000238 E859FEFFFF          <1>     call beep
   179 0000023D 59                  <1>     pop rcx
   180 0000023E 5B                  <1>     pop rbx
   181 0000023F E98FFFFFFF          <1>     jmp .kb1_exit
   182                              <1> 
   183                              <1> .basickey:          ;al contains the scancode
   184 00000244 483D46000000        <1>     cmp rax, 46h
   185 0000024A 0F8421010000        <1>     je .e0special   ;ctrl+break checker (E0 46h is make for break haha)
   186                              <1> .kbbk1:
   187 00000250 483D2A000000        <1>     cmp rax, 2Ah    ;Left Shift scancode
   188 00000256 0F84E4000000        <1>     je .lshift_pressed
   189 0000025C 483D36000000        <1>     cmp rax, 36h    ;Right Shift scancode
   190 00000262 0F84DC000000        <1>     je .rshift_pressed
   191 00000268 483D38000000        <1>     cmp rax, 38h    ;Alt Shift key scancode
   192 0000026E 0F84C4000000        <1>     je .alt_shift_pressed
   193 00000274 483D1D000000        <1>     cmp rax, 1Dh    ;Ctrl Shift key scancode
   194 0000027A 0F84BC000000        <1>     je .ctrl_shift_pressed
   195                              <1>     
   196 00000280 483D3A000000        <1>     cmp rax, 3Ah    ;Caps lock key
   197 00000286 0F84CA000000        <1>     je .caps_lock
   198 0000028C 483D45000000        <1>     cmp rax, 45h    ;Num lock key
   199 00000292 0F84C2000000        <1>     je .num_lock
   200                              <1> ;    cmp rax, 46h    ;Scroll lock key
   201                              <1> ;    je .scroll_lock
   202 00000298 483D52000000        <1>     cmp rax, 52h    ;Insert key pressed
   203 0000029E 0F84AE000000        <1>     je .ins_toggle    
   204 000002A4 483D53000000        <1>     cmp rax, 53h    ;Delete key, for CTRL+ALT+DEL
   205 000002AA 0F8408010000        <1>     je .ctrl_alt_del
   206                              <1> .keylookup:
   207 000002B0 48BB-               <1>     mov rbx, .kb_sc_ascii_lookup
   207 000002B2 [3D04000000000000]  <1>
   208                              <1>                     ; upper 7 bytes of rax are completely clear
   209 000002BA 66C1E004            <1>     shl ax, 4       ;multiply ax, the scancode, by 16, to offset to correct row
   210 000002BE 4801C3              <1>     add rbx, rax    ;offset rbx to the correct row
   211                              <1> ;Now check shift states, to align with column. rax is free again
   212 000002C1 8A0425[62000000]    <1>     mov al, byte [kb_flags]
   213                              <1> 
   214 000002C8 A802                <1>     test al, kb_flag_lshift
   215 000002CA 7525                <1>     jnz .addshiftvalue            ;If that bit is set, jump!
   216 000002CC A801                <1>     test al, kb_flag_rshift
   217 000002CE 7521                <1>     jnz .addshiftvalue
   218 000002D0 A804                <1>     test al, kb_flag_ctrl
   219 000002D2 752E                <1>     jnz .addctrlvalue
   220 000002D4 A808                <1>     test al, kb_flag_alt
   221 000002D6 7533                <1>     jnz .addaltvalue
   222 000002D8 A820                <1>     test al, kb_flag_numset
   223 000002DA 7538                <1>     jnz .addnumvalue
   224 000002DC A840                <1>     test al, kb_flag_capsset
   225 000002DE 753D                <1>     jnz .addcapsvalue
   226                              <1> 
   227                              <1> .keyget:
   228 000002E0 668B03              <1>     mov ax, word [rbx] ;Get correct word into ax!
   229 000002E3 6685C0              <1>     test ax, ax        ;check if the value is zero, if so, dont store in buffer
   230 000002E6 0F84E7FEFFFF        <1>     jz .kb1_exit
   231 000002EC E9BDFEFFFF          <1>     jmp .kb_store_in_buffer
   232                              <1> 
   233                              <1> .addshiftvalue:    ;first check if we shift with caps or num
   234 000002F1 A820                <1>     test al, kb_flag_numset
   235 000002F3 753A                <1>     jnz .addshiftnum
   236 000002F5 A840                <1>     test al, kb_flag_capsset
   237 000002F7 752D                <1>     jnz .addshiftcaps
   238                              <1>     ;Collapse through, it is just shift, add 2 to rbx
   239 000002F9 4881C302000000      <1>     add rbx, 1h*2h
   240 00000300 EBDE                <1>     jmp short .keyget
   241                              <1> .addctrlvalue:
   242 00000302 4881C304000000      <1>     add rbx, 2h*2h
   243 00000309 EBD5                <1>     jmp short .keyget
   244                              <1> .addaltvalue:
   245 0000030B 4881C306000000      <1>     add rbx, 3h*2h
   246 00000312 EBCC                <1>     jmp short .keyget
   247                              <1> .addnumvalue:
   248 00000314 4881C308000000      <1>     add rbx, 4h*2h
   249 0000031B EBC3                <1>     jmp short .keyget
   250                              <1> .addcapsvalue:
   251 0000031D 4881C30A000000      <1>     add rbx, 5h*2h
   252 00000324 EBBA                <1>     jmp short .keyget
   253                              <1> .addshiftcaps:
   254 00000326 4881C30C000000      <1>     add rbx, 6h*2h
   255 0000032D EBB1                <1>     jmp short .keyget
   256                              <1> .addshiftnum:
   257 0000032F 4881C30E000000      <1>     add rbx, 7h*2h
   258 00000336 EBA8                <1>     jmp short .keyget
   259                              <1> 
   260                              <1> .alt_shift_pressed:
   261 00000338 B008                <1>     mov al, kb_flag_alt
   262 0000033A EB0A                <1>     jmp short .shift_pressed_common
   263                              <1> .ctrl_shift_pressed:
   264 0000033C B004                <1>     mov al, kb_flag_ctrl
   265 0000033E EB06                <1>     jmp short .shift_pressed_common
   266                              <1> .lshift_pressed:
   267 00000340 B002                <1>     mov al, kb_flag_lshift
   268 00000342 EB02                <1>     jmp short .shift_pressed_common
   269                              <1> .rshift_pressed:
   270 00000344 B001                <1>     mov al, kb_flag_rshift
   271                              <1> .shift_pressed_common:
   272 00000346 080425[62000000]    <1>     or byte [kb_flags], al    ;toggle flag bits
   273 0000034D E981FEFFFF          <1>     jmp .kb1_exit             ;Exit
   274                              <1> 
   275                              <1> .ins_toggle:
   276 00000352 B080                <1>     mov al, kb_flag_insset
   277 00000354 EB0A                <1>     jmp short .lock_common
   278                              <1> .caps_lock:
   279 00000356 B040                <1>     mov al, kb_flag_capsset
   280 00000358 EB06                <1>     jmp short .lock_common
   281                              <1> .num_lock:
   282 0000035A B020                <1>     mov al, kb_flag_numset
   283 0000035C EB02                <1>     jmp short .lock_common
   284                              <1> .scroll_lock:
   285 0000035E B010                <1>     mov al, kb_flag_scrlset
   286                              <1> .lock_common:
   287 00000360 300425[62000000]    <1>     xor byte [kb_flags], al    ;toggle bit
   288 00000367 E875000000          <1>     call .set_kb_lights
   289 0000036C E962FEFFFF          <1>     jmp .kb1_exit
   290                              <1> 
   291                              <1> .e0special:
   292 00000371 F60425[64000000]02  <1>     test byte [kb_flags_2], 00000010b    ;Check for E0 set
   293 00000379 7505                <1>     jnz .ctrl_break
   294 0000037B E9DEFFFFFF          <1>     jmp .scroll_lock    ;Assume scroll lock set
   295                              <1> .ctrl_break:
   296 00000380 800C25[65000000]01  <1>     or byte [break_flag], 1        ;set break_flag
   297 00000388 6631C0              <1>     xor ax, ax
   298 0000038B 53                  <1>     push rbx
   299 0000038C 48BB-               <1>     mov rbx, kb_buffer            ;mov the buffer addr to rbx
   299 0000038E [2200000000000000]  <1>
   300 00000396 48891C25[42000000]  <1>     mov qword [kb_buf_head], rbx
   301 0000039E 48891C25[4A000000]  <1>     mov qword [kb_buf_tail], rbx
   302 000003A6 668903              <1>     mov word [rbx], ax    ;Store zero as the first two bytes of the
   303 000003A9 5B                  <1>     pop rbx
   304 000003AA CD3B                <1>     int 3Bh                      ;Call the CTRL+Break handler
   305 000003AC 200425[65000000]    <1>     and byte [break_flag], al    ;clear break_flag
   306 000003B3 E91BFEFFFF          <1>     jmp .kb1_exit        ;return clearing E0
   307                              <1> 
   308                              <1> .ctrl_alt_del:
   309 000003B8 50                  <1>     push rax    ;save scancode
   310 000003B9 8A0425[64000000]    <1>     mov al, byte [kb_flags_2]
   311 000003C0 A802                <1>     test al, kb_flag2_e0    ;Delete scancode is E0, 53, check if we first had E0
   312 000003C2 7417                <1>     jz .ctrl_alt_del_no_reset
   313                              <1> 
   314 000003C4 8A0425[62000000]    <1>     mov al, byte [kb_flags]
   315 000003CB 240C                <1>     and al,  kb_flag_ctrl | kb_flag_alt
   316 000003CD 3C0C                <1>     cmp al, kb_flag_ctrl | kb_flag_alt    ;Test if Ctrl + Alt is being pressed
   317 000003CF 750A                <1>     jne .ctrl_alt_del_no_reset
   318                              <1> .ctrl_alt_del_killPC:
   319 000003D1 E464                <1>     in al, 64h    ;Check if the input buffer is empty
   320 000003D3 A802                <1>     test al, 2    ;Check if clear
   321 000003D5 75FA                <1>     jne .ctrl_alt_del_killPC    ;keep waiting
   322 000003D7 B0FE                <1>     mov al, 0FEh    ;Pulse kill lines
   323 000003D9 E664                <1>     out 64h, al    
   324                              <1>     ;PC dead, time to reboot!
   325                              <1> .ctrl_alt_del_no_reset:
   326 000003DB 58                  <1>     pop rax        ;return the OG scancode and proceed as normal
   327 000003DC E9CFFEFFFF          <1>     jmp .keylookup
   328                              <1> 
   329                              <1> 
   330                              <1> .set_kb_lights:
   331 000003E1 50                  <1>     push rax
   332                              <1> 
   333 000003E2 E8CFFCFFFF          <1>     call ps2wait
   334                              <1> 
   335 000003E7 B0ED                <1>     mov al, 0EDh
   336 000003E9 E660                <1>     out ps2data, al
   337                              <1> 
   338 000003EB E8C6FCFFFF          <1>     call ps2wait
   339                              <1>     
   340 000003F0 8A0425[62000000]    <1>     mov al, byte [kb_flags]    ;get flag into al
   341 000003F7 C0E804              <1>     shr al, 4
   342 000003FA 2407                <1>     and al, 111b    ;mask Insert bit off to isolate the NUM,CAPS,SCRL status 
   343                              <1>                     ; bits <=> LED status.
   344 000003FC E660                <1>     out ps2data, al    ;send the led status away
   345                              <1> 
   346 000003FE 58                  <1>     pop rax
   347 000003FF C3                  <1>     ret
   348                              <1> 
   349                              <1> .kb_error:     ;If error recieved from Keyboard, hang the system, cold reboot 
   350                              <1>                ; needed.
   351 00000400 FA                  <1>     cli        ;Disable interrupts/Further keystrokes
   352 00000401 66BB0700            <1>     mov bx, 0007h    ;cls attribs
   353 00000405 E8EDFCFFFF          <1>     call cls    ;clear the screen
   354 0000040A 66B80413            <1>     mov ax, 1304h
   355 0000040E 30FF                <1>     xor bh, bh
   356 00000410 48BD-               <1>     mov rbp, .kb_error_msg
   356 00000412 [2004000000000000]  <1>
   357 0000041A CD30                <1>     int 30h
   358                              <1> .kber1:
   359 0000041C F390                <1>     pause
   360 0000041E EBFC                <1>     jmp short .kber1
   361 00000420 4B6579626F61726420- <1> .kb_error_msg:    db    "Keyboard Error. Halting...", 0Ah, 0Dh, 0
   361 00000429 4572726F722E204861- <1>
   361 00000432 6C74696E672E2E2E0A- <1>
   361 0000043B 0D00                <1>
   362                              <1> 
   363                              <1> .kb_sc_ascii_lookup:    ;Scancodes 00h-58h
   364                              <1> ; Scancodes 00h-0Fh
   365                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   366 0000043D 000000000000000000- <1>  dw 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h ;NUL
   366 00000446 00000000000000      <1>
   367 0000044D 1B011B011B011B011B- <1>  dw 011Bh, 011Bh, 011Bh, 011Bh, 011Bh, 011Bh, 011Bh, 011Bh ;Esc
   367 00000456 011B011B011B01      <1>
   368 0000045D 310221020000007831- <1>  dw 0231h, 0221h, 0000h, 7800h, 0231h, 0231h, 0221h, 0221h ;1 !
   368 00000466 02310221022102      <1>
   369 0000046D 320322030003007932- <1>  dw 0332h, 0322h, 0300h, 7900h, 0332h, 0332h, 0322h, 0322h ;2 "
   369 00000476 03320322032203      <1>
   370 0000047D 33049C040000007A33- <1>  dw 0433h, 049Ch, 0000h, 7A00h, 0433h, 0433h, 049Ch, 049Ch ;3 £
   370 00000486 0433049C049C04      <1>
   371 0000048D 340524050000007B34- <1>  dw 0534h, 0524h, 0000h, 7B00h, 0534h, 0534h, 0524h, 0524h ;4 $
   371 00000496 05340524052405      <1>
   372 0000049D 350625060000007C35- <1>  dw 0635h, 0625h, 0000h, 7C00h, 0635h, 0635h, 0625h, 0625h ;5 %
   372 000004A6 06350625062506      <1>
   373 000004AD 36075E071E07007D36- <1>  dw 0736h, 075Eh, 071Eh, 7D00h, 0736h, 0736h, 075Eh, 075Eh ;6 ^
   373 000004B6 0736075E075E07      <1>
   374 000004BD 370826080000007E37- <1>  dw 0837h, 0826h, 0000h, 7E00h, 0837h, 0837h, 0826h, 0826h ;7 &
   374 000004C6 08370826082608      <1>
   375 000004CD 38092A090000007F38- <1>  dw 0938h, 092Ah, 0000h, 7F00h, 0938h, 0938h, 092Ah, 092Ah ;8 *
   375 000004D6 0938092A092A09      <1>
   376 000004DD 390A280A0000008039- <1>  dw 0A39h, 0A28h, 0000h, 8000h, 0A39h, 0A39h, 0A28h, 0A28h ;9 (
   376 000004E6 0A390A280A280A      <1>
   377 000004ED 300B290B0000008130- <1>  dw 0B30h, 0B29h, 0000h, 8100h, 0B30h, 0B30h, 0B29h, 0B29h ;0 )
   377 000004F6 0B300B290B290B      <1>
   378 000004FD 2D0C5F0C000000822D- <1>  dw 0C2Dh, 0C5Fh, 0000h, 8200h, 0C2Dh, 0C2Dh, 0C5Fh, 0C5Fh ;- _
   378 00000506 0C2D0C5F0C5F0C      <1>
   379 0000050D 3D0D2B0D000000833D- <1>  dw 0D3Dh, 0D2Bh, 0000h, 8300h, 0D3Dh, 0D3Dh, 0D2Bh, 0D2Bh ;= +
   379 00000516 0D3D0D2B0D2B0D      <1>
   380 0000051D 080E080E7F0E000008- <1>  dw 0E08h, 0E08h, 0E7Fh, 0000h, 0E08h, 0E08h, 0E08h, 0E08h ;bksp (ctrl -> del)
   380 00000526 0E080E080E080E      <1>
   381 0000052D 090F000F0000000009- <1>  dw 0F09h, 0F00h, 0000h, 0000h, 0F09h, 0F09h, 0F00h, 0F00h ;L2R Horizontal Tab
   381 00000536 0F090F000F000F      <1>
   382                              <1> 
   383                              <1> ; Scancodes 10h-1Fh
   384                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   385 0000053D 711051101110001071- <1>  dw 1071h, 1051h, 1011h, 1000h, 1071h, 1051h, 1071h, 1051h ;q Q
   385 00000546 10511071105110      <1>
   386 0000054D 771157111711001177- <1>  dw 1177h, 1157h, 1117h, 1100h, 1177h, 1157h, 1177h, 1157h ;w W
   386 00000556 11571177115711      <1>
   387 0000055D 651245120512001265- <1>  dw 1265h, 1245h, 1205h, 1200h, 1265h, 1245h, 1265h, 1245h ;e E
   387 00000566 12451265124512      <1>
   388 0000056D 721352131213001372- <1>  dw 1372h, 1352h, 1312h, 1300h, 1372h, 1352h, 1372h, 1352h ;r R
   388 00000576 13521372135213      <1>
   389 0000057D 741454141414001474- <1>  dw 1474h, 1454h, 1414h, 1400h, 1474h, 1454h, 1474h, 1454h ;t T
   389 00000586 14541474145414      <1>
   390 0000058D 791559151915001579- <1>  dw 1579h, 1559h, 1519h, 1500h, 1579h, 1559h, 1579h, 1559h ;y Y
   390 00000596 15591579155915      <1>
   391 0000059D 751655161516001675- <1>  dw 1675h, 1655h, 1615h, 1600h, 1675h, 1655h, 1675h, 1655h ;u U
   391 000005A6 16551675165516      <1>
   392 000005AD 691749170917001769- <1>  dw 1769h, 1749h, 1709h, 1700h, 1769h, 1749h, 1769h, 1749h ;i I
   392 000005B6 17491769174917      <1>
   393 000005BD 6F184F180F1800186F- <1>  dw 186Fh, 184Fh, 180Fh, 1800h, 186Fh, 184Fh, 186Fh, 184Fh ;o O
   393 000005C6 184F186F184F18      <1>
   394 000005CD 701950191019001970- <1>  dw 1970h, 1950h, 1910h, 1900h, 1970h, 1950h, 1970h, 1950h ;p P
   394 000005D6 19501970195019      <1>
   395 000005DD 5B1A7B1A1B1A00005B- <1>  dw 1A5Bh, 1A7Bh, 1A1Bh, 0000h, 1A5Bh, 1A5Bh, 1A7Bh, 1A7Bh ;[ {
   395 000005E6 1A5B1A7B1A7B1A      <1>
   396 000005ED 5D1B7D1B1D1B00005D- <1>  dw 1B5Dh, 1B7Dh, 1B1Dh, 0000h, 1B5Dh, 1B5Dh, 1B7Dh, 1B7Dh ;] }
   396 000005F6 1B5D1B7D1B7D1B      <1>
   397 000005FD 0D1C0D1C0A1C00000D- <1>  dw 1C0Dh, 1C0Dh, 1C0Ah, 0000h, 1C0Dh, 1C0Dh, 1C0Ah, 1C0Ah ;Enter (CR/LF)
   397 00000606 1C0D1C0A1C0A1C      <1>
   398 0000060D 001D001D001D001D00- <1>  dw 1D00h, 1D00h, 1D00h, 1D00h, 1D00h, 1D00h, 1D00h, 1D00h ;CTRL (left)
   398 00000616 1D001D001D001D      <1>
   399 0000061D 611E411E011E001E61- <1>  dw 1E61h, 1E41h, 1E01h, 1E00h, 1E61h, 1E41h, 1E61h, 1E41h ;a A
   399 00000626 1E411E611E411E      <1>
   400 0000062D 731F531F131F001F73- <1>  dw 1F73h, 1F53h, 1F13h, 1F00h, 1F73h, 1F53h, 1F73h, 1F53h ;s S
   400 00000636 1F531F731F531F      <1>
   401                              <1> 
   402                              <1> ; Scancodes 20h-2Fh
   403                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   404 0000063D 642044200420002064- <1>  dw 2064h, 2044h, 2004h, 2000h, 2064h, 2044h, 2064h, 2044h ;d D
   404 00000646 20442064204420      <1>
   405 0000064D 662146210621002166- <1>  dw 2166h, 2146h, 2106h, 2100h, 2166h, 2146h, 2166h, 2146h ;f F
   405 00000656 21462166214621      <1>
   406 0000065D 672247220722002267- <1>  dw 2267h, 2247h, 2207h, 2200h, 2267h, 2247h, 2267h, 2247h ;g G
   406 00000666 22472267224722      <1>
   407 0000066D 682348230823002368- <1>  dw 2368h, 2348h, 2308h, 2300h, 2368h, 2348h, 2368h, 2348h ;h H
   407 00000676 23482368234823      <1>
   408 0000067D 6A244A240A2400246A- <1>  dw 246Ah, 244Ah, 240Ah, 2400h, 246Ah, 244Ah, 246Ah, 244Ah ;j J
   408 00000686 244A246A244A24      <1>
   409 0000068D 6B254B250B2500256B- <1>  dw 256Bh, 254Bh, 250Bh, 2500h, 256Bh, 254Bh, 256Bh, 254Bh ;k K
   409 00000696 254B256B254B25      <1>
   410 0000069D 6C264C260C2600266C- <1>  dw 266Ch, 264Ch, 260Ch, 2600h, 266Ch, 264Ch, 266Ch, 264Ch ;l L
   410 000006A6 264C266C264C26      <1>
   411 000006AD 3B273A27000000003B- <1>  dw 273Bh, 273Ah, 0000h, 0000h, 273Bh, 273Bh, 273Ah, 273Ah ;; :
   411 000006B6 273B273A273A27      <1>
   412 000006BD 272840280000000027- <1>  dw 2827h, 2840h, 0000h, 0000h, 2827h, 2827h, 2840h, 2840h ;' @
   412 000006C6 28272840284028      <1>
   413 000006CD 5C297C29000000005C- <1>  dw 295Ch, 297Ch, 0000h, 0000h, 295Ch, 295Ch, 297Ch, 297Ch ;\ |
   413 000006D6 295C297C297C29      <1>
   414 000006DD 002A002A002A002A00- <1>  dw 2A00h, 2A00h, 2A00h, 2A00h, 2A00h, 2A00h, 2A00h, 2A00h ;LShift (2Ah)
   414 000006E6 2A002A002A002A      <1>
   415 000006ED 232B7E2B1C2B000023- <1>  dw 2B23h, 2B7Eh, 2B1Ch, 0000h, 2B23h, 2B23h, 2B7Eh, 2B7Eh ;# ~
   415 000006F6 2B232B7E2B7E2B      <1>
   416 000006FD 7A2C5A2C1A2C002C7A- <1>  dw 2C7Ah, 2C5Ah, 2C1Ah, 2C00h, 2C7Ah, 2C5Ah, 2C7Ah, 2C5Ah ;z Z
   416 00000706 2C5A2C7A2C5A2C      <1>
   417 0000070D 782D582D182D002D78- <1>  dw 2D78h, 2D58h, 2D18h, 2D00h, 2D78h, 2D58h, 2D78h, 2D58h ;x X
   417 00000716 2D582D782D582D      <1>
   418 0000071D 632E432E032E002E63- <1>  dw 2E63h, 2E43h, 2E03h, 2E00h, 2E63h, 2E43h, 2E63h, 2E43h ;c C
   418 00000726 2E432E632E432E      <1>
   419 0000072D 762F562F162F002F76- <1>  dw 2F76h, 2F56h, 2F16h, 2F00h, 2F76h, 2F56h, 2F76h, 2F56h ;v V
   419 00000736 2F562F762F562F      <1>
   420                              <1> 
   421                              <1> ; Scancodes 30h-3Fh
   422                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   423 0000073D 623042300230003062- <1>  dw 3062h, 3042h, 3002h, 3000h, 3062h, 3042h, 3062h, 3042h ;b B
   423 00000746 30423062304230      <1>
   424 0000074D 6E314E310E3100316E- <1>  dw 316Eh, 314Eh, 310Eh, 3100h, 316Eh, 314Eh, 316Eh, 314Eh ;n N
   424 00000756 314E316E314E31      <1>
   425 0000075D 6D324D320D3200326D- <1>  dw 326Dh, 324Dh, 320Dh, 3200h, 326Dh, 324Dh, 326Dh, 324Dh ;m M
   425 00000766 324D326D324D32      <1>
   426 0000076D 2C333C33000000002C- <1>  dw 332Ch, 333Ch, 0000h, 0000h, 332Ch, 332Ch, 333Ch, 333Ch ;, <
   426 00000776 332C333C333C33      <1>
   427 0000077D 2E343E34000000002E- <1>  dw 342Eh, 343Eh, 0000h, 0000h, 342Eh, 342Eh, 343Eh, 343Eh ;. >
   427 00000786 342E343E343E34      <1>
   428 0000078D 2F353F35000000002F- <1>  dw 352Fh, 353Fh, 0000h, 0000h, 352Fh, 352Fh, 353Fh, 353Fh ;/ ?
   428 00000796 352F353F353F35      <1>
   429 0000079D 003600360036003600- <1>  dw 3600h, 3600h, 3600h, 3600h, 3600h, 3600h, 3600h, 3600h ;RShift
   429 000007A6 36003600360036      <1>
   430 000007AD 2A370000103700002A- <1>  dw 372Ah, 0000h, 3710h, 0000h, 372Ah, 372Ah, 0000h, 0000h ;KP *
   430 000007B6 372A3700000000      <1>
   431 000007BD 003800380038003800- <1>  dw 3800h, 3800h, 3800h, 3800h, 3800h, 3800h, 3800h, 3800h ;Alt
   431 000007C6 38003800380038      <1>
   432 000007CD 203920390039000020- <1>  dw 3920h, 3920h, 3900h, 0000h, 3920h, 3920h, 3920h, 3920h ;Space
   432 000007D6 39203920392039      <1>
   433 000007DD 003A003A003A003A00- <1>  dw 3A00h, 3A00h, 3A00h, 3A00h, 3A00h, 3A00h, 3A00h, 3A00h ;Caps Lock
   433 000007E6 3A003A003A003A      <1>
   434 000007ED 003B0054005E006800- <1>  dw 3B00h, 5400h, 5E00h, 6800h, 3B00h, 3B00h, 5400h, 5400h ;F1
   434 000007F6 3B003B00540054      <1>
   435 000007FD 003C0055005F006900- <1>  dw 3C00h, 5500h, 5F00h, 6900h, 3C00h, 3C00h, 5500h, 5500h ;F2
   435 00000806 3C003C00550055      <1>
   436 0000080D 003D00560060006A00- <1>  dw 3D00h, 5600h, 6000h, 6A00h, 3D00h, 3D00h, 5600h, 5600h ;F3
   436 00000816 3D003D00560056      <1>
   437 0000081D 003E00570061006B00- <1>  dw 3E00h, 5700h, 6100h, 6B00h, 3E00h, 3E00h, 5700h, 5700h ;F4
   437 00000826 3E003E00570057      <1>
   438 0000082D 003F00580062006C00- <1>  dw 3F00h, 5800h, 6200h, 6C00h, 3F00h, 3F00h, 5800h, 5800h ;F5
   438 00000836 3F003F00580058      <1>
   439                              <1> 
   440                              <1> ; Scancodes 40h-4Fh
   441                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   442 0000083D 004000590063006D00- <1>  dw 4000h, 5900h, 6300h, 6D00h, 4000h, 4000h, 5900h, 5900h ;F6
   442 00000846 40004000590059      <1>
   443 0000084D 0041005A0064006E00- <1>  dw 4100h, 5A00h, 6400h, 6E00h, 4100h, 4100h, 5A00h, 5A00h ;F7
   443 00000856 410041005A005A      <1>
   444 0000085D 0042005B0065006F00- <1>  dw 4200h, 5B00h, 6500h, 6F00h, 4200h, 4200h, 5B00h, 5B00h ;F8
   444 00000866 420042005B005B      <1>
   445 0000086D 0043005C0066007000- <1>  dw 4300h, 5C00h, 6600h, 7000h, 4300h, 4300h, 5C00h, 5C00h ;F9
   445 00000876 430043005C005C      <1>
   446 0000087D 0044005D0067007100- <1>  dw 4400h, 5D00h, 6700h, 7100h, 4400h, 4400h, 5D00h, 5D00h ;F10
   446 00000886 440044005D005D      <1>
   447 0000088D 004500450045004500- <1>  dw 4500h, 4500h, 4500h, 4500h, 4500h, 4500h, 4500h, 4500h ;Num Lock
   447 00000896 45004500450045      <1>
   448 0000089D 004600460046004600- <1>  dw 4600h, 4600h, 4600h, 4600h, 4600h, 4600h, 4600h, 4600h ;Scroll Lock
   448 000008A6 46004600460046      <1>
   449 000008AD 004737470077000037- <1>  dw 4700h, 4737h, 7700h, 0000h, 4737h, 4700h, 4737h, 4700h ;(KP)Home
   449 000008B6 47004737470047      <1>
   450 000008BD 004838480000000038- <1>  dw 4800h, 4838h, 0000h, 0000h, 4838h, 4800h, 4838h, 4800h ;(KP)Up arrow
   450 000008C6 48004838480048      <1>
   451 000008CD 004939490084000039- <1>  dw 4900h, 4939h, 8400h, 0000h, 4939h, 4900h, 4939h, 4900h ;(KP)PgUp 
   451 000008D6 49004939490049      <1>
   452 000008DD 2D4A2D4A000000002D- <1>  dw 4A2Dh, 4A2Dh, 0000h, 0000h, 4A2Dh, 4A2Dh, 4A2Dh, 4A2Dh ;(KP)-
   452 000008E6 4A2D4A2D4A2D4A      <1>
   453 000008ED 004B344B0073000034- <1>  dw 4B00h, 4B34h, 7300h, 0000h, 4B34h, 4B00h, 4B34h, 4B00h ;(KP)Left arrow
   453 000008F6 4B004B344B004B      <1>
   454 000008FD 004C354C0000000035- <1>  dw 4C00h, 4C35h, 0000h, 0000h, 4C35h, 4C00h, 4C35h, 4C00h ;(KP)Center
   454 00000906 4C004C354C004C      <1>
   455 0000090D 004D364D0074000036- <1>  dw 4D00h, 4D36h, 7400h, 0000h, 4D36h, 4D00h, 4D36h, 4D00h ;(KP)Right arrow
   455 00000916 4D004D364D004D      <1>
   456 0000091D 2B4E2B4E000000002B- <1>  dw 4E2Bh, 4E2Bh, 0000h, 0000h, 4E2Bh, 4E2Bh, 4E2Bh, 4E2Bh ;(KP)+
   456 00000926 4E2B4E2B4E2B4E      <1>
   457 0000092D 004F314F0075000031- <1>  dw 4F00h, 4F31h, 7500h, 0000h, 4F31h, 4F00h, 4F31h, 4F00h ;(KP)End
   457 00000936 4F004F314F004F      <1>
   458                              <1> 
   459                              <1> ; Scancodes 50h-58h
   460                              <1> ;   base   shift   ctrl   alt   num    caps   shcap  shnum 
   461 0000093D 005032500000000032- <1>  dw 5000h, 5032h, 0000h, 0000h, 5032h, 5000h, 5032h, 5000h ;(KB)Down arrow
   461 00000946 50005032500050      <1>
   462 0000094D 005133510076000033- <1>  dw 5100h, 5133h, 7600h, 0000h, 5133h, 5100h, 5133h, 5100h ;(KB)PgDn
   462 00000956 51005133510051      <1>
   463 0000095D 005230520000000030- <1>  dw 5200h, 5230h, 0000h, 0000h, 5230h, 5200h, 5230h, 5200h ;(KB)Ins
   463 00000966 52005230520052      <1>
   464 0000096D 00532E53000000002E- <1>  dw 5300h, 532Eh, 0000h, 0000h, 532Eh, 5300h, 532Eh, 5300h ;(KB)Del
   464 00000976 5300532E530053      <1>
   465 0000097D 005400540054005400- <1>  dw 5400h, 5400h, 5400h, 5400h, 5400h, 5400h, 5400h, 5400h ;ALT+PRTSC -> Sysreq
   465 00000986 54005400540054      <1>
   466 0000098D 000000000000000000- <1>  dw 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h ;xxxxNOTUSEDxxxx
   466 00000996 00000000000000      <1>
   467 0000099D 5C567C56000000005C- <1>  dw 565Ch, 567Ch, 0000h, 0000h, 565Ch, 565Ch, 567Ch, 567Ch ;\ |
   467 000009A6 565C567C567C56      <1>
   468 000009AD 005700000000000000- <1>  dw 5700h, 0000h, 0000h, 0000h, 5700h, 5700h, 0000h, 0000h ;F11
   468 000009B6 57005700000000      <1>
   469 000009BD 005800000000000000- <1>  dw 5800h, 0000h, 0000h, 0000h, 5800h, 5800h, 0000h, 0000h ;F12
   469 000009C6 58005800000000      <1>
   470                              <1> ;------------------------End of Interrupt------------------------
    85                                  %include "./Source/Resident/Hardware/Serial/serInt.asm"
    86                              <1> ;------------------Serial Interrupt IRQ 3/Int 23h----------------
    87                              <1> ;Serves serial ports 1 and 3 should they exist. Only considers 
    88                              <1> ; data recieving. Disregards all sending data interrupts.
    89                              <1> ;Puts recieved data into respective buffer and clears RTS 
    90                              <1> ; (base+5) if buffer full.
    91                              <1> ;----------------------------------------------------------------
    92                              <1> ser_IRQ3:
    93 000009CD FA                  <1>     cli
    94 000009CE 50                  <1>     push rax
    95 000009CF 52                  <1>     push rdx
    96 000009D0 55                  <1>     push rbp
    97 000009D1 51                  <1>     push rcx
    98 000009D2 57                  <1>     push rdi
    99 000009D3 53                  <1>     push rbx
   100                              <1> 
   101 000009D4 BB08000000          <1>     mov ebx, 8
   102 000009D9 66BAFA02            <1>     mov dx, com2_base + 2 ;Interrupt ID register
   103 000009DD EB10                <1>     jmp short ser_common
   104                              <1> ;------------------------End of Interrupt------------------------
   105                              <1> ;---------------------Serial Interrupt IRQ 3/Int 23h-------------
   106                              <1> ;Serves serial ports 1 and 3 should they exist. Only considers 
   107                              <1> ; data recieving. Disregards all sending data interrupts.
   108                              <1> ;Puts recieved data into respective buffer and clears RTS 
   109                              <1> ; (base+5) if buffer full.
   110                              <1> ;----------------------------------------------------------------
   111                              <1> ser_IRQ4:
   112 000009DF FA                  <1>     cli
   113 000009E0 50                  <1>     push rax
   114 000009E1 52                  <1>     push rdx
   115 000009E2 55                  <1>     push rbp
   116 000009E3 51                  <1>     push rcx
   117 000009E4 57                  <1>     push rdi
   118 000009E5 53                  <1>     push rbx
   119                              <1> 
   120 000009E6 BB06000000          <1>     mov ebx, 6
   121 000009EB 66BAFA03            <1>     mov dx, com1_base + 2 ;Interrupt ID register
   122                              <1> ser_common:
   123 000009EF EC                  <1>     in al, dx
   124 000009F0 A801                <1>     test al, 1    ;Check if bit zero is clear ie interrupt pending
   125 000009F2 741F                <1>     jz .si1       ;Clear, interrupt pending on COM 1 port
   126                              <1> .si0:
   127 000009F4 668B93[67000000]    <1>     mov dx, word [com_addresses + rbx] ;now point to HI COM Interrupt ID registr
   128 000009FB 6685D2              <1>     test dx, dx
   129 000009FE 0F8497000000        <1>     jz .siexit            ;Nothing here, exit
   130 00000A04 66FFC2              <1>     inc dx
   131 00000A07 66FFC2              <1>     inc dx                ;dx = base + 2
   132 00000A0A EC                  <1>     in al, dx
   133 00000A0B A801                <1>     test al, 1     ;Check if bit zero is clear
   134 00000A0D 0F8588000000        <1>     jnz .siexit    ;Bad behavior, or no Int on com3 after com1 processed, exit
   135                              <1> .si1:
   136                              <1> ;Confirm Data available Interrupt (ie bits 1,2,3 are 010b)
   137 00000A13 A804                <1>     test al, 00000100b
   138 00000A15 0F8480000000        <1>     jz .siexit   ;bad behavior, exit
   139 00000A1B 6681C20300          <1>     add dx, 3    ;dx = base + 5
   140                              <1> .si41:
   141 00000A20 EC                  <1>     in al, dx
   142 00000A21 2401                <1>     and al, 1
   143 00000A23 74FB                <1>     jz .si41
   144                              <1> 
   145 00000A25 6681EA0500          <1>     sub dx, 5
   146 00000A2A EC                  <1>     in al, dx    ;get char into al
   147 00000A2B 88C4                <1>     mov ah, al   ;save al in ah temporarily
   148 00000A2D 4831C9              <1>     xor rcx, rcx
   149                              <1> .si2:    ;Get offset into table structures into cx
   150 00000A30 663B9409[67000000]  <1>     cmp dx, word [com_addresses + rcx*2]    ;table of addresses, dx is at base
   151 00000A38 740C                <1>     je .si3
   152 00000A3A 66FFC1              <1>     inc cx
   153 00000A3D 6681F90400          <1>     cmp cx, 4    ;rcx should be {0,3}
   154 00000A42 7CEC                <1>     jl .si2
   155 00000A44 EB55                <1>     jmp short .siexit    ;bad value, exit
   156                              <1> .si3:    ;Store in buffer algorithm
   157 00000A46 488B1CCD[CF000000]  <1>     mov rbx, qword [comX_buf_tail + rcx*8]
   158 00000A4E 4889DF              <1>     mov rdi, rbx
   159 00000A51 48FFC3              <1>     inc rbx        ;increment by one char
   160 00000A54 483B1CCD[0F010000]  <1>     cmp rbx, qword [comX_buf_end + rcx*8]
   161 00000A5C 7508                <1>     jne .si4
   162 00000A5E 488B1CCD[EF000000]  <1>     mov rbx, qword [comX_buf_start + rcx*8]    ;Wrap around buffer
   163                              <1> .si4:
   164 00000A66 483B1CCD[AF000000]  <1>     cmp rbx, qword [comX_buf_head + rcx*8]    ;Check if buffer full
   165 00000A6E 740F                <1>     je .si5    ;Buffer full, indicate wait to data source
   166                              <1> 
   167 00000A70 8827                <1>     mov byte [rdi], ah    ;store char into buffer
   168 00000A72 48891CCD[CF000000]  <1>     mov qword [comX_buf_tail + rcx*8], rbx    ;store new tail into variable
   169                              <1> 
   170 00000A7A E975FFFFFF          <1>     jmp .si0    ;If com1/2, now check that com 3/4 didnt fire interrupt.
   171                              <1> 
   172                              <1> .si5:    ;Buffer full, Deassert DTR bit 
   173                              <1> ;dx points at the base register
   174 00000A7F 6681C20400          <1>     add dx, 4    ;Point at Modem Control Register
   175 00000A84 EC                  <1>     in al, dx
   176 00000A85 24FE                <1>     and al, 11111110b    ;Clear the bottom bit
   177 00000A87 EE                  <1>     out dx, al    ;Set the DTR bit down (not ready to recieve data)
   178 00000A88 6681C20300          <1>     add dx, 3    ;Point to scratch register
   179 00000A8D 88E0                <1>     mov al, ah    ;return ah into al
   180 00000A8F EE                  <1>     out dx, al    ;put the overrun char into scratch register
   181 00000A90 6681F90200          <1>     cmp cx, 2    ;If this was com1/2, now check for com 3/4.
   182 00000A95 0F8559FFFFFF        <1>     jne .si0
   183                              <1> ;exit since we dont want to take whats in the UART buffer just yet.
   184                              <1> .siexit:
   185 00000A9B B020                <1>     mov al, EOI
   186 00000A9D E620                <1>     out pic1command, al
   187                              <1> 
   188 00000A9F 5B                  <1>     pop rbx
   189 00000AA0 5F                  <1>     pop rdi
   190 00000AA1 59                  <1>     pop rcx
   191 00000AA2 5D                  <1>     pop rbp
   192 00000AA3 5A                  <1>     pop rdx
   193 00000AA4 58                  <1>     pop rax
   194 00000AA5 FB                  <1>     sti
   195 00000AA6 48CF                <1>     iretq
   196                              <1> ;------------------------End of Interrupt------------------------
    86                                  %include "./Source/Resident/Hardware/MSD/fddInt.asm"
    87                              <1> ;----------------FDD Interrupt IRQ 6/Int 26h---------------------
    88                              <1> fdd_IRQ6:
    89 00000AA8 50                  <1>     push rax
    90 00000AA9 B020                <1>     mov al, EOI
    91 00000AAB E620                <1>     out pic1command, al
    92 00000AAD 58                  <1>     pop rax
    93 00000AAE 48CF                <1>     iretq
    94                              <1> ;------------------------End of Interrupt------------------------
    87                                  %include "./Source/Resident/Hardware/Timers/rtcInt.asm"
    88                              <1> ;---------------RTC Interrupt IRQ 8/Int 28h----------------------
    89                              <1> ; This IRQ should only trigger for the periodic and alarm 
    90                              <1> ; interrupts. If a programmer wishes to use the time update 
    91                              <1> ; complete interrupt feature, they should hook their own 
    92                              <1> ; interrupt handler.
    93                              <1> ;----------------------------------------------------------------
    94                              <1> rtc_IRQ8:
    95 00000AB0 50                  <1>     push rax
    96 00000AB1 FA                  <1>     cli             ;Disable interrupts
    97 00000AB2 B08C                <1>     mov al, 8Ch     ;Register C with NMI disabled
    98 00000AB4 E670                <1>     out cmos_base, al
    99 00000AB6 E680                <1>     out waitp, al    ;allow one io cycle to run
   100 00000AB8 EB00                <1>     jmp short $+2
   101 00000ABA E471                <1>     in al, cmos_data    ;Get the data byte to confirm IRQ recieved
   102 00000ABC 2460                <1>     and al, 060h        ;Isolate Alarm and Periodic bits only
   103 00000ABE A840                <1>     test al, 40h        ;Periodic?
   104 00000AC0 7408                <1>     jz .noPeriodic      ;No, skip the periodic
   105                              <1> .periodic:
   106 00000AC2 48FF0C25[3B010000]  <1>     dec qword [rtc_ticks]
   107                              <1> .noPeriodic:
   108 00000ACA A820                <1>     test al, 20h        ;Alarm?
   109 00000ACC 7402                <1>     jz .exit
   110                              <1> .alarm:
   111 00000ACE CD6A                <1>     int 6Ah    ;User Alarm handler, behaves like Int 4Ah on 16-bit BIOS
   112                              <1> .exit:
   113 00000AD0 B00D                <1>     mov al, 0Dh     ;Read Register D and reenable NMI
   114 00000AD2 E670                <1>     out cmos_base, al
   115 00000AD4 E680                <1>     out waitp, al    ;allow one io cycle to run
   116 00000AD6 EB00                <1>     jmp short $+2
   117 00000AD8 E471                <1>     in al, cmos_data    
   118 00000ADA B020                <1>     mov al, EOI
   119 00000ADC E6A0                <1>     out pic2command, al
   120 00000ADE E620                <1>     out pic1command, al
   121 00000AE0 58                  <1>     pop rax
   122 00000AE1 48CF                <1>     iretq
   123                              <1> ;------------------------End of Interrupt------------------------
    88                                  %include "./Source/Resident/Hardware/MSD/hddInt.asm"
    89                              <1> ;---------------HDD Interrupt IRQ 14/Int 2Eh---------------------
    90                              <1> hdd_IRQ14:
    91 00000AE3 50                  <1>     push rax
    92 00000AE4 52                  <1>     push rdx
    93 00000AE5 802425[AB010000]FD  <1>     and byte [ata0CmdByte], 0FDh    ;Clear bit 1
    94 00000AED 66BAF701            <1>     mov dx, ata0_base + 7   ;Since this interrupt ONLY occurs on ata0
    95 00000AF1 EC                  <1>     in al, dx   ;Read the status, and stop the controller from firing again
    96                              <1> 
    97 00000AF2 B020                <1>     mov al, EOI
    98 00000AF4 E620                <1>     out pic1command, al
    99 00000AF6 5A                  <1>     pop rdx
   100 00000AF7 58                  <1>     pop rax
   101 00000AF8 48CF                <1>     iretq
   102                              <1> ;------------------------End of Interrupt------------------------
    89                                  %include "./Source/Resident/Hardware/USB/EHCI/ehciInt.asm"
    90                              <1> ;-------------------EHCI Int Handler/Int 2Xh---------------------
    91                              <1> ;This is installed by the PCI proc at runtime, onto the 
    92                              <1> ; appropriate IRQ.
    93                              <1> ;
    94                              <1> ;If USB Host controller is doing transaction, this HC is 
    95                              <1> ; nominally turned off. Bits [7:2] in the eAsyncMutex identify 
    96                              <1> ; how many interrupts to ignore, before switching off the 
    97                              <1> ; Schedule. This value is nominally zero.
    98                              <1> ;----------------------------------------------------------------
    99                              <1> ehci_IRQ:
   100 00000AFA 68[8F570000]        <1>     push qword dummy_interrupt.pic2
   101 00000AFF EB05                <1>     jmp short .intr
   102                              <1> .pic1:
   103 00000B01 68[96570000]        <1>     push qword dummy_interrupt.pic1
   104                              <1> .intr:
   105                              <1> ;EHCI Interrupt Handler 
   106 00000B06 53                  <1>     push rbx
   107 00000B07 50                  <1>     push rax
   108                              <1> 
   109 00000B08 8A0425[47020000]    <1>     mov al, byte [eActiveCtrlr]
   110 00000B0F 3CFF                <1>     cmp al, -1    ;Spurious case, replace with manual poll then discard proc
   111 00000B11 743F                <1>     je .spur
   112                              <1> 
   113 00000B13 E84A480000          <1>     call USB.ehciGetOpBase    ;returns opreg base in rax
   114                              <1> .nonIRQmain:
   115 00000B18 678B5804            <1>     mov ebx, dword [eax + ehcists]  ;save USBSTS and clear usb interrupt
   116 00000B1C 67095804            <1>     or dword [eax + ehcists], ebx   ;WC all interrupt status
   117 00000B20 881C25[48020000]    <1>     mov byte [eActiveInt], bl    ;save interrupt status
   118                              <1> 
   119                              <1> ;Test based on which bits are set. Higher bits have higher priority
   120                              <1>     ;test bl, 10h            ;Check if host error bit set
   121                              <1>     ;test bl, 8              ;Frame List rollover
   122                              <1>     ;test bl, 4              ;Port status change detected
   123 00000B27 F6C302              <1>     test bl, 2              ;Check if transation error bit is set
   124 00000B2A 7542                <1>     jnz .transactionError
   125 00000B2C F6C301              <1>     test bl, 1              ;Check if short packet/interrupt bit set
   126 00000B2F 741E                <1>     jz .exit                ;If none of the bits were set, continue IRQ chain
   127                              <1> ;IoC and Short Packet section
   128 00000B31 8A0425[49020000]    <1>     mov al, byte [eAsyncMutex]    ;check if we should ignore interrupt
   129 00000B38 24FC                <1>     and al, 11111100b    ;clear out bottom two bits (dont care)
   130 00000B3A 84C0                <1>     test al, al            ;Set zero flag if al is zero
   131 00000B3C 7509                <1>     jnz .usbignoreirq    ;If not zero, ignore irq (and dec counter!)
   132                              <1> 
   133 00000B3E 880425[49020000]    <1>     mov byte [eAsyncMutex], al ;Wait no longer!! Data available
   134                              <1> 
   135 00000B45 EB08                <1>     jmp short .exit    ;Ignore the "ignore usb" section
   136                              <1> .usbignoreirq:
   137 00000B47 802C25[49020000]04  <1>     sub byte [eAsyncMutex], 4    ;sub the semaphore 
   138                              <1> .exit:
   139 00000B4F 58                  <1>     pop rax
   140 00000B50 5B                  <1>     pop rbx
   141 00000B51 C3                  <1>     ret
   142                              <1> .spur:
   143 00000B52 30C0                <1>     xor al, al
   144                              <1> .s1:
   145 00000B54 E809480000          <1>     call USB.ehciGetOpBase
   146 00000B59 678B5804            <1>     mov ebx, dword [eax + ehcists] ;save USBSTS and clear usb interrupt 
   147 00000B5D 67095804            <1>     or dword [eax + ehcists], ebx    ;WC all interrupt status
   148 00000B61 FEC0                <1>     inc al    ;Clear all interrupts on all controllers
   149 00000B63 3A0425[14020000]    <1>     cmp al, byte [eControllers]
   150 00000B6A 72E8                <1>     jb .s1
   151 00000B6C EBE1                <1>     jmp short .exit
   152                              <1> .transactionError:
   153 00000B6E C60425[49020000]00  <1>     mov byte [eAsyncMutex], 0   ;Unblock wait
   154 00000B76 EBD7                <1>     jmp short .exit
   155                              <1> .nonIRQep:
   156 00000B78 53                  <1>     push rbx
   157 00000B79 50                  <1>     push rax
   158 00000B7A EB9C                <1>     jmp short .nonIRQmain
   159                              <1> ;------------------------End of Interrupt------------------------
    90                                  %include "./Source/Resident/Hardware/spurInt.asm"
    91                              <1> ;-----------------Spurious Int Handler/Int 27h-------------------
    92                              <1> ; Catches and handles spurious interrupts on the first pic.
    93                              <1> ;----------------------------------------------------------------
    94                              <1> default_IRQ7:
    95 00000B7C 50                  <1>     push rax
    96 00000B7D B00B                <1>     mov al, 0Bh    ;Read ISR 
    97 00000B7F E620                <1>     out pic1command, al
    98 00000B81 E680                <1>     out waitp, al    ;Latch wait
    99 00000B83 EB00                <1>     jmp short $+2
   100 00000B85 E420                <1>     in al, pic1command    ;Get the ISR
   101 00000B87 A880                <1>     test al, 80h
   102 00000B89 7509                <1>     jne .exit
   103 00000B8B FE0425[20000000]    <1>     inc byte [spurint1]
   104 00000B92 EB04                <1>     jmp short .e2    ;Avoid sending EOI
   105                              <1> .exit:
   106 00000B94 B020                <1>     mov al, EOI
   107 00000B96 E620                <1>     out pic1command, al
   108                              <1> .e2:
   109 00000B98 58                  <1>     pop rax
   110 00000B99 48CF                <1>     iretq
   111                              <1> 
   112                              <1> ;-----------------Spurious Int Handler/Int 2Fh-------------------
   113                              <1> ; Catches and handles spurious interrupts on the second pic.
   114                              <1> ;----------------------------------------------------------------
   115                              <1> default_IRQ15:
   116 00000B9B 50                  <1>     push rax
   117 00000B9C F60425[AD010000]01  <1>     test byte [ata1CmdByte], 1   ;Check if mutex bit set
   118 00000BA4 740F                <1>     jz .spurcheck                ;If not set, then just check spur
   119 00000BA6 802425[AD010000]FD  <1>     and byte [ata1CmdByte], 0FDh ;Clear bit 
   120 00000BAE 52                  <1>     push rdx
   121 00000BAF 66BA7701            <1>     mov dx, ata1_base + 7   ;Goto ata1 status reg
   122 00000BB3 EC                  <1>     in al, dx   ;Stop ctrlr from firing interrupts again!
   123 00000BB4 5A                  <1>     pop rdx
   124                              <1> .spurcheck:
   125 00000BB5 B00B                <1>     mov al, 0Bh    ;Read ISR 
   126 00000BB7 E6A0                <1>     out pic2command, al
   127 00000BB9 E680                <1>     out waitp, al    ;Latch wait
   128 00000BBB EB00                <1>     jmp short $+2
   129 00000BBD E4A0                <1>     in al, pic2command    ;Get the ISR
   130 00000BBF A880                <1>     test al, 80h
   131 00000BC1 B020                <1>     mov al, EOI    ;Still need to send EOI to pic1
   132 00000BC3 7509                <1>     jne .exit
   133 00000BC5 FE0425[21000000]    <1>     inc byte [spurint2]
   134 00000BCC EB02                <1>     jmp short .e2    ;Avoid sending EOI
   135                              <1> .exit:
   136 00000BCE E6A0                <1>     out pic2command, al
   137                              <1> .e2:
   138 00000BD0 E620                <1>     out pic1command, al
   139 00000BD2 58                  <1>     pop rax
   140 00000BD3 48CF                <1>     iretq
   141                              <1> ;------------------------End of Interrupt------------------------
    91                                  ;========================SOFTWARE INTERRUPTS=====================
    92                                  %include "./Source/Resident/Services/Int30h.asm"
    93                              <1> ;----------------------Video Interrupt Int 30h-------------------
    94                              <1> scr_io_table:
    95 00000BD5 [A20C000000000000]  <1>     dq    scr_io.change_mode     ;AH = 0 -> Change Screen Mode (Currently no 
    96                              <1>                                  ; options)
    97 00000BDD [B10C000000000000]  <1>     dq    scr_io.set_curs_shape  ;AH = 1 -> Set Cursor Shape
    98 00000BE5 [C40C000000000000]  <1>     dq    scr_io.set_curs_pos    ;AH = 2 -> Set Cursor Position
    99 00000BED [E80C000000000000]  <1>     dq    scr_io.get_curs_pos    ;AH = 3 -> Get Cursor Position
   100 00000BF5 [080D000000000000]  <1>     dq    scr_io.write_register  ;AH = 4 -> Reserved, Undoc, Write al in ASCII 
   101                              <1>                                  ; at cursor 
   102 00000BFD [510D000000000000]  <1>     dq    scr_io.select_page     ;AH = 5 -> Select Active Page
   103 00000C05 [F70D000000000000]  <1>     dq    scr_io.scroll_up       ;AH = 6 -> Scroll Active Page up
   104 00000C0D [B50E000000000000]  <1>     dq    scr_io.scroll_down     ;AH = 7 -> Scroll Active Page down
   105 00000C15 [470F000000000000]  <1>     dq    scr_io.read_att_char   ;AH = 8 -> Read Attribute and Char at curs pos
   106 00000C1D [790F000000000000]  <1>     dq    scr_io.write_att_char  ;AH = 9 -> Write Attribute and Char at curs pos
   107 00000C25 [B90F000000000000]  <1>     dq    scr_io.write_char      ;AH = 0Ah -> Write Char at curs position 
   108                              <1>                                  ; (using default attribute)
   109 00000C2D [0110000000000000]  <1>     dq    scr_io.gset_col_palette ;AH = 0Bh -> Graphics, Set Colour Palette
   110 00000C35 [1010000000000000]  <1>     dq    scr_io.gwritedot       ;AH = 0Ch -> Graphics, Write a Dot to screen
   111 00000C3D [1F10000000000000]  <1>     dq    scr_io.greaddot        ;AH = 0Dh -> Graphics, Read a Dot from screen
   112 00000C45 [2E10000000000000]  <1>     dq    scr_io.write_tty       ;AH = 0Eh -> Write Teletype
   113 00000C4D [FC10000000000000]  <1>     dq    scr_io.get_mode        ;AH = 0Fh -> Get Screen Mode (currently, no 
   114                              <1>                                  ; options)
   115 00000C55 [970C000000000000]  <1>     dq    scr_io.exitf           ;AH = 10h -> Reserved
   116 00000C5D [970C000000000000]  <1>     dq  scr_io.exitf             ;AH = 11h -> Reserved
   117 00000C65 [970C000000000000]  <1>     dq    scr_io.exitf           ;AH = 12h -> Reserved
   118 00000C6D [2511000000000000]  <1>     dq  scr_io.write_string      ;AH = 13h -> Write string
   119                              <1> scr_io_table_length    equ    $ - scr_io_table
   120                              <1> scr_io:
   121 00000C75 FC                  <1>     cld        ;set direction to read the right way
   122 00000C76 56                  <1>     push rsi
   123 00000C77 50                  <1>     push rax
   124 00000C78 C0E403              <1>     shl ah, 3  ;Use ah as offset into table
   125 00000C7B 80FC98              <1>     cmp ah, (scr_io_table_length - 8)    ;Ensure function number is within table
   126 00000C7E 7717                <1>     ja .exitf
   127 00000C80 88E0                <1>     mov al, ah
   128 00000C82 480FB6C0            <1>     movzx rax, al               ;Zero extend ax into rax
   129 00000C86 4889C6              <1>     mov rsi, rax                ;Note rsi is not being saved here!
   130 00000C89 58                  <1>     pop rax                     ;recover back into ax
   131 00000C8A 8A2425[58010000]    <1>     mov ah, byte [scr_mode]     ;Get the current mode into ah
   132 00000C91 FFA6[D50B0000]      <1>     jmp [scr_io_table + rsi]    ;Jump to correct function
   133                              <1> .exitf:
   134 00000C97 58                  <1>     pop rax
   135 00000C98 B480                <1>     mov ah, 80h ;Function not supported
   136 00000C9A 804C241801          <1>     or byte [rsp + 3*8h], 1 ;Set Carry flag, invalid function, skip rsi on stack
   137                              <1> .exit:
   138 00000C9F 5E                  <1>     pop rsi
   139 00000CA0 48CF                <1>     iretq
   140                              <1>     
   141                              <1> .change_mode:
   142 00000CA2 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   142 00000CAB 00                  <1>
   143 00000CAC E9EEFFFFFF          <1>     jmp .exit    ;Currently unsupported function    
   144                              <1> .set_curs_shape:
   145                              <1> ;Input: CH = Scan Row Start, CL = Scan Row End
   146 00000CB1 52                  <1>     push rdx
   147 00000CB2 66890C25[55010000]  <1>     mov word [scr_curs_shape], cx
   148                              <1> 
   149 00000CBA B00A                <1>     mov al, 0Ah
   150 00000CBC E86B050000          <1>     call .write_crtc_word
   151                              <1>     
   152 00000CC1 5A                  <1>     pop rdx
   153 00000CC2 EBDB                <1>     jmp short .exit
   154                              <1> .set_curs_pos:
   155                              <1> ;Input: DH = Row, DL = Column, BH = active page
   156 00000CC4 51                  <1>     push rcx
   157 00000CC5 52                  <1>     push rdx
   158                              <1>     
   159 00000CC6 53                  <1>     push rbx
   160 00000CC7 88FB                <1>     mov bl, bh
   161 00000CC9 480FB6DB            <1>     movzx rbx, bl
   162 00000CCD 6689941B[43010000]  <1>     mov word [scr_curs_pos + 2*rbx], dx
   163 00000CD5 5B                  <1>     pop rbx
   164 00000CD6 3A3C25[59010000]    <1>     cmp bh, byte [scr_active_page]
   165 00000CDD 7505                <1>     jne .scpexit    ;if the page is not the active page
   166 00000CDF E8E3050000          <1>     call .cursor_proc
   167                              <1> .scpexit:
   168 00000CE4 5A                  <1>     pop rdx
   169 00000CE5 59                  <1>     pop rcx
   170 00000CE6 EBB7                <1>     jmp short .exit
   171                              <1>     
   172                              <1> 
   173                              <1> .get_curs_pos:
   174                              <1> ;Return: AX = 0, CH = Start scan line, CL = End scan line, DH = Row, DL = Column
   175 00000CE8 53                  <1>     push rbx
   176                              <1> 
   177 00000CE9 88FB                <1>     mov bl, bh
   178 00000CEB 480FB6DB            <1>     movzx rbx, bl
   179 00000CEF 668B941B[43010000]  <1>     mov dx, word [scr_curs_pos + 2*rbx] 
   180 00000CF7 668B0C25[55010000]  <1>     mov cx, word [scr_curs_shape]    ;Get cursor shape
   181                              <1> 
   182 00000CFF 5B                  <1>     pop rbx
   183 00000D00 6631C0              <1>     xor ax, ax 
   184 00000D03 E997FFFFFF          <1>     jmp .exit
   185                              <1> 
   186                              <1> .write_register:    ;al contains the byte to convert
   187 00000D08 52                  <1>     push rdx
   188 00000D09 53                  <1>     push rbx
   189 00000D0A 50                  <1>     push rax
   190                              <1> 
   191 00000D0B 88C2                <1>     mov dl, al           ;save byte in dl
   192 00000D0D 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   193 00000D11 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   194 00000D16 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   195 00000D1A E810000000          <1>     call .wrchar
   196 00000D1F 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
   197 00000D22 E808000000          <1>     call .wrchar
   198                              <1> 
   199 00000D27 58                  <1>     pop rax
   200 00000D28 5B                  <1>     pop rbx
   201 00000D29 5A                  <1>     pop rdx
   202 00000D2A E970FFFFFF          <1>     jmp .exit
   203                              <1> .wrchar:
   204 00000D2F 48BB-               <1>     mov rbx, .wrascii
   204 00000D31 [410D000000000000]  <1>
   205 00000D39 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   206 00000D3A B40E                <1>     mov ah, 0Eh
   207 00000D3C B307                <1>     mov bl, 07h
   208 00000D3E CD30                <1>     int 30h  ;print char
   209 00000D40 C3                  <1>     ret
   210 00000D41 303132333435363738- <1> .wrascii:    db    '0123456789ABCDEF'
   210 00000D4A 39414243444546      <1>
   211                              <1> .select_page:
   212                              <1> ;ah contains the current screen mode
   213                              <1> ;al contains new screen page
   214                              <1> ;vga just returns as invalid FOR NOW
   215                              <1> ;Handled differently between vga and classic modes
   216 00000D51 80FC04              <1>     cmp ah, 04
   217 00000D54 761D                <1>     jbe .sp1
   218 00000D56 80FC07              <1>     cmp ah, 07
   219 00000D59 7418                <1>     je .sp1
   220 00000D5B 80FC0D              <1>     cmp ah, 0Dh
   221 00000D5E 0F838E000000        <1>     jae .sp_vga
   222                              <1> .spbad:
   223 00000D64 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   223 00000D6D 00                  <1>
   224 00000D6E E92CFFFFFF          <1>     jmp .exit    ;Bad argument
   225                              <1> .sp1:
   226 00000D73 3C08                <1>     cmp al, 8
   227 00000D75 73ED                <1>     jae .spbad    ;page should be 0-7
   228                              <1> .spmain:
   229 00000D77 50                  <1>     push rax
   230 00000D78 53                  <1>     push rbx
   231 00000D79 51                  <1>     push rcx
   232 00000D7A 52                  <1>     push rdx
   233 00000D7B 880425[59010000]    <1>     mov byte [scr_active_page], al    ;change active page
   234                              <1> ;----Modify this proc with data tables when finalised!!----
   235 00000D82 48BE00080000000000- <1>     mov rsi, 800h    ;mode 0,1 page size
   235 00000D8B 00                  <1>
   236 00000D8C 48BB00100000000000- <1>     mov rbx, 1000h    ;mode 2,3,7 page size
   236 00000D95 00                  <1>
   237 00000D96 480FB6C8            <1>     movzx rcx, al    ;Get count into rcx
   238 00000D9A 80FC02              <1>     cmp ah, 2
   239 00000D9D 480F42DE            <1>     cmovb rbx, rsi
   240 00000DA1 48BA00800B00000000- <1>     mov rdx, vga_bpage2
   240 00000DAA 00                  <1>
   241 00000DAB 48BE00000B00000000- <1>     mov rsi, vga_bpage1    ;Base addr for mode 7
   241 00000DB4 00                  <1>
   242                              <1> ;----Modify this proc with data tables when finalised!!----
   243 00000DB5 80FC07              <1>     cmp ah, 7
   244 00000DB8 480F44D6            <1>     cmove rdx, rsi
   245 00000DBC 52                  <1>     push rdx    ;Push the saved page 0 address
   246 00000DBD E307                <1>     jrcxz .spm2    ;If 0th page, dont add
   247                              <1> .spm1:
   248 00000DBF 4801DA              <1>     add rdx, rbx
   249 00000DC2 FEC9                <1>     dec cl
   250 00000DC4 75F9                <1>     jnz .spm1
   251                              <1> .spm2:
   252 00000DC6 5E                  <1>     pop rsi     ;Get saved base into rsi
   253 00000DC7 891425[5C010000]    <1>     mov dword [scr_page_addr], edx    ;Get new base addr
   254 00000DCE 4829F2              <1>     sub rdx, rsi    ;rsi has conditionally b8000 or b0000
   255 00000DD1 50                  <1>     push rax
   256 00000DD2 66D1EA              <1>     shr dx, 1    ;Divide dx by 2 to get # of PELs
   257 00000DD5 6689D1              <1>     mov cx, dx    ;Get offset from crtc base addr
   258 00000DD8 66B80C00            <1>     mov ax, 0Ch    ;6845 Start Addr register
   259 00000DDC E84B040000          <1>     call .write_crtc_word    ;Change "crtc view window"
   260                              <1> 
   261 00000DE1 58                  <1>     pop rax        ;Get original ax back for page number
   262 00000DE2 88C7                <1>     mov bh, al
   263 00000DE4 E8DE040000          <1>     call .cursor_proc    ;Move cursor on page
   264                              <1>     
   265 00000DE9 5A                  <1>     pop rdx
   266 00000DEA 59                  <1>     pop rcx
   267 00000DEB 5B                  <1>     pop rbx
   268 00000DEC 58                  <1>     pop rax
   269 00000DED E9ADFEFFFF          <1>     jmp .exit    ;Bad argument
   270                              <1> .sp_vga:
   271 00000DF2 E96DFFFFFF          <1>     jmp .spbad
   272                              <1> 
   273                              <1> .scroll_up:
   274                              <1> ;Scrolls ACTIVE SCREEN only
   275                              <1> ;Called with AL=number of lines to scroll, BH=Attribute for new area
   276                              <1> ;    CH=ycor of top of scroll, CL=xcor of top of scroll
   277                              <1> ;    DH=ycor of bottom of scroll, DL=xcor of bottom of scroll
   278                              <1> ;If AL=0 then entire window is blanked, BH is used for blank attrib
   279                              <1> ;ah contains the current screen mode
   280 00000DF7 80FC04              <1>     cmp ah, 04    ;Test for Alpha mode
   281 00000DFA 7209                <1>     jb .su0
   282 00000DFC 80FC07              <1>     cmp ah, 07    ;Test for MDA Alpha mode
   283 00000DFF 0F8509040000        <1>     jne .gscrollup    ;We in graphics mode, go to correct proc
   284                              <1> .su0:
   285 00000E05 55                  <1>     push rbp
   286 00000E06 57                  <1>     push rdi
   287 00000E07 50                  <1>     push rax    ;Treat AX more or less as clobbered 
   288                              <1>     
   289 00000E08 84C0                <1>     test al, al   ;Check if zero
   290 00000E0A 747F                <1>     je .sblank    ;recall ah=06 then reset cursor and exit
   291 00000E0C 88C3                <1>     mov bl, al    ;Save number of lines to scroll in bl
   292                              <1> .su1:
   293 00000E0E 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]    ;zeros upper dword
   294 00000E15 4889F7              <1>     mov rdi, rsi  ;Point both pointers at base of active page
   295 00000E18 6689C8              <1>     mov ax, cx    ;Bottom top corner into ax
   296 00000E1B E870040000          <1>     call .offset_from_ax    ;Get the page offset of dx
   297 00000E20 480FB7C0            <1>     movzx rax, ax
   298 00000E24 48D1E0              <1>     shl rax, 1    ;Multiply by two for words
   299 00000E27 4801C7              <1>     add rdi, rax  ;point to the top left of window
   300 00000E2A 4801C6              <1>     add rsi, rax
   301 00000E2D 480FB60425-         <1>     movzx rax, byte [scr_cols]
   301 00000E32 [53010000]          <1>
   302 00000E36 48D1E0              <1>     shl rax, 1      ;number of columns * 2 for words!
   303 00000E39 4801C6              <1>     add rsi, rax    ;Point rsi one row down
   304 00000E3C 51                  <1>     push rcx
   305 00000E3D 52                  <1>     push rdx
   306                              <1> 
   307 00000E3E 28EE                <1>     sub dh, ch    ;work out number of rows to copy
   308                              <1> .su2:
   309 00000E40 56                  <1>     push rsi
   310 00000E41 57                  <1>     push rdi
   311 00000E42 E865040000          <1>     call .text_scroll_c1    ;Scroll the selected row
   312 00000E47 5F                  <1>     pop rdi
   313 00000E48 5E                  <1>     pop rsi
   314 00000E49 4801C7              <1>     add rdi, rax    ;goto next row
   315 00000E4C 4801C6              <1>     add rsi, rax
   316 00000E4F FECE                <1>     dec dh
   317 00000E51 75ED                <1>     jnz .su2
   318                              <1> 
   319 00000E53 5A                  <1>     pop rdx
   320 00000E54 59                  <1>     pop rcx
   321                              <1> ;Draw blank line
   322 00000E55 50                  <1>     push rax
   323 00000E56 51                  <1>     push rcx
   324 00000E57 57                  <1>     push rdi
   325                              <1> 
   326 00000E58 6689C8              <1>     mov ax, cx
   327 00000E5B 88F4                <1>     mov ah, dh    ;Starting column from cx, starting row from dx
   328 00000E5D E82E040000          <1>     call .offset_from_ax
   329 00000E62 8B3C25[5C010000]    <1>     mov edi, dword [scr_page_addr]
   330 00000E69 480FB7C0            <1>     movzx rax, ax
   331 00000E6D 48D1E0              <1>     shl rax, 1
   332 00000E70 01C7                <1>     add edi, eax   ;point to new line
   333 00000E72 88FC                <1>     mov ah, bh
   334 00000E74 B020                <1>     mov al, 20h    ;Blank char
   335 00000E76 4889E9              <1>     mov rcx, rbp   ;move word count into cx
   336 00000E79 F366AB              <1>     rep stosw      ;write the word bp number of times
   337 00000E7C 5F                  <1>     pop rdi
   338 00000E7D 59                  <1>     pop rcx
   339 00000E7E 58                  <1>     pop rax
   340 00000E7F FECB                <1>     dec bl
   341 00000E81 758B                <1>     jnz .su1    ;Once we have done bl rows, exit
   342                              <1> 
   343                              <1> .suexit:
   344 00000E83 58                  <1>     pop rax
   345 00000E84 5F                  <1>     pop rdi
   346 00000E85 5D                  <1>     pop rbp
   347 00000E86 E914FEFFFF          <1>     jmp .exit
   348                              <1> .sblank:
   349                              <1> ;Fast clear function
   350 00000E8B 51                  <1>     push rcx
   351 00000E8C 52                  <1>     push rdx
   352                              <1> 
   353 00000E8D 88FC                <1>     mov ah, bh    ;mov attrib into ah
   354 00000E8F B020                <1>     mov al, 20h    ;Space char
   355 00000E91 8B3C25[5C010000]    <1>     mov edi, dword [scr_page_addr]
   356 00000E98 480FB61425-         <1>     movzx rdx, byte [scr_rows]
   356 00000E9D [54010000]          <1>
   357                              <1> .sbl0:
   358 00000EA1 480FB60C25-         <1>     movzx rcx, byte [scr_cols]
   358 00000EA6 [53010000]          <1>
   359 00000EAA F366AB              <1>     rep stosw
   360 00000EAD FECA                <1>     dec dl
   361 00000EAF 75F0                <1>     jnz .sbl0
   362                              <1> 
   363 00000EB1 5A                  <1>     pop rdx
   364 00000EB2 59                  <1>     pop rcx
   365 00000EB3 EBCE                <1>     jmp short .suexit
   366                              <1> 
   367                              <1> .scroll_down:
   368                              <1> ;Scrolls ACTIVE SCREEN only
   369                              <1> ;Called with AL=number of lines to scroll, BH=Attribute for new area
   370                              <1> ;    CH=ycor of top of scroll, CL=xcor of top of scroll
   371                              <1> ;    DH=ycor of bottom of scroll, DL=xcor of bottom of scroll
   372                              <1> ;If AL=0 then entire window is blanked, BH is used for blank attrib
   373                              <1> ;ah contains the current screen mode
   374 00000EB5 80FC04              <1>     cmp ah, 04    ;Test for Alpha mode
   375 00000EB8 7209                <1>     jb .sd0
   376 00000EBA 80FC07              <1>     cmp ah, 07    ;Test for MDA Alpha mode
   377 00000EBD 0F855A030000        <1>     jne .gscrolldown    ;We in graphics mode, go to correct proc
   378                              <1> .sd0:
   379 00000EC3 55                  <1>     push rbp
   380 00000EC4 57                  <1>     push rdi
   381 00000EC5 50                  <1>     push rax    ;Treat AX more or less as clobbered
   382                              <1> 
   383 00000EC6 84C0                <1>     test al, al    ;Check if zero
   384 00000EC8 74C1                <1>     je .sblank    ;recall ah=06 then reset cursor and exit
   385 00000ECA 88C3                <1>     mov bl, al    ;Save number of lines to scroll in bl
   386 00000ECC FD                  <1>     std    ;change the direction of string operations
   387                              <1> .sd1:
   388 00000ECD 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]    ;point esi to bottom
   389 00000ED4 6689D0              <1>     mov ax, dx    ;point to bottom right 
   390 00000ED7 E8B4030000          <1>     call .offset_from_ax
   391 00000EDC 480FB7C0            <1>     movzx rax, ax
   392 00000EE0 48D1E0              <1>     shl rax, 1
   393 00000EE3 4801C6              <1>     add rsi, rax
   394 00000EE6 4889F7              <1>     mov rdi, rsi
   395 00000EE9 480FB60425-         <1>     movzx rax, byte [scr_cols]
   395 00000EEE [53010000]          <1>
   396 00000EF2 48D1E0              <1>     shl rax, 1
   397 00000EF5 4829C6              <1>     sub rsi, rax    ;Point rsi one row above rdi
   398                              <1> 
   399 00000EF8 51                  <1>     push rcx
   400 00000EF9 52                  <1>     push rdx
   401 00000EFA 28EE                <1>     sub dh, ch    ;Number of rows to copy
   402                              <1> .sd2:
   403 00000EFC 56                  <1>     push rsi
   404 00000EFD 57                  <1>     push rdi
   405 00000EFE E8A9030000          <1>     call .text_scroll_c1
   406 00000F03 5F                  <1>     pop rdi
   407 00000F04 5E                  <1>     pop rsi
   408 00000F05 4829C7              <1>     sub rdi, rax
   409 00000F08 4829C6              <1>     sub rsi, rax
   410 00000F0B FECE                <1>     dec dh
   411 00000F0D 75ED                <1>     jnz .sd2
   412                              <1> 
   413 00000F0F 5A                  <1>     pop rdx
   414 00000F10 59                  <1>     pop rcx
   415                              <1> ;Draw blank line
   416 00000F11 50                  <1>     push rax
   417 00000F12 51                  <1>     push rcx
   418 00000F13 57                  <1>     push rdi
   419                              <1> 
   420 00000F14 6689D0              <1>     mov ax, dx
   421 00000F17 88EC                <1>     mov ah, ch    ;Starting column from dx, starting row from cx
   422 00000F19 E872030000          <1>     call .offset_from_ax
   423 00000F1E 8B3C25[5C010000]    <1>     mov edi, dword [scr_page_addr]
   424 00000F25 480FB7C0            <1>     movzx rax, ax
   425 00000F29 48D1E0              <1>     shl rax, 1
   426 00000F2C 01C7                <1>     add edi, eax    ;Point to appropriate line and col
   427 00000F2E 88FC                <1>     mov ah, bh
   428 00000F30 B020                <1>     mov al, 20h
   429 00000F32 4889E9              <1>     mov rcx, rbp
   430 00000F35 F366AB              <1>     rep stosw    ;Store backwards
   431 00000F38 5F                  <1>     pop rdi
   432 00000F39 59                  <1>     pop rcx
   433 00000F3A 58                  <1>     pop rax
   434 00000F3B FECB                <1>     dec bl
   435 00000F3D 758E                <1>     jnz .sd1
   436                              <1> 
   437                              <1> .sdexit:
   438 00000F3F 58                  <1>     pop rax
   439 00000F40 5F                  <1>     pop rdi
   440 00000F41 5D                  <1>     pop rbp
   441 00000F42 E958FDFFFF          <1>     jmp .exit
   442                              <1> .read_att_char:
   443                              <1> ;Get ASCII char and attr at current cursor position on chosen page
   444                              <1> ;Called with AH=08h, BH=Page number (if supported),
   445                              <1> ;Returns, AH=Attrib, AL=Char
   446                              <1> 
   447                              <1> ;On entry, ah contains current screen mode
   448 00000F47 80FC04              <1>     cmp ah, 04    ;Test for Alpha mode
   449 00000F4A 7209                <1>     jb .rac1
   450 00000F4C 80FC07              <1>     cmp ah, 07    ;Test for MDA Alpha mode
   451 00000F4F 0F859B020000        <1>     jne .gread    ;We in graphics mode, go to correct proc
   452                              <1> .rac1:
   453 00000F55 80FF07              <1>     cmp bh, 7
   454 00000F58 0F8739FDFFFF        <1>     ja .exitf    ;All A/N modes can have 8 pages, any more, fail
   455                              <1> 
   456 00000F5E 88E3                <1>     mov bl, ah    ;Move screen mode into bl for function call
   457 00000F60 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]
   458 00000F67 E814030000          <1>     call .page_cursor_offset    ;bx preserved
   459 00000F6C 48D1E0              <1>     shl rax, 1        
   460 00000F6F 4801C6              <1>     add rsi, rax    ;rsi should point to attrib/char 
   461 00000F72 66AD                <1>     lodsw            ;Load ah with attrib/char
   462 00000F74 E926FDFFFF          <1>     jmp .exit    ;Restoring rsi
   463                              <1> 
   464                              <1> .write_att_char:
   465                              <1> ;Puts ASCII char and attribute/colour at cursor
   466                              <1> ;Called with AH=09h, AL=Char, BH=Page, 
   467                              <1> ;    BL=Attrib/Color, CX=number of repeats
   468                              <1> ;Returns nothing (just prints in page)
   469                              <1> 
   470                              <1> ;When called, ah contains current screen mode
   471 00000F79 80FC04              <1>     cmp ah, 04    ;Test for Alpha mode
   472 00000F7C 7209                <1>     jb .wac1
   473 00000F7E 80FC07              <1>     cmp ah, 07    ;Test for MDA Alpha mode
   474 00000F81 0F8578020000        <1>     jne .gwrite    ;We in graphics mode, go to correct proc
   475                              <1> .wac1:
   476 00000F87 80FF07              <1>     cmp bh, 7
   477 00000F8A 0F8707FDFFFF        <1>     ja .exitf    ;All A/N modes can have 8 pages, any more, fail
   478                              <1> 
   479 00000F90 86DC                <1>     xchg bl, ah ;swap attrib and scr mode bytes
   480 00000F92 57                  <1>     push rdi
   481 00000F93 50                  <1>     push rax    ;Save the char/attrib word
   482 00000F94 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]
   483 00000F9B E8E0020000          <1>     call .page_cursor_offset    ;bx preserved
   484 00000FA0 4889F7              <1>     mov rdi, rsi    ;Change register for string ops
   485 00000FA3 48D1E0              <1>     shl rax, 1
   486 00000FA6 4801C7              <1>     add rdi, rax    ;rsi now points to right place on right page
   487 00000FA9 58                  <1>     pop rax
   488                              <1> 
   489 00000FAA 51                  <1>     push rcx
   490 00000FAB 480FB7C9            <1>     movzx rcx, cx    ;zero upper bytes
   491 00000FAF F366AB              <1>     rep stosw        ;Store packed ah/al cx times
   492 00000FB2 59                  <1>     pop rcx
   493 00000FB3 5F                  <1>     pop rdi
   494 00000FB4 E9E6FCFFFF          <1>     jmp .exit    ;Restoring rsi
   495                              <1> 
   496                              <1> .write_char:
   497                              <1> ;Puts ASCII char and attribute/colour at cursor
   498                              <1> ;Called with AH=0Ah, AL=Char, BH=Page, 
   499                              <1> ;    BL=Color (G modes ONLY), CX=number of repeats
   500                              <1> ;Returns nothing (just prints in page)
   501 00000FB9 80FC04              <1>     cmp ah, 04    ;Test for Alpha mode
   502 00000FBC 7209                <1>     jb .wc1
   503 00000FBE 80FC07              <1>     cmp ah, 07    ;Test for MDA Alpha mode
   504 00000FC1 0F8538020000        <1>     jne .gwrite    ;We in graphics mode, go to correct proc
   505                              <1> .wc1:
   506 00000FC7 80FF07              <1>     cmp bh, 7
   507 00000FCA 0F87C7FCFFFF        <1>     ja .exitf    ;All A/N modes can have 8 pages, any more, fail
   508                              <1> 
   509 00000FD0 88E3                <1>     mov bl, ah ;mov scr mode byte into bl
   510 00000FD2 57                  <1>     push rdi
   511 00000FD3 50                  <1>     push rax    ;Save the char word
   512 00000FD4 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]
   513 00000FDB E8A0020000          <1>     call .page_cursor_offset    ;bx preserved
   514 00000FE0 4889F7              <1>     mov rdi, rsi    ;Change register for string ops
   515 00000FE3 48D1E0              <1>     shl rax, 1
   516 00000FE6 4801C7              <1>     add rdi, rax    ;rdi now points to right place on right page
   517 00000FE9 58                  <1>     pop rax
   518                              <1> 
   519 00000FEA 51                  <1>     push rcx
   520 00000FEB 480FB7C9            <1>     movzx rcx, cx    ;zero upper bytes
   521 00000FEF E309                <1>     jrcxz .wc3    ;If cx is zero, dont print anything, exit
   522                              <1> .wc2:
   523 00000FF1 AA                  <1>     stosb
   524 00000FF2 48FFC7              <1>     inc rdi
   525 00000FF5 48FFC9              <1>     dec rcx
   526 00000FF8 75F7                <1>     jnz .wc2
   527                              <1> .wc3:
   528 00000FFA 59                  <1>     pop rcx
   529 00000FFB 5F                  <1>     pop rdi
   530 00000FFC E99EFCFFFF          <1>     jmp .exit    ;Exit restoring rsi
   531                              <1> 
   532                              <1> .gset_col_palette:
   533 00001001 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   533 0000100A 00                  <1>
   534 0000100B E98FFCFFFF          <1>     jmp .exit    ;Currently unsupported function
   535                              <1> .gwritedot:
   536 00001010 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   536 00001019 00                  <1>
   537 0000101A E980FCFFFF          <1>     jmp .exit    ;Currently unsupported function
   538                              <1> .greaddot:
   539 0000101F 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   539 00001028 00                  <1>
   540 00001029 E971FCFFFF          <1>     jmp .exit    ;Currently unsupported function
   541                              <1> 
   542                              <1> .write_tty:
   543                              <1> ;Called with al=char, bl=foreground color (graphics)
   544                              <1> ;When called, ah contains current screen mode
   545 0000102E 51                  <1>     push rcx
   546 0000102F 52                  <1>     push rdx
   547 00001030 53                  <1>     push rbx
   548 00001031 50                  <1>     push rax
   549                              <1> 
   550 00001032 8A3C25[59010000]    <1>     mov bh, byte [scr_active_page]    ;Get active page
   551 00001039 50                  <1>     push rax
   552 0000103A B403                <1>     mov ah, 3    ;Get cursor into dx
   553 0000103C CD30                <1>     int 30h
   554 0000103E 58                  <1>     pop rax
   555                              <1> 
   556 0000103F 3C08                <1>     cmp al, 08h    ;Check for backspace
   557 00001041 746B                <1>     je .wttybspace
   558 00001043 3C0A                <1>     cmp al, 0Ah    ;Check for line feed
   559 00001045 747F                <1>     je .wttylf
   560 00001047 3C0D                <1>     cmp al, 0Dh    ;Check for carriage return
   561 00001049 0F848D000000        <1>     je .wttycr
   562 0000104F 3C07                <1>     cmp al, 07h    ;ASCII bell
   563 00001051 0F848C000000        <1>     je .wttybell
   564                              <1> 
   565                              <1> .wttywrite:
   566 00001057 48B901000000000000- <1>     mov rcx, 1    
   566 00001060 00                  <1>
   567 00001061 B40A                <1>     mov ah, 0Ah    ;Write 1 char w/o attrib byte
   568 00001063 CD30                <1>     int 30h    ;bh contains page to write for
   569                              <1> 
   570                              <1> .wttycursorupdate:
   571 00001065 FEC2                <1>     inc dl
   572 00001067 3A1425[53010000]    <1>     cmp dl, byte [scr_cols]
   573 0000106E 730D                <1>     jae .wttycu0    ;go down by a line, and start of the line
   574                              <1> .wttycursorupdatego:
   575 00001070 B402                <1>     mov ah, 2
   576 00001072 CD30                <1>     int 30h     ;set cursor
   577                              <1> .wttyexit:
   578 00001074 58                  <1>     pop rax
   579 00001075 5B                  <1>     pop rbx
   580 00001076 5A                  <1>     pop rdx
   581 00001077 59                  <1>     pop rcx
   582 00001078 E922FCFFFF          <1>     jmp .exit
   583                              <1> 
   584                              <1> .wttycu0:
   585 0000107D 30D2                <1>     xor dl, dl    ;Return to start of line
   586 0000107F FEC6                <1>     inc dh
   587 00001081 3A3425[54010000]    <1>     cmp dh, byte [scr_rows]    ;are past the bottom of the screen?
   588 00001088 72E6                <1>     jb .wttycursorupdatego    ;we are not past the bottom of the screen
   589                              <1> .wttyscrollupone:
   590 0000108A 53                  <1>     push rbx
   591 0000108B B408                <1>     mov ah, 08h    ;Read char/attrib at cursor
   592 0000108D CD30                <1>     int 30h
   593 0000108F 88E7                <1>     mov bh, ah    ;Move attrib byte into bh
   594 00001091 4831C9              <1>     xor rcx, rcx
   595 00001094 668B1425[53010000]  <1>     mov dx, word [scr_cols]    ;word access all ok
   596 0000109C FECE                <1>     dec dh
   597 0000109E FECA                <1>     dec dl
   598 000010A0 66B80106            <1>     mov ax, 0601h    ;scroll up one line
   599 000010A4 CD30                <1>     int 30h
   600                              <1> 
   601 000010A6 30D2                <1>     xor dl, dl 
   602 000010A8 5B                  <1>     pop rbx
   603 000010A9 E9C2FFFFFF          <1>     jmp .wttycursorupdatego
   604                              <1> .wttybspace:
   605 000010AE 84D2                <1>     test dl, dl    ;compare if the column is zero
   606 000010B0 750D                <1>     jnz .wttybs1   ;if not just decrement row pos
   607 000010B2 84F6                <1>     test dh, dh    ;compare if zero row, if so do nothing
   608 000010B4 74BE                <1>     jz .wttyexit   ;at top left, just exit
   609 000010B6 FECE                <1>     dec dh
   610 000010B8 8A1425[53010000]    <1>     mov dl, byte [scr_cols]    ;move to end of prev row + 1
   611                              <1> .wttybs1:
   612 000010BF FECA                <1>     dec dl
   613 000010C1 E9AAFFFFFF          <1>     jmp .wttycursorupdatego
   614                              <1> 
   615                              <1> .wttylf:
   616 000010C6 52                  <1>     push rdx
   617 000010C7 8A1425[54010000]    <1>     mov dl, byte [scr_rows]
   618 000010CE FECA                <1>     dec dl
   619 000010D0 38D6                <1>     cmp dh, dl
   620 000010D2 5A                  <1>     pop rdx
   621 000010D3 74B5                <1>     je .wttyscrollupone    ;if we need to scroll, scroll
   622 000010D5 FEC6                <1>     inc dh    ;otherwise just send cursor down by one
   623 000010D7 E994FFFFFF          <1>     jmp    .wttycursorupdatego
   624                              <1> .wttycr:
   625 000010DC B200                <1>     mov dl, 0    ;Set to 0 on row
   626 000010DE E98DFFFFFF          <1>     jmp .wttycursorupdatego
   627                              <1> .wttybell:
   628 000010E3 48B9E8030000000000- <1>     mov rcx, 1000   ;Beep for a second
   628 000010EC 00                  <1>
   629 000010ED BBA9040000          <1>     mov ebx, 04A9h  ;Frequency divisor for 1000Hz tone
   630 000010F2 E89FEFFFFF          <1>     call beep
   631 000010F7 E978FFFFFF          <1>     jmp .wttyexit
   632                              <1> 
   633                              <1> .get_mode:
   634                              <1> ;Takes no arguments
   635                              <1> ;Returns ah=Number of Columns, al=Current Screen mode, bh=active page
   636 000010FC 8A2425[53010000]    <1>     mov ah, byte [scr_cols]
   637 00001103 8A0425[58010000]    <1>     mov al, byte [scr_mode]
   638 0000110A 8A3C25[59010000]    <1>     mov bh, byte [scr_active_page]
   639 00001111 E989FBFFFF          <1>     jmp .exit
   640                              <1> 
   641                              <1> 
   642                              <1> ;Bad string argument for below function
   643                              <1> .wsbad:
   644 00001116 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   644 0000111F 00                  <1>
   645 00001120 E97AFBFFFF          <1>     jmp .exit
   646                              <1> .write_string:
   647                              <1> ;bh=page to print on, bl=attribute, cx=number of chars to print
   648                              <1> ;dh=y coord to print at, dl=x coord to print at, rbp=string
   649                              <1> ;al contains subfunction
   650                              <1> ;al=0 attrib in bl, cursor NOT updated
   651                              <1> ;al=1 attrib in bl, cursor updated
   652                              <1> ;al=2 string alt attrib/char, cursor NOT updated
   653                              <1> ;al=3 string alt attrib/char, cursor updated
   654                              <1> ;al=4 print 0 terminated string
   655 00001125 3C04                <1>     cmp al, 4h
   656 00001127 0F84AA000000        <1>     je .wszero    ;If its a zero terminated string, go down
   657 0000112D E3E7                <1>     jrcxz .wsbad
   658 0000112F 3C04                <1>     cmp al, 4h    ;Bad argument
   659 00001131 77E3                <1>     ja .wsbad
   660                              <1> .ws:
   661 00001133 56                  <1>     push rsi
   662 00001134 51                  <1>     push rcx
   663 00001135 52                  <1>     push rdx
   664 00001136 53                  <1>     push rbx
   665 00001137 50                  <1>     push rax
   666                              <1> 
   667 00001138 53                  <1>     push rbx
   668 00001139 88FB                <1>     mov bl, bh
   669 0000113B 0FB6DB              <1>     movzx ebx, bl
   670 0000113E 66678BB41B-         <1>     mov si, word [scr_curs_pos + 2*ebx]    ;Fast get cursor position
   670 00001143 [43010000]          <1>
   671 00001147 5B                  <1>     pop rbx
   672 00001148 56                  <1>     push rsi    ;Save the current cursor position
   673                              <1> 
   674 00001149 50                  <1>     push rax
   675 0000114A B402                <1>     mov ah, 02h    ;Set cursor at dx
   676 0000114C CD30                <1>     int 30h
   677 0000114E 58                  <1>     pop rax
   678                              <1> 
   679                              <1> .ws0:
   680 0000114F 51                  <1>     push rcx
   681 00001150 53                  <1>     push rbx
   682 00001151 50                  <1>     push rax
   683 00001152 88C4                <1>     mov ah, al
   684 00001154 8A4500              <1>     mov al, byte [rbp] ;Get char
   685 00001157 48FFC5              <1>     inc rbp
   686 0000115A 3C07                <1>     cmp al, 07h
   687 0000115C 7462                <1>     je .wsctrlchar
   688 0000115E 3C08                <1>     cmp al, 08h
   689 00001160 745E                <1>     je .wsctrlchar
   690 00001162 3C0A                <1>     cmp al, 0Ah
   691 00001164 745A                <1>     je .wsctrlchar
   692 00001166 3C0D                <1>     cmp al, 0Dh
   693 00001168 7456                <1>     je .wsctrlchar
   694                              <1> 
   695 0000116A 80FC02              <1>     cmp ah, 2    ;Check if we need to get the char attrib too
   696 0000116D 7206                <1>     jb .ws1
   697 0000116F 8A5D00              <1>     mov bl, byte [rbp]    ;Get char attrib
   698 00001172 48FFC5              <1>     inc rbp
   699                              <1> .ws1:
   700 00001175 66B90100            <1>     mov cx, 1
   701 00001179 B409                <1>     mov ah, 09h    ;Print char and attrib (either given or taken)
   702 0000117B CD30                <1>     int 30h
   703                              <1> 
   704 0000117D FEC2                <1>     inc dl
   705 0000117F 3A1425[53010000]    <1>     cmp dl, byte [scr_cols]    ;Check if we passed the end of the row
   706 00001186 7515                <1>     jne .ws2    ;We havent, skip the reset
   707 00001188 30D2                <1>     xor dl, dl    ;Reset horizontal pos
   708 0000118A FEC6                <1>     inc dh        ;Goto next row
   709 0000118C 3A3425[53010000]    <1>     cmp dh, byte [scr_cols]    ;Have we passed the last row?
   710 00001193 7508                <1>     jne .ws2    ;No, put cursor
   711 00001195 66B80A0E            <1>     mov ax, 0E0Ah    ;Yes, do  TTY Line feed
   712 00001199 CD30                <1>     int 30h
   713 0000119B FECE                <1>     dec dh        ;Mov cursor to start of last row on page
   714                              <1> .ws2:
   715 0000119D B402                <1>     mov ah, 02
   716 0000119F CD30                <1>     int 30h    ;Put cursor at new location
   717                              <1> .ws3:
   718 000011A1 58                  <1>     pop rax
   719 000011A2 5B                  <1>     pop rbx
   720 000011A3 59                  <1>     pop rcx
   721                              <1> 
   722 000011A4 66FFC9              <1>     dec cx
   723 000011A7 75A6                <1>     jnz .ws0
   724                              <1> 
   725                              <1> .wsexitupdate:    ;Exit returning char to original position
   726 000011A9 5A                  <1>     pop rdx
   727 000011AA 3C01                <1>     cmp al, 01h
   728 000011AC 7408                <1>     je .wsexit
   729 000011AE 3C03                <1>     cmp al, 03h
   730 000011B0 7404                <1>     je .wsexit
   731                              <1> ;Exit returning char to original position    
   732 000011B2 B402                <1>     mov ah, 02h
   733 000011B4 CD30                <1>     int 30h 
   734                              <1> .wsexit:
   735 000011B6 58                  <1>     pop rax
   736 000011B7 5B                  <1>     pop rbx
   737 000011B8 5A                  <1>     pop rdx
   738 000011B9 59                  <1>     pop rcx
   739 000011BA 5E                  <1>     pop rsi
   740 000011BB E9DFFAFFFF          <1>     jmp .exit
   741                              <1> .wsctrlchar:
   742                              <1> ;Handles Control Characters: ASCII Bell, Bspace, LF and CR
   743 000011C0 B40E                <1>     mov ah, 0Eh
   744 000011C2 CD30                <1>     int 30h    ;Print control char as TTY
   745 000011C4 88FB                <1>     mov bl, bh
   746 000011C6 0FB6DB              <1>     movzx ebx, bl
   747 000011C9 66678B941B-         <1>     mov dx, word [scr_curs_pos + 2*ebx]    ;Fast get cursor position
   747 000011CE [43010000]          <1>
   748 000011D2 E9CAFFFFFF          <1>     jmp .ws3
   749                              <1> .wszero:
   750                              <1> ;Print zero terminated string at cursor on current active page
   751                              <1> ;Called with ax=1304, rbp=pointer to string
   752 000011D7 55                  <1>     push rbp
   753 000011D8 50                  <1>     push rax
   754                              <1> .wsz1:
   755 000011D9 8A4500              <1>     mov al, byte [rbp]
   756 000011DC 84C0                <1>     test al, al    ;Check al got a zero char
   757 000011DE 7409                <1>     jz .wsz2
   758 000011E0 48FFC5              <1>     inc rbp
   759 000011E3 B40E                <1>     mov ah, 0Eh
   760 000011E5 CD30                <1>     int 30h
   761 000011E7 EBF0                <1>     jmp short .wsz1
   762                              <1> .wsz2:
   763 000011E9 58                  <1>     pop rax
   764 000011EA 5D                  <1>     pop rbp
   765 000011EB E9AFFAFFFF          <1>     jmp .exit
   766                              <1> 
   767                              <1> ;Graphics mode specific versions!
   768                              <1> .gread:
   769 000011F0 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   769 000011F9 00                  <1>
   770 000011FA E9A0FAFFFF          <1>     jmp .exit    ;Currently unsupported function
   771                              <1> .gwrite:
   772 000011FF 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   772 00001208 00                  <1>
   773 00001209 E991FAFFFF          <1>     jmp .exit    ;Currently unsupported function
   774                              <1> .gscrollup:
   775 0000120E 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   775 00001217 00                  <1>
   776 00001218 E982FAFFFF          <1>     jmp .exit    ;Currently unsupported function
   777                              <1> .gscrolldown:
   778 0000121D 48B8FFFF0000000000- <1>     mov rax, 0FFFFh
   778 00001226 00                  <1>
   779 00001227 E973FAFFFF          <1>     jmp .exit    ;Currently unsupported function
   780                              <1> 
   781                              <1> .write_crtc_word: ;Writes cx to the CRTC register in al and al+1
   782 0000122C 52                  <1>     push rdx
   783                              <1> 
   784 0000122D 668B1425[5A010000]  <1>     mov dx, word [scr_crtc_base]
   785 00001235 EE                  <1>     out dx, al
   786 00001236 FEC2                <1>     inc dl
   787 00001238 88C4                <1>     mov ah, al    ;Temp save al
   788 0000123A 88E8                <1>     mov al, ch    ;Set high bits first
   789 0000123C EE                  <1>     out dx, al
   790                              <1> 
   791 0000123D FECA                <1>     dec dl
   792 0000123F 88E0                <1>     mov al, ah    ;Bring back al into al
   793 00001241 FEC0                <1>     inc al ;GOTO next CTRC address
   794                              <1> 
   795 00001243 EE                  <1>     out dx, al
   796 00001244 FEC2                <1>     inc dl
   797 00001246 88C8                <1>     mov al, cl
   798 00001248 EE                  <1>     out dx, al 
   799                              <1> 
   800 00001249 5A                  <1>     pop rdx
   801 0000124A C3                  <1>     ret
   802                              <1> 
   803                              <1> .get_page_base:
   804                              <1> ;Returns in rsi, the base address of the selected page
   805                              <1> ;Called with BH = page number, BL=screen mode
   806                              <1> ;return RSI=Base of selected page, since rsi is already clobbered
   807 0000124B 51                  <1>     push rcx
   808 0000124C 53                  <1>     push rbx
   809                              <1> 
   810 0000124D 88F9                <1>     mov cl, bh    ;mov into cl, free bx
   811 0000124F 480FB6C9            <1>     movzx rcx, cl
   812                              <1> ;----Modify this proc with data tables when finalised!!----
   813 00001253 80FB02              <1>     cmp bl, 2
   814 00001256 66BB0010            <1>     mov bx, 1000h    ;Doesnt affect flags
   815 0000125A 48BE00080000000000- <1>     mov rsi, 800h    ;si is a free register
   815 00001263 00                  <1>
   816 00001264 660F42DE            <1>     cmovb bx, si    ;if below, replace with 800h
   817 00001268 480FB7DB            <1>     movzx rbx, bx        ;zero extend
   818 0000126C 8B3425[5C010000]    <1>     mov esi, dword [scr_page_addr]
   819 00001273 E308                <1>     jrcxz .gpb1        ;Dont enter the loop if cx is zero
   820                              <1> .gpb0:
   821 00001275 4801DE              <1>     add rsi, rbx    ;add pagesize cx times
   822 00001278 48FFC9              <1>     dec rcx
   823 0000127B 75F8                <1>     jnz .gpb0        ;go around
   824                              <1> 
   825                              <1> .gpb1:
   826 0000127D 5B                  <1>     pop rbx
   827 0000127E 59                  <1>     pop rcx
   828 0000127F C3                  <1>     ret
   829                              <1> 
   830                              <1> .page_cursor_offset:
   831                              <1> ;Returns in rax the offset into the RAM page of the cursor
   832                              <1> ;Works for A/N modes and graphic, though must be shl by 1 for A/N modes
   833                              <1> ;bh contains page to work out address 
   834 00001280 53                  <1>     push rbx
   835 00001281 88FB                <1>     mov bl, bh    ;bring the page number from bh into bl
   836 00001283 480FB6DB            <1>     movzx rbx, bl            
   837 00001287 668B841B[43010000]  <1>     mov ax, word [scr_curs_pos + 2*rbx]    ;move cursor position into ax
   838 0000128F 5B                  <1>     pop rbx
   839                              <1> .offset_from_ax:
   840                              <1> ;Same as above but now ax needs to be packed as in the cursor
   841 00001290 52                  <1>     push rdx
   842 00001291 53                  <1>     push rbx
   843 00001292 4831DB              <1>     xor rbx, rbx
   844 00001295 00C3                <1>     add bl, al    ;move columns into bl
   845 00001297 66C1E808            <1>     shr ax, 8    ;mov rows from ah to al to use 8 bit mul
   846                              <1>     
   847 0000129B F62425[53010000]    <1>     mul byte [scr_cols]    ;multiply the row we are on by columns, store in ax
   848 000012A2 6601D8              <1>     add ax, bx        ;add number of columns to this mix!
   849 000012A5 480FB7C0            <1>     movzx rax, ax
   850                              <1> 
   851 000012A9 5B                  <1>     pop rbx
   852 000012AA 5A                  <1>     pop rdx
   853 000012AB C3                  <1>     ret
   854                              <1> .text_scroll_c1:
   855                              <1> ;Common function
   856                              <1> ;Scrolls a single pair of lines from column given in cl to dl
   857                              <1> ;rsi/rdi assumed to be pointing at the right place
   858                              <1> ;Direction to be set by calling function
   859                              <1> ;All registers EXCEPT pointers preserved, rbp returns # of words
   860 000012AC 51                  <1>     push rcx
   861 000012AD 52                  <1>     push rdx
   862 000012AE 4831ED              <1>     xor rbp, rbp
   863 000012B1 88CE                <1>     mov dh, cl    ;Save upper left corner in dh, freeing cx
   864 000012B3 88D1                <1>     mov cl, dl    
   865 000012B5 28F1                <1>     sub cl, dh    ;Get correct number of words to copy into cl
   866 000012B7 480FB6C9            <1>     movzx rcx, cl
   867 000012BB 48FFC1              <1>     inc rcx    ;absolute value, not offset
   868 000012BE 4889CD              <1>     mov rbp, rcx    ;Save number of words in rbp
   869 000012C1 F366A5              <1>     rep movsw    ;Move char/attrib for one row
   870 000012C4 5A                  <1>     pop rdx
   871 000012C5 59                  <1>     pop rcx
   872 000012C6 C3                  <1>     ret
   873                              <1> .cursor_proc:
   874                              <1> ;Called with bh containing page number
   875                              <1> ;Sets cursor on page in bh
   876                              <1> ;Returns nothing
   877 000012C7 E8B4FFFFFF          <1>     call .page_cursor_offset    ;rax rets offset, no shift needed
   878                              <1> 
   879 000012CC 88F9                <1>     mov cl, bh
   880 000012CE 480FB6C9            <1>     movzx rcx, cl
   881                              <1> ;----Modify this proc with data tables when finalised!!----
   882 000012D2 6631F6              <1>     xor si, si    
   883 000012D5 66BA0008            <1>     mov dx, 800h ;Most legacy Pages are sized 800h PELs, VGA greater
   884 000012D9 803C25[58010000]02  <1>     cmp byte [scr_mode], 2
   885 000012E1 7303                <1>     jae .cp1
   886 000012E3 66D1EA              <1>     shr dx, 1    ;If in modes 0,1, 400h PELs per page
   887                              <1> .cp1:
   888 000012E6 84C9                <1>     test cl, cl
   889 000012E8 7407                <1>     jz .cpwrite
   890 000012EA 6601D6              <1>     add si, dx 
   891 000012ED FEC9                <1>     dec cl
   892 000012EF 75F5                <1>     jnz .cp1
   893                              <1> 
   894                              <1> .cpwrite:
   895 000012F1 6689C1              <1>     mov cx, ax    ;move ax into cx
   896 000012F4 6601F1              <1>     add cx, si
   897 000012F7 B00E                <1>     mov al, 0Eh    ;Cursor row
   898 000012F9 E82EFFFFFF          <1>     call .write_crtc_word    ;cx has data to output, al is crtc reg
   899                              <1> 
   900 000012FE C3                  <1>     ret
   901                              <1> ;------------------------End of Interrupt------------------------
    93                                  %include "./Source/Resident/Services/Int31h.asm"
    94                              <1> ;-----------------------Basic Config Int 31h---------------------
    95                              <1> ;This interrupt returns in ax the Hardware Bitfield from the 
    96                              <1> ; data area and the mass storage device details.
    97                              <1> ;----------------------------------------------------------------
    98                              <1> machineWord_io:
    99 000012FF 668B0425[C9010000]  <1>     mov ax, word [MachineWord]    ;Return the legacy bitfield
   100                              <1> 
   101 00001307 4C0FB60425-         <1>     movzx r8, byte [i33Devices] ;Get Number of i33h devices
   101 0000130C [A8010000]          <1>
   102 00001310 49C1E008            <1>     shl r8, 8   ;Shift up by a byte
   103 00001314 448A0425[4B020000]  <1>     mov r8b, byte [numMSD]  ;Get the number of Mass Storage Devices (on EHCI)
   104 0000131C 49C1E008            <1>     shl r8, 8   ;Shift up by a byte again
   105 00001320 448A0425[AA010000]  <1>     mov r8b, byte [fdiskNum]    ;Get the number of fixed disks
   106 00001328 49C1E008            <1>     shl r8, 8  ;Shift up by a byte again
   107 0000132C 448A0425[66000000]  <1>     mov r8b, byte [numCOM]      ;Get the number of COM ports
   108                              <1> 
   109 00001334 48CF                <1>     iretq
   110                              <1> ;------------------------End of Interrupt------------------------
    94                                  %include "./Source/Resident/Services/Int32h.asm"
    95                              <1> ;------------------------Basic RAM Int 32h-----------------------
    96                              <1> ;This interrupt returns in ax amount of conventional memory in ax
    97                              <1> ;----------------------------------------------------------------
    98                              <1> convRAM_io:
    99 00001336 668B0425[CB010000]  <1>     mov ax, word [convRAM]    ;Return the amount of conventional RAM
   100 0000133E 4C8B0425[CD010000]  <1>     mov r8, qword [userBase]    ;Return the userbase to a caller
   101 00001346 4C8B0C25[F0050000]  <1>     mov r9, qword [bigmapptr]   ;Return the big Map pointer 
   102 0000134E 4C0FB61425-         <1>     movzx r10, byte [bigmapSize]    ;Return the number of 24 byte entries
   102 00001353 [D5010000]          <1>
   103 00001357 48CF                <1>     iretq
   104                              <1> ;------------------------End of Interrupt------------------------
    95                                  %include "./Source/Resident/Services/Int33h.asm"
    96                              <1> ;---------------------Storage Interrupt Int 33h------------------
    97                              <1> ;Input : dl = Drive number, rbx = Address of buffer, 
    98                              <1> ;        al = number of sectors, ch = Track number, 
    99                              <1> ;        cl = Sector number, dh = Head number
   100                              <1> ;Input LBA: dl = Drive Number, rbx = Address of Buffer, 
   101                              <1> ;           al = number of sectors, rcx = LBA number
   102                              <1> ;
   103                              <1> ;All registers not mentioned above, preserved
   104                              <1> ;----------------------------------------------------------------
   105                              <1> disk_io:
   106 00001359 FC                  <1>     cld ;Ensure all string reads/writes are in the right way
   107 0000135A F6C280              <1>     test dl, 80h
   108 0000135D 0F8543070000        <1>     jnz fdisk_io    ;If bit 7 set, goto Fixed disk routines
   109 00001363 52                  <1>     push rdx
   110 00001364 FEC2                <1>     inc dl          ;Inc device number count to absolute value
   111 00001366 3A1425[4B020000]    <1>     cmp dl, byte [numMSD]   ;For now, numMSD, eventually, numRemDrv
   112 0000136D 5A                  <1>     pop rdx
   113 0000136E 0F8786000000        <1>     ja .baddev
   114 00001374 80FC16              <1>     cmp ah, 16h
   115 00001377 0F84E3030000        <1>     jz .deviceChanged   ;Pick it off
   116                              <1> 
   117 0000137D E8B7040000          <1>     call .busScan   ;Bus scan only in valid cases
   118 00001382 803C25[A9010000]40  <1>     cmp byte [msdStatus], 40h   ;Media seek failed
   119 0000138A 747E                <1>     je .noDevInDrive
   120                              <1> 
   121 0000138C 84E4                <1>     test ah, ah
   122 0000138E 0F8484000000        <1>     jz .reset           ;ah = 00h Reset Device
   123 00001394 FECC                <1>     dec ah
   124 00001396 0F84AF000000        <1>     jz .statusreport    ;ah = 01h Get status of last op and req. sense if ok 
   125                              <1> 
   126 0000139C C60425[A9010000]00  <1>     mov byte [msdStatus], 00    ;Reset status byte for following operations
   127                              <1> 
   128 000013A4 FECC                <1>     dec ah
   129 000013A6 0F841E010000        <1>     jz .readsectors     ;ah = 02h CHS Read Sectors
   130 000013AC FECC                <1>     dec ah
   131 000013AE 0F843E010000        <1>     jz .writesectors    ;ah = 03h CHS Write Sectors
   132 000013B4 FECC                <1>     dec ah
   133 000013B6 0F8457010000        <1>     jz .verify          ;ah = 04h CHS Verify Sectors
   134 000013BC FECC                <1>     dec ah
   135 000013BE 0F8470010000        <1>     jz .format          ;ah = 05h CHS Format Track (Select Head and Cylinder)
   136                              <1> 
   137 000013C4 80FC02              <1>     cmp ah, 02h
   138 000013C7 0F84A1020000        <1>     je .formatLowLevel  ;ah = 07h (SCSI) Low Level Format Device
   139                              <1> 
   140 000013CD 80FC7D              <1>     cmp ah, 7Dh         ;ah = 82h LBA Read Sectors
   141 000013D0 0F84E5010000        <1>     je .lbaread
   142 000013D6 80FC7E              <1>     cmp ah, 7Eh         ;ah = 83h LBA Write Sectors
   143 000013D9 0F8401020000        <1>     je .lbawrite
   144 000013DF 80FC7F              <1>     cmp ah, 7Fh         ;ah = 84h LBA Verify Sectors
   145 000013E2 0F841D020000        <1>     je .lbaverify
   146 000013E8 80FC80              <1>     cmp ah, 80h         ;ah = 85h LBA Format Sectors
   147 000013EB 0F8439020000        <1>     je .lbaformat
   148 000013F1 80FC83              <1>     cmp ah, 83h         ;ah = 88h LBA Read Drive Parameters
   149 000013F4 0F8496020000        <1>     je .lbareadparams
   150                              <1> .baddev:
   151 000013FA B401                <1>     mov ah, 01h
   152 000013FC 882425[A9010000]    <1>     mov byte [msdStatus], ah   ;Invalid function requested signature
   153                              <1> .bad:
   154 00001403 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   155 00001408 48CF                <1>     iretq
   156                              <1> .noDevInDrive:
   157 0000140A 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   158 00001411 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   159 00001416 48CF                <1>     iretq
   160                              <1> .reset: ;Device Reset
   161 00001418 56                  <1>     push rsi
   162 00001419 52                  <1>     push rdx
   163 0000141A E8F2020000          <1>     call .i33ehciGetDevicePtr
   164 0000141F E8FC270000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   165 00001424 E8D0360000          <1>     call USB.ehciMsdBOTResetRecovery
   166                              <1> .rrexit:
   167 00001429 5A                  <1>     pop rdx
   168 0000142A 5E                  <1>     pop rsi
   169 0000142B 720E                <1>     jc .rrbad
   170 0000142D 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   171 00001434 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   172 00001439 48CF                <1>     iretq
   173                              <1> .rrbad:
   174 0000143B B405                <1>     mov ah, 5   ;Reset failed
   175 0000143D 882425[A9010000]    <1>     mov byte [msdStatus], ah
   176 00001444 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   177 00001449 48CF                <1>     iretq
   178                              <1> .statusreport:  
   179                              <1> ;If NOT a host/bus/ctrlr type error, request sense and ret code
   180 0000144B 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]    ;Get last status into ah
   181 00001452 84E4                <1>     test ah, ah ;If status is zero, exit
   182 00001454 7507                <1>     jnz .srmain
   183 00001456 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh     ;Clear CF
   184 0000145B 48CF                <1>     iretq
   185                              <1> .srmain:
   186 0000145D C60425[A9010000]00  <1>     mov byte [msdStatus], 00    ;Reset status byte
   187 00001465 80FC20              <1>     cmp ah, 20h     ;General Controller failure?
   188 00001468 7449                <1>     je .srexit
   189 0000146A 80FC80              <1>     cmp ah, 80h     ;Timeout?
   190 0000146D 7444                <1>     je .srexit
   191                              <1> ;Issue a Request sense command
   192 0000146F 56                  <1>     push rsi
   193 00001470 50                  <1>     push rax    ;Save original error code in ah on stack
   194 00001471 E89B020000          <1>     call .i33ehciGetDevicePtr
   195 00001476 E8A5270000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   196 0000147B 7241                <1>     jc .srexitbad1
   197 0000147D E8433C0000          <1>     call USB.ehciMsdBOTRequestSense
   198 00001482 E852370000          <1>     call USB.ehciMsdBOTCheckTransaction
   199 00001487 6685C0              <1>     test ax, ax
   200 0000148A 58                  <1>     pop rax         ;Get back original error code
   201 0000148B 752D                <1>     jnz .srexitbad2
   202 0000148D 4C0FB60425-         <1>     movzx r8, byte [ehciDataIn + 13]  ;Get ASCQ into r8
   202 00001492 [CD030000]          <1>
   203 00001496 49C1E008            <1>     shl r8, 8                        ;Make space in lower byte of r8 for ASC key
   204 0000149A 448A0425[CC030000]  <1>     mov r8b, byte [ehciDataIn + 12]   ;Get ASC into r8
   205 000014A2 49C1E008            <1>     shl r8, 8                    ;Make space in lower byte of r8 for sense key
   206 000014A6 448A0425[C2030000]  <1>     mov r8b, byte [ehciDataIn + 2]  ;Get sense key into al
   207 000014AE 4180C8F0            <1>     or r8b, 0F0h                    ;Set sense signature (set upper nybble F)
   208 000014B2 5E                  <1>     pop rsi
   209                              <1> .srexit:
   210 000014B3 804C241001          <1>     or byte [rsp + 2*8h], 1 ;Non-zero error, requires CF=CY
   211 000014B8 48CF                <1>     iretq
   212                              <1> .srexitbad2:
   213 000014BA B4FF                <1>     mov ah, -1  ;Sense operation failed
   214 000014BC EB02                <1>     jmp short .srexitbad
   215                              <1> .srexitbad1:
   216 000014BE B420                <1>     mov ah, 20h ;General Controller Failure
   217                              <1> .srexitbad:
   218 000014C0 5E                  <1>     pop rsi
   219 000014C1 882425[A9010000]    <1>     mov byte [msdStatus], ah
   220 000014C8 EB21                <1>     jmp short .rsbad
   221                              <1> 
   222                              <1> .readsectors:
   223 000014CA 57                  <1>     push rdi
   224 000014CB 48BF-               <1>     mov rdi, USB.ehciMsdBOTInSector512
   224 000014CD [E951000000000000]  <1>
   225 000014D5 E8EB010000          <1>     call .sectorsEHCI
   226 000014DA 5F                  <1>     pop rdi
   227 000014DB 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]    ;Return Error code in ah
   228 000014E2 7207                <1>     jc .rsbad
   229 000014E4 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   230 000014E9 48CF                <1>     iretq
   231                              <1> .rsbad:
   232 000014EB 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   233 000014F0 48CF                <1>     iretq
   234                              <1> 
   235                              <1> .writesectors:
   236 000014F2 57                  <1>     push rdi
   237 000014F3 48BF-               <1>     mov rdi, USB.ehciMsdBOTOutSector512
   237 000014F5 [9E51000000000000]  <1>
   238 000014FD E8C3010000          <1>     call .sectorsEHCI
   239 00001502 5F                  <1>     pop rdi
   240 00001503 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   241 0000150A 72DF                <1>     jc .rsbad
   242 0000150C 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   243 00001511 48CF                <1>     iretq
   244                              <1> 
   245                              <1> .verify:
   246 00001513 57                  <1>     push rdi
   247 00001514 48BF-               <1>     mov rdi, USB.ehciMsdBOTVerify
   247 00001516 [7650000000000000]  <1>
   248 0000151E E8A2010000          <1>     call .sectorsEHCI   ;Verify sector by sector
   249 00001523 5F                  <1>     pop rdi
   250 00001524 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   251 0000152B 72BE                <1>     jc .rsbad
   252 0000152D 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   253 00001532 48CF                <1>     iretq
   254                              <1> .format:
   255                              <1> ;Cleans sectors on chosen track. DOES NOT Low Level Format.
   256                              <1> ;Fills sectors with fill byte from table
   257 00001534 50                  <1>     push rax
   258 00001535 53                  <1>     push rbx
   259 00001536 51                  <1>     push rcx
   260 00001537 56                  <1>     push rsi
   261 00001538 57                  <1>     push rdi
   262 00001539 55                  <1>     push rbp
   263                              <1> 
   264 0000153A 51                  <1>     push rcx                    ;Save ch = Cylinder number
   265 0000153B 488B3425[AF010000]  <1>     mov rsi, qword [diskDptPtr]
   266 00001543 B880000000          <1>     mov eax, 80h                 ;128 bytes
   267 00001548 8A4E03              <1>     mov cl, byte [rsi + 3]  ;Bytes per track
   268 0000154B D3E0                <1>     shl eax, cl                  ;Multiply 128 bytes per sector by multiplier
   269 0000154D 89C1                <1>     mov ecx, eax
   270 0000154F 8A4608              <1>     mov al, byte [rsi + 8]  ;Fill byte for format
   271 00001552 48BF-               <1>     mov rdi, sectorbuffer       ;Large enough buffer
   271 00001554 [C003000000000000]  <1>
   272 0000155C F3AA                <1>     rep stosb                   ;Create mock sector
   273                              <1> 
   274 0000155E 8A4E04              <1>     mov cl, byte [rsi + 4]  ;Get sectors per track
   275 00001561 0FB6E9              <1>     movzx ebp, cl               ;Put number of sectors in Cylinder in ebp
   276                              <1> 
   277 00001564 59                  <1>     pop rcx                     ;Get back Cylinder number in ch
   278 00001565 B101                <1>     mov cl, 1                   ;Ensure start at sector 1 of Cylinder
   279                              <1> 
   280 00001567 E8D3010000          <1>     call .convertCHSLBA ;Converts to valid 32 bit LBA in ecx for geometry type
   281                              <1>     ;ecx now has LBA
   282                              <1> .formatcommon:
   283 0000156C E8A0010000          <1>     call .i33ehciGetDevicePtr
   284 00001571 7245                <1>     jc .fbad
   285 00001573 89CA                <1>     mov edx, ecx    ;Load edx for function call
   286                              <1> ;Replace this section with a single USB function
   287 00001575 E8A6260000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   288 0000157A 48BB-               <1>     mov rbx, sectorbuffer
   288 0000157C [C003000000000000]  <1>
   289                              <1> .f0:
   290 00001584 E8153C0000          <1>     call USB.ehciMsdBOTOutSector512
   291 00001589 0F8277010000        <1>     jc .sebadBB
   292 0000158F FFC2                <1>     inc edx ;Inc LBA
   293 00001591 FFCD                <1>     dec ebp ;Dec number of sectors to act on
   294 00001593 75EF                <1>     jnz .f0
   295 00001595 F8                  <1>     clc
   296                              <1> .formatexit:
   297 00001596 5D                  <1>     pop rbp
   298 00001597 5F                  <1>     pop rdi
   299 00001598 5E                  <1>     pop rsi
   300 00001599 59                  <1>     pop rcx
   301 0000159A 5B                  <1>     pop rbx
   302 0000159B 58                  <1>     pop rax
   303 0000159C 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   304 000015A3 0F8242FFFFFF        <1>     jc .rsbad
   305 000015A9 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   306 000015AE 48CF                <1>     iretq
   307                              <1> .fbadBB:
   308 000015B0 C60425[A9010000]BB  <1>     mov byte [msdStatus], 0BBh  ;Unknown Error, request sense
   309                              <1> .fbad:
   310 000015B8 F9                  <1>     stc
   311 000015B9 EBDB                <1>     jmp short .formatexit
   312                              <1> .lbaread:
   313 000015BB 57                  <1>     push rdi
   314 000015BC 48BF-               <1>     mov rdi, USB.ehciMsdBOTInSector512
   314 000015BE [E951000000000000]  <1>
   315 000015C6 E88D000000          <1>     call .lbaCommon
   316 000015CB 5F                  <1>     pop rdi
   317 000015CC 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]    ;Return Error code in ah
   318 000015D3 0F8212FFFFFF        <1>     jc .rsbad
   319 000015D9 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   320 000015DE 48CF                <1>     iretq   
   321                              <1> .lbawrite:
   322 000015E0 57                  <1>     push rdi
   323 000015E1 48BF-               <1>     mov rdi, USB.ehciMsdBOTOutSector512
   323 000015E3 [9E51000000000000]  <1>
   324 000015EB E868000000          <1>     call .lbaCommon
   325 000015F0 5F                  <1>     pop rdi
   326 000015F1 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]    ;Return Error code in ah
   327 000015F8 0F82EDFEFFFF        <1>     jc .rsbad
   328 000015FE 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   329 00001603 48CF                <1>     iretq
   330                              <1> .lbaverify:
   331 00001605 57                  <1>     push rdi
   332 00001606 48BF-               <1>     mov rdi, USB.ehciMsdBOTVerify
   332 00001608 [7650000000000000]  <1>
   333 00001610 E843000000          <1>     call .lbaCommon
   334 00001615 5F                  <1>     pop rdi
   335 00001616 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]    ;Return Error code in ah
   336 0000161D 0F82C8FEFFFF        <1>     jc .rsbad
   337 00001623 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   338 00001628 48CF                <1>     iretq
   339                              <1> .lbaformat:
   340 0000162A 50                  <1>     push rax
   341 0000162B 53                  <1>     push rbx
   342 0000162C 51                  <1>     push rcx
   343 0000162D 56                  <1>     push rsi
   344 0000162E 57                  <1>     push rdi
   345 0000162F 55                  <1>     push rbp
   346 00001630 0FB6E8              <1>     movzx ebp, al ;Save the number of sectors to format in ebp
   347 00001633 51                  <1>     push rcx
   348 00001634 52                  <1>     push rdx
   349 00001635 B900020000          <1>     mov ecx, 200h
   350 0000163A 48BF-               <1>     mov rdi, sectorbuffer
   350 0000163C [C003000000000000]  <1>
   351 00001644 488B1425[AF010000]  <1>     mov rdx, qword [diskDptPtr]
   352 0000164C 8A4208              <1>     mov al, byte [rdx + 8]  ;Fill byte for format
   353 0000164F F3AA                <1>     rep stosb
   354 00001651 5A                  <1>     pop rdx
   355 00001652 59                  <1>     pop rcx
   356 00001653 E914FFFFFF          <1>     jmp .formatcommon
   357                              <1> 
   358                              <1> .lbaCommon:
   359 00001658 50                  <1>     push rax
   360 00001659 56                  <1>     push rsi
   361 0000165A 53                  <1>     push rbx
   362 0000165B 51                  <1>     push rcx
   363 0000165C 52                  <1>     push rdx
   364 0000165D 55                  <1>     push rbp
   365 0000165E 84C0                <1>     test al, al
   366 00001660 0F8499000000        <1>     jz .se2 ;If al=0, skip copying sectors, clears CF
   367 00001666 0FB6E8              <1>     movzx ebp, al
   368 00001669 E969000000          <1>     jmp .seCommon
   369                              <1> 
   370                              <1> ;Low level format, ah=07h
   371                              <1> .formatLowLevel:
   372 0000166E 56                  <1>     push rsi
   373 0000166F 50                  <1>     push rax
   374 00001670 E89C000000          <1>     call .i33ehciGetDevicePtr   ;al = bus num, rsi = ehci device structure ptr
   375 00001675 E892390000          <1>     call USB.ehciMsdBOTFormatUnit
   376 0000167A 58                  <1>     pop rax
   377 0000167B 5E                  <1>     pop rsi
   378 0000167C 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   379 00001683 0F8262FEFFFF        <1>     jc .rsbad
   380 00001689 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   381 0000168E 48CF                <1>     iretq
   382                              <1> .lbareadparams:
   383                              <1> ;Reads drive parameters (for drive dl which is always valid at this point)
   384                              <1> ;Output: rbx = dBlockSize (Dword for LBA block size)
   385                              <1> ;        rcx = qLastLBANum (Qword address of last LBA)
   386                              <1> ;         dl = Number of removable devices 
   387                              <1> ;         ah = 0
   388 00001690 52                  <1>     push rdx
   389 00001691 50                  <1>     push rax
   390 00001692 480FB6C2            <1>     movzx rax, dl   ;Move drive number offset into rax
   391 00001696 48BA10000000000000- <1>     mov rdx, int33TblEntrySize
   391 0000169F 00                  <1>
   392 000016A0 48F7E2              <1>     mul rdx
   393 000016A3 488D90[D3030000]    <1>     lea rdx, qword [diskDevices + rax]  ;Move address into rdx
   394 000016AA 31DB                <1>     xor ebx, ebx
   395 000016AC 8B5A03              <1>     mov ebx, dword [rdx + 3]    ;Get dBlockSize for device
   396 000016AF 488B4A07            <1>     mov rcx, qword [rdx + 7]    ;Get qLastLBANum for device
   397 000016B3 58                  <1>     pop rax
   398 000016B4 5A                  <1>     pop rdx
   399 000016B5 8A1425[4B020000]    <1>     mov dl, byte [numMSD]
   400 000016BC 30E4                <1>     xor ah, ah
   401 000016BE 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   402 000016C3 48CF                <1>     iretq
   403                              <1> .sectorsEHCI:
   404                              <1> ;Input: rdi = Address of USB EHCI MSD BBB function
   405                              <1> ;Output: CF = CY: Error, exit
   406                              <1> ;        CF = NC: No Error
   407 000016C5 50                  <1>     push rax
   408 000016C6 56                  <1>     push rsi
   409 000016C7 53                  <1>     push rbx
   410 000016C8 51                  <1>     push rcx
   411 000016C9 52                  <1>     push rdx
   412 000016CA 55                  <1>     push rbp
   413 000016CB 84C0                <1>     test al, al
   414 000016CD 7430                <1>     jz .se2 ;If al=0, skip copying sectors, clears CF
   415 000016CF 0FB6E8              <1>     movzx ebp, al   ;Move the number of sectors into ebp
   416 000016D2 E868000000          <1>     call .convertCHSLBA ;Converts to valid 32 bit LBA in ecx for geometry type
   417                              <1>     ;ecx now has LBA
   418                              <1> .seCommon:  ;Entered with ebp = Number of Sectors and ecx = Start LBA
   419 000016D7 E835000000          <1>     call .i33ehciGetDevicePtr
   420 000016DC 7230                <1>     jc .sebad
   421 000016DE 4889CA              <1>     mov rdx, rcx    ;Load edx for function call
   422                              <1> ;Replace this section with a single USB function
   423 000016E1 E83A250000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   424 000016E6 30C0                <1>     xor al, al      ;Sector counter
   425                              <1> .se1:
   426 000016E8 FEC0                <1>     inc al  ;Inc Sector counter
   427 000016EA 50                  <1>     push rax
   428 000016EB FFD7                <1>     call rdi
   429 000016ED 58                  <1>     pop rax
   430 000016EE 7216                <1>     jc .sebadBB
   431 000016F0 4881C300020000      <1>     add rbx, 200h   ;Goto next sector
   432 000016F7 48FFC2              <1>     inc rdx ;Inc LBA
   433 000016FA FFCD                <1>     dec ebp ;Dec number of sectors to act on
   434 000016FC 75EA                <1>     jnz .se1
   435 000016FE F8                  <1>     clc
   436                              <1> .se2:
   437 000016FF 5D                  <1>     pop rbp
   438 00001700 5A                  <1>     pop rdx
   439 00001701 59                  <1>     pop rcx
   440 00001702 5B                  <1>     pop rbx
   441 00001703 5E                  <1>     pop rsi
   442 00001704 58                  <1>     pop rax
   443 00001705 C3                  <1>     ret
   444                              <1> .sebadBB:
   445 00001706 C60425[A9010000]BB  <1>     mov byte [msdStatus], 0BBh  ;Unknown Error, request sense
   446                              <1> .sebad:
   447 0000170E F9                  <1>     stc
   448 0000170F EBEE                <1>     jmp short .se2
   449                              <1> 
   450                              <1> .i33ehciGetDevicePtr:
   451                              <1> ;Input: dl = Int 33h number whose 
   452                              <1> ;Output: rsi = Pointer to ehci msd device parameter block
   453                              <1> ;        al = EHCI bus the device is on
   454 00001711 53                  <1>     push rbx    ;Need to temporarily preserve rbx
   455 00001712 480FB6C2            <1>     movzx rax, dl   ;Move drive number offset into rax
   456 00001716 48BA10000000000000- <1>     mov rdx, int33TblEntrySize
   456 0000171F 00                  <1>
   457 00001720 48F7E2              <1>     mul rdx
   458 00001723 488D90[D3030000]    <1>     lea rdx, qword [diskDevices + rax]  ;Move address into rdx
   459 0000172A 803A00              <1>     cmp byte [rdx], 0   ;Check to see if the device type is 0 (ie doesnt exist)
   460 0000172D 740E                <1>     jz .i33egdpbad ;If not, exit
   461 0000172F 668B4201            <1>     mov ax, word [rdx + 1]  ;Get address/Bus pair into ax
   462 00001733 E8B92D0000          <1>     call USB.ehciGetDevicePtr   ;Get device pointer into rsi
   463 00001738 88E0                <1>     mov al, ah          ;Get the bus into al
   464 0000173A 5B                  <1>     pop rbx
   465 0000173B F8                  <1>     clc
   466 0000173C C3                  <1>     ret
   467                              <1> .i33egdpbad:
   468 0000173D F9                  <1>     stc
   469 0000173E C3                  <1>     ret
   470                              <1> 
   471                              <1> .convertCHSLBA:
   472                              <1> ;Converts a CHS address to LBA
   473                              <1> ;Input: dl = Drive number, if dl < 80h, use diskdpt. If dl > 80h, use hdiskdpt
   474                              <1> ;       ch = Track number, cl = Sector number, dh = Head number 
   475                              <1> ;Output: ecx = LBA address
   476                              <1> ;----------Reference Equations----------
   477                              <1> ;C = LBA / (HPC x SPT)
   478                              <1> ;H = (LBA / SPT) mod HPC
   479                              <1> ;S = (LBA mod SPT) + 1
   480                              <1> ;+++++++++++++++++++++++++++++++++++++++
   481                              <1> ;LBA = (( C x HPC ) + H ) x SPT + S - 1
   482                              <1> ;---------------------------------------
   483                              <1> ;Use diskdpt.spt for sectors per track value! 
   484                              <1> ;1.44Mb geometry => H=2, C=80, S=18
   485 0000173F 50                  <1>     push rax
   486 00001740 56                  <1>     push rsi
   487 00001741 488B3425[AF010000]  <1>     mov rsi, qword [diskDptPtr]
   488 00001749 D0E5                <1>     shl ch, 1   ;Multiply by HPC=2
   489 0000174B 00F5                <1>     add ch, dh  ;Add head number
   490 0000174D 88E8                <1>     mov al, ch  ;al = ch = (( C x HPC ) + H )
   491 0000174F F66604              <1>     mul byte [rsi + 4]  ;Sectors per track
   492 00001752 30ED                <1>     xor ch, ch  
   493 00001754 6601C8              <1>     add ax, cx  ;Add sector number to ax
   494 00001757 66FFC8              <1>     dec ax
   495 0000175A 0FB7C8              <1>     movzx ecx, ax
   496 0000175D 5E                  <1>     pop rsi
   497 0000175E 58                  <1>     pop rax
   498 0000175F C3                  <1>     ret
   499                              <1> .deviceChanged:
   500                              <1> ;Entry: dl = Drive number
   501                              <1> ;Exit: ah = 00h, No device changed occured, CF = CN
   502                              <1> ;      ah = 01h, Device changed occured, CF = CN
   503                              <1> ;      CF = CY if an error occured or device removed
   504 00001760 53                  <1>     push rbx
   505 00001761 51                  <1>     push rcx
   506 00001762 52                  <1>     push rdx
   507 00001763 56                  <1>     push rsi
   508 00001764 57                  <1>     push rdi
   509 00001765 55                  <1>     push rbp
   510 00001766 4150                <1>     push r8
   511 00001768 4151                <1>     push r9
   512 0000176A 4152                <1>     push r10
   513 0000176C 4153                <1>     push r11
   514                              <1> 
   515 0000176E 50                  <1>     push rax
   516                              <1> 
   517 0000176F 4C0FB61C25-         <1>     movzx r11, byte [msdStatus] ;Preserve the original status byte
   517 00001774 [A9010000]          <1>
   518 00001778 0FB6EA              <1>     movzx ebp, dl               ;Save the device number in ebp
   519 0000177B E891FFFFFF          <1>     call .i33ehciGetDevicePtr   ;Get MSD dev data block ptr in rsi and bus in al
   520                              <1> ;Check port on device for status change.
   521 00001780 807E0200            <1>     cmp byte [rsi + 2], 0   ;Check if root hub
   522 00001784 0F8493000000        <1>     jz .dcRoot
   523                              <1> ;External Hub procedure
   524 0000178A 668B4601            <1>     mov ax, word [rsi + 1]  ;Get bus and host hub address
   525 0000178E 86C4                <1>     xchg al, ah             ;Swap endianness
   526 00001790 4989F1              <1>     mov r9, rsi
   527 00001793 E8592D0000          <1>     call USB.ehciGetDevicePtr   ;Get the hub address in rsi
   528 00001798 88E0                <1>     mov al, ah
   529 0000179A E881240000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   530 0000179F C70425[C0030000]00- <1>     mov dword [ehciDataIn], 0
   530 000017A7 000000              <1>
   531 000017AA 48BAA3000000000004- <1>     mov rdx, 00040000000000A3h ;Get Port status
   531 000017B3 00                  <1>
   532 000017B4 410FB65903          <1>     movzx ebx, byte [r9 + 3]    ;Get the port number from device parameter block
   533 000017B9 48C1E320            <1>     shl rbx, 4*8    ;Shift port number to right position
   534 000017BD 4809D3              <1>     or rbx, rdx
   535 000017C0 0FB64E04            <1>     movzx ecx, byte [rsi + 4]  ;bMaxPacketSize0
   536 000017C4 8A06                <1>     mov al, byte [rsi]      ;Get upstream hub address
   537 000017C6 E84B260000          <1>     call USB.ehciGetRequest
   538 000017CB 723A                <1>     jc .dcError
   539                              <1> 
   540 000017CD 49B8-               <1>     mov r8, USB.ehciEnumerateHubPort    ;Store address for if bit is set
   540 000017CF [7C47000000000000]  <1>
   541 000017D7 8B1425[C0030000]    <1>     mov edx, dword [ehciDataIn]
   542 000017DE 81E200000100        <1>     and edx, 10000h ;Isolate the port status changed bit
   543 000017E4 C1EA10              <1>     shr edx, 10h    ;Shift status from bit 16 to bit 0
   544                              <1> .dcNoError:
   545 000017E7 44881C25[A9010000]  <1>     mov byte [msdStatus], r11b  ;Return back the original status byte
   546 000017EF 58                  <1>     pop rax
   547 000017F0 88D4                <1>     mov ah, dl                  ;Place return value in ah
   548 000017F2 415B                <1>     pop r11
   549 000017F4 415A                <1>     pop r10
   550 000017F6 4159                <1>     pop r9
   551 000017F8 4158                <1>     pop r8
   552 000017FA 5D                  <1>     pop rbp
   553 000017FB 5F                  <1>     pop rdi
   554 000017FC 5E                  <1>     pop rsi
   555 000017FD 5A                  <1>     pop rdx
   556 000017FE 59                  <1>     pop rcx
   557 000017FF 5B                  <1>     pop rbx
   558 00001800 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear CF
   559 00001805 48CF                <1>     iretq
   560                              <1> .dcError:
   561 00001807 58                  <1>     pop rax ;Just return the old rax value
   562 00001808 415B                <1>     pop r11
   563 0000180A 415A                <1>     pop r10
   564 0000180C 4159                <1>     pop r9
   565 0000180E 4158                <1>     pop r8
   566 00001810 5D                  <1>     pop rbp
   567 00001811 5F                  <1>     pop rdi
   568 00001812 5E                  <1>     pop rsi
   569 00001813 5A                  <1>     pop rdx
   570 00001814 59                  <1>     pop rcx
   571 00001815 5B                  <1>     pop rbx
   572 00001816 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   573 0000181B 48CF                <1>     iretq
   574                              <1> .dcRoot:
   575                              <1> ;Root hub procedure.
   576 0000181D E8FE230000          <1>     call USB.ehciAdjustAsyncSchedCtrlr  ;Reset the bus if needed
   577 00001822 E83B3B0000          <1>     call USB.ehciGetOpBase      ;Get opbase into rax
   578 00001827 0FB65E03            <1>     movzx ebx, byte [rsi + 3]   ;Get MSD port number into dl
   579 0000182B FFCB                <1>     dec ebx                     ;Reduce by one
   580 0000182D 678B549844          <1>     mov edx, dword [eax + 4*ebx + ehciportsc]  ;Get port status into eax
   581 00001832 80E202              <1>     and dl, 2h      ;Only save bit 1, status changed bit
   582 00001835 D0EA                <1>     shr dl, 1       ;Shift down by one bit
   583 00001837 EBAE                <1>     jmp short .dcNoError    ;Exit
   584                              <1> .busScan:
   585                              <1> ;Will request the hub bitfield from the RMH the device is plugged in to.
   586                              <1> ;Preserves ALL registers.
   587                              <1> ;dl = Device number
   588                              <1> 
   589                              <1> ;If status changed bit set, call appropriate enumeration function.
   590                              <1> ;If enumeration returns empty device, keep current device data blocks in memory,
   591                              <1> ; but return Int 33h error 40h = Seek operation Failed.
   592 00001839 50                  <1>     push rax
   593 0000183A 53                  <1>     push rbx
   594 0000183B 51                  <1>     push rcx
   595 0000183C 52                  <1>     push rdx
   596 0000183D 56                  <1>     push rsi
   597 0000183E 57                  <1>     push rdi
   598 0000183F 55                  <1>     push rbp
   599 00001840 4150                <1>     push r8
   600 00001842 4151                <1>     push r9
   601 00001844 4152                <1>     push r10
   602 00001846 4153                <1>     push r11
   603                              <1> 
   604 00001848 4C0FB61C25-         <1>     movzx r11, byte [msdStatus] ;Preserve the original status
   604 0000184D [A9010000]          <1>
   605                              <1> 
   606 00001851 0FB6EA              <1>     movzx ebp, dl               ;Save the device number in ebp
   607 00001854 E8B8FEFFFF          <1>     call .i33ehciGetDevicePtr   ;Get MSD dev data block ptr in rsi and bus in al
   608                              <1> ;Check port on device for status change.
   609 00001859 807E0200            <1>     cmp byte [rsi + 2], 0   ;Check if root hub
   610 0000185D 0F84CE000000        <1>     jz .bsRoot
   611                              <1> ;External Hub procedure
   612 00001863 668B4601            <1>     mov ax, word [rsi + 1]  ;Get bus and host hub address
   613 00001867 86C4                <1>     xchg al, ah             ;Swap endianness
   614 00001869 4989F1              <1>     mov r9, rsi
   615 0000186C E8802C0000          <1>     call USB.ehciGetDevicePtr   ;Get the hub address in rsi
   616 00001871 88E0                <1>     mov al, ah
   617 00001873 E8A8230000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   618 00001878 C70425[C0030000]00- <1>     mov dword [ehciDataIn], 0
   618 00001880 000000              <1>
   619 00001883 48BAA3000000000004- <1>     mov rdx, 00040000000000A3h ;Get Port status
   619 0000188C 00                  <1>
   620 0000188D 410FB65903          <1>     movzx ebx, byte [r9 + 3]    ;Get the port number from device parameter block
   621 00001892 48C1E320            <1>     shl rbx, 4*8    ;Shift port number to right position
   622 00001896 4809D3              <1>     or rbx, rdx
   623 00001899 0FB64E04            <1>     movzx ecx, byte [rsi + 4]  ;bMaxPacketSize0
   624 0000189D 8A06                <1>     mov al, byte [rsi]      ;Get upstream hub address
   625 0000189F E872250000          <1>     call USB.ehciGetRequest
   626 000018A4 722C                <1>     jc .bsErrorExit
   627                              <1> 
   628 000018A6 49B8-               <1>     mov r8, USB.ehciEnumerateHubPort    ;Store address for if bit is set
   628 000018A8 [7C47000000000000]  <1>
   629 000018B0 8B1425[C0030000]    <1>     mov edx, dword [ehciDataIn]
   630 000018B7 81E201000100        <1>     and edx, 10001h
   631 000018BD F7C200000100        <1>     test edx, 10000h
   632 000018C3 752A                <1>     jnz .bsClearPortChangeStatus    ;If top bit set, clear port change bit
   633                              <1> .bsret:
   634 000018C5 F6C201              <1>     test dl, 1h
   635 000018C8 7418                <1>     jz .bsrExit06h  ;Bottom bit not set, exit media changed Error (edx = 00000h)
   636                              <1> .bsexit:    ;The fall through is (edx = 00001h), no change to dev in port
   637 000018CA 44881C25[A9010000]  <1>     mov byte [msdStatus], r11b  ;Get back the original status byte
   638                              <1> .bsErrorExit:
   639 000018D2 415B                <1>     pop r11
   640 000018D4 415A                <1>     pop r10
   641 000018D6 4159                <1>     pop r9
   642 000018D8 4158                <1>     pop r8
   643 000018DA 5D                  <1>     pop rbp
   644 000018DB 5F                  <1>     pop rdi
   645 000018DC 5E                  <1>     pop rsi
   646 000018DD 5A                  <1>     pop rdx
   647 000018DE 59                  <1>     pop rcx
   648 000018DF 5B                  <1>     pop rbx
   649 000018E0 58                  <1>     pop rax
   650 000018E1 C3                  <1>     ret
   651                              <1> .bsrExit06h:    ;If its clear, nothing in port, return media changed error
   652 000018E2 49BB06000000000000- <1>     mov r11, 06h ;Change the msdStatus byte, media changed or removed
   652 000018EB 00                  <1>
   653 000018EC F9                  <1>     stc
   654 000018ED EBDB                <1>     jmp short .bsexit
   655                              <1> .bsClearPortChangeStatus:
   656 000018EF 52                  <1>     push rdx
   657 000018F0 C70425[C0030000]00- <1>     mov dword [ehciDataIn], 0
   657 000018F8 000000              <1>
   658 000018FB 48BA23011000000000- <1>     mov rdx, 0000000000100123h  ;Set Port status
   658 00001904 00                  <1>
   659 00001905 410FB65903          <1>     movzx ebx, byte [r9 + 3]    ;Get the port number from device parameter block
   660 0000190A 48C1E320            <1>     shl rbx, 4*8    ;Shift port number to right position
   661 0000190E 4809D3              <1>     or rbx, rdx
   662 00001911 0FB64E04            <1>     movzx ecx, byte [rsi + 4]  ;bMaxPacketSize0
   663 00001915 8A06                <1>     mov al, byte [rsi]      ;Get device address
   664 00001917 E85B240000          <1>     call USB.ehciSetNoData
   665 0000191C 5A                  <1>     pop rdx
   666 0000191D 72B3                <1>     jc .bsErrorExit  ;If error exit by destroying the old msdStatus
   667                              <1> 
   668 0000191F F6C201              <1>     test dl, 1h
   669 00001922 74BE                <1>     jz .bsrExit06h  ;Bottom bit not set, exit media changed error (edx = 10000h)
   670 00001924 EB4E                <1>     jmp short .bsCommonEP   ;Else new device in port needs enum (edx = 10001h)
   671                              <1> .bsRtNoDev:
   672 00001926 67814C984402000000  <1>     or dword [eax + 4*ebx + ehciportsc], 2  ;Clear the bit
   673 0000192F EBB1                <1>     jmp short .bsrExit06h   ;Exit with seek error
   674                              <1> .bsRoot:
   675                              <1> ;Root hub procedure.
   676 00001931 E8EA220000          <1>     call USB.ehciAdjustAsyncSchedCtrlr  ;Reset the bus if needed
   677 00001936 E8273A0000          <1>     call USB.ehciGetOpBase      ;Get opbase into rax
   678 0000193B 0FB65E03            <1>     movzx ebx, byte [rsi + 3]   ;Get MSD port number into dl
   679 0000193F FFCB                <1>     dec ebx                     ;Reduce by one
   680 00001941 678B549844          <1>     mov edx, dword [eax + 4*ebx + ehciportsc]  ;Get port status into eax
   681 00001946 80E203              <1>     and dl, 3h      ;Only save bottom two bits
   682 00001949 84D2                <1>     test dl, dl     ;No device in port  (dl=00b)
   683 0000194B 7495                <1>     jz .bsrExit06h  ;Exit media changed error
   684 0000194D FECA                <1>     dec dl          ;Device in port     (dl=01b)
   685 0000194F 0F8475FFFFFF        <1>     jz .bsexit      ;Exit, no status change
   686 00001955 FECA                <1>     dec dl          ;New device, Device removed from port   (dl=10b)
   687 00001957 74CD                <1>     jz .bsRtNoDev   ;Clear state change bit and exit Seek error
   688                              <1> ;Fallthrough case, New device, Device inserted in port  (dl=11b)
   689 00001959 67814C984402000000  <1>     or dword [eax + 4*ebx + ehciportsc], 2  ;Clear the state change bit
   690 00001962 49B8-               <1>     mov r8,  USB.ehciEnumerateRootPort   ;The enumeration function to call
   690 00001964 [3940000000000000]  <1>
   691 0000196C 4989F1              <1>     mov r9, rsi        ;Store the device pointer in r9
   692 0000196F BE00000000          <1>     mov esi, 0         ;Store 0 for root hub parameter block                 
   693                              <1> .bsCommonEP:
   694                              <1> ;Invalidate USB MSD and Int 33h table entries for device
   695                              <1> ;r9 has device pointer block and rsi has host hub pointer (if on RMH)
   696 00001974 66418B19            <1>     mov bx, word [r9]          ;bl = Address, bh = Bus
   697 00001978 88FE                <1>     mov dh, bh                 ;dh = Bus
   698 0000197A 418A5103            <1>     mov dl, byte [r9 + 3]      ;dl = Device Port
   699 0000197E 4D0FB65102          <1>     movzx r10, byte [r9 + 2]   ;r10b = Host hub address (0 = Root hub)
   700 00001983 6689D8              <1>     mov ax, bx                 ;ax needs a copy for RemoveDevFromTables
   701 00001986 E8F1290000          <1>     call USB.ehciRemoveDevFromTables    ;Removes device from USB tables
   702 0000198B 87EA                <1>     xchg ebp, edx                       ;device number -><- bus/dev pair
   703 0000198D E8E5000000          <1>     call .i33removeFromTable            ;Removes device from Int 33h table
   704 00001992 87EA                <1>     xchg ebp, edx                       ;bus/dev pair -><- device number
   705                              <1> ;Devices enumerated, time to reenumerate!
   706 00001994 B903000000          <1>     mov ecx, 3
   707 00001999 85F6                <1>     test esi, esi   ;Is device on root hub?
   708 0000199B 7502                <1>     jnz .bsr0
   709 0000199D FECA                <1>     dec dl  ;Recall that device port must be device port - 1 for Root hub enum
   710                              <1> .bsr0:
   711 0000199F 41FFD0              <1>     call r8
   712 000019A2 7410                <1>     jz .bsr1
   713 000019A4 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h   ;General Controller Failure?
   714 000019AC 7439                <1>     je .bsrFail
   715 000019AE FFC9                <1>     dec ecx
   716 000019B0 75ED                <1>     jnz .bsr0
   717 000019B2 EB33                <1>     jmp short .bsrFail
   718                              <1> .bsr1:
   719 000019B4 4C87CE              <1>     xchg r9, rsi    ;MSD parameter blk -><- Hub parameter blk (or 0 if root)
   720 000019B7 E85B300000          <1>     call USB.ehciMsdInitialise
   721 000019BC 84C0                <1>     test al, al
   722 000019BE 7527                <1>     jnz .bsrFail    ;Exit if the device failed to initialise
   723                              <1> ;Multiply dl by int33TblEntrySize to get the address to write Int33h table
   724 000019C0 89EA                <1>     mov edx, ebp    ;Move the device number into edx (dl)
   725 000019C2 B810000000          <1>     mov eax, int33TblEntrySize  ;Zeros the upper bytes
   726 000019C7 F6E2                <1>     mul dl  ;Multiply dl by al. ax has offset into diskDevices table
   727 000019C9 4805[D3030000]      <1>     add rax, diskDevices
   728 000019CF 4889C7              <1>     mov rdi, rax    ;Put the offset into the table into rdi
   729 000019D2 E820000000          <1>     call .deviceInit
   730 000019D7 84C0                <1>     test al, al
   731 000019D9 0F84EBFEFFFF        <1>     jz .bsexit  ;Successful, exit!
   732 000019DF 3C03                <1>     cmp al, 3
   733 000019E1 0F84E3FEFFFF        <1>     je .bsexit  ;Invalid device type, but ignore for now
   734                              <1> .bsrFail:
   735 000019E7 49BB20000000000000- <1>     mov r11, 20h ;Change the msdStatus byte to Gen. Ctrlr Failure
   735 000019F0 00                  <1>
   736 000019F1 F9                  <1>     stc
   737 000019F2 E9D3FEFFFF          <1>     jmp .bsexit
   738                              <1> .deviceInit:    
   739                              <1> ;Further initialises an MSD device for use with the int33h interface.
   740                              <1> ;Adds device data to the allocated int33h data table.
   741                              <1> ;Input: rdi = device diskDevice ptr (given by device number*int33TblEntrySize)
   742                              <1> ;       rsi = device MSDDevTbl entry (USB address into getDevPtr)
   743                              <1> ;Output: al = 0 : Device added successfully
   744                              <1> ;        al = 1 : Bus error
   745                              <1> ;        al = 2 : Read Capacities/Reset recovary failed after 10 attempts
   746                              <1> ;        al = 3 : Invalid device type (Endpoint size too small, temporary)
   747                              <1> ;   rax destroyed
   748                              <1> ;IF DEVICE HAS MAX ENDPOINT SIZE 64, DO NOT WRITE IT TO INT 33H TABLES
   749 000019F7 51                  <1>     push rcx
   750 000019F8 B003                <1>     mov al, 3   ;Invalid EP size error code
   751 000019FA 66817E090002        <1>     cmp word [rsi + 9], 200h  ;Check IN max EP packet size
   752 00001A00 7573                <1>     jne .deviceInitExit
   753 00001A02 66817E0C0002        <1>     cmp word [rsi + 12], 200h ;Check OUT max EP packet size
   754 00001A08 756B                <1>     jne .deviceInitExit
   755                              <1> 
   756 00001A0A 8A4601              <1>     mov al, byte [rsi + 1]  ;Get bus number
   757 00001A0D E80E220000          <1>     call USB.ehciAdjustAsyncSchedCtrlr
   758 00001A12 B001                <1>     mov al, 1       ;Bus error exit
   759 00001A14 725F                <1>     jc .deviceInitExit
   760 00001A16 B90A000000          <1>     mov ecx, 10
   761                              <1> .deviceInitReadCaps:
   762 00001A1B E89B350000          <1>     call USB.ehciMsdBOTReadCapacity10   ;Preserve al error code
   763 00001A20 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h   ;General Controller Failure
   764 00001A28 744B                <1>     je .deviceInitExit
   765 00001A2A E8AA310000          <1>     call USB.ehciMsdBOTCheckTransaction
   766 00001A2F 6685C0              <1>     test ax, ax     ;Clears CF
   767 00001A32 7418                <1>     jz .deviceInitWriteTableEntry   ;Success, write table entry
   768 00001A34 E8C0300000          <1>     call USB.ehciMsdBOTResetRecovery    ;Just force a device reset
   769 00001A39 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h   ;General Controller Failure
   770 00001A41 7432                <1>     je .deviceInitExit
   771 00001A43 FFC9                <1>     dec ecx
   772 00001A45 75D4                <1>     jnz .deviceInitReadCaps
   773 00001A47 B002                <1>     mov al, 2   ;Non bus error exit
   774 00001A49 F9                  <1>     stc ;Set carry, device failed to initialise properly
   775 00001A4A EB29                <1>     jmp short .deviceInitExit
   776                              <1> .deviceInitWriteTableEntry:
   777 00001A4C C60701              <1>     mov byte [rdi], 1   ;MSD USB device signature
   778                              <1> 
   779 00001A4F 668B06              <1>     mov ax, word [rsi]  ;Get address and bus into ax
   780 00001A52 66894701            <1>     mov word [rdi + 1], ax  ;Store in Int 33h table
   781                              <1> 
   782 00001A56 8B0425[C4030000]    <1>     mov eax, dword [ehciDataIn + 4] ;Get LBA block size
   783 00001A5D 0FC8                <1>     bswap eax
   784 00001A5F 894703              <1>     mov dword [rdi + 3], eax
   785                              <1> 
   786 00001A62 8B0425[C0030000]    <1>     mov eax, dword [ehciDataIn] ;Get zx qword LastLBA
   787 00001A69 0FC8                <1>     bswap eax
   788 00001A6B 48894707            <1>     mov qword [rdi + 7], rax
   789                              <1> 
   790 00001A6F C6470F02            <1>     mov byte [rdi + 15], 2  ;Temporary, only accept devices with 200h EP sizes
   791 00001A73 30C0                <1>     xor al, al 
   792                              <1> .deviceInitExit:
   793 00001A75 59                  <1>     pop rcx
   794 00001A76 C3                  <1>     ret
   795                              <1> .i33removeFromTable:
   796                              <1> ;Uses Int 33h device number to invalidate the device table entry
   797                              <1> ;Input: dl = Device number
   798                              <1> ;Output: Nothing, device entry invalidated
   799 00001A77 50                  <1>     push rax
   800 00001A78 52                  <1>     push rdx
   801 00001A79 B010                <1>     mov al, int33TblEntrySize
   802 00001A7B F6E2                <1>     mul dl  ;Multiply tbl entry size by device number, offset in ax
   803 00001A7D 480FB7C0            <1>     movzx rax, ax
   804 00001A81 C680[D3030000]00    <1>     mov byte [diskDevices + rax], 0 ;Invalidate entry
   805 00001A88 5A                  <1>     pop rdx
   806 00001A89 58                  <1>     pop rax
   807 00001A8A C3                  <1>     ret
   808                              <1> 
   809                              <1> diskdpt:   ;Imaginary floppy disk parameter table with disk geometry. 
   810                              <1> ;For more information on layout, see Page 3-26 of IBM BIOS ref
   811                              <1> ;Assume 2 head geometry due to emulating a floppy drive
   812 00001A8B 00                  <1> .fsb:   db 0    ;First specify byte
   813 00001A8C 00                  <1> .ssb:   db 0    ;Second specify byte
   814 00001A8D 00                  <1> .tto:   db 0    ;Number of timer ticks to wait before turning off drive motors
   815 00001A8E 02                  <1> .bps:   db 2    ;Number of bytes per sector in multiples of 128 bytes, editable.
   816                              <1>                 ; 0 = 128 bytes, 1 = 256 bytes, 2 = 512 bytes etc
   817                              <1>                 ;Left shift 128 by bps to get the real bytes per sector
   818 00001A8F 09                  <1> .spt:   db 9    ;Sectors per track
   819 00001A90 00                  <1> .gpl:   db 0    ;Gap length
   820 00001A91 00                  <1> .dtl:   db 0    ;Data length
   821 00001A92 00                  <1> .glf:   db 0    ;Gap length for format
   822 00001A93 FF                  <1> .fbf:   db 0FFh ;Fill byte for format
   823 00001A94 00                  <1> .hst:   db 0    ;Head settle time in ms
   824 00001A95 01                  <1> .mst:   db 1    ;Motor startup time in multiples of 1/8 of a second.
   825                              <1> 
   826                              <1> fdiskdpt: ;Fixed drive table, only cyl, nhd and spt are valid. 
   827                              <1> ;           This schema gives roughly 8.42Gb of storage.
   828                              <1> ;           All fields with 0 in the comments are reserved post XT class BIOS.
   829 00001A96 0004                <1> .cyl:   dw  1024    ;1024 cylinders
   830 00001A98 FF                  <1> .nhd:   db  255     ;255 heads
   831 00001A99 0000                <1> .rwc:   dw  0       ;Reduced write current cylinder, 0
   832 00001A9B FFFF                <1> .wpc:   dw  -1      ;Write precompensation number (-1=none)
   833 00001A9D 00                  <1> .ecc:   db  0       ;Max ECC burst length, 0
   834 00001A9E 08                  <1> .ctl:   db  08h     ;Control byte (more than 8 heads)
   835 00001A9F 00                  <1> .sto:   db  0       ;Standard timeout, 0
   836 00001AA0 00                  <1> .fto:   db  0       ;Formatting timeout, 0
   837 00001AA1 00                  <1> .tcd:   db  0       ;Timeout for checking drive, 0
   838 00001AA2 FF03                <1> .clz:   dw  1023    ;Cylinder for landing zone
   839 00001AA4 3F                  <1> .spt:   db  63      ;Sectors per track
   840 00001AA5 00                  <1> .res:   db  0       ;Reserved byte
   841                              <1> 
   842                              <1> ;----------------------Fixed Disk Int 33h Ext-------------------
   843                              <1> ; Subfunctions in ah
   844                              <1> ;Input:  dl = Drive number, 
   845                              <1> ;        dh = Head number,
   846                              <1> ;        rbx = Address of buffer, 
   847                              <1> ;        al = number of sectors, 
   848                              <1> ;        ch = Cylinder number (low 8 bits), 
   849                              <1> ;        cl[7:6] = Cylinder number (upper 2 bits), 
   850                              <1> ;        cl[5:0] = Sector number
   851                              <1> ;Input LBA: dl = Drive Number, rbx = Address of Buffer, 
   852                              <1> ;           al = number of sectors, rcx = LBA number
   853                              <1> ;
   854                              <1> ;All registers not mentioned above, preserved.
   855                              <1> ;Still use msdStatus as the error byte dumping ground. For now, 
   856                              <1> ; do not use the ata specific status bytes. 
   857                              <1> ; Fixed disk BIOS does NOT return how many sectors were 
   858                              <1> ; successfully transferred!
   859                              <1> ;----------------------------------------------------------------
   860                              <1> fdisk_io:
   861 00001AA6 55                  <1>     push rbp
   862 00001AA7 50                  <1>     push rax
   863 00001AA8 53                  <1>     push rbx
   864 00001AA9 51                  <1>     push rcx
   865 00001AAA 52                  <1>     push rdx
   866                              <1> ;Cherry pick status to avoid resetting status
   867 00001AAB 80FC01              <1>     cmp ah, 01h
   868 00001AAE 0F84C2000000        <1>     je .fdiskStatus
   869                              <1> 
   870 00001AB4 C60425[A9010000]00  <1>     mov byte [msdStatus], 0 ;Reset the status
   871 00001ABC E81E1B0000          <1>     call ATA.getTablePointer    ;Get table pointer in rbp for all functions
   872 00001AC1 7267                <1>     jc .badFunctionRequest  ;If the device doenst exist, bad bad bad!
   873                              <1> 
   874 00001AC3 84E4                <1>     test ah, ah
   875 00001AC5 0F848E000000        <1>     jz .fdiskReset
   876 00001ACB 80FC02              <1>     cmp ah, 02h
   877 00001ACE 0F84B7000000        <1>     je .fdiskReadCHS
   878 00001AD4 80FC03              <1>     cmp ah, 03h
   879 00001AD7 0F84C0000000        <1>     je .fdiskWriteCHS
   880 00001ADD 80FC04              <1>     cmp ah, 04h
   881 00001AE0 0F84C9000000        <1>     je .fdiskVerifyCHS
   882 00001AE6 80FC05              <1>     cmp ah, 05h
   883 00001AE9 0F84D0000000        <1>     je .fdiskFormat
   884 00001AEF 80FC08              <1>     cmp ah, 08h
   885 00001AF2 0F84D7000000        <1>     je .fdiskParametersCHS
   886 00001AF8 80FC16              <1>     cmp ah, 16h 
   887 00001AFB 7449                <1>     je .okExit    ;Pseudo return changeline, always return ok (ah = 0), CF=NC
   888 00001AFD 80FC82              <1>     cmp ah, 82h
   889 00001B00 0F84FB000000        <1>     je .fdiskReadLBA
   890 00001B06 80FC83              <1>     cmp ah, 83h
   891 00001B09 0F841B010000        <1>     je .fdiskWriteLBA
   892 00001B0F 80FC84              <1>     cmp ah, 84h
   893 00001B12 0F8437010000        <1>     je .fdiskVerifyLBA
   894 00001B18 80FC85              <1>     cmp ah, 85h
   895 00001B1B 0F8453010000        <1>     je .fdiskFormatSector
   896 00001B21 80FC88              <1>     cmp ah, 88h 
   897 00001B24 0F846F010000        <1>     je .fdiskParametersLBA
   898                              <1> 
   899                              <1> .badFunctionRequest:
   900 00001B2A B401                <1>     mov ah, 01h
   901 00001B2C 882425[A9010000]    <1>     mov byte [msdStatus], ah   ;Invalid function requested signature
   902                              <1> .badExit:
   903 00001B33 5A                  <1>     pop rdx
   904 00001B34 59                  <1>     pop rcx
   905 00001B35 5B                  <1>     pop rbx
   906 00001B36 58                  <1>     pop rax
   907 00001B37 5D                  <1>     pop rbp
   908 00001B38 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   909 00001B3F 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag
   910 00001B44 48CF                <1>     iretq 
   911                              <1> .okExit:
   912 00001B46 5A                  <1>     pop rdx
   913 00001B47 59                  <1>     pop rcx
   914 00001B48 5B                  <1>     pop rbx
   915                              <1> .paramExit:
   916 00001B49 58                  <1>     pop rax
   917 00001B4A 5D                  <1>     pop rbp
   918 00001B4B 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
   919 00001B52 80642410FE          <1>     and byte [rsp + 2*8h], 0FEh ;Clear Carry flag    
   920 00001B57 48CF                <1>     iretq
   921                              <1> ;Misc functions
   922                              <1> .fdiskReset:
   923 00001B59 E8AD1A0000          <1>     call ATA.resetChannel
   924 00001B5E B800000000          <1>     mov eax, 0  ;No issue
   925 00001B63 BB05000000          <1>     mov ebx, 5  ;Reset failed
   926 00001B68 0F42C3              <1>     cmovc eax, ebx  ;Only move if carry set
   927 00001B6B 880425[A9010000]    <1>     mov byte [msdStatus], al    ;Save status byte
   928 00001B72 72BF                <1>     jc .badExit ;Carry is still preserved
   929 00001B74 EBD0                <1>     jmp short .okExit
   930                              <1> 
   931                              <1> .fdiskStatus:
   932 00001B76 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]    ;Save old status
   933 00001B7D C60425[A9010000]00  <1>     mov byte [msdStatus], 0     ;Clear the status
   934 00001B85 84E4                <1>     test ah, ah
   935 00001B87 75AA                <1>     jnz .badExit    ;Set carry flag if status is non-zero
   936 00001B89 EBBB                <1>     jmp short .okExit
   937                              <1> ;CHS functions
   938                              <1> .fdiskReadCHS:
   939 00001B8B 57                  <1>     push rdi
   940 00001B8C E8231C0000          <1>     call ATA.readCHS
   941 00001B91 5F                  <1>     pop rdi
   942 00001B92 0F8228010000        <1>     jc .fdiskError
   943 00001B98 E9A9FFFFFF          <1>     jmp .okExit
   944                              <1>     
   945                              <1> .fdiskWriteCHS:
   946 00001B9D 56                  <1>     push rsi
   947 00001B9E E82F1C0000          <1>     call ATA.writeCHS
   948 00001BA3 5E                  <1>     pop rsi
   949 00001BA4 0F8216010000        <1>     jc .fdiskError
   950 00001BAA E997FFFFFF          <1>     jmp .okExit
   951                              <1> 
   952                              <1> .fdiskVerifyCHS:
   953 00001BAF E83C1C0000          <1>     call ATA.verifyCHS
   954 00001BB4 0F8206010000        <1>     jc .fdiskError
   955 00001BBA E987FFFFFF          <1>     jmp .okExit
   956                              <1> 
   957                              <1> ;Format a whole "track" (for now just overwrite)
   958                              <1> .fdiskFormat:
   959 00001BBF E8481C0000          <1>     call ATA.formatCHS
   960 00001BC4 0F82F6000000        <1>     jc .fdiskError
   961 00001BCA E977FFFFFF          <1>     jmp .okExit
   962                              <1> 
   963                              <1> .fdiskParametersCHS:
   964                              <1> ;Reads CHS drive parameters for given drive 
   965                              <1> ;Output: dl = Number of fixed disks in system
   966                              <1> ;        dh = Max head number for chosen drive
   967                              <1> ;        ch = Cylinder number
   968                              <1> ;        cl[7:6] = High two bits of Cylinder number
   969                              <1> ;        cl[5:0] = Sectors per track
   970                              <1> ;        ebx = Dword, sector size
   971                              <1> ;        ah = 0
   972 00001BCF 5A                  <1>     pop rdx
   973 00001BD0 59                  <1>     pop rcx
   974 00001BD1 5B                  <1>     pop rbx
   975 00001BD2 0FB74501            <1>     movzx eax, word [rbp + fdiskEntry.wHeads]
   976 00001BD6 88C6                <1>     mov dh, al
   977 00001BD8 0FB74503            <1>     movzx eax, word [rbp + fdiskEntry.wCylinder]
   978 00001BDC 88C5                <1>     mov ch, al  ;Low 8 bits 
   979 00001BDE 66C1E802            <1>     shr ax, 2   ;Move bits [1:0] of ah to bits [7:6] of al
   980 00001BE2 24C0                <1>     and al, 0C0h    ;Clear lower bits [5:0]
   981 00001BE4 88C1                <1>     mov cl, al
   982 00001BE6 0FB74505            <1>     movzx eax, word [rbp + fdiskEntry.wSecTrc]
   983 00001BEA 243F                <1>     and al, 3Fh ;Save only bits [5:0]
   984 00001BEC 08C1                <1>     or cl, al   ;Add the sector per track bits here
   985 00001BEE 8A1425[AA010000]    <1>     mov dl, byte [fdiskNum] ;Get number of fixed disks in dl
   986 00001BF5 31DB                <1>     xor ebx, ebx
   987 00001BF7 BB00020000          <1>     mov ebx, 200h       ;Currently, hardcode sector size of 512 bytes
   988 00001BFC E948FFFFFF          <1>     jmp .paramExit
   989                              <1> 
   990                              <1> ;LBA functions
   991                              <1> .fdiskReadLBA:
   992 00001C01 57                  <1>     push rdi
   993 00001C02 56                  <1>     push rsi
   994 00001C03 488D3425[73380000]  <1>     lea rsi, ATA.readLBA
   995 00001C0B 488D3C25[2E390000]  <1>     lea rdi, ATA.readLBA48
   996 00001C13 F6450004            <1>     test byte [rbp + fdiskEntry.signature], fdeLBA48
   997 00001C17 480F44FE            <1>     cmovz rdi, rsi  ;If LBA48 not supported, call LBA instead
   998 00001C1B FFD7                <1>     call rdi    ;rdi is a free parameter anyway
   999 00001C1D 5E                  <1>     pop rsi
  1000 00001C1E 5F                  <1>     pop rdi
  1001 00001C1F 0F829B000000        <1>     jc .fdiskError
  1002 00001C25 E91CFFFFFF          <1>     jmp .okExit
  1003                              <1> 
  1004                              <1> .fdiskWriteLBA:
  1005 00001C2A 57                  <1>     push rdi
  1006 00001C2B 56                  <1>     push rsi
  1007 00001C2C 488D3425[91380000]  <1>     lea rsi, ATA.writeLBA
  1008 00001C34 488D3C25[4C390000]  <1>     lea rdi, ATA.writeLBA48
  1009 00001C3C F6450004            <1>     test byte [rbp + fdiskEntry.signature], fdeLBA48
  1010 00001C40 480F44FE            <1>     cmovz rdi, rsi  ;If LBA48 not supported, call LBA instead
  1011 00001C44 FFD7                <1>     call rdi    ;rdi is a free parameter anyway
  1012 00001C46 5E                  <1>     pop rsi
  1013 00001C47 5F                  <1>     pop rdi
  1014 00001C48 7276                <1>     jc .fdiskError
  1015 00001C4A E9F7FEFFFF          <1>     jmp .okExit
  1016                              <1> 
  1017                              <1> .fdiskVerifyLBA:
  1018 00001C4F 57                  <1>     push rdi
  1019 00001C50 56                  <1>     push rsi
  1020 00001C51 488D3425[AF380000]  <1>     lea rsi, ATA.verifyLBA
  1021 00001C59 488D3C25[6A390000]  <1>     lea rdi, ATA.verifyLBA48
  1022 00001C61 F6450004            <1>     test byte [rbp + fdiskEntry.signature], fdeLBA48
  1023 00001C65 480F44FE            <1>     cmovz rdi, rsi  ;If LBA48 not supported, call LBA instead
  1024 00001C69 FFD7                <1>     call rdi    ;rdi is a free parameter anyway
  1025 00001C6B 5E                  <1>     pop rsi
  1026 00001C6C 5F                  <1>     pop rdi
  1027 00001C6D 7251                <1>     jc .fdiskError
  1028 00001C6F E9D2FEFFFF          <1>     jmp .okExit
  1029                              <1> 
  1030                              <1> .fdiskFormatSector:
  1031                              <1> ;Format a series of sectors (for now just overwrite with fillbyte)
  1032 00001C74 57                  <1>     push rdi
  1033 00001C75 56                  <1>     push rsi
  1034 00001C76 488D3425[CD380000]  <1>     lea rsi, ATA.formatLBA
  1035 00001C7E 488D3C25[88390000]  <1>     lea rdi, ATA.formatLBA48
  1036 00001C86 F6450004            <1>     test byte [rbp + fdiskEntry.signature], fdeLBA48
  1037 00001C8A 480F44FE            <1>     cmovz rdi, rsi  ;If LBA48 not supported, call LBA instead
  1038 00001C8E FFD7                <1>     call rdi    ;rdi is a free parameter anyway
  1039 00001C90 5E                  <1>     pop rsi
  1040 00001C91 5F                  <1>     pop rdi
  1041 00001C92 722C                <1>     jc .fdiskError
  1042 00001C94 E9ADFEFFFF          <1>     jmp .okExit
  1043                              <1> .fdiskParametersLBA:
  1044                              <1> ;Output: 
  1045                              <1> ;        ebx = Dword, sector size
  1046                              <1> ;        rcx = qLastLBANum (Qword address of last LBA)
  1047                              <1> ;        dl = Number of fixed disks in system
  1048                              <1> ;        Fixed disks have a fixed sector size of 512 bytes
  1049                              <1> ;Recall last LBA value is the first NON-user usable LBA
  1050                              <1> ;Will return LBA48 if the device uses LBA48 in rcx
  1051 00001C99 5A                  <1>     pop rdx
  1052 00001C9A 59                  <1>     pop rcx
  1053 00001C9B 5B                  <1>     pop rbx
  1054 00001C9C 31C9                <1>     xor ecx, ecx    ;Zero whole of rcx
  1055 00001C9E 8B4D07              <1>     mov ecx, dword [rbp + fdiskEntry.lbaMax]
  1056 00001CA1 488B450B            <1>     mov rax, qword [rbp + fdiskEntry.lbaMax48]
  1057 00001CA5 F6450004            <1>     test byte [rbp + fdiskEntry.signature], fdeLBA48
  1058 00001CA9 480F45C8            <1>     cmovnz rcx, rax ;Move lba48 value into rcx if LBA48 bit set
  1059 00001CAD 8A1425[AA010000]    <1>     mov dl, byte [fdiskNum] ;Number of fixed disks
  1060 00001CB4 31DB                <1>     xor ebx, ebx
  1061 00001CB6 BB00020000          <1>     mov ebx, 200h       ;Currently, hardcode sector size of 512 bytes
  1062 00001CBB E989FEFFFF          <1>     jmp .paramExit
  1063                              <1> .fdiskError:
  1064                              <1> ;A common error handler that checks the status and error register 
  1065                              <1> ; to see what the error may have been. If nothing, then the error
  1066                              <1> ; that is in the msdStatus byte is left as is, unless it is 0
  1067                              <1> ; where a Undefined Error is placed.
  1068 00001CC0 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
  1069 00001CC4 81C207000000        <1>     add edx, 7  ;Goto status
  1070 00001CCA E805190000          <1>     call ATA.wait400ns
  1071 00001CCF EC                  <1>     in al, dx   ;Get status byte
  1072 00001CD0 A880                <1>     test al, 80h    ;If busy is STILL set, controller failure
  1073 00001CD2 7578                <1>     jnz .fdiskCtrlrFailed
  1074 00001CD4 A820                <1>     test al, 20h    ;Test drive fault error
  1075 00001CD6 7567                <1>     jnz .fdiskErrorDriveFault
  1076 00001CD8 A801                <1>     test al, 1  ;Test the error bit is set
  1077 00001CDA 7454                <1>     jz .fdiskErrorNoBit ;If not set then check if we have an error code 
  1078 00001CDC 81EA06000000        <1>     sub edx, 6  ;Goto base + 1, Error register
  1079 00001CE2 EC                  <1>     in al, dx   ;Get Error register
  1080 00001CE3 84C0                <1>     test al, al 
  1081 00001CE5 743C                <1>     jz .fdiskNoErrorData
  1082 00001CE7 88C4                <1>     mov ah, al
  1083 00001CE9 80E484              <1>     and ah, 84h ;Save abort and interface crc
  1084 00001CEC 80FC84              <1>     cmp ah, 84h
  1085 00001CEF 7425                <1>     je .fdiskCRCError
  1086 00001CF1 A840                <1>     test al, 40h    ;Test the uncorrectable Error bit
  1087 00001CF3 7521                <1>     jnz .fdiskCRCError
  1088 00001CF5 88C4                <1>     mov ah, al
  1089 00001CF7 80E414              <1>     and ah, 14h ;If either bit is set, then it is a bad sector number
  1090 00001CFA 750D                <1>     jnz .fdiskBadAddress
  1091                              <1> .fdiskErrorUnknown: ;Fallthrough here
  1092 00001CFC C60425[A9010000]BB  <1>     mov byte [msdStatus], 0BBh  ;Unknown Error code
  1093 00001D04 E92AFEFFFF          <1>     jmp .badExit
  1094                              <1> .fdiskBadAddress:
  1095 00001D09 C60425[A9010000]04  <1>     mov byte [msdStatus], 04h   ;Sector not found
  1096 00001D11 E91DFEFFFF          <1>     jmp .badExit
  1097                              <1> .fdiskCRCError:
  1098 00001D16 C60425[A9010000]10  <1>     mov byte [msdStatus], 10h   ;Uncorrectable CRC error
  1099 00001D1E E910FEFFFF          <1>     jmp .badExit
  1100                              <1> .fdiskNoErrorData:
  1101 00001D23 C60425[A9010000]E0  <1>     mov byte [msdStatus], 0E0h  ;Status error = 0
  1102 00001D2B E903FEFFFF          <1>     jmp .badExit
  1103                              <1> .fdiskErrorNoBit:
  1104 00001D30 8A2425[A9010000]    <1>     mov ah, byte [msdStatus]
  1105 00001D37 84E4                <1>     test ah, ah
  1106 00001D39 0F85F4FDFFFF        <1>     jnz .badExit    ;If there is a code, leave it in situ and exit service
  1107                              <1> 
  1108                              <1> .fdiskErrorDriveFault:
  1109 00001D3F C60425[A9010000]07  <1>     mov byte [msdStatus], 07h  ;Drive parameter activity failed
  1110 00001D47 E9E7FDFFFF          <1>     jmp .badExit
  1111                              <1> .fdiskCtrlrFailed:
  1112 00001D4C C60425[A9010000]20  <1>     mov byte [msdStatus], 020h  ;Controller failure code
  1113 00001D54 E9DAFDFFFF          <1>     jmp .badExit
  1114                              <1> ;------------------------End of Interrupt------------------------
    96                                  %include "./Source/Resident/Services/Int34h.asm"
    97                              <1> ;------------------Serial IO Interrupts Int 34h------------------
    98                              <1> serial_baud_table:    ;DLAB devisor values
    99 00001D59 1704                <1>     dw    0417h    ;110 baud,     00
   100 00001D5B 0003                <1>     dw    0300h    ;150 baud,     01
   101 00001D5D 8001                <1>     dw    0180h    ;300 baud,     02
   102 00001D5F C000                <1>     dw    00C0h    ;600 baud,     03
   103 00001D61 6000                <1>     dw    0060h    ;1200 baud,    04
   104 00001D63 3000                <1>     dw    0030h    ;2400 baud,    05 
   105 00001D65 1800                <1>     dw    0018h    ;4800 baud,    06
   106 00001D67 0C00                <1>     dw    000Ch    ;9600 baud,    07
   107 00001D69 0600                <1>     dw    0006h    ;19200 baud,   08
   108 00001D6B 0300                <1>     dw    0003h    ;38400 baud,   09
   109 00001D6D 0200                <1>     dw    0002h    ;57600 baud,   0A
   110 00001D6F 0100                <1>     dw    0001h    ;115200 baud,  0B
   111                              <1> serial_abt: ;serial port address base table. List of supported addresses!
   112 00001D71 F803                <1>     dw com1_base
   113 00001D73 F802                <1>     dw com2_base
   114 00001D75 E803                <1>     dw com3_base
   115 00001D77 E802                <1>     dw com4_base
   116                              <1> serial_io:
   117 00001D79 52                  <1>     push rdx        ;Save upper 7 bytes
   118 00001D7A 6681FA0400          <1>     cmp dx, 4        ;Check to see if the selected com port is within range
   119 00001D7F 7D5A                <1>     jge .sbadexit1    ;Bad dx value
   120 00001D81 480FB7D2            <1>     movzx rdx, dx    ;zero the upper 6 bytes of rdx
   121 00001D85 668B9412[67000000]  <1>     mov dx, word [com_addresses + rdx*2]    ;get serial port base addr into dx
   122 00001D8D 6685D2              <1>     test dx, dx        ;is the address zero?
   123 00001D90 744D                <1>     jz .sbadexit2    ;com port doesnt exist
   124 00001D92 50                  <1>     push rax        ;Saves upper 6 bytes
   125 00001D93 52                  <1>     push rdx        ;Save base for exit algorithm
   126                              <1> 
   127 00001D94 84E4                <1>     test ah, ah
   128 00001D96 7451                <1>     jz .userinit
   129 00001D98 FECC                <1>     dec ah 
   130 00001D9A 0F848A000000        <1>     jz .transmit
   131 00001DA0 FECC                <1>     dec ah
   132 00001DA2 0F84B7000000        <1>     jz .recieve
   133 00001DA8 FECC                <1>     dec ah
   134 00001DAA 741E                <1>     jz .sioexit    ;since this puts the status into ax
   135 00001DAC FECC                <1>     dec ah
   136 00001DAE 0F842A010000        <1>     jz .extinit
   137 00001DB4 FECC                <1>     dec ah
   138 00001DB6 0F8422010000        <1>     jz .extstatus
   139 00001DBC FECC                <1>     dec ah
   140 00001DBE 0F841A010000        <1>     jz .custombaud
   141                              <1> 
   142                              <1> .badin:
   143 00001DC4 5A                  <1>     pop rdx
   144 00001DC5 58                  <1>     pop rax
   145 00001DC6 B480                <1>     mov ah, 80h    ;Invalid Function
   146 00001DC8 EB17                <1>     jmp short .sbadcommon
   147                              <1> .sioexit:
   148 00001DCA 5A                  <1>     pop rdx   ;Get base back, to know exact offset
   149 00001DCB 58                  <1>     pop rax        ;Return the upper bytes of rax into rax
   150 00001DCC 6681C20500          <1>     add dx, 5    ;point to the line status register
   151 00001DD1 EC                  <1>     in al, dx    ;get status
   152 00001DD2 88C4                <1>     mov ah, al    ;save line status in ah
   153 00001DD4 66FFC2              <1>     inc dx        ;point to the modem status register
   154 00001DD7 EC                  <1>     in al, dx    ;save modem status in al
   155 00001DD8 5A                  <1>     pop rdx
   156 00001DD9 48CF                <1>     iretq
   157                              <1> 
   158                              <1> .sbadexit1:    
   159 00001DDB B0FF                <1>     mov al, 0FFh    ;dx was too large
   160 00001DDD EB02                <1>     jmp short .sbadcommon
   161                              <1> .sbadexit2:
   162 00001DDF B0FE                <1>     mov al, 0FEh    ;COM port doesnt exist
   163                              <1> .sbadcommon:
   164 00001DE1 5A                  <1>     pop rdx        ;return original rdx value
   165 00001DE2 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   166 00001DE7 48CF                <1>     iretq
   167                              <1> 
   168                              <1> .userinit:
   169 00001DE9 88C4                <1>     mov ah, al    ;save the data in ah for the baud rate
   170 00001DEB 6681C20300          <1>     add dx, 3    ;Point to the line control register
   171 00001DF0 241F                <1>     and al, 00011111b   ;Zero out the upper three bits
   172 00001DF2 0C80                <1>     or al, 10000000b    ;Set the DLAB bit
   173 00001DF4 EE                  <1>     out dx, al 
   174                              <1> 
   175 00001DF5 6681EA0300          <1>     sub dx, 3    ;return point to base
   176 00001DFA 66C1E80D            <1>     shr ax, 0Dh  ;0Dh=move hi bits of hi word into low bits of low word
   177 00001DFE 480FB6C0            <1>     movzx rax, al    ;zero upper 7 bytes of rax
   178 00001E02 3C07                <1>     cmp al, 00000111b    ;Check if set to 9600baud (for extension)
   179 00001E04 7414                <1>     je .ui2
   180                              <1> .ui1:
   181 00001E06 668B80[591D0000]    <1>     mov ax, word [serial_baud_table + rax]    ;rax is the offset into the table
   182 00001E0D 66EF                <1>     out dx, ax    ;dx points to base with dlab on, set divisor! (word out)
   183                              <1> ;Disable DLAB bit now
   184 00001E0F 6681C20300          <1>     add dx, 3
   185 00001E14 EC                  <1>     in al, dx    ;Get the Line Control Register (preserving the written data)
   186 00001E15 247F                <1>     and al, 01111111b    ;Clear the DLAB bit, preserve the other bits
   187 00001E17 EE                  <1>     out dx, al    ;Clear the bit
   188                              <1> 
   189 00001E18 EBB0                <1>     jmp short .sioexit    ;exit!
   190                              <1> .ui2:    ;Check r8b to make sure it is 0-4 inclusive.
   191 00001E1A 4180F804            <1>     cmp r8b, 4    ;greater than four defaults to 4
   192 00001E1E 7F05                <1>     jg .ui3    ;r8b is greater than four, error!
   193 00001E20 4400C0              <1>     add al, r8b    ;increase the offset into the table
   194 00001E23 EBE1                <1>     jmp short .ui1    ;return to the get value from table
   195                              <1> .ui3:    ;If r8b greater than 4, default to 4
   196 00001E25 41B004              <1>     mov r8b, 4   ;Error caught, user used a value greater than 4, default to 4
   197 00001E28 EBF0                <1>     jmp short .ui2    ;return to checker
   198                              <1> 
   199                              <1> .transmit:
   200 00001E2A 6681C20500          <1>     add dx, 5    ;dx contains base address, point to Line status register
   201 00001E2F 88C4                <1>     mov ah, al   ;temp save char to send in ah
   202 00001E31 51                  <1>     push rcx
   203 00001E32 6631C9              <1>     xor cx, cx
   204                              <1> .t1:
   205 00001E35 66FFC9              <1>     dec cx
   206 00001E38 7410                <1>     jz .t2       ;timeout
   207 00001E3A EC                  <1>     in al, dx    ;get the LSR byte in
   208 00001E3B 2420                <1>     and al, 00100000b    ;Check the transmit holding register empty bit
   209 00001E3D 74F6                <1>     jz .t1    ;if this is zero, keep looping until it is 1 (aka empty)
   210                              <1> 
   211 00001E3F 59                  <1>     pop rcx
   212 00001E40 88E0                <1>     mov al, ah   ;return data byte down to al
   213 00001E42 6681EA0500          <1>     sub dx, 5    ;reaim to the IO port
   214 00001E47 EE                  <1>     out dx, al   ;output the data byte to the serial line!!
   215 00001E48 EB80                <1>     jmp short .sioexit
   216                              <1> .t2:
   217 00001E4A 59                  <1>     pop rcx
   218 00001E4B 5A                  <1>     pop rdx      ;Get base back, to know exact offset
   219 00001E4C 58                  <1>     pop rax      ;Return the upper bytes of rax into rax
   220 00001E4D 6681C20500          <1>     add dx, 5    ;point to the line status register
   221 00001E52 EC                  <1>     in al, dx    ;get status
   222 00001E53 88C4                <1>     mov ah, al   ;save line status in ah
   223 00001E55 80E480              <1>     and ah, 80h  ;Set error bit (bit 7)
   224 00001E58 66FFC2              <1>     inc dx       ;point to the modem status register
   225 00001E5B EC                  <1>     in al, dx    ;save modem status in al
   226 00001E5C 5A                  <1>     pop rdx
   227 00001E5D 48CF                <1>     iretq
   228                              <1> .recieve:
   229                              <1>     ;Gets byte out of appropriate buffer head and places it in al
   230 00001E5F 5A                  <1>     pop rdx
   231 00001E60 58                  <1>     pop rax        
   232 00001E61 5A                  <1>     pop rdx    ;Undoes the address entry and returns COM port number into dx    
   233 00001E62 52                  <1>     push rdx   ;Save it once more
   234 00001E63 53                  <1>     push rbx
   235 00001E64 480FB7D2            <1>     movzx rdx, dx
   236                              <1> 
   237 00001E68 FA                  <1>     cli    ;Entering a critical area, interrupts off
   238 00001E69 488B1CD5[AF000000]  <1>     mov rbx, qword [comX_buf_head + rdx*8]
   239 00001E71 483B1CD5[CF000000]  <1>     cmp rbx, qword [comX_buf_tail + rdx*8]
   240 00001E79 7426                <1>     je .r1    ;We are at the head of the buffer, signal error, no char to get.
   241 00001E7B 8A03                <1>     mov al, byte [rbx]    ;store byte into al
   242 00001E7D 88C4                <1>     mov ah, al ;temp save al in ah
   243 00001E7F 48FFC3              <1>     inc rbx    ;move buffer head
   244 00001E82 483B1CD5[0F010000]  <1>     cmp rbx, qword [comX_buf_end + rdx*8]    ;are we at the end of the buffer
   245 00001E8A 7508                <1>     jne .r0    ;no, save new position
   246 00001E8C 488B1CD5[EF000000]  <1>     mov rbx, qword [comX_buf_start + rdx*8]  ;yes, wrap around
   247                              <1> .r0:
   248 00001E94 48891CD5[AF000000]  <1>     mov qword [comX_buf_head + rdx*8], rbx   ;save new buffer position
   249 00001E9C FB                  <1>     sti
   250 00001E9D 5B                  <1>     pop rbx
   251 00001E9E 5A                  <1>     pop rdx
   252 00001E9F EB07                <1>     jmp short .rexit
   253                              <1> .r1:
   254 00001EA1 FB                  <1>     sti
   255 00001EA2 B480                <1>     mov ah, 80h    ;Equivalent to a timeout error.
   256 00001EA4 5B                  <1>     pop rbx
   257 00001EA5 5A                  <1>     pop rdx
   258 00001EA6 48CF                <1>     iretq
   259                              <1> 
   260                              <1> .rexit:    ;Line status in ah. Char was got so ensure DTR is now high again!
   261 00001EA8 668B9412[67000000]  <1>     mov dx, word [com_addresses + rdx*2]    ;Get the base address back into dx
   262 00001EB0 6681C20400          <1>     add dx, 4    ;point to the modem control register
   263 00001EB5 EC                  <1>     in al, dx
   264 00001EB6 A801                <1>     test al, 1   ;Test DTR is clear
   265 00001EB8 740B                <1>     jz .getscratch
   266                              <1> .gsret:
   267 00001EBA 0C01                <1>     or al, 1    ;Set DTR bit on again
   268 00001EBC EE                  <1>     out dx, al
   269 00001EBD 66FFC2              <1>     inc dx      ;point to the line status register
   270 00001EC0 EC                  <1>     in al, dx   ;get status
   271 00001EC1 86E0                <1>     xchg ah, al ;swap them around
   272 00001EC3 48CF                <1>     iretq
   273                              <1> .getscratch:
   274 00001EC5 0C10                <1>     or al, 00010000b    ;Enable loopback mode with DTR on
   275 00001EC7 EE                  <1>     out dx, al
   276 00001EC8 6681C20300          <1>     add dx, 3    ;Point to scratch register
   277 00001ECD EC                  <1>     in al, dx    ;Get overrun char
   278 00001ECE 6681EA0700          <1>     sub dx, 7    ;transmit register
   279 00001ED3 EE                  <1>     out dx, al   ;send the char (no need to play with DTR, we sending to 
   280                              <1>                  ; ourselves, generating an INT)
   281 00001ED4 6681C20400          <1>     add dx, 4    ;point back to modem control register again!
   282 00001ED9 EC                  <1>     in al, dx
   283 00001EDA 24EF                <1>     and al, 11101111b    ;Clear loopback mode, DTR bit gets set in main proc
   284 00001EDC EBDC                <1>     jmp short .gsret    
   285                              <1> 
   286                              <1> .extinit:
   287                              <1> .extstatus:
   288                              <1> .custombaud:
   289 00001EDE 5A                  <1>     pop rdx
   290 00001EDF 58                  <1>     pop rax
   291 00001EE0 B486                <1>     mov ah, 86h
   292 00001EE2 E9FAFEFFFF          <1>     jmp .sbadcommon
   293                              <1> ;------------------------End of Interrupt------------------------
    97                                  %include "./Source/Resident/Services/Int35h.asm"
    98                              <1> ;-------------------Misc IO Interrupts Int 35h-------------------
    99                              <1> ;Misc features int that can be used for a variety of things.
   100                              <1> ;This will break compatibility with BIOS, since hopefully more 
   101                              <1> ; advanced features will be present.
   102                              <1> ;
   103                              <1> ; ah = 0 - 82h System Reserved
   104                              <1> ; ah = 83h -> Reserved, Event wait
   105                              <1> ; ah = 86h -> Delay rcx = # of milliseconds to wait
   106                              <1> ; ah = 88h -> Basic High Mem Map 1 (First 16MB only)
   107                              <1> ; ah = 89h to C4h - System Reserved
   108                              <1> ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   109                              <1> ; ah = C5h - FFh BIOS device class dispatcher extensions
   110                              <1> ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   111                              <1> ; ah = C5h -> Misc sys function dispatcher      (3 funct)
   112                              <1> ; ah = E8h -> Adv mem management sys dispatcher (4 funct)
   113                              <1> ; ah = F0h -> Sys data table dispatcher         (15 funct)
   114                              <1> ; ah = F1h -> EHCI system dispatcher            (4 funct)
   115                              <1> ;----------------------------------------------------------------
   116                              <1> misc_io:
   117 00001EE7 80FC86              <1>     cmp ah, 86h
   118 00001EEA 722F                <1>     jb .badFunction
   119 00001EEC 7436                <1>     jz .delay
   120 00001EEE 80FC88              <1>     cmp ah, 88h
   121 00001EF1 0F84B0000000        <1>     jz .memory16MB
   122                              <1> 
   123 00001EF7 80FCC5              <1>     cmp ah, 0C5h    ;Miscellaneous function dispatcher
   124 00001EFA 0F84B1000000        <1>     jz .miscDispatcher 
   125 00001F00 80FCE8              <1>     cmp ah, 0E8h    ;Advanced memory management system dispatcher
   126 00001F03 0F847E010000        <1>     jz .advSysMemDispatcher
   127 00001F09 80FCF0              <1>     cmp ah, 0F0h    ;System table dispatcher
   128 00001F0C 0F84F3010000        <1>     jz .sysDataTableDispatcher
   129 00001F12 80FCF1              <1>     cmp ah, 0F1h    ;EHCI function dispatcher
   130 00001F15 0F843E030000        <1>     jz .ehciFunctionDispatcher
   131                              <1> .badFunction:
   132 00001F1B B480                <1>     mov ah, 80h    ;Invalid Function
   133                              <1> .badout:
   134 00001F1D 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   135 00001F22 48CF                <1>     iretq
   136                              <1> 
   137                              <1> .delay:
   138                              <1> ;Input: rcx = milliseconds to wait (rcx < 7FFFFFFFFFFFFFFFh)
   139                              <1> ;Init IRQ 8, wait for loop to end, deactivate
   140 00001F24 FA                  <1>     cli    ;NO INTERRUPTS
   141 00001F25 4885C9              <1>     test rcx, rcx
   142 00001F28 747B                <1>     jz .return  ;Can avoid sti since we return caller flags
   143 00001F2A 50                  <1>     push rax
   144                              <1> ;Ensure PIC is saved
   145 00001F2B E421                <1>     in al, pic1data
   146 00001F2D 50                  <1>     push rax    ;Save unaltered pic1 value
   147 00001F2E 24FB                <1>     and al, 0FBh ;Ensure Cascading pic1 line unmasked
   148 00001F30 E621                <1>     out pic1data, al
   149                              <1> 
   150 00001F32 E4A1                <1>     in al, pic2data
   151 00001F34 50                  <1>     push rax    ;Save unaltered pic2 value
   152 00001F35 24FE                <1>     and al, 0FEh ;Ensure line 0 of pic2 unmasked 
   153 00001F37 E6A1                <1>     out pic2data, al
   154                              <1> 
   155 00001F39 48890C25[3B010000]  <1>     mov qword [rtc_ticks], rcx
   156 00001F41 66B88B8B            <1>     mov ax, 8B8Bh       
   157 00001F45 E670                <1>     out cmos_base, al   ;NMI disabled
   158 00001F47 E680                <1>     out waitp, al
   159 00001F49 EB00                <1>     jmp short $+2
   160 00001F4B E471                <1>     in al, cmos_data
   161 00001F4D 247F                <1>     and al, 7Fh    ;Clear upper bit
   162 00001F4F 0C40                <1>     or al, 40h    ;Set periodic interrupt bit
   163 00001F51 86E0                <1>     xchg ah, al
   164 00001F53 E670                <1>     out cmos_base, al
   165 00001F55 E680                <1>     out waitp, al
   166 00001F57 EB00                <1>     jmp short $+2
   167 00001F59 86C4                <1>     xchg al, ah
   168 00001F5B E671                <1>     out cmos_data, al
   169 00001F5D B00D                <1>     mov al, 0Dh     ;Read Register D and reenable NMI
   170 00001F5F E670                <1>     out cmos_base, al
   171 00001F61 E680                <1>     out waitp, al    ;allow one io cycle to run
   172 00001F63 EB00                <1>     jmp short $+2
   173 00001F65 E471                <1>     in al, cmos_data  
   174 00001F67 FB                  <1>     sti        ;Reenable interrupts
   175                              <1> .loopdelay:
   176 00001F68 F390                <1>     pause ;allow an interrupt to occur
   177 00001F6A 48813C25[3B010000]- <1>     cmp qword [rtc_ticks], 0        ;See if we at 0 yet
   177 00001F72 00000000            <1>
   178 00001F76 7FF0                <1>     jg .loopdelay    ;If not, keep looping
   179                              <1> ;Return CMOS to default state
   180 00001F78 FA                  <1>     cli
   181 00001F79 66B88B8B            <1>     mov ax, 8B8Bh   ;NMI disabled
   182 00001F7D E670                <1>     out cmos_base, al
   183 00001F7F E680                <1>     out waitp, al
   184 00001F81 EB00                <1>     jmp short $+2
   185 00001F83 E471                <1>     in al, cmos_data
   186 00001F85 240F                <1>     and al, 0Fh    ;Clear all upper 4 bits
   187 00001F87 86E0                <1>     xchg ah, al
   188 00001F89 E670                <1>     out cmos_base, al
   189 00001F8B E680                <1>     out waitp, al
   190 00001F8D EB00                <1>     jmp short $+2
   191 00001F8F 86E0                <1>     xchg ah, al
   192 00001F91 E671                <1>     out cmos_data, al
   193 00001F93 B00D                <1>     mov al, 0Dh     ;Read Register D and reenable NMI
   194 00001F95 E670                <1>     out cmos_base, al
   195 00001F97 E680                <1>     out waitp, al    ;allow one io cycle to run
   196 00001F99 EB00                <1>     jmp short $+2
   197 00001F9B E471                <1>     in al, cmos_data  
   198                              <1> 
   199 00001F9D 58                  <1>     pop rax ;Return pic2 value
   200 00001F9E E6A1                <1>     out pic2data, al
   201 00001FA0 58                  <1>     pop rax    ;Return pic1 value
   202 00001FA1 E621                <1>     out pic1data, al
   203                              <1> 
   204 00001FA3 58                  <1>     pop rax    ;Return rax value
   205 00001FA4 FB                  <1>     sti
   206                              <1> .return:
   207 00001FA5 48CF                <1>     iretq
   208                              <1> .memory16MB:    ;ah=88 function
   209 00001FA7 668B0425[DE010000]  <1>     mov ax, word [srData1]
   210 00001FAF 48CF                <1>     iretq
   211                              <1> 
   212                              <1> .miscDispatcher:
   213                              <1> ; ax = C500h -> Beep PC speaker
   214                              <1> ; ax = C501h -> Connect Debugger 
   215                              <1> ; ax = C502h -> Disconnect Debugger
   216 00001FB1 84C0                <1>     test al, al     ;Play a tone using PC speaker
   217 00001FB3 0F84C7000000        <1>     jz .mdBeeper
   218 00001FB9 3C01                <1>     cmp al, 01h     ;Connect Debugger
   219 00001FBB 7409                <1>     jz .mdConnectDebugger
   220 00001FBD 3C02                <1>     cmp al, 02h     ;Disconnect Debugger
   221 00001FBF 7460                <1>     jz .mdDisconnectDebugger
   222 00001FC1 E955FFFFFF          <1>     jmp .badFunction
   223                              <1> .mdConnectDebugger:
   224 00001FC6 50                  <1>     push rax
   225 00001FC7 53                  <1>     push rbx
   226 00001FC8 52                  <1>     push rdx
   227 00001FC9 56                  <1>     push rsi
   228 00001FCA BA008F0000          <1>     mov edx, 8F00h
   229 00001FCF BB08000000          <1>     mov ebx, codedescriptor
   230 00001FD4 48B8-               <1>     mov rax, MCP_int.singleStepsEP  ;Pointer
   230 00001FD6 [2E24000000000000]  <1>
   231 00001FDE 48BE01000000000000- <1>     mov rsi, 01 ;Interrupt number, Single Step
   231 00001FE7 00                  <1>
   232 00001FE8 E8DEE0FFFF          <1>     call idtWriteEntry
   233 00001FED 48B8-               <1>     mov rax, MCP_int.debugEp  ;Pointer
   233 00001FEF [8324000000000000]  <1>
   234 00001FF7 48BE03000000000000- <1>     mov rsi, 03 ;Interrupt number, Software Breakpoint
   234 00002000 00                  <1>
   235 00002001 E8C5E0FFFF          <1>     call idtWriteEntry
   236 00002006 48B8-               <1>     mov rax, MCP_int.debugEpHardware  ;Pointer
   236 00002008 [6324000000000000]  <1>
   237 00002010 48BE3B000000000000- <1>     mov rsi, 3Bh ;Interrupt number, Invoke debugger through hardware CTRL+BREAK
   237 00002019 00                  <1>
   238 0000201A E8ACE0FFFF          <1>     call idtWriteEntry
   239 0000201F EB59                <1>     jmp short .mdDebugExit
   240                              <1> .mdDisconnectDebugger:
   241 00002021 50                  <1>     push rax
   242 00002022 53                  <1>     push rbx
   243 00002023 52                  <1>     push rdx
   244 00002024 56                  <1>     push rsi
   245 00002025 BA008F0000          <1>     mov edx, 8F00h
   246 0000202A BB08000000          <1>     mov ebx, codedescriptor
   247 0000202F 48B8-               <1>     mov rax, i1  ;Pointer
   247 00002031 [8553000000000000]  <1>
   248 00002039 48BE01000000000000- <1>     mov rsi, 01 ;Interrupt number, Single Step
   248 00002042 00                  <1>
   249 00002043 E883E0FFFF          <1>     call idtWriteEntry
   250 00002048 48B8-               <1>     mov rax, i3  ;Pointer
   250 0000204A [A353000000000000]  <1>
   251 00002052 48BE03000000000000- <1>     mov rsi, 03 ;Interrupt number, Software Breakpoint
   251 0000205B 00                  <1>
   252 0000205C E86AE0FFFF          <1>     call idtWriteEntry
   253 00002061 48B8-               <1>     mov rax, ctrlbreak_io  ;Pointer
   253 00002063 [B734000000000000]  <1>
   254 0000206B 48BE3B000000000000- <1>     mov rsi, 3Bh ;Interrupt number, CTRL+Break
   254 00002074 00                  <1>
   255 00002075 E851E0FFFF          <1>     call idtWriteEntry
   256                              <1> .mdDebugExit:
   257 0000207A 5E                  <1>     pop rsi
   258 0000207B 5A                  <1>     pop rdx
   259 0000207C 5B                  <1>     pop rbx
   260 0000207D 58                  <1>     pop rax
   261 0000207E 48CF                <1>     iretq
   262                              <1> 
   263                              <1> .mdBeeper:
   264                              <1> ;Input: 
   265                              <1> ;   bx = Frequency divisor to use for tone
   266                              <1> ;   rcx = # of ms to beep for
   267                              <1> ; All registers including ax preserved
   268 00002080 E811E0FFFF          <1>     call beep
   269 00002085 48CF                <1>     iretq
   270                              <1> 
   271                              <1> .advSysMemDispatcher:
   272                              <1> ; ax = E800h -> Return userBase pointer
   273                              <1> ; ax = E801h -> Give RAM count, minus the size of SCPBIOS, in ax, bx, cx, dx.
   274                              <1> ; ax = E802h -> Total RAM count (without SCP/BIOS)
   275                              <1> ; ax = E820h -> Full Memory Map, including entry for SCPBIOS
   276 00002087 84C0                <1>     test al, al
   277 00002089 7411                <1>     jz .retUserBase
   278 0000208B 3C01                <1>     cmp al, 01h
   279 0000208D 7417                <1>     je .memory64MB
   280 0000208F 3C02                <1>     cmp al, 02h
   281 00002091 7435                <1>     je .memoryBIOSseg
   282 00002093 3C20                <1>     cmp al, 20h
   283 00002095 7451                <1>     je .fullMemoryMap
   284 00002097 E97FFEFFFF          <1>     jmp .badFunction
   285                              <1> 
   286                              <1> .retUserBase:
   287 0000209C 488B0425[CD010000]  <1>     mov rax, qword [userBase]
   288 000020A4 48CF                <1>     iretq
   289                              <1> .memory64MB:
   290 000020A6 668B0425[D6010000]  <1>     mov ax, word [srData]
   291 000020AE 668B1C25[D8010000]  <1>     mov bx, word [srData + 2]
   292 000020B6 668B0C25[DA010000]  <1>     mov cx, word [srData + 4]
   293 000020BE 668B1425[DC010000]  <1>     mov dx, word [srData + 6]
   294 000020C6 48CF                <1>     iretq    
   295                              <1> .memoryBIOSseg:
   296                              <1> ;This gives information about the SCP/BIOS segment
   297 000020C8 48B800001100000000- <1>     mov rax, BIOSStartAddr  ;Start address of BIOS
   297 000020D1 00                  <1>
   298 000020D2 31DB                <1>     xor ebx, ebx
   299 000020D4 8B1C25[E8010000]    <1>     mov ebx, dword [scpSize]    ;Total sum of segment sizes
   300 000020DB 488B1425[E0010000]  <1>     mov rdx, qword [sysMem]     ;Get total usable memory count
   301 000020E3 4829DA              <1>     sub rdx, rbx    ;Remove SCP/BIOS allocation from the size
   302 000020E6 48CF                <1>     iretq
   303                              <1> 
   304                              <1> .fullMemoryMap:
   305 000020E8 488B0425[CD010000]  <1>     mov rax, qword [userBase]    ;Start space, returns userbase in r8
   306 000020F0 48BE-               <1>     mov rsi, bigmapptr
   306 000020F2 [F005000000000000]  <1>
   307 000020FA 8A0C25[D5010000]    <1>     mov cl, byte [bigmapSize]   ;Get the number of 24 byte entries
   308 00002101 30ED                <1>     xor ch, ch                  ;Reserve the upper byte
   309 00002103 48CF                <1>     iretq
   310                              <1> 
   311                              <1> .sysDataTableDispatcher:
   312                              <1> ; ax = F000h, Register new GDT ptr
   313                              <1> ; ax = F001h, Register new IDT ptr
   314                              <1> ; ax = F002h, Get Current GDT ptr
   315                              <1> ; ax = F003h, Get Current IDT ptr
   316                              <1> ; ax = F004h, Register New Page Tables
   317                              <1> ; ax = F005h, Get physical address of PTables
   318                              <1> ; ax = F006h, Get pointer to BIOS Data Area
   319                              <1> ; ax = F007h, Read IDT entry
   320                              <1> ; ax = F008h, Write IDT entry
   321                              <1> ; ax = F009h, Register new Disk Parameter Table
   322                              <1> ; ax = F00Ah, Get current DPT
   323                              <1> ; ax = F00Bh, Register new Fixed Disk Parameter Table
   324                              <1> ; ax = F00Ch, Get current fDPT
   325                              <1> ; ax = F00Dh, Register new SysInit parameters 
   326                              <1> ; ax = F00Eh, Get current SysInit parameters
   327 00002105 3C04                <1>     cmp al, 4h          
   328 00002107 725D                <1>     jb .sdtDT           ;al = 00 - 03, goto sdtDT
   329 00002109 3C04                <1>     cmp al, 4           
   330 0000210B 0F8493000000        <1>     jz .sdtRegisterPage ;al = 04
   331 00002111 3C05                <1>     cmp al, 5
   332 00002113 0F8495000000        <1>     jz .sdtGetPagePtr   ;al = 05
   333 00002119 3C06                <1>     cmp al, 6
   334 0000211B 0F8497000000        <1>     jz .sdtDataptr      ;al = 06
   335 00002121 3C07                <1>     cmp al, 7
   336 00002123 0F849B000000        <1>     jz .sdtReadIDTEntry ;al = 07
   337 00002129 3C08                <1>     cmp al, 8
   338 0000212B 0F84C4000000        <1>     jz .sdtWriteIDTEntry    ;al = 08
   339 00002131 3C09                <1>     cmp al, 9
   340 00002133 0F84D4000000        <1>     jz .sdtNewDDP       ;al = 09
   341 00002139 3C0A                <1>     cmp al, 0Ah
   342 0000213B 0F84E0000000        <1>     jz .sdtReadDDP      ;al = 0A
   343 00002141 3C0B                <1>     cmp al, 0Bh         
   344 00002143 0F84CE000000        <1>     jz .sdtNewfDDP      ;al = 0Bh
   345 00002149 3C0C                <1>     cmp al, 0Ch
   346 0000214B 0F84DA000000        <1>     jz .sdtReadfDDP     ;al = 0Ch
   347 00002151 3C0D                <1>     cmp al, 0Dh
   348 00002153 0F84DC000000        <1>     jz .sdtNewSysInit   ;al = 0Dh
   349 00002159 3C0E                <1>     cmp al, 0Eh
   350 0000215B 0F84E6000000        <1>     jz .sdtReadSysInit  ;al = 0Eh
   351 00002161 E9B5FDFFFF          <1>     jmp .badFunction
   352                              <1> 
   353                              <1> .sdtDT:
   354                              <1> ;sys data tables Descriptor Table dispatcher
   355                              <1> ;rbx has/will have I/GDT base pointer (qword)
   356                              <1> ;ecx has/will have I/GDT limit (word)
   357                              <1> ;edx has/will have Number of entries in I/GDT (word)
   358 00002166 57                  <1>     push rdi
   359 00002167 56                  <1>     push rsi
   360 00002168 48BF-               <1>     mov rdi, GDTlength
   360 0000216A [0C00000000000000]  <1>
   361 00002172 48BE-               <1>     mov rsi, IDTlength
   361 00002174 [0000000000000000]  <1>
   362 0000217C A801                <1>     test al, 1  ;If al[0] = 1, want rdi to point to IDT area
   363 0000217E 480F45FE            <1>     cmovnz rdi, rsi ;If al[0] = 0, rdi will keep pointing to GDT
   364 00002182 A802                <1>     test al, 2  ;If bit 2 is set, Get pointers
   365 00002184 750F                <1>     jnz .sdtGet
   366 00002186 668917              <1>     mov word [rdi], dx
   367 00002189 66894F02            <1>     mov word [rdi + 2], cx
   368 0000218D 48895F04            <1>     mov qword [rdi + 4], rbx
   369 00002191 56                  <1>     push rsi
   370 00002192 5F                  <1>     pop rdi
   371 00002193 48CF                <1>     iretq
   372                              <1> .sdtGet:
   373 00002195 0FB717              <1>     movzx edx, word [rdi]
   374 00002198 0FB74F02            <1>     movzx ecx, word [rdi + 2]
   375 0000219C 488B5F04            <1>     mov rbx, qword [rdi + 4]
   376 000021A0 56                  <1>     push rsi
   377 000021A1 5F                  <1>     pop rdi
   378 000021A2 48CF                <1>     iretq
   379                              <1> .sdtRegisterPage:
   380 000021A4 48891C25[18000000]  <1>     mov qword [pageTablePtr], rbx   ;Registers pointer as new table space
   381 000021AC 48CF                <1>     iretq
   382                              <1> .sdtGetPagePtr:
   383 000021AE 488B1C25[18000000]  <1>     mov rbx, qword [pageTablePtr]  ;Return BIOS Page Table ptr
   384 000021B6 48CF                <1>     iretq
   385                              <1> .sdtDataptr:
   386 000021B8 48BB-               <1>     mov rbx, section.data.start        ;Get BIOS Data area ptr into rax
   386 000021BA [0000000000000000]  <1>
   387 000021C2 48CF                <1>     iretq
   388                              <1> .sdtReadIDTEntry:
   389                              <1> ;bx = Number of interrupt handler (00h-0FFFFh), uses only bl
   390                              <1> ;Returns pointer in rbx, 
   391                              <1> ;Segment selector in ax,
   392                              <1> ;Attribute word in dx
   393 000021C4 480FB6DB            <1>     movzx rbx, bl
   394 000021C8 488B1425[04000000]  <1>     mov rdx, qword [IDTpointer.Base]    ;Get base address
   395 000021D0 48C1E304            <1>     shl rbx, 4h         ;Multiply address number by 16
   396 000021D4 4801DA              <1>     add rdx, rbx        ;rdx point to IDT entry
   397 000021D7 8B4208              <1>     mov eax, dword [rdx + 8]
   398 000021DA 48C1E020            <1>     shl rax, 20h        ;Shift dword into upper dword
   399 000021DE 668B5A06            <1>     mov bx, word [rdx + 6]
   400 000021E2 C1E310              <1>     shl ebx, 10h        ;Shift word into upper word
   401 000021E5 668B1A              <1>     mov bx, word [rdx]  ;Get final word
   402 000021E8 4809C3              <1>     or rbx, rax         ;Add upper dword to rbx
   403 000021EB 668B4202            <1>     mov ax, word [rdx + 2]  ;Get Segment selector in ax
   404 000021EF 668B5204            <1>     mov dx, word [rdx + 4]  ;Get attributes word
   405 000021F3 48CF                <1>     iretq
   406                              <1> .sdtWriteIDTEntry:
   407                              <1> ;rbx = Pointer to new routine
   408                              <1> ;cx = Number of the interrupt handler (00h-0FFFFh), uses only cl
   409                              <1> ;dx = IDT entry attributes
   410                              <1> ;si = Segment selector
   411 000021F5 50                  <1>     push rax
   412 000021F6 51                  <1>     push rcx
   413 000021F7 56                  <1>     push rsi
   414 000021F8 53                  <1>     push rbx
   415 000021F9 4889D8              <1>     mov rax, rbx    ;Move pointer to new routine to rax
   416 000021FC 89F3                <1>     mov ebx, esi    ;Move Segment selector from si to bx 
   417 000021FE 480FB6F1            <1>     movzx rsi, cl   ;Movzx low byte of interrupt number into rsi
   418 00002202 E8C4DEFFFF          <1>     call idtWriteEntry
   419 00002207 5B                  <1>     pop rbx
   420 00002208 5E                  <1>     pop rsi
   421 00002209 59                  <1>     pop rcx
   422 0000220A 58                  <1>     pop rax
   423 0000220B 48CF                <1>     iretq
   424                              <1> .sdtNewDDP:
   425 0000220D 48891C25[AF010000]  <1>     mov qword [diskDptPtr], rbx
   426 00002215 48CF                <1>     iretq
   427                              <1> .sdtNewfDDP:
   428 00002217 48891C25[B7010000]  <1>     mov qword [fdiskDptPtr], rbx
   429 0000221F 48CF                <1>     iretq
   430                              <1> .sdtReadDDP:
   431 00002221 488B1C25[AF010000]  <1>     mov rbx, qword [diskDptPtr]
   432 00002229 48CF                <1>     iretq
   433                              <1> .sdtReadfDDP:
   434 0000222B 488B1C25[B7010000]  <1>     mov rbx, qword [fdiskDptPtr]
   435 00002233 48CF                <1>     iretq
   436                              <1> .sdtNewSysInit:
   437 00002235 48891C25[BF010000]  <1>     mov qword [nextFilePtr], rbx
   438 0000223D 66891425[C7010000]  <1>     mov word [numSectors], dx
   439 00002245 48CF                <1>     iretq
   440                              <1> .sdtReadSysInit:
   441 00002247 488B1C25[BF010000]  <1>     mov rbx, qword [nextFilePtr]
   442 0000224F 668B1425[C7010000]  <1>     mov dx, word [numSectors]
   443 00002257 48CF                <1>     iretq
   444                              <1> .ehciFunctionDispatcher:
   445                              <1> ;EHCI function dispatcher 0F1h
   446                              <1> ; al = 00h -> EHCI get crit error handler
   447                              <1> ; al = 01h -> EHCI set crit error handler
   448                              <1> ; al = 02h -> Reserved, reset selected EHCI controller
   449                              <1> ; al = 03h -> Reserved, re-enumerate devices downstream of EHCI Root hub
   450 00002259 84C0                <1>     test al, al
   451 0000225B 7411                <1>     jz .ehciDispGetCritPtr
   452 0000225D FEC8                <1>     dec al
   453 0000225F 7417                <1>     jz .ehciDispSetCritPtr
   454 00002261 FEC8                <1>     dec al
   455 00002263 741D                <1>     jz .ehciDispResetCtrlr
   456 00002265 FEC8                <1>     dec al
   457 00002267 7419                <1>     jz .echiDispReEnumDevices
   458 00002269 E9ADFCFFFF          <1>     jmp .badFunction
   459                              <1> 
   460                              <1> .ehciDispGetCritPtr:
   461                              <1> ;Gets the address of the current EHCI critical error handler into rbx
   462 0000226E 488B1C25[36020000]  <1>     mov rbx, qword [eHCErrorHandler]
   463 00002276 48CF                <1>     iretq
   464                              <1> .ehciDispSetCritPtr:
   465                              <1> ;Sets the address of the EHCI critical error handler to the ptr in rbx
   466 00002278 48891C25[36020000]  <1>     mov qword [eHCErrorHandler], rbx
   467 00002280 48CF                <1>     iretq
   468                              <1> .ehciDispResetCtrlr:
   469                              <1> .echiDispReEnumDevices:
   470 00002282 B486                <1>     mov ah, 86h     ;Unsupported function call
   471 00002284 E994FCFFFF          <1>     jmp .badout  
   472                              <1> ;------------------------End of Interrupt------------------------
    98                                  %include "./Source/Resident/Services/Int36h.asm"
    99                              <1> ;-------------------Keyboard Interrupt Int 36h-------------------
   100                              <1> ; Software keyboard interrupt. 
   101                              <1> ; ah = 0 -> Read the next scancode/ASCII struck from the keyboard
   102                              <1> ; ah = 1 -> Clear zero flag if there is a new char ready to be 
   103                              <1> ;           read.
   104                              <1> ; ah = 2 -> Returns the current shift status in the al register
   105                              <1> ; ax and flags changed.
   106                              <1> ;----------------------------------------------------------------
   107                              <1> kb_io:
   108 00002289 53                  <1>     push rbx
   109 0000228A FA                  <1>     cli            ;Interrupts off
   110 0000228B 84E4                <1>     test ah, ah
   111 0000228D 7411                <1>     jz .k0
   112 0000228F FECC                <1>     dec ah
   113 00002291 7436                <1>     jz .k1
   114 00002293 FECC                <1>     dec ah
   115 00002295 7450                <1>     jz .k2
   116 00002297 804C241801          <1>     or byte [rsp + 3*8h], 1    ;Set CF, invalid function, skip rbx on stack
   117 0000229C B480                <1>     mov ah, 80h    ;Invalid Function
   118 0000229E EB4E                <1>     jmp short .kexit ;ah > 2, not a valid function
   119                              <1>     
   120                              <1> .k0:    
   121                              <1> ;This one moves the head to catch up with the tail.
   122 000022A0 FB                  <1>     sti
   123 000022A1 F390                <1>     pause    ;Allow a keyboard interrupt to occur
   124 000022A3 FA                  <1>     cli
   125 000022A4 488B1C25[42000000]  <1>     mov rbx, qword [kb_buf_head]
   126 000022AC 483B1C25[4A000000]  <1>     cmp rbx, qword [kb_buf_tail]    ;Are we at the head of the buffer?
   127 000022B4 74EA                <1>     je .k0    ;If we are, then the buffer is empty, await a keystroke
   128 000022B6 66678B03            <1>     mov ax, word [ebx]        ;move the word pointed at by rbx to ax
   129 000022BA E833000000          <1>     call .kb_ptr_adv    ;Advance the buffer pointer
   130                              <1>     
   131 000022BF 48891C25[42000000]  <1>     mov qword [kb_buf_head], rbx    ;Move rbx into the buffer head variable
   132 000022C7 EB25                <1>     jmp short .kexit
   133                              <1> 
   134                              <1> .k1:
   135 000022C9 488B1C25[42000000]  <1>     mov rbx, qword [kb_buf_head]
   136 000022D1 483B1C25[4A000000]  <1>     cmp rbx, qword [kb_buf_tail] ;sets flags, Z is set if equal 
   137 000022D9 660F4503            <1>     cmovnz ax, word [rbx]    ;move head of buffer into ax, IF Z clear
   138 000022DD FB                  <1>     sti     ;renable interrupts 
   139 000022DE 9C                  <1>     pushfq    ;push flags onto stack
   140 000022DF 5B                  <1>     pop rbx    ;pop them into rbx
   141 000022E0 48895C2418          <1>     mov [rsp + 3*8h], qword rbx    ;Replace with new flags, skip pushed rbx
   142 000022E5 EB07                <1>     jmp short .kexit
   143                              <1>     
   144                              <1> .k2:
   145 000022E7 8A0425[62000000]    <1>     mov al, byte [kb_flags]
   146                              <1> .kexit:
   147 000022EE FB                  <1>     sti
   148 000022EF 5B                  <1>     pop rbx
   149 000022F0 48CF                <1>     iretq
   150                              <1> 
   151                              <1> .kb_ptr_adv:
   152                              <1> ;Advance the pointer passed by rbx safely and return pointer!
   153 000022F2 48FFC3              <1>     inc rbx
   154 000022F5 48FFC3              <1>     inc rbx
   155 000022F8 483B1C25[5A000000]  <1>     cmp rbx, qword [kb_buf_end]     ;Are we at the end of the buffer space
   156 00002300 7508                <1>     jne .kbpa1                      ;If not exit, if we are, wrap around space!
   157 00002302 488B1C25[52000000]  <1>     mov rbx, qword [kb_buf_start]
   158                              <1> .kbpa1:
   159 0000230A C3                  <1>     ret
   160                              <1> ;------------------------End of Interrupt------------------------
    99                                  %include "./Source/Resident/Services/Int37h.asm"
   100                              <1> ;------------------------Printer Int 37h-------------------------
   101                              <1> ; Reserved for printer specific functions. Both USB and Parallel.
   102                              <1> ; Not currently supported
   103                              <1> ;----------------------------------------------------------------
   104                              <1> printer_io:
   105 0000230B B486                <1>     mov ah, 86h    ;Function not supported
   106 0000230D 804C241001          <1>     or byte [rsp+ 2*8h], 1    ;Set carry
   107 00002312 48CF                <1>     iretq
   108                              <1> ;------------------------End of Interrupt------------------------
   100                                  %include "./Source/Sysdebug/sysdeb.asm"
   101                              <1> ;---------------------MCP Interrupt Int 38h----------------------
   102                              <1> ;This interrupt superceeds the IBM BASIC routine caller. 
   103                              <1> ;This is a 64 bit port of my 16 bit MCP monitor program, 
   104                              <1> ; allowing users to "interactively" get sectors from devices 
   105                              <1> ; and run them. I might add some nicities to this version of MCP 
   106                              <1> ; such as a function to list all devices.
   107                              <1> ;----------------------------------------------------------------
   108                              <1> MCPjmptbl:  ;Function jump table
   109 00002314 [4E2C000000000000]  <1>     dq MCP_int.dumpMemory      ;Dump
   110 0000231C [4F2E000000000000]  <1>     dq MCP_int.editMemory      ;Edit
   111 00002324 [0B2F000000000000]  <1>     dq MCP_int.singleStep      ;Single step
   112 0000232C [BF2E000000000000]  <1>     dq MCP_int.jumpProc        ;Go
   113 00002334 [1A2F000000000000]  <1>     dq MCP_int.proceedDefault  ;Proceed
   114 0000233C [2D2F000000000000]  <1>     dq MCP_int.storageRead     ;Load
   115 00002344 [352F000000000000]  <1>     dq MCP_int.storageWrite    ;Write
   116 0000234C [BF2F000000000000]  <1>     dq MCP_int.restartMcp      ;Quit   <- To call Int 40h for DOS compatibility
   117 00002354 [C12F000000000000]  <1>     dq MCP_int.clearscreen     ;Clear screen
   118 0000235C [2927000000000000]  <1>     dq MCP_int.xchangeReg      ;Registers
   119 00002364 [8C25000000000000]  <1>     dq MCP_int.debugRegs       ;Breakpoints
   120 0000236C [FD28000000000000]  <1>     dq MCP_int.hexCalc         ;Hex
   121 00002374 [4128000000000000]  <1>     dq MCP_int.inport          ;In
   122 0000237C [9428000000000000]  <1>     dq MCP_int.outport         ;Out
   123 00002384 [4725000000000000]  <1>     dq MCP_int.version         ;Version
   124 0000238C [0B2F000000000000]  <1>     dq MCP_int.singleStep      ;Single Step (Alt), temp
   125 00002394 [1824000000000000]  <1>     dq MCP_int.memoryMap       ;Print memory map
   126 0000239C [E024000000000000]  <1>     dq MCP_int.connect         ;Connect Debugger
   127 000023A4 [1225000000000000]  <1>     dq MCP_int.disconnect      ;Disconnect Debugger
   128                              <1> MCP_int:
   129                              <1>     ;Entry point from external programs
   130 000023AC 48890425[04020000]  <1>     mov qword [mcpUserRaxStore], rax
   131 000023B4 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
   132 000023BC 48896008            <1>     mov qword [rax + 08h], rsp
   133 000023C0 E8080C0000          <1>     call .storeMainRegisters    ;Save main registers
   134                              <1> .z11:
   135 000023C5 488B2425[0C020000]  <1>     mov rsp, qword [mcpStackPtr]  ;Point sp to new stack
   136 000023CD B804130000          <1>     mov eax, 1304h    ;Zero extends to rax
   137 000023D2 48BD-               <1>     mov rbp, .prompt
   137 000023D4 [AA31000000000000]  <1>
   138 000023DC 30FF                <1>     xor bh, bh
   139 000023DE CD30                <1>     int 30h
   140                              <1> .z2:
   141 000023E0 6631C0              <1>     xor ax, ax 
   142 000023E3 CD36                <1>     int 36h
   143 000023E5 3C08                <1>     cmp al, 08h        ;If backspace, ignore
   144 000023E7 74F7                <1>     je .z2
   145 000023E9 E8910D0000          <1>     call .print        ;Print input char
   146 000023EE FD                  <1>     std
   147 000023EF 48BF-               <1>     mov rdi, .prompt    ;end of lst is prompt
   147 000023F1 [AA31000000000000]  <1>
   148 000023F9 48B914000000000000- <1>     mov rcx, .lstl + 1
   148 00002402 00                  <1>
   149 00002403 F2AE                <1>     repne scasb
   150 00002405 FC                  <1>     cld
   151 00002406 0F85AC000000        <1>     jne .bad_command    ;Char not found!
   152                              <1> .prog_sel:    ;Choose program
   153 0000240C 68[C5230000]        <1>     push MCP_int.z11    ;to allow RETurning to application
   154 00002411 FF24CD[14230000]    <1>     jmp qword [MCPjmptbl + 8*rcx]    ;Jump to chosen function         
   155                              <1> .memoryMap:
   156 00002418 66B80A0E            <1>     mov ax,0E0Ah
   157 0000241C CD30                <1>     int 30h
   158 0000241E 66B80D0E            <1>     mov ax, 0E0Dh
   159 00002422 CD30                <1>     int 30h
   160 00002424 E8D7DBFFFF          <1>     call e820print  ;Print memory map
   161 00002429 E997FFFFFF          <1>     jmp .z11
   162                              <1> .singleStepsEP:
   163 0000242E 48890425[04020000]  <1>     mov qword [mcpUserRaxStore], rax
   164 00002436 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
   165 0000243E 48896008            <1>     mov qword [rax + 08h], rsp
   166 00002442 E8860B0000          <1>     call .storeMainRegisters
   167 00002447 488B0424            <1>     mov rax, qword [rsp]    ;Get next instruction address
   168 0000244B 48890425[F4010000]  <1>     mov qword [mcpUserRip], rax
   169 00002453 E875050000          <1>     call .dumpReg    ;Show register state
   170 00002458 E802020000          <1>     call .dumpDebugRegs
   171 0000245D FB                  <1>     sti ;Restore interrupts
   172 0000245E E962FFFFFF          <1>     jmp .z11
   173                              <1> .debugEpHardware:
   174 00002463 48890425[04020000]  <1>     mov qword [mcpUserRaxStore], rax
   175 0000246B 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
   176 00002473 48896008            <1>     mov qword [rax + 08h], rsp
   177 00002477 E8510B0000          <1>     call .storeMainRegisters
   178 0000247C FB                  <1>     sti ;Restore interrupts
   179 0000247D B020                <1>     mov al, EOI
   180 0000247F E620                <1>     out pic1command, al
   181 00002481 EB1A                <1>     jmp short .dep1
   182                              <1> .debugEp:    
   183                              <1> ;Return here after a single step or int 3. 
   184                              <1> ;Support Int 3h thru manual encoding only, not via the debugger
   185 00002483 48890425[04020000]  <1>     mov qword [mcpUserRaxStore], rax
   186 0000248B 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
   187 00002493 48896008            <1>     mov qword [rax + 08h], rsp
   188 00002497 E8310B0000          <1>     call .storeMainRegisters
   189 0000249C FB                  <1>     sti ;Restore interrupts
   190                              <1> .dep1:
   191 0000249D 488B0424            <1>     mov rax, qword [rsp]    ;Get next instruction address
   192 000024A1 48890425[F4010000]  <1>     mov qword [mcpUserRip], rax
   193 000024A9 E81F050000          <1>     call .dumpReg    ;Show register state
   194 000024AE E8AC010000          <1>     call .dumpDebugRegs
   195 000024B3 E90DFFFFFF          <1>     jmp .z11
   196                              <1> .bad_command:
   197 000024B8 48B804130000000000- <1>     mov rax, 1304h
   197 000024C1 00                  <1>
   198 000024C2 30FF                <1>     xor bh, bh
   199 000024C4 48BD-               <1>     mov rbp, .bc1
   199 000024C6 [D524000000000000]  <1>
   200 000024CE CD30                <1>     int 30h
   201 000024D0 E9F0FEFFFF          <1>     jmp MCP_int.z11
   202 000024D5 0A0D205E204572726F- <1> .bc1: db 0Ah,0Dh," ^ Error",0
   202 000024DE 7200                <1>
   203                              <1> ;><><><><><><><-Internal Commands Begin Here-><><><><><><><
   204                              <1> .connect:
   205 000024E0 50                  <1>     push rax
   206 000024E1 55                  <1>     push rbp
   207 000024E2 B801C50000          <1>     mov eax, 0C501h ;Connect Debugger
   208 000024E7 CD35                <1>     int 35h
   209 000024E9 B804130000          <1>     mov eax, 1304h
   210 000024EE 48BD-               <1>     mov rbp, .connectString
   210 000024F0 [FD24000000000000]  <1>
   211 000024F8 CD30                <1>     int 30h
   212 000024FA 5D                  <1>     pop rbp
   213 000024FB 58                  <1>     pop rax
   214 000024FC C3                  <1>     ret
   215 000024FD 0A0D53595344454255- <1> .connectString db 0Ah,0Dh,"SYSDEBUG Connected",0
   215 00002506 4720436F6E6E656374- <1>
   215 0000250F 656400              <1>
   216                              <1> .disconnect:
   217 00002512 50                  <1>     push rax
   218 00002513 55                  <1>     push rbp
   219 00002514 B802C50000          <1>     mov eax, 0C502h ;Disconnect Debugger
   220 00002519 CD35                <1>     int 35h
   221 0000251B B804130000          <1>     mov eax, 1304h
   222 00002520 48BD-               <1>     mov rbp, .disconnectString
   222 00002522 [2F25000000000000]  <1>
   223 0000252A CD30                <1>     int 30h
   224 0000252C 5D                  <1>     pop rbp
   225 0000252D 58                  <1>     pop rax
   226 0000252E C3                  <1>     ret
   227 0000252F 0A0D53595344454255- <1> .disconnectString db 0Ah,0Dh,"SYSDEBUG Disconnected",0
   227 00002538 4720446973636F6E6E- <1>
   227 00002541 656374656400        <1>
   228                              <1> .version:
   229 00002547 66B80413            <1>     mov ax, 1304h
   230 0000254B 30FF                <1>     xor bh, bh
   231 0000254D 48BD-               <1>     mov rbp, .vstring
   231 0000254F [6F25000000000000]  <1>
   232 00002557 CD30                <1>     int 30h
   233 00002559 48BE-               <1>     mov rsi, signature + 1    ;Point to BIOS signature string (skip the v char)
   233 0000255B [9F57000000000000]  <1>
   234                              <1> .v1:
   235 00002563 AC                  <1>     lodsb
   236 00002564 3C20                <1>     cmp al, 20h            ;Check space
   237 00002566 7406                <1>     je .v2
   238 00002568 B40E                <1>     mov ah, 0Eh
   239                              <1>     ;xor bh, bh
   240 0000256A CD30                <1>     int 30h
   241 0000256C EBF5                <1>     jmp short .v1
   242                              <1> .v2:
   243 0000256E C3                  <1>     ret
   244 0000256F 0A0D5343502F42494F- <1> .vstring:    db 0Ah, 0Dh,"SCP/BIOS SYSDEBUG Version ",0
   244 00002578 532053595344454255- <1>
   244 00002581 472056657273696F6E- <1>
   244 0000258A 2000                <1>
   245                              <1> .debugRegs:
   246 0000258C E8CE000000          <1>     call .dumpDebugRegs
   247 00002591 66B80413            <1>     mov ax, 1304h
   248 00002595 48BD-               <1>     mov rbp, .crlf    ;Newline
   248 00002597 [B031000000000000]  <1>
   249 0000259F CD30                <1>     int 30h
   250                              <1> 
   251 000025A1 66B82E0E            <1>     mov ax, 0E2Eh    ;Print dot byte
   252 000025A5 CD30                <1>     int 30h
   253                              <1> 
   254 000025A7 66B80101            <1>     mov ax, 0101h    ;Process one byte
   255 000025AB E82E0B0000          <1>     call .keyb
   256 000025B0 4885ED              <1>     test rbp, rbp
   257 000025B3 0F840CFEFFFF        <1>     jz .z11    ;If enter pressed, return to command line
   258 000025B9 E8C00A0000          <1>     call .arg
   259 000025BE 3C01                <1>     cmp al, 1
   260 000025C0 0F85DA070000        <1>     jne .dmbadexit
   261                              <1> 
   262 000025C6 488B7D00            <1>     mov rdi, qword [rbp]
   263 000025CA 4881FF04000000      <1>     cmp rdi, 4
   264 000025D1 7213                <1>     jb .xr11    ;Cant edit dr4, or 5. dr6 is read only
   265 000025D3 4881FF07000000      <1>     cmp rdi, 7  ;Can only edit 7
   266 000025DA 0F85D8FEFFFF        <1>     jne .bad_command
   267 000025E0 48FFCF              <1>     dec rdi     ;Is the fifth entry in the table
   268 000025E3 48FFCF              <1>     dec rdi
   269                              <1> .xr11:
   270 000025E6 48BD-               <1>     mov rbp, .crlf
   270 000025E8 [B031000000000000]  <1>
   271 000025F0 66B80413            <1>     mov ax, 1304h
   272 000025F4 30FF                <1>     xor bh, bh
   273 000025F6 CD30                <1>     int 30h
   274                              <1> 
   275 000025F8 57                  <1>     push rdi    ;Save rdi
   276 000025F9 48C1E702            <1>     shl rdi, 2    ;Multiply by 4
   277 000025FD 66B90400            <1>     mov cx, 4    ;4 chars to print
   278                              <1> .xr1:   ;Print register name
   279 00002601 8A87[11270000]      <1>     mov al, byte [.dregtbl + rdi]
   280 00002607 B40E                <1>     mov ah, 0Eh
   281 00002609 CD30                <1>     int 30h
   282 0000260B 66FFC7              <1>     inc di
   283 0000260E 66FFC9              <1>     dec cx
   284 00002611 75EE                <1>     jnz .xr1
   285                              <1> ;Get the qword into the keybuffer
   286 00002613 5F                  <1>     pop rdi
   287 00002614 66B80104            <1>     mov ax, 0401h    ;Process one qword
   288 00002618 E8C10A0000          <1>     call .keyb
   289 0000261D 4885ED              <1>     test rbp, rbp
   290 00002620 0F84C6010000        <1>     jz .xcnoexit
   291 00002626 E8530A0000          <1>     call .arg
   292 0000262B 3C01                <1>     cmp al, 1
   293 0000262D 0F856D070000        <1>     jne .dmbadexit
   294                              <1> 
   295 00002633 488B4500            <1>     mov rax, qword [rbp]    ;rax has the replacement value
   296 00002637 4885FF              <1>     test rdi, rdi
   297 0000263A 7504                <1>     jnz .xr2
   298 0000263C 0F23C0              <1>     mov dr0, rax
   299 0000263F C3                  <1>     ret
   300                              <1> .xr2:
   301 00002640 48FFCF              <1>     dec rdi
   302 00002643 7504                <1>     jnz .xr3
   303 00002645 0F23C8              <1>     mov dr1, rax
   304 00002648 C3                  <1>     ret
   305                              <1> .xr3:
   306 00002649 48FFCF              <1>     dec rdi
   307 0000264C 7504                <1>     jnz .xr4
   308 0000264E 0F23D0              <1>     mov dr2, rax
   309 00002651 C3                  <1>     ret
   310                              <1> .xr4:
   311 00002652 48FFCF              <1>     dec rdi
   312 00002655 7504                <1>     jnz .xr5
   313 00002657 0F23D8              <1>     mov dr3, rax
   314 0000265A C3                  <1>     ret
   315                              <1> .xr5:
   316 0000265B 0F23F8              <1>     mov dr7, rax
   317 0000265E C3                  <1>     ret
   318                              <1> 
   319                              <1> .dumpDebugRegs:
   320 0000265F 48BD-               <1>     mov rbp, .crlf
   320 00002661 [B031000000000000]  <1>
   321 00002669 66B80413            <1>     mov ax, 1304h
   322 0000266D 30FF                <1>     xor bh, bh
   323 0000266F CD30                <1>     int 30h
   324 00002671 4831ED              <1>     xor rbp, rbp
   325 00002674 4831FF              <1>     xor rdi, rdi
   326                              <1> 
   327 00002677 0F21F8              <1>     mov rax, dr7
   328 0000267A 50                  <1>     push rax
   329 0000267B 0F21F0              <1>     mov rax, dr6
   330 0000267E 50                  <1>     push rax
   331 0000267F 0F21D8              <1>     mov rax, dr3
   332 00002682 50                  <1>     push rax
   333 00002683 0F21D0              <1>     mov rax, dr2
   334 00002686 50                  <1>     push rax
   335 00002687 0F21C8              <1>     mov rax, dr1
   336 0000268A 50                  <1>     push rax
   337 0000268B 0F21C0              <1>     mov rax, dr0
   338 0000268E 50                  <1>     push rax
   339                              <1> 
   340                              <1> .ddr1:
   341 0000268F 4831C9              <1>     xor rcx, rcx
   342 00002692 4881FF03000000      <1>     cmp rdi, 3      ;3 registers per row
   343 00002699 7450                <1>     je .dregcrlf
   344                              <1> .ddr11:
   345 0000269B 8A840D[11270000]    <1>     mov al, byte [.dregtbl + rbp + rcx]
   346 000026A2 B40E                <1>     mov ah, 0Eh
   347 000026A4 CD30                <1>     int 30h
   348 000026A6 66FFC1              <1>     inc cx
   349 000026A9 6681F90400          <1>     cmp cx, 4
   350 000026AE 75EB                <1>     jnz .ddr11
   351                              <1> 
   352 000026B0 48B908000000000000- <1>     mov rcx, 8
   352 000026B9 00                  <1>
   353                              <1> .ddr2:
   354 000026BA 5B                  <1>     pop rbx    ;Get debug register
   355 000026BB 480FCB              <1>     bswap rbx
   356                              <1> .ddr21:
   357 000026BE B404                <1>     mov ah, 04h
   358 000026C0 88D8                <1>     mov al, bl
   359 000026C2 CD30                <1>     int 30h
   360 000026C4 48C1EB08            <1>     shr rbx, 8h
   361 000026C8 FEC9                <1>     dec cl
   362 000026CA 75F2                <1>     jnz .ddr21
   363 000026CC 48FFC7              <1>     inc rdi
   364                              <1> 
   365 000026CF B403                <1>     mov ah, 3
   366 000026D1 CD30                <1>     int 30h
   367 000026D3 80C203              <1>     add dl, 3
   368 000026D6 B402                <1>     mov ah, 2
   369 000026D8 CD30                <1>     int 30h
   370 000026DA 4881C504000000      <1>     add rbp, 4
   371 000026E1 4881FD18000000      <1>     cmp rbp, 24 ;number of chars in the below typed string
   372 000026E8 72A5                <1>     jb .ddr1
   373                              <1> 
   374 000026EA C3                  <1>     ret
   375                              <1> .dregcrlf:
   376 000026EB 4831FF              <1>     xor rdi, rdi
   377 000026EE 55                  <1>     push rbp
   378 000026EF 50                  <1>     push rax
   379 000026F0 53                  <1>     push rbx
   380 000026F1 48BD-               <1>     mov rbp, .crlf
   380 000026F3 [B031000000000000]  <1>
   381 000026FB 48B804130000000000- <1>     mov rax, 1304h
   381 00002704 00                  <1>
   382 00002705 30FF                <1>     xor bh, bh
   383 00002707 CD30                <1>     int 30h
   384 00002709 5B                  <1>     pop rbx
   385 0000270A 58                  <1>     pop rax
   386 0000270B 5D                  <1>     pop rbp
   387 0000270C E98AFFFFFF          <1>     jmp .ddr11
   388 00002711 4452303D4452313D44- <1> .dregtbl db "DR0=", "DR1=", "DR2=", "DR3=", "DR6=", "DR7="
   388 0000271A 52323D4452333D4452- <1>
   388 00002723 363D4452373D        <1>
   389                              <1> 
   390                              <1> .xchangeReg:
   391 00002729 E89F020000          <1>     call .dumpReg
   392 0000272E 66B80413            <1>     mov ax, 1304h
   393 00002732 48BD-               <1>     mov rbp, .crlf    ;Newline
   393 00002734 [B031000000000000]  <1>
   394 0000273C CD30                <1>     int 30h
   395                              <1> 
   396 0000273E 66B82E0E            <1>     mov ax, 0E2Eh    ;Print dot byte
   397 00002742 CD30                <1>     int 30h
   398                              <1> 
   399 00002744 66B80101            <1>     mov ax, 0101h    ;Process one byte
   400 00002748 E891090000          <1>     call .keyb
   401 0000274D 4885ED              <1>     test rbp, rbp
   402 00002750 0F846FFCFFFF        <1>     jz .z11    ;If enter pressed, return to command line
   403 00002756 E823090000          <1>     call .arg
   404 0000275B 3C01                <1>     cmp al, 1
   405 0000275D 0F853D060000        <1>     jne .dmbadexit
   406                              <1> 
   407 00002763 488B7D00            <1>     mov rdi, qword [rbp]    ;move this byte into rdi
   408 00002767 4881FF11000000      <1>     cmp rdi, 11h
   409 0000276E 0F8744FDFFFF        <1>     ja .bad_command    ;If the user chooses a value greater than 11, exit!
   410                              <1> 
   411 00002774 48BD-               <1>     mov rbp, .crlf
   411 00002776 [B031000000000000]  <1>
   412 0000277E 66B80413            <1>     mov ax, 1304h
   413 00002782 30FF                <1>     xor bh, bh
   414 00002784 CD30                <1>     int 30h
   415                              <1> 
   416 00002786 4881FF11000000      <1>     cmp rdi, 11h
   417 0000278D 7467                <1>     je .xcflags ;If the user typed 10, then xchange flags
   418                              <1> 
   419 0000278F 57                  <1>     push rdi    ;Save rdi
   420 00002790 48C1E702            <1>     shl rdi, 2    ;Multiply by 4
   421 00002794 66B90400            <1>     mov cx, 4    ;4 chars to print
   422                              <1> .xcr1:
   423 00002798 8A87[E82B0000]      <1>     mov al, byte [.regtbl + rdi]
   424 0000279E B40E                <1>     mov ah, 0Eh
   425 000027A0 CD30                <1>     int 30h
   426 000027A2 66FFC7              <1>     inc di
   427 000027A5 66FFC9              <1>     dec cx
   428 000027A8 75EE                <1>     jnz .xcr1
   429                              <1> 
   430 000027AA 5F                  <1>     pop rdi
   431 000027AB 66B80104            <1>     mov ax, 0401h    ;Process one qword
   432 000027AF E82A090000          <1>     call .keyb
   433 000027B4 4885ED              <1>     test rbp, rbp
   434 000027B7 7433                <1>     jz .xcnoexit
   435 000027B9 E8C0080000          <1>     call .arg
   436 000027BE 3C01                <1>     cmp al, 1
   437 000027C0 0F85DA050000        <1>     jne .dmbadexit
   438                              <1> 
   439 000027C6 488B4500            <1>     mov rax, qword [rbp]
   440 000027CA 4881FF10000000      <1>     cmp rdi, 10h
   441 000027D1 741A                <1>     je .xcipchange
   442 000027D3 488B1C25[EC010000]  <1>     mov rbx, qword [mcpUserBase]
   443 000027DB 4881C380000000      <1>     add rbx, 80h
   444 000027E2 48C1E703            <1>     shl rdi, 3  ;Multiply by 8
   445 000027E6 4829FB              <1>     sub rbx, rdi
   446 000027E9 488903              <1>     mov qword [rbx], rax    ;Replace element with rax
   447                              <1> .xcnoexit:
   448 000027EC C3                  <1>     ret
   449                              <1> .xcipchange:
   450 000027ED 48890425[F4010000]  <1>     mov qword [mcpUserRip], rax
   451 000027F5 C3                  <1>     ret
   452                              <1> .xcflags:
   453 000027F6 48B907000000000000- <1>     mov rcx, 7
   453 000027FF 00                  <1>
   454 00002800 4831FF              <1>     xor rdi, rdi
   455                              <1> .xcf1:
   456 00002803 8A87[3E2C0000]      <1>     mov al, byte [.rflgs + rdi]
   457 00002809 B40E                <1>     mov ah, 0Eh
   458 0000280B CD30                <1>     int 30h
   459 0000280D 66FFC7              <1>     inc di
   460 00002810 66FFC9              <1>     dec cx
   461 00002813 75EE                <1>     jnz .xcf1
   462                              <1> 
   463 00002815 66B80104            <1>     mov ax, 0401h    ;Process one qword
   464 00002819 E8C0080000          <1>     call .keyb
   465 0000281E 4885ED              <1>     test rbp, rbp
   466 00002821 74C9                <1>     jz .xcnoexit
   467 00002823 E856080000          <1>     call .arg
   468 00002828 3C01                <1>     cmp al, 1
   469 0000282A 0F8570050000        <1>     jne .dmbadexit
   470 00002830 488B4500            <1>     mov rax, qword [rbp]
   471 00002834 488B2C25[EC010000]  <1>     mov rbp, qword [mcpUserBase]
   472 0000283C 48894500            <1>     mov qword [rbp], rax
   473 00002840 C3                  <1>     ret
   474                              <1> .inport:
   475 00002841 66B80413            <1>     mov ax, 1304h
   476 00002845 30FF                <1>     xor bh, bh
   477 00002847 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
   477 00002849 [AE31000000000000]  <1>
   478 00002851 CD30                <1>     int 30h
   479                              <1> 
   480 00002853 66B80101            <1>     mov ax, 0101h    ;Get 1 byte
   481 00002857 E882080000          <1>     call .keyb
   482 0000285C 4885ED              <1>     test rbp, rbp
   483 0000285F 0F8453FCFFFF        <1>     jz .bad_command
   484 00002865 E814080000          <1>     call .arg
   485 0000286A 3C01                <1>     cmp al, 1
   486 0000286C 0F852E050000        <1>     jne .dmbadexit
   487 00002872 488B5500            <1>     mov rdx, qword [rbp]    ;First arg, word io addr
   488 00002876 48BD-               <1>     mov rbp, .crlf
   488 00002878 [B031000000000000]  <1>
   489 00002880 48B804130000000000- <1>     mov rax, 1304h
   489 00002889 00                  <1>
   490 0000288A 30FF                <1>     xor bh, bh
   491 0000288C CD30                <1>     int 30h
   492 0000288E EC                  <1>     in al, dx
   493 0000288F B404                <1>     mov ah, 04h
   494 00002891 CD30                <1>     int 30h
   495 00002893 C3                  <1>     ret
   496                              <1> 
   497                              <1> .outport:
   498 00002894 66B80413            <1>     mov ax, 1304h
   499 00002898 48BB07000000000000- <1>     mov rbx, 7h
   499 000028A1 00                  <1>
   500 000028A2 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
   500 000028A4 [AE31000000000000]  <1>
   501 000028AC CD30                <1>     int 30h
   502 000028AE 66B80102            <1>     mov ax, 0201h    ;Get 1 word
   503 000028B2 E827080000          <1>     call .keyb
   504 000028B7 4885ED              <1>     test rbp, rbp
   505 000028BA 0F84F8FBFFFF        <1>     jz .bad_command
   506 000028C0 E8B9070000          <1>     call .arg
   507 000028C5 3C01                <1>     cmp al, 1
   508 000028C7 0F85D3040000        <1>     jne .dmbadexit
   509 000028CD 488B5500            <1>     mov rdx, qword [rbp]    ;First arg, word io addr
   510 000028D1 B02E                <1>     mov al, "."
   511 000028D3 E8A7080000          <1>     call .print
   512 000028D8 66B80101            <1>     mov ax, 0101h    ;Get 1 byte
   513 000028DC E8FD070000          <1>     call .keyb
   514 000028E1 4885ED              <1>     test rbp, rbp
   515 000028E4 0F84CEFBFFFF        <1>     jz .bad_command
   516 000028EA E88F070000          <1>     call .arg
   517 000028EF 3C01                <1>     cmp al, 1
   518 000028F1 0F85A9040000        <1>     jne .dmbadexit
   519 000028F7 488B4500            <1>     mov rax, qword [rbp]
   520 000028FB EE                  <1>     out dx, al
   521 000028FC C3                  <1>     ret
   522                              <1> 
   523                              <1> .hexCalc:
   524 000028FD 66B80413            <1>     mov ax, 1304h
   525 00002901 30FF                <1>     xor bh, bh
   526 00002903 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
   526 00002905 [AE31000000000000]  <1>
   527 0000290D CD30                <1>     int 30h
   528 0000290F 66B80204            <1>     mov ax, 0402h    ;Get 2 qwords
   529 00002913 E8C6070000          <1>     call .keyb
   530 00002918 4885ED              <1>     test rbp, rbp
   531 0000291B 0F8497FBFFFF        <1>     jz .bad_command
   532 00002921 E858070000          <1>     call .arg
   533                              <1> 
   534 00002926 3C02                <1>     cmp al, 2
   535 00002928 0F8572040000        <1>     jne .dmbadexit
   536                              <1> 
   537 0000292E 4C8B4508            <1>     mov r8, qword [rbp + 8] ;First number 
   538 00002932 4C8B4D00            <1>     mov r9, qword [rbp]        ;Second number
   539 00002936 4F8D1408            <1>     lea r10, qword [r8+r9]
   540                              <1> 
   541 0000293A 48BD-               <1>     mov rbp, .crlf
   541 0000293C [B031000000000000]  <1>
   542 00002944 48B804130000000000- <1>     mov rax, 1304h
   542 0000294D 00                  <1>
   543 0000294E 30FF                <1>     xor bh, bh
   544 00002950 CD30                <1>     int 30h
   545                              <1> 
   546 00002952 4C89C2              <1>     mov rdx, r8
   547 00002955 E856000000          <1>     call .hcprintquad
   548 0000295A B02B                <1>     mov al, "+"
   549 0000295C E81E080000          <1>     call .print
   550 00002961 4C89CA              <1>     mov rdx, r9
   551 00002964 E847000000          <1>     call .hcprintquad
   552 00002969 B03D                <1>     mov al, "="
   553 0000296B E80F080000          <1>     call .print
   554 00002970 4C89D2              <1>     mov rdx, r10
   555 00002973 E838000000          <1>     call .hcprintquad
   556                              <1> 
   557 00002978 48B804130000000000- <1>     mov rax, 1304h
   557 00002981 00                  <1>
   558 00002982 30FF                <1>     xor bh, bh
   559 00002984 CD30                <1>     int 30h
   560                              <1> 
   561 00002986 4C89C2              <1>     mov rdx, r8
   562 00002989 E822000000          <1>     call .hcprintquad
   563 0000298E B02D                <1>     mov al, "-"
   564 00002990 E8EA070000          <1>     call .print
   565 00002995 4C89CA              <1>     mov rdx, r9
   566 00002998 E813000000          <1>     call .hcprintquad
   567 0000299D B03D                <1>     mov al, "="
   568 0000299F E8DB070000          <1>     call .print
   569 000029A4 4D29C8              <1>     sub r8, r9
   570 000029A7 4C89C2              <1>     mov rdx, r8
   571 000029AA E801000000          <1>     call .hcprintquad
   572 000029AF C3                  <1>     ret
   573                              <1> 
   574                              <1> .hcprintquad:
   575                              <1> ;Takes whats in rdx, and prints it
   576 000029B0 480FCA              <1>     bswap rdx
   577 000029B3 48B908000000000000- <1>     mov rcx, 8
   577 000029BC 00                  <1>
   578                              <1> .hcpq1:
   579 000029BD 88D0                <1>     mov al, dl
   580 000029BF B404                <1>     mov ah, 04h
   581 000029C1 CD30                <1>     int 30h
   582 000029C3 48C1EA08            <1>     shr rdx, 8
   583 000029C7 66FFC9              <1>     dec cx
   584 000029CA 75F1                <1>     jnz .hcpq1
   585 000029CC C3                  <1>     ret
   586                              <1> 
   587                              <1> .dumpReg:
   588 000029CD 48BD-               <1>     mov rbp, .crlf
   588 000029CF [B031000000000000]  <1>
   589 000029D7 66B80413            <1>     mov ax, 1304h
   590 000029DB 30FF                <1>     xor bh, bh
   591 000029DD CD30                <1>     int 30h
   592 000029DF 4831ED              <1>     xor rbp, rbp
   593 000029E2 4831FF              <1>     xor rdi, rdi
   594 000029E5 4831F6              <1>     xor rsi, rsi
   595 000029E8 488B3425[EC010000]  <1>     mov rsi, qword [mcpUserBase]
   596 000029F0 4881C680000000      <1>     add rsi, 80h
   597                              <1> .dreg1:
   598 000029F7 4831C9              <1>     xor rcx, rcx
   599 000029FA 4881FF03000000      <1>     cmp rdi, 3
   600 00002A01 0F84BB010000        <1>     je .regcrlf
   601                              <1> .dreg11:    ;Print register name
   602 00002A07 8A840D[E82B0000]    <1>     mov al, byte [.regtbl+rbp+rcx]
   603 00002A0E B40E                <1>     mov ah, 0Eh
   604 00002A10 CD30                <1>     int 30h
   605 00002A12 66FFC1              <1>     inc cx
   606 00002A15 6681F90400          <1>     cmp cx, 4h
   607 00002A1A 75EB                <1>     jnz .dreg11
   608                              <1> .dreg2:
   609 00002A1C 48B908000000000000- <1>     mov rcx, 8h
   609 00002A25 00                  <1>
   610                              <1> ;Now print register value
   611 00002A26 488B1E              <1>     mov rbx, qword [rsi]    ;Get qword from storage
   612 00002A29 81EE08000000        <1>     sub esi, 8
   613 00002A2F 480FCB              <1>     bswap rbx    ;Change endianness
   614                              <1> .dreg21:
   615 00002A32 B404                <1>     mov ah, 04h
   616 00002A34 88D8                <1>     mov al, bl
   617 00002A36 CD30                <1>     int 30h
   618 00002A38 48C1EB08            <1>     shr rbx, 8h    ;Shift down by a byte
   619 00002A3C FEC9                <1>     dec cl
   620 00002A3E 75F2                <1>     jnz .dreg21
   621 00002A40 48FFC7              <1>     inc rdi
   622                              <1> 
   623 00002A43 B403                <1>     mov ah, 3
   624 00002A45 CD30                <1>     int 30h
   625 00002A47 80C203              <1>     add dl, 3
   626 00002A4A B402                <1>     mov ah, 2
   627 00002A4C CD30                <1>     int 30h
   628 00002A4E 4881C504000000      <1>     add rbp, 4
   629 00002A55 4881FD40000000      <1>     cmp rbp, 40h
   630 00002A5C 7299                <1>     jb .dreg1
   631                              <1> 
   632                              <1> ;Print RIP
   633                              <1> .drip0:
   634 00002A5E 4831C9              <1>     xor rcx, rcx
   635                              <1> .drip1:
   636                              <1> ;Print name
   637 00002A61 8A840D[E82B0000]    <1>     mov al, byte [.regtbl+rbp+rcx]
   638 00002A68 B40E                <1>     mov ah, 0Eh
   639 00002A6A CD30                <1>     int 30h
   640 00002A6C 66FFC1              <1>     inc cx
   641 00002A6F 6681F90400          <1>     cmp cx, 4h
   642 00002A74 75EB                <1>     jne .drip1
   643                              <1> 
   644 00002A76 48B908000000000000- <1>     mov rcx, 8
   644 00002A7F 00                  <1>
   645 00002A80 488B3425[F4010000]  <1>     mov rsi, qword [mcpUserRip]
   646 00002A88 480FCE              <1>     bswap rsi
   647                              <1> .drip2:
   648                              <1> ;Print value
   649 00002A8B B404                <1>     mov ah, 04h
   650 00002A8D 4088F0              <1>     mov al, sil
   651 00002A90 CD30                <1>     int 30h
   652 00002A92 48C1EE08            <1>     shr rsi, 8h    ;Shift down by a byte
   653 00002A96 FEC9                <1>     dec cl
   654 00002A98 75F1                <1>     jnz .drip2
   655 00002A9A 4881C504000000      <1>     add rbp, 4    ;Offset into table
   656                              <1> 
   657 00002AA1 55                  <1>     push rbp
   658 00002AA2 48BD-               <1>     mov rbp, .ipstrg
   658 00002AA4 [452C000000000000]  <1>
   659 00002AAC 66B80413            <1>     mov ax, 1304h
   660 00002AB0 CD30                <1>     int 30h    
   661 00002AB2 B107                <1>     mov cl, 7
   662 00002AB4 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
   663 00002ABC 488B4008            <1>     mov rax, qword [rax + 08h]  ;Get the old stack pointer
   664 00002AC0 488B18              <1>     mov rbx, qword [rax]    ;Get the address of 8 bytes at that instruction
   665 00002AC3 488B1B              <1>     mov rbx, qword [rbx]    ;Get the bytes
   666 00002AC6 88D8                <1>     mov al, bl
   667 00002AC8 B404                <1>     mov ah, 04h
   668 00002ACA CD30                <1>     int 30h
   669 00002ACC 48C1EB08            <1>     shr rbx, 8
   670 00002AD0 B40E                <1>     mov ah, 0Eh   ;Add a space to indicate mod r/m + optionals
   671 00002AD2 B02D                <1>     mov al, '-'
   672 00002AD4 CD30                <1>     int 30h
   673                              <1> .ssep0:
   674 00002AD6 88D8                <1>     mov al, bl
   675 00002AD8 B404                <1>     mov ah, 04h
   676 00002ADA CD30                <1>     int 30h
   677 00002ADC 48C1EB08            <1>     shr rbx, 8
   678 00002AE0 FEC9                <1>     dec cl
   679 00002AE2 75F2                <1>     jnz .ssep0
   680                              <1> 
   681 00002AE4 48BD-               <1>     mov rbp, .crlf
   681 00002AE6 [B031000000000000]  <1>
   682 00002AEE 48B804130000000000- <1>     mov rax, 1304h
   682 00002AF7 00                  <1>
   683 00002AF8 48BB07000000000000- <1>     mov rbx, 7h
   683 00002B01 00                  <1>
   684 00002B02 CD30                <1>     int 30h
   685 00002B04 5D                  <1>     pop rbp
   686                              <1> 
   687 00002B05 668CC8              <1>     mov ax, cs
   688 00002B08 E87D000000          <1>     call .dsegregwrite
   689 00002B0D 668CD8              <1>     mov ax, ds
   690 00002B10 E875000000          <1>     call .dsegregwrite
   691 00002B15 668CC0              <1>     mov ax, es
   692 00002B18 E86D000000          <1>     call .dsegregwrite
   693 00002B1D 668CD0              <1>     mov ax, ss
   694 00002B20 E865000000          <1>     call .dsegregwrite
   695 00002B25 668CE0              <1>     mov ax, fs
   696 00002B28 E85D000000          <1>     call .dsegregwrite
   697 00002B2D 668CE8              <1>     mov ax, gs
   698 00002B30 E855000000          <1>     call .dsegregwrite
   699                              <1> 
   700 00002B35 55                  <1>     push rbp
   701 00002B36 48BD-               <1>     mov rbp, .crlf
   701 00002B38 [B031000000000000]  <1>
   702 00002B40 48B804130000000000- <1>     mov rax, 1304h
   702 00002B49 00                  <1>
   703 00002B4A 30FF                <1>     xor bh, bh
   704 00002B4C CD30                <1>     int 30h
   705 00002B4E 5D                  <1>     pop rbp
   706                              <1> .drflagwrite:
   707 00002B4F 4831C9              <1>     xor rcx, rcx
   708                              <1> .drflg1:    ;Print register name
   709 00002B52 8A840D[E82B0000]    <1>     mov al, byte [.regtbl+rbp+rcx]
   710 00002B59 B40E                <1>     mov ah, 0Eh
   711 00002B5B CD30                <1>     int 30h
   712 00002B5D 48FFC1              <1>     inc rcx
   713 00002B60 4881F907000000      <1>     cmp rcx, 7
   714 00002B67 75E9                <1>     jnz .drflg1
   715                              <1> 
   716 00002B69 48FFC1              <1>     inc rcx
   717 00002B6C 488B1425[EC010000]  <1>     mov rdx, qword [mcpUserBase]    ;Get flags into rdx
   718 00002B74 488B12              <1>     mov rdx, qword [rdx]
   719 00002B77 480FCA              <1>     bswap rdx
   720                              <1> .drflg2:
   721 00002B7A B404                <1>     mov ah, 04h
   722 00002B7C 88D0                <1>     mov al, dl
   723 00002B7E CD30                <1>     int 30h
   724 00002B80 48C1EA08            <1>     shr rdx, 8
   725 00002B84 48FFC9              <1>     dec rcx
   726 00002B87 75F1                <1>     jnz .drflg2
   727                              <1> 
   728                              <1> .dregexit:
   729 00002B89 C3                  <1>     ret
   730                              <1> .dsegregwrite:
   731 00002B8A 4831C9              <1>     xor rcx, rcx
   732 00002B8D 6689C2              <1>     mov dx, ax    ;save
   733                              <1> .dsegreg1:    ;Print register name
   734 00002B90 8A840D[E82B0000]    <1>     mov al, byte [.regtbl+rbp+rcx]
   735                              <1>     ;xor bh, bh
   736 00002B97 B40E                <1>     mov ah, 0Eh
   737 00002B99 CD30                <1>     int 30h
   738 00002B9B 48FFC1              <1>     inc rcx
   739 00002B9E 4881F903000000      <1>     cmp rcx, 3
   740 00002BA5 75E9                <1>     jnz .dsegreg1
   741                              <1> 
   742 00002BA7 88F0                <1>     mov al, dh
   743 00002BA9 B404                <1>     mov ah, 04h
   744 00002BAB CD30                <1>     int 30h
   745 00002BAD 88D0                <1>     mov al, dl
   746 00002BAF B404                <1>     mov ah, 04h
   747 00002BB1 CD30                <1>     int 30h
   748                              <1> 
   749 00002BB3 4801CD              <1>     add rbp, rcx
   750 00002BB6 B403                <1>     mov ah, 3
   751 00002BB8 CD30                <1>     int 30h
   752 00002BBA 80C202              <1>     add dl, 2
   753 00002BBD B402                <1>     mov ah, 2
   754 00002BBF CD30                <1>     int 30h
   755 00002BC1 C3                  <1>     ret
   756                              <1> 
   757                              <1> .regcrlf:
   758 00002BC2 4831FF              <1>     xor rdi, rdi
   759 00002BC5 55                  <1>     push rbp
   760 00002BC6 50                  <1>     push rax
   761 00002BC7 53                  <1>     push rbx
   762 00002BC8 48BD-               <1>     mov rbp, .crlf
   762 00002BCA [B031000000000000]  <1>
   763 00002BD2 48B804130000000000- <1>     mov rax, 1304h
   763 00002BDB 00                  <1>
   764 00002BDC 30FF                <1>     xor bh, bh
   765 00002BDE CD30                <1>     int 30h
   766 00002BE0 5B                  <1>     pop rbx
   767 00002BE1 58                  <1>     pop rax
   768 00002BE2 5D                  <1>     pop rbp
   769 00002BE3 E91FFEFFFF          <1>     jmp .dreg11
   770                              <1> 
   771 00002BE8 5241583D5242583D52- <1> .regtbl  db "RAX=", "RBX=", "RCX=", "RDX=", "RSI=", "RDI=", "R8 =",
   771 00002BF1 43583D5244583D5253- <1>
   771 00002BFA 493D5244493D523820- <1>
   771 00002C03 3D                  <1>
   772 00002C04 5239203D5231303D52- <1>          db "R9 =", "R10=", "R11=", "R12=", "R13=", "R14=", "R15=",
   772 00002C0D 31313D5231323D5231- <1>
   772 00002C16 333D5231343D523135- <1>
   772 00002C1F 3D                  <1>
   773 00002C20 5242503D5253503D52- <1>          db "RBP=", "RSP=", "RIP=","CS=", "DS=", "ES=", "SS=", "FS=", 
   773 00002C29 49503D43533D44533D- <1>
   773 00002C32 45533D53533D46533D  <1>
   774 00002C3B 47533D              <1>          db "GS="
   775 00002C3E 52464C4147533D      <1> .rflgs   db "RFLAGS="
   776 00002C45 20205B5249505D3D00  <1> .ipstrg: db "  [RIP]=",0
   777                              <1> .dumpMemory:
   778 00002C4E 50                  <1>     push rax
   779 00002C4F 53                  <1>     push rbx
   780 00002C50 51                  <1>     push rcx
   781 00002C51 52                  <1>     push rdx
   782 00002C52 57                  <1>     push rdi
   783 00002C53 56                  <1>     push rsi
   784 00002C54 55                  <1>     push rbp
   785 00002C55 4150                <1>     push r8
   786 00002C57 4151                <1>     push r9
   787                              <1> 
   788 00002C59 66B80413            <1>     mov ax, 1304h
   789 00002C5D 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
   789 00002C5F [AE31000000000000]  <1>
   790 00002C67 CD30                <1>     int 30h
   791 00002C69 66B80204            <1>     mov ax, 0402h    ;Get 2 dwords
   792 00002C6D E86C040000          <1>     call .keyb
   793 00002C72 4885ED              <1>     test rbp, rbp
   794 00002C75 0F8442010000        <1>     jz .dmnoargs
   795 00002C7B B002                <1>     mov al, 2    ;Number of user inputs to convert
   796 00002C7D E8FC030000          <1>     call .arg
   797 00002C82 FEC8                <1>     dec al
   798 00002C84 0F843D010000        <1>     jz .dmnoargs1
   799 00002C8A FEC8                <1>     dec al    ;More than 2 args, error
   800 00002C8C 0F850E010000        <1>     jnz .dmbadexit
   801 00002C92 4C8B4508            <1>     mov r8, qword [rbp + 8]    ;First argument, #Base
   802 00002C96 4C8B4D00            <1>     mov r9, qword [rbp]    ;Second argument, #Number of bytes
   803                              <1> .dmmain00:
   804 00002C9A 4D85C9              <1>     test r9, r9
   805 00002C9D 0F84FD000000        <1>     jz .dmbadexit
   806 00002CA3 66B80413            <1>     mov ax, 1304h
   807 00002CA7 48BD-               <1>     mov rbp, .crlf
   807 00002CA9 [B031000000000000]  <1>
   808 00002CB1 CD30                <1>     int 30h
   809 00002CB3 4C89C2              <1>     mov rdx, r8
   810 00002CB6 E85C010000          <1>     call .dmcsaddrprint
   811 00002CBB 30FF                <1>     xor bh, bh
   812 00002CBD B403                <1>     mov ah, 03h
   813 00002CBF CD30                <1>     int 30h
   814 00002CC1 B219                <1>     mov dl, 25
   815 00002CC3 B402                <1>     mov ah, 02h
   816 00002CC5 CD30                <1>     int 30h
   817 00002CC7 4C89C6              <1>     mov rsi, r8    ;point rsi at r8
   818 00002CCA 48F7C608000000      <1>     test rsi, 08h    ;If it starts between a qword and para
   819                              <1> 
   820 00002CD1 48F7C60F000000      <1>     test rsi, 0Fh
   821 00002CD8 7430                <1>     jz .dmmain0    ;If it starts on paragraph bndry, continue as normal
   822 00002CDA 56                  <1>     push rsi
   823 00002CDB 4881E60F000000      <1>     and rsi, 0Fh
   824 00002CE2 4881FE08000000      <1>     cmp rsi, 8
   825 00002CE9 720F                <1>     jb .dmmain01
   826 00002CEB 48B901000000000000- <1>     mov rcx, 1
   826 00002CF4 00                  <1>
   827 00002CF5 E8F9000000          <1>     call .dmal1    ;Print one space
   828                              <1> .dmmain01:
   829 00002CFA 5E                  <1>     pop rsi
   830 00002CFB 48B801000000000000- <1>     mov rax, 1
   830 00002D04 00                  <1>
   831 00002D05 E8D0000000          <1>     call .dmalign
   832                              <1> 
   833                              <1> .dmmain0:
   834 00002D0A 4889F7              <1>     mov rdi, rsi    ;Save start point at rdi
   835 00002D0D 4151                <1>     push r9
   836                              <1> .dmmain1:    ;This loop prints a line
   837 00002D0F AC                  <1>     lodsb
   838 00002D10 B404                <1>     mov ah, 4h
   839 00002D12 CD30                <1>     int 30h
   840 00002D14 49FFC9              <1>     dec r9
   841 00002D17 7416                <1>     jz .dmmain2
   842 00002D19 48F7C608000000      <1>     test rsi, 08h    ;This is zero iff rsi has bit 4 set
   843 00002D20 0F85D9000000        <1>     jnz .dmhyphen1
   844 00002D26 48F7C60F000000      <1>     test rsi, 0Fh    ;This is zero iff lower nybble is zero
   845 00002D2D 75E0                <1>     jnz .dmmain1
   846                              <1> .dmmain2:
   847                              <1> ;Now the numbers have been printed, get the ascii row too
   848                              <1> ;First check if numbers have stopped short of 16
   849 00002D2F 4D85C9              <1>     test r9, r9
   850 00002D32 7500                <1>     jnz .dmmain21    ;end of row
   851                              <1> 
   852                              <1> .dmmain21:
   853 00002D34 4159                <1>     pop r9
   854 00002D36 30FF                <1>     xor bh, bh
   855 00002D38 B403                <1>     mov ah, 03h
   856 00002D3A CD30                <1>     int 30h
   857 00002D3C B23E                <1>     mov dl, 62
   858 00002D3E B402                <1>     mov ah, 02h
   859 00002D40 CD30                <1>     int 30h
   860 00002D42 4889FE              <1>     mov rsi, rdi    ;Reload value
   861 00002D45 48F7C60F000000      <1>     test rsi, 0Fh
   862 00002D4C 7408                <1>     jz .dmmain3    ;If it starts on paragraph bndry, continue as normal
   863 00002D4E 4831C0              <1>     xor rax, rax    ;no shift
   864 00002D51 E884000000          <1>     call .dmalign
   865                              <1> 
   866                              <1> .dmmain3:
   867 00002D56 AC                  <1>     lodsb
   868 00002D57 49FFC9              <1>     dec r9
   869 00002D5A 3C30                <1>     cmp al, 30h
   870 00002D5C 660F420425-         <1>     cmovb ax, word [.dmdot]    ;bring the dot to ax
   870 00002D61 [3E2E0000]          <1>
   871 00002D65 B40E                <1>     mov ah, 0Eh
   872 00002D67 CD30                <1>     int 30h
   873 00002D69 4D85C9              <1>     test r9, r9
   874 00002D6C 7443                <1>     jz .dmexit
   875 00002D6E 48F7C60F000000      <1>     test rsi, 0Fh    ;Check if lower nybble is 0
   876 00002D75 75DF                <1>     jnz .dmmain3
   877                              <1> 
   878 00002D77 48BD-               <1>     mov rbp, .crlf
   878 00002D79 [B031000000000000]  <1>
   879 00002D81 66B80413            <1>     mov ax, 1304h
   880 00002D85 CD30                <1>     int 30h
   881                              <1> 
   882 00002D87 4889F2              <1>     mov rdx, rsi
   883 00002D8A E888000000          <1>     call .dmcsaddrprint
   884                              <1> 
   885 00002D8F B403                <1>     mov ah, 03h
   886 00002D91 30FF                <1>     xor bh, bh
   887 00002D93 CD30                <1>     int 30h
   888 00002D95 B219                <1>     mov dl, 25
   889 00002D97 B402                <1>     mov ah, 02h
   890 00002D99 CD30                <1>     int 30h
   891 00002D9B E96AFFFFFF          <1>     jmp .dmmain0
   892                              <1> 
   893                              <1> .dmbadexit:
   894 00002DA0 48BD-               <1>     mov rbp, .dmbadargs
   894 00002DA2 [402E000000000000]  <1>
   895 00002DAA 66B80413            <1>     mov ax, 1304h
   896 00002DAE CD30                <1>     int 30h
   897 00002DB0 C3                  <1>     ret;Reload program, error!
   898                              <1> .dmexit:
   899 00002DB1 4159                <1>     pop r9
   900 00002DB3 4158                <1>     pop r8
   901 00002DB5 5D                  <1>     pop rbp
   902 00002DB6 5E                  <1>     pop rsi
   903 00002DB7 5F                  <1>     pop rdi
   904 00002DB8 5A                  <1>     pop rdx
   905 00002DB9 59                  <1>     pop rcx
   906 00002DBA 5B                  <1>     pop rbx
   907 00002DBB 58                  <1>     pop rax
   908 00002DBC C3                  <1>     ret
   909                              <1> .dmnoargs:
   910 00002DBD 4C8B0425[F4010000]  <1>     mov r8, qword [mcpUserRip]
   911                              <1>     ;add r8, 180h    ;Add 180 bytes, to bypass internal work areas
   912 00002DC5 EB04                <1>     jmp short .dmnoargscommon
   913                              <1> .dmnoargs1:
   914 00002DC7 4C8B4500            <1>     mov r8, qword [rbp]
   915                              <1> .dmnoargscommon:
   916 00002DCB 49B980000000000000- <1>     mov r9, 80h
   916 00002DD4 00                  <1>
   917 00002DD5 E9C0FEFFFF          <1>     jmp .dmmain00
   918                              <1> 
   919                              <1> .dmalign:    ;Print blank chars for offset
   920                              <1> ;Works out from rsi
   921                              <1> ;rax contains value for shl
   922 00002DDA 56                  <1>     push rsi
   923 00002DDB 4889F1              <1>     mov rcx, rsi
   924 00002DDE 4881E1F0FFFFFF      <1>     and rcx, 0FFFFFFFFFFFFFFF0h    ;Round down
   925 00002DE5 4829CE              <1>     sub rsi, rcx
   926 00002DE8 4887CE              <1>     xchg rcx, rsi
   927 00002DEB 5E                  <1>     pop rsi
   928 00002DEC 4891                <1>     xchg rcx, rax
   929 00002DEE 48D3E0              <1>     shl rax, cl
   930 00002DF1 4891                <1>     xchg rcx, rax
   931                              <1> .dmal1:
   932 00002DF3 66B8200E            <1>     mov ax, 0E20h
   933 00002DF7 CD30                <1>     int 30h
   934 00002DF9 48FFC9              <1>     dec rcx
   935 00002DFC 75F5                <1>     jnz .dmal1
   936 00002DFE C3                  <1>     ret
   937                              <1> 
   938                              <1> .dmhyphen1:
   939 00002DFF 48F7C607000000      <1>     test rsi, 07h    ;If the rest of the bits are set, go away
   940 00002E06 0F8503FFFFFF        <1>     jnz .dmmain1
   941 00002E0C 66B82D0E            <1>     mov ax, 0E2Dh    ;2dh="-"
   942 00002E10 CD30                <1>     int 30h
   943 00002E12 E9F8FEFFFF          <1>     jmp .dmmain1
   944                              <1> .dmcsaddrprint:
   945 00002E17 668CC8              <1>     mov ax, cs    ;Get current code segment into ax
   946 00002E1A 88E0                <1>     mov al, ah
   947 00002E1C B404                <1>     mov ah, 04h    ;print upper byte
   948 00002E1E CD30                <1>     int 30h
   949 00002E20 668CC8              <1>     mov ax, cs
   950 00002E23 B404                <1>     mov ah, 04h
   951 00002E25 CD30                <1>     int 30h        ;print lower byte
   952 00002E27 66B83A0E            <1>     mov ax, 0E3Ah
   953                              <1> 
   954 00002E2B B108                <1>     mov cl, 8
   955 00002E2D CD30                <1>     int 30h
   956                              <1> 
   957                              <1> .dmrollprint:
   958                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   959                              <1> ;repeats, cl times.
   960 00002E2F 48C1C208            <1>     rol rdx, 8
   961 00002E33 88D0                <1>     mov al, dl
   962 00002E35 B404                <1>     mov ah, 04h
   963 00002E37 CD30                <1>     int 30h
   964 00002E39 FEC9                <1>     dec cl
   965 00002E3B 75F2                <1>     jnz .dmrollprint
   966 00002E3D C3                  <1>     ret
   967 00002E3E 2E00                <1> .dmdot:    db    ".",0
   968 00002E40 0A0D53796E74617820- <1> .dmbadargs:    db 0Ah, 0Dh,"Syntax error",0
   968 00002E49 6572726F7200        <1>
   969                              <1> 
   970                              <1> .editMemory:
   971 00002E4F 66B80413            <1>     mov ax, 1304h
   972 00002E53 30FF                <1>     xor bh, bh
   973 00002E55 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
   973 00002E57 [AE31000000000000]  <1>
   974 00002E5F CD30                <1>     int 30h
   975                              <1> 
   976 00002E61 66B80104            <1>     mov ax, 0401h    ;Get up to one qword
   977 00002E65 E874020000          <1>     call .keyb
   978 00002E6A 4885ED              <1>     test rbp, rbp        ;No chars entered?
   979 00002E6D 0F8445F6FFFF        <1>     jz .bad_command
   980 00002E73 E806020000          <1>     call .arg
   981 00002E78 488B7D00            <1>     mov rdi, qword [rbp]    ;First arg, Dword Address 
   982                              <1> 
   983 00002E7C 48BD-               <1>     mov rbp, .crlf
   983 00002E7E [B031000000000000]  <1>
   984 00002E86 30FF                <1>     xor bh, bh
   985 00002E88 48B804130000000000- <1>     mov rax, 1304h
   985 00002E91 00                  <1>
   986 00002E92 CD30                <1>     int 30h
   987                              <1>     
   988 00002E94 4889FE              <1>     mov rsi, rdi
   989 00002E97 AC                  <1>     lodsb    ;Get byte into al
   990 00002E98 B404                <1>     mov ah, 04
   991 00002E9A CD30                <1>     int 30h
   992 00002E9C B02E                <1>     mov al, "."
   993 00002E9E E8DC020000          <1>     call .print
   994 00002EA3 66B80101            <1>     mov ax, 0101h    ;Get 1 byte
   995 00002EA7 E832020000          <1>     call .keyb
   996 00002EAC 4885ED              <1>     test rbp, rbp        ;No chars entered?
   997 00002EAF 0F84EBFEFFFF        <1>     jz .dmbadexit
   998 00002EB5 E8C4010000          <1>     call .arg
   999 00002EBA 4889EE              <1>     mov rsi, rbp    ;Point rsi to the stack
  1000 00002EBD A4                  <1>     movsb            ;Move byte from rsi to rdi
  1001                              <1> 
  1002 00002EBE C3                  <1>     ret
  1003                              <1> 
  1004                              <1> .jumpProc:
  1005 00002EBF 66B80413            <1>     mov ax, 1304h
  1006 00002EC3 30FF                <1>     xor bh, bh
  1007 00002EC5 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
  1007 00002EC7 [AE31000000000000]  <1>
  1008 00002ECF CD30                <1>     int 30h
  1009 00002ED1 66B80104            <1>     mov ax, 0401h    ;Get 1 dword (forbit going too high eh?)
  1010 00002ED5 E804020000          <1>     call .keyb
  1011 00002EDA 4885ED              <1>     test rbp, rbp        ;No chars entered?
  1012 00002EDD 743B                <1>     jz .proceedDefault
  1013 00002EDF E89A010000          <1>     call .arg
  1014 00002EE4 FEC8                <1>     dec al
  1015 00002EE6 0F85B4FEFFFF        <1>     jnz .dmbadexit
  1016 00002EEC 488B6D00            <1>     mov rbp, qword [rbp]    ;First argument, Address of procedure
  1017 00002EF0 48892C25[F4010000]  <1>     mov qword [mcpUserRip], rbp   ;Move first argument into new Rip  
  1018 00002EF8 E81B010000          <1>     call .loadMainRegisters
  1019 00002EFD 488B6008            <1>     mov rsp, qword [rax + 08h]
  1020 00002F01 488B0425[04020000]  <1>     mov rax, qword [mcpUserRaxStore]
  1021 00002F09 48CF                <1>     iretq
  1022                              <1> .singleStep:
  1023                              <1> ;When s is pressed, the program proceeds by a single step.
  1024                              <1> ;Sets trap flag on
  1025 00002F0B 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
  1026 00002F13 48810800010000      <1>     or qword [rax + 00h], 100h  ;Set trap flag on
  1027                              <1> .proceedDefault:
  1028 00002F1A E8F9000000          <1>     call .loadMainRegisters
  1029 00002F1F 488B6008            <1>     mov rsp, qword [rax + 08h]
  1030 00002F23 488B0425[04020000]  <1>     mov rax, qword [mcpUserRaxStore]
  1031 00002F2B 48CF                <1>     iretq
  1032                              <1> 
  1033                              <1> .storageRead:
  1034 00002F2D 50                  <1>     push rax
  1035 00002F2E B800820000          <1>     mov eax, 8200h ;LBA Read function
  1036 00002F33 EB06                <1>     jmp short .storageCommon
  1037                              <1> .storageWrite:
  1038 00002F35 50                  <1>     push rax
  1039 00002F36 B800830000          <1>     mov eax, 8300h ;LBA Write function
  1040                              <1> .storageCommon:
  1041                              <1> ;l/w [Address Buffer] [Drive] [Sector] [Count]
  1042 00002F3B 53                  <1>     push rbx
  1043 00002F3C 51                  <1>     push rcx
  1044 00002F3D 52                  <1>     push rdx
  1045 00002F3E 56                  <1>     push rsi
  1046 00002F3F 57                  <1>     push rdi
  1047 00002F40 55                  <1>     push rbp
  1048                              <1> 
  1049 00002F41 89C6                <1>     mov esi, eax        ;Save LBA r/w function number in esi
  1050 00002F43 66B80413            <1>     mov ax, 1304h
  1051 00002F47 48BD-               <1>     mov rbp, .prompt2    ;Give the user the prompt
  1051 00002F49 [AE31000000000000]  <1>
  1052 00002F51 CD30                <1>     int 30h
  1053                              <1> 
  1054 00002F53 66B80404            <1>     mov ax, 0404h    ;Get 4 qwords
  1055 00002F57 E882010000          <1>     call .keyb
  1056 00002F5C 4885ED              <1>     test rbp, rbp
  1057 00002F5F 7452                <1>     jz .storageError
  1058 00002F61 B004                <1>     mov al, 4    ;Number of user inputs to convert
  1059 00002F63 E816010000          <1>     call .arg
  1060 00002F68 3C04                <1>     cmp al, 4   ;If not 4 arguments, fail
  1061 00002F6A 7547                <1>     jne .storageError
  1062 00002F6C BF05000000          <1>     mov edi, 5
  1063                              <1> .sc0:
  1064 00002F71 89F0                <1>     mov eax, esi                ;Get back LBA r/w function number into eax
  1065 00002F73 488B5D18            <1>     mov rbx, qword [rbp + 24]   ;First argument, Address buffer
  1066 00002F77 488B5510            <1>     mov rdx, qword [rbp + 16]   ;dl ONLY, Second argument
  1067 00002F7B 4881E2FF000000      <1>     and rdx, 0FFh
  1068 00002F82 488B4D08            <1>     mov rcx, qword [rbp + 08]   ;LBA starting sector, third argument
  1069 00002F86 488B7500            <1>     mov rsi, qword [rbp]        ;Sector count into rsi
  1070 00002F8A 4881E6FF000000      <1>     and rsi, 0FFh               ;Sector count can be at most 255
  1071 00002F91 09F0                <1>     or eax, esi                 ;Add the sector count to eax
  1072 00002F93 89C6                <1>     mov esi, eax                ;Copy the function number into esi for failures
  1073 00002F95 81E600FF0000        <1>     and esi, 0FF00h             ;Save only byte two of esi, the function number
  1074 00002F9B CD33                <1>     int 33h
  1075 00002F9D 7308                <1>     jnc .storageExit
  1076                              <1> 
  1077 00002F9F 31C0                <1>     xor eax, eax
  1078 00002FA1 CD33                <1>     int 33h
  1079 00002FA3 FFCF                <1>     dec edi
  1080 00002FA5 75CA                <1>     jnz .sc0
  1081                              <1> .storageExit:
  1082 00002FA7 5D                  <1>     pop rbp
  1083 00002FA8 5F                  <1>     pop rdi
  1084 00002FA9 5E                  <1>     pop rsi
  1085 00002FAA 5A                  <1>     pop rdx
  1086 00002FAB 59                  <1>     pop rcx
  1087 00002FAC 5B                  <1>     pop rbx
  1088 00002FAD 58                  <1>     pop rax   
  1089 00002FAE E912F4FFFF          <1>     jmp MCP_int.z11
  1090                              <1> .storageError: 
  1091 00002FB3 5D                  <1>     pop rbp
  1092 00002FB4 5F                  <1>     pop rdi
  1093 00002FB5 5E                  <1>     pop rsi
  1094 00002FB6 5A                  <1>     pop rdx
  1095 00002FB7 59                  <1>     pop rcx
  1096 00002FB8 5B                  <1>     pop rbx
  1097 00002FB9 58                  <1>     pop rax
  1098 00002FBA E9F9F4FFFF          <1>     jmp .bad_command
  1099                              <1> .restartMcp:
  1100 00002FBF CD40                <1>     int 40h     ;To allow returning to DOS
  1101                              <1> .clearscreen:
  1102 00002FC1 B307                <1>     mov bl, 07h
  1103 00002FC3 E82FD1FFFF          <1>     call cls
  1104 00002FC8 E9F8F3FFFF          <1>     jmp MCP_int.z11
  1105                              <1> .storeMainRegisters:
  1106 00002FCD 9C                  <1>     pushfq
  1107 00002FCE 8F00                <1>     pop qword [rax + 00h]      ;Flags
  1108                              <1>     ;mov qword [rax + 08h], rsp
  1109 00002FD0 48896810            <1>     mov qword [rax + 10h], rbp
  1110 00002FD4 4C897818            <1>     mov qword [rax + 18h], r15
  1111 00002FD8 4C897020            <1>     mov qword [rax + 20h], r14
  1112 00002FDC 4C896828            <1>     mov qword [rax + 28h], r13
  1113 00002FE0 4C896030            <1>     mov qword [rax + 30h], r12
  1114 00002FE4 4C895838            <1>     mov qword [rax + 38h], r11
  1115 00002FE8 4C895040            <1>     mov qword [rax + 40h], r10
  1116 00002FEC 4C894848            <1>     mov qword [rax + 48h], r9
  1117 00002FF0 4C894050            <1>     mov qword [rax + 50h], r8
  1118 00002FF4 48897858            <1>     mov qword [rax + 58h], rdi
  1119 00002FF8 48897060            <1>     mov qword [rax + 60h], rsi
  1120 00002FFC 48895068            <1>     mov qword [rax + 68h], rdx
  1121 00003000 48894870            <1>     mov qword [rax + 70h], rcx
  1122 00003004 48895878            <1>     mov qword [rax + 78h], rbx
  1123 00003008 488B1C25[04020000]  <1>     mov rbx, qword [mcpUserRaxStore]
  1124 00003010 48899880000000      <1>     mov qword [rax + 80h], rbx  ;Store rax
  1125 00003017 C3                  <1>     ret
  1126                              <1> .loadMainRegisters:
  1127 00003018 488B0425[EC010000]  <1>     mov rax, qword [mcpUserBase]
  1128 00003020 488B5008            <1>     mov rdx, qword [rax + 08h]  ;Get old stack pointer into rdx
  1129 00003024 488B1C25[F4010000]  <1>     mov rbx, qword [mcpUserRip]
  1130 0000302C 48891A              <1>     mov qword [rdx], rbx    ;Move the userRip into rdx
  1131 0000302F 488B18              <1>     mov rbx, qword [rax + 00h]
  1132 00003032 48895A10            <1>     mov qword [rdx + 10h], rbx  ;Move new flags into position on stack
  1133 00003036 488B9880000000      <1>     mov rbx, qword [rax + 80h]  ;Get rax
  1134 0000303D 48891C25[04020000]  <1>     mov qword [mcpUserRaxStore], rbx
  1135 00003045 488B5878            <1>     mov rbx, qword [rax + 78h]
  1136 00003049 488B4870            <1>     mov rcx, qword [rax + 70h]
  1137 0000304D 488B5068            <1>     mov rdx, qword [rax + 68h]
  1138 00003051 488B7060            <1>     mov rsi, qword [rax + 60h]
  1139 00003055 488B7858            <1>     mov rdi, qword [rax + 58h]
  1140 00003059 4C8B4050            <1>     mov r8,  qword [rax + 50h]
  1141 0000305D 4C8B4848            <1>     mov r9,  qword [rax + 48h]
  1142 00003061 4C8B5040            <1>     mov r10, qword [rax + 40h]
  1143 00003065 4C8B5838            <1>     mov r11, qword [rax + 38h]
  1144 00003069 4C8B6030            <1>     mov r12, qword [rax + 30h]
  1145 0000306D 4C8B6828            <1>     mov r13, qword [rax + 28h]
  1146 00003071 4C8B7020            <1>     mov r14, qword [rax + 20h]
  1147 00003075 4C8B7818            <1>     mov r15, qword [rax + 18h]
  1148 00003079 488B6810            <1>     mov rbp, qword [rax + 10h]
  1149 0000307D C3                  <1>     ret
  1150                              <1> ;ARG    PROC    NEAR
  1151                              <1> .arg:
  1152                              <1> ;Number of arguments expected in buffer in al (could early terminate due to 
  1153                              <1> ; enter)
  1154                              <1> ;Converted qwords stored on stack with al indicating how many processed
  1155                              <1> ;rbp returns the base of the stack of stored arguments
  1156                              <1> ;rdx is our scratch register
  1157 0000307E 53                  <1>     push rbx
  1158 0000307F 51                  <1>     push rcx
  1159 00003080 52                  <1>     push rdx
  1160 00003081 56                  <1>     push rsi
  1161 00003082 4889E5              <1>     mov rbp, rsp    ;Preserve stack pointer
  1162 00003085 488B3425[FC010000]  <1>     mov rsi, qword [mcpUserkeybf]
  1163 0000308D 30C9                <1>     xor cl, cl        ;Keep track of how many arguments processed
  1164                              <1> .a01:
  1165 0000308F 4831D2              <1>     xor rdx, rdx    ;Clean rdx
  1166                              <1> .a1:
  1167 00003092 AC                  <1>     lodsb        ;Get the first byte into al
  1168 00003093 3C11                <1>     cmp al, 11h    ;Offset 11h is the space key
  1169 00003095 740E                <1>     jz .a2
  1170 00003097 3C12                <1>     cmp al, 12h    ;Offset 12h is the enter key
  1171 00003099 740F                <1>     jz .aexit        ;Anyway, enter is exit!
  1172 0000309B 48C1E204            <1>     shl rdx, 4    ;Go to next sig fig
  1173 0000309F 08C2                <1>     or dl, al    ;Put this byte into dl
  1174 000030A1 7013                <1>     jo .error
  1175 000030A3 EBED                <1>     jmp short .a1
  1176                              <1> .a2:
  1177 000030A5 52                  <1>     push rdx    ;Store argument on stack
  1178 000030A6 FEC1                <1>     inc cl        ;One more argument processed
  1179 000030A8 EBE5                <1>     jmp short .a01
  1180                              <1> .aexit:
  1181 000030AA 480FB6C1            <1>     movzx rax, cl    ;Return #of args processed
  1182 000030AE 4887E5              <1>     xchg rsp, rbp    ;rbp points to bottom of argument stack 
  1183 000030B1 5E                  <1>     pop rsi
  1184 000030B2 5A                  <1>     pop rdx
  1185 000030B3 59                  <1>     pop rcx
  1186 000030B4 5B                  <1>     pop rbx
  1187 000030B5 C3                  <1>     ret
  1188                              <1> .error:
  1189 000030B6 48BD-               <1>     mov rbp, .emsg
  1189 000030B8 [CD30000000000000]  <1>
  1190 000030C0 30FF                <1>     xor bh, bh
  1191 000030C2 66B80413            <1>     mov ax, 1304h
  1192 000030C6 CD30                <1>     int 30h
  1193 000030C8 5E                  <1>     pop rsi
  1194 000030C9 5A                  <1>     pop rdx
  1195 000030CA 59                  <1>     pop rcx
  1196 000030CB 5B                  <1>     pop rbx
  1197 000030CC C3                  <1>     ret
  1198 000030CD 0A0D417267756D656E- <1> .emsg:    db 0Ah, 0Dh,"Argument error",0
  1198 000030D6 74206572726F7200    <1>
  1199                              <1> ;ARG    ENDP
  1200                              <1> 
  1201                              <1> ;KEYB     PROC     NEAR
  1202                              <1> .keyb:
  1203                              <1> ;Number of arguments to accept is passed in al, in units of ah
  1204                              <1> ;ah=4 => Qwords, ah=3 => dwords... ah=2 => word, ah=1 => bytes
  1205                              <1> ;Arguments are stored in buffer, after USB area, of size 2*al qwords
  1206                              <1> ;All arguments CAN be up to qword in size, though not all subprogs,
  1207                              <1> ;    may use the full qword.
  1208                              <1> ;ch returns number of chars not processed
  1209 000030DE 50                  <1>     push rax
  1210 000030DF 53                  <1>     push rbx
  1211                              <1>     ;push rcx
  1212 000030E0 57                  <1>     push rdi
  1213 000030E1 52                  <1>     push rdx
  1214                              <1> 
  1215 000030E2 4831C9              <1>     xor rcx, rcx
  1216 000030E5 88C1                <1>     mov cl, al
  1217 000030E7 51                  <1>     push rcx
  1218 000030E8 88E1                <1>     mov cl, ah
  1219 000030EA D2E0                <1>     shl al, cl  ;Multiply by 16 to get the number of bytes needed w/o spaces
  1220 000030EC 59                  <1>     pop rcx
  1221 000030ED 00C8                <1>     add al, cl  ;Add space for spaces
  1222 000030EF FEC8                <1>     dec al      ;We reserve one space for a "non-user accessible" EOL at the end
  1223                              <1> 
  1224 000030F1 488B3C25[FC010000]  <1>     mov rdi, qword [mcpUserkeybf]    ;Data area in command tail
  1225 000030F9 50                  <1>     push rax
  1226 000030FA 48B810000000000000- <1>     mov rax, 10h
  1226 00003103 00                  <1>
  1227 00003104 57                  <1>     push rdi
  1228 00003105 F348AB              <1>     rep stosq    ;Clear buffer space for al qwords (max 8)
  1229 00003108 5F                  <1>     pop rdi
  1230 00003109 58                  <1>     pop rax
  1231                              <1> 
  1232 0000310A 88C5                <1>     mov ch, al    ;Rememebr 1 Qword is 16 ASCII chars
  1233 0000310C 88C2                <1>     mov dl, al    ;Let dl save this number
  1234 0000310E 4831ED              <1>     xor rbp, rbp    ;Cheap cop out char counter
  1235                              <1> 
  1236                              <1> .k1:
  1237 00003111 6631C0              <1>     xor ax, ax
  1238 00003114 CD36                <1>     int 36h
  1239 00003116 3C71                <1>     cmp al, "q"    ;Quit option
  1240 00003118 0F84A7F2FFFF        <1>     je .z11
  1241 0000311E 3C08                <1>     cmp al, 08h    ;Backspace
  1242 00003120 7447                <1>     je .kb2
  1243 00003122 3C0D                <1>     cmp al, 0Dh    ;Enter key pressed, we done
  1244 00003124 7438                <1>     je .kend
  1245                              <1> 
  1246 00003126 84ED                <1>     test ch, ch    ;Have we filled a 16 char buffer?
  1247 00003128 74E7                <1>     jz .k1        ;Yes, await control key
  1248                              <1> 
  1249 0000312A 4889FB              <1>     mov rbx, rdi    ;Save current offset into bbuffer
  1250 0000312D 51                  <1>     push rcx
  1251 0000312E 48BF-               <1>     mov rdi, .ascii
  1251 00003130 [8431000000000000]  <1>
  1252 00003138 48B913000000000000- <1>     mov rcx, .asciil
  1252 00003141 00                  <1>
  1253 00003142 F2AE                <1>     repne scasb        ;Find the offset of the char in al in the table
  1254 00003144 59                  <1>     pop rcx            ;Doesnt affect flags
  1255 00003145 4887FB              <1>     xchg rdi, rbx    ;Return value back to rdi 
  1256 00003148 75C7                <1>     jne .k1            ;Not a key from our buffer, loop again
  1257 0000314A 48FFC5              <1>     inc rbp
  1258 0000314D E82D000000          <1>     call .print        ;Print typed char
  1259                              <1> 
  1260 00003152 488D83(7BCEFFFF)    <1>     lea rax, qword [rbx - .ascii -1]    ;Work out difference
  1261                              <1> 
  1262 00003159 AA                  <1>     stosb            ;Store the value in storage buffer, inc rdi
  1263 0000315A FECD                <1>     dec ch            ;Decrement the number of typable chars
  1264 0000315C EBB3                <1>     jmp short .k1    ;Get next char
  1265                              <1> .kend:
  1266 0000315E 66B81112            <1>     mov ax, 1211h    ;Store a space and EOF at the end (little endian!)
  1267 00003162 66AB                <1>     stosw
  1268                              <1> 
  1269 00003164 5A                  <1>     pop rdx
  1270 00003165 5F                  <1>     pop rdi
  1271                              <1>     ;pop rcx    ;Return in cl the number of processed chars
  1272 00003166 5B                  <1>     pop rbx
  1273 00003167 58                  <1>     pop rax
  1274                              <1> .kb1:        
  1275 00003168 C3                  <1>     ret
  1276                              <1> .kb2:
  1277                              <1> ;When a backspace is entered, DONT MOVE THIS PROC!
  1278 00003169 68[11310000]        <1>     push .k1
  1279 0000316E 38D5                <1>     cmp ch, dl    ;If bbuf is empty, ignore backspace 
  1280 00003170 74F6                <1>     jz .kb1
  1281 00003172 48FFCF              <1>     dec rdi        ;Decrement pointer and print the bspace char
  1282 00003175 FEC5                <1>     inc ch        ;Increment the number of typable chars
  1283 00003177 4885ED              <1>     test rbp, rbp
  1284 0000317A 7403                <1>     jz .print    ;Dont decrement if rbp is zero
  1285 0000317C 48FFCD              <1>     dec rbp
  1286                              <1> ;KEYB    ENDP
  1287                              <1> .print:    ;Print char in al
  1288 0000317F B40E                <1>     mov ah, 0Eh
  1289                              <1>     ;xor bh, bh
  1290 00003181 CD30                <1>     int 30h
  1291 00003183 C3                  <1>     ret
  1292 00003184 303132333435363738- <1> .ascii       db    "0123456789abcdef", 08h, 20h, 0Dh ;b/space, enter
  1292 0000318D 396162636465660820- <1>
  1292 00003196 0D                  <1>
  1293                              <1> .asciil       equ    $ - .ascii
  1294 00003197 64657367706C777163- <1> .lst       db    'desgplwqcrbhiovamkx';dump,edit,go,single step,read,write,quit,
  1294 000031A0 726268696F76616D6B- <1>
  1294 000031A9 78                  <1>
  1295                              <1> ;clearscreen,registers,deBug regs,hex,in,out,version,Single Step alt, memory map
  1296                              <1> ; (k)connect, dixonnect
  1297                              <1> .lstl    equ    $ - .lst
  1298 000031AA 0A0D2D00            <1> .prompt       db    0Ah, 0Dh, "-", 0    ;3Eh = >
  1299 000031AE 2000                <1> .prompt2    db 20h,0
  1300 000031B0 0A0D00              <1> .crlf       db    0Ah, 0Dh, 0
  1301                              <1> ;------------------------End of Interrupt------------------------
   101                                  %include "./Source/Resident/Services/Int39h.asm"
   102                              <1> ;-------------------Restart Interrupt Int 39h--------------------
   103                              <1> ;This interrupt allows the user to soft reboot
   104                              <1> ;----------------------------------------------------------------
   105                              <1> bootstrapInt:
   106                              <1> ;Bootstrap loader, loads user programmed sector into memory, first from
   107                              <1> ; device 00h and then from device 80h. If device 00h doesnt exist OR the 
   108                              <1> ; loadsector doesn't begin with the SCP/BIOS boot signature then the 
   109                              <1> ; same sector is read from of device 80h. If this also fails due to device 80h
   110                              <1> ; not existing or the sector not being bootable, the boot loader will return
   111                              <1> ; to the caller with the carry flag set.
   112                              <1> 
   113 000031B3 50                  <1>     push rax
   114 000031B4 53                  <1>     push rbx
   115 000031B5 51                  <1>     push rcx
   116 000031B6 52                  <1>     push rdx
   117 000031B7 56                  <1>     push rsi
   118                              <1> 
   119 000031B8 B9000100C0          <1>     mov ecx, 0C0000100h    ;Select fs register to load base addr
   120 000031BD 488B0425[CD010000]  <1>     mov rax, qword [userBase]    ;Load address to fs
   121 000031C5 31D2                <1>     xor edx, edx        ;Zero upper bytes
   122 000031C7 0F30                <1>     wrmsr                ;Write msr to load fs base
   123                              <1> 
   124 000031C9 BE0A000000          <1>     mov esi, 10
   125                              <1> ;Now load one sector of second prog from device 00h or 80h
   126 000031CE 803C25[4B020000]00  <1>     cmp byte [numMSD], 0    ;If we have no removable devices, skip checking rem dev
   127 000031D6 7447                <1>     jz .e3
   128 000031D8 6631D2              <1>     xor dx, dx  ;This also clears carry flag so no checking ah
   129                              <1> .e0:
   130 000031DB 48BB007C0000000000- <1>     mov rbx, 7c00h
   130 000031E4 00                  <1>
   131 000031E5 488B0C25[BF010000]  <1>     mov rcx, qword [nextFilePtr]
   132 000031ED 668B0425[C7010000]  <1>     mov ax, word [numSectors]   ;Max 42 sectors, upper byte is always 0
   133 000031F5 B482                <1>     mov ah, 82h ;LBA Sector Read, dl has device number
   134 000031F7 CD33                <1>     int 33h     ;Read one sector, device number is preserved
   135 000031F9 730A                <1>     jnc .e1
   136                              <1> 
   137 000031FB FFCE                <1>     dec esi
   138 000031FD 7412                <1>     jz .e2  ;Try again for fixed disk or if on fixed disk, exit
   139                              <1> 
   140 000031FF 30E4                <1>     xor ah, ah  ;Reset the device in dl
   141 00003201 CD33                <1>     int 33h
   142 00003203 EBD6                <1>     jmp short .e0
   143                              <1> .e1:
   144 00003205 66813C25007C000055- <1>     cmp word [7c00h], 0AA55h ;The Boot signature
   144 0000320E AA                  <1>
   145 0000320F 7418                <1>     je .leaveBIOS
   146                              <1> ;If we dont goto leaveBIOS, then we try again with device number 80h if it exists
   147                              <1> ;If already at device 80h, fail.
   148                              <1> .e2:
   149 00003211 80FA80              <1>     cmp dl, 80h
   150 00003214 742A                <1>     je .efail
   151 00003216 381425[AA010000]    <1>     cmp byte [fdiskNum], dl ;Recall, dl is zero here
   152 0000321D 7421                <1>     je .efail   ;Don't waste time if there are no fixed disks
   153                              <1> .e3:
   154 0000321F B280                <1>     mov dl, 80h ;Try first fixed disk now
   155 00003221 BE0A000000          <1>     mov esi, 10 ;Reload repeat count
   156 00003226 F8                  <1>     clc
   157 00003227 EBB2                <1>     jmp short .e0
   158                              <1> .leaveBIOS:
   159                              <1> ;State when system transferred:
   160                              <1> ; RSP = DFF8h, 1FFh qword stack from DFFFh to 7C00H + 42*200h sectors = D000h
   161                              <1> ; FS MSR = userbase pointer, can be used for segment override.
   162                              <1> ; DX = Int 33h boot device number
   163                              <1> ; RBX = LBA of first Logical Block after SCP/BIOS
   164                              <1> ; BDA and BIOS ready to go
   165 00003229 48BCF8DF0000000000- <1>     mov rsp, 0DFF8h ;Move Stack pointer to default init stack position
   165 00003232 00                  <1>
   166 00003233 488B1C25[BF010000]  <1>     mov rbx, qword [nextFilePtr]     ;First sector on device after SCP/BIOS
   167 0000323B E9(027C0000)        <1>     jmp 7C02h       ;New sector entry point
   168                              <1> .efail:
   169 00003240 5E                  <1>     pop rsi
   170 00003241 5A                  <1>     pop rdx
   171 00003242 59                  <1>     pop rcx
   172 00003243 5B                  <1>     pop rbx
   173 00003244 58                  <1>     pop rax
   174 00003245 804C241001          <1>     or byte [rsp + 2*8h], 1 ;Set carry flag
   175 0000324A 48CF                <1>     iretq
   176                              <1> ;------------------------End of Interrupt------------------------
   102                                  %include "./Source/Resident/Services/Int3Ah.asm"
   103                              <1> ;-----------------System Timer Interrupt Int 3Ah-----------------
   104                              <1> ;System Timer functions:
   105                              <1> ; ah=0 -> Get tick count
   106                              <1> ; ah=1 -> Set tick count
   107                              <1> ; ah=2 -> Read RTC time
   108                              <1> ; ah=3 -> Set RTC time
   109                              <1> ; ah=4 -> Read RTC date
   110                              <1> ; ah=5 -> Set RTC date
   111                              <1> ; ah=6 -> Set RTC alarm
   112                              <1> ; ah=7 -> Reset RTC alarm
   113                              <1> ; ah=80h -> Get PIT divisor
   114                              <1> ; ah=81h -> Set PIT divisor
   115                              <1> ;----------------------------------------------------------------
   116                              <1> timerInt:
   117 0000324C 80FC80              <1>     cmp ah, 80h
   118 0000324F 737B                <1>     jae .tiext
   119 00003251 84E4                <1>     test ah, ah
   120 00003253 7444                <1>     jz .gett
   121 00003255 80FC01              <1>     cmp ah, 1
   122 00003258 745E                <1>     jz .sett
   123 0000325A 80FC02              <1>     cmp ah, 2
   124 0000325D 0F8497000000        <1>     jz .readRTCtime
   125 00003263 80FC03              <1>     cmp ah, 3
   126 00003266 0F84D8000000        <1>     jz .setRTCtime
   127 0000326C 80FC04              <1>     cmp ah, 4
   128 0000326F 0F8431010000        <1>     jz .readRTCdate
   129 00003275 80FC05              <1>     cmp ah, 5
   130 00003278 0F845C010000        <1>     jz .setRTCdate
   131 0000327E 80FC06              <1>     cmp ah, 6
   132 00003281 0F84B4010000        <1>     jz .setRTCalarm
   133 00003287 80FC07              <1>     cmp ah, 7
   134 0000328A 0F84F6010000        <1>     jz .resetRTCalarm
   135                              <1> .bad:
   136 00003290 804C241001          <1>     or byte [rsp + 2*8h], 1    ;Set Carry flag on for invalid function
   137 00003295 B480                <1>     mov ah, 80h
   138                              <1> .exit:
   139 00003297 48CF                <1>     iretq
   140                              <1> .gett:
   141                              <1> ;Returns:
   142                              <1> ; al=Rolled over flag (0=not rolled)
   143                              <1> ; cx=Hi count
   144                              <1> ; dx=Lo count
   145 00003299 8B0425[37010000]    <1>     mov eax, dword [pit_ticks]
   146 000032A0 6689C2              <1>     mov dx, ax    ;Lo count
   147 000032A3 C1E810              <1>     shr eax, 10h    ;Bring high word down
   148 000032A6 30ED                <1>     xor ch, ch
   149 000032A8 88C1                <1>     mov cl, al
   150 000032AA 88E0                <1>     mov al, ah
   151 000032AC 0FB6C0              <1>     movzx eax, al    ;Zero upper bytes
   152 000032AF 882425[3A010000]    <1>     mov byte [pit_ticks + 3], ah    ;Move 0 into day OF counter
   153 000032B6 48CF                <1>     iretq
   154                              <1> .sett:
   155                              <1> ;Called with:
   156                              <1> ; cx=Hi count (bzw. cl)
   157                              <1> ; dx=Lo count
   158                              <1> ;Returns: Nothing
   159 000032B8 66891425[37010000]  <1>     mov word [pit_ticks], dx
   160 000032C0 30ED                <1>     xor ch, ch    ;Reset the OF counter
   161 000032C2 66890C25[39010000]  <1>     mov word [pit_ticks + 2], cx
   162 000032CA 48CF                <1>     iretq
   163                              <1> 
   164                              <1> .tiext:    ;Extended Timer functions
   165 000032CC 80EC80              <1>     sub ah, 80h
   166 000032CF 7406                <1>     jz .getpitdiv
   167 000032D1 FECC                <1>     dec ah
   168 000032D3 740C                <1>     jz .setpitdiv
   169 000032D5 EBB9                <1>     jmp short .bad
   170                              <1> .getpitdiv:
   171                              <1> ;Returns:
   172                              <1> ; ax=PIT divisor
   173 000032D7 668B0425[35010000]  <1>     mov ax, word [pit_divisor]
   174 000032DF 48CF                <1>     iretq
   175                              <1> .setpitdiv:
   176                              <1> ;Called with:
   177                              <1> ; dx=divsor
   178                              <1> ;Returns: Nothing
   179 000032E1 66891425[35010000]  <1>     mov word [pit_divisor], dx
   180 000032E9 50                  <1>     push rax
   181 000032EA B036                <1>     mov al, 36h ;Bitmap for frequency write to channel 0 of PIT
   182 000032EC E643                <1>     out PITcommand, al
   183 000032EE 6689D0              <1>     mov ax, dx
   184 000032F1 E640                <1>     out PIT0, al    ;Send low byte of new divisor
   185 000032F3 88E0                <1>     mov al, ah
   186 000032F5 E640                <1>     out PIT0, al    ;Send high byte of new divisor
   187 000032F7 58                  <1>     pop rax
   188 000032F8 48CF                <1>     iretq
   189                              <1> 
   190                              <1> .readRTCtime:
   191                              <1> ; dh = Seconds
   192                              <1> ; cl = Minutes
   193                              <1> ; ch = Hours
   194                              <1> ; dl = Daylight Savings   
   195 000032FA 50                  <1>     push rax
   196 000032FB 51                  <1>     push rcx
   197 000032FC 31C9                <1>     xor ecx, ecx    ;Long counter
   198                              <1> .rrt0:
   199 000032FE FFC9                <1>     dec ecx
   200 00003300 743C                <1>     jz .rrtbad
   201 00003302 B08A                <1>     mov al, 8Ah ;Disable NMI and and read bit 7. When 0, read
   202 00003304 E89A010000          <1>     call .readRTC
   203 00003309 A880                <1>     test al, 80h    ;Check bit 7 is zero
   204 0000330B 75F1                <1>     jnz .rrt0   ;If zero, fall and read RTC registers
   205                              <1> 
   206 0000330D 59                  <1>     pop rcx         ;Pop upper word of ecx back
   207 0000330E B080                <1>     mov al, 80h     ;Get seconds
   208 00003310 E88E010000          <1>     call .readRTC
   209 00003315 88C6                <1>     mov dh, al      ;Pack seconds in dh
   210 00003317 B082                <1>     mov al, 82h     ;Get minutes
   211 00003319 E885010000          <1>     call .readRTC
   212 0000331E 88C1                <1>     mov cl, al      ;Pack minutes in cl
   213 00003320 B084                <1>     mov al, 84h     ;Get Hours
   214 00003322 E87C010000          <1>     call .readRTC
   215 00003327 88C5                <1>     mov ch, al      ;Pack Hours in ch
   216 00003329 B08B                <1>     mov al, 8Bh     ;Get Status B for Daylight Savings
   217 0000332B E873010000          <1>     call .readRTC
   218 00003330 2401                <1>     and al, 1       ;Isolate bit 0
   219 00003332 88C2                <1>     mov dl, al      ;Pack Daylight Savings bit in dl
   220 00003334 B00D                <1>     mov al, 0Dh     ;Enable NMI
   221 00003336 E868010000          <1>     call .readRTC
   222 0000333B 58                  <1>     pop rax
   223 0000333C 48CF                <1>     iretq
   224                              <1> .rrtbad:
   225 0000333E 59                  <1>     pop rcx
   226 0000333F 58                  <1>     pop rax
   227 00003340 F9                  <1>     stc
   228 00003341 C20800              <1>     ret 8   ;Set carry and return
   229                              <1> 
   230                              <1> .setRTCtime:
   231                              <1> ; dh = Seconds
   232                              <1> ; cl = Minutes
   233                              <1> ; ch = Hours
   234                              <1> ; dl = Daylight Savings 
   235 00003344 50                  <1>     push rax
   236 00003345 51                  <1>     push rcx
   237 00003346 31C9                <1>     xor ecx, ecx
   238                              <1> .srt0:
   239 00003348 FFC9                <1>     dec ecx
   240 0000334A 74F2                <1>     jz .rrtbad
   241 0000334C B08A                <1>     mov al, 8Ah ;Disable NMI and and read bit 7. When 0, write
   242 0000334E E850010000          <1>     call .readRTC
   243 00003353 A880                <1>     test al, 80h    ;Check bit 7 is zero
   244 00003355 75F1                <1>     jnz .srt0   ;If zero, fall and write RTC registers
   245                              <1> 
   246 00003357 59                  <1>     pop rcx
   247 00003358 B08B                <1>     mov al, 8Bh
   248 0000335A E844010000          <1>     call .readRTC
   249 0000335F 80E201              <1>     and dl, 1   ;Ensure we only have the low bit of dl
   250 00003362 08D0                <1>     or al, dl   ;Set the daylight savings bit of Status B
   251 00003364 0C80                <1>     or al, 80h  ;Stop RTC updates
   252 00003366 88C4                <1>     mov ah, al
   253 00003368 B08B                <1>     mov al, 8Bh ;Reset Status B Register, and daylight savings
   254 0000336A E83D010000          <1>     call .writeRTC
   255                              <1> 
   256 0000336F 88F4                <1>     mov ah, dh  ;Pack seconds
   257 00003371 B080                <1>     mov al, 80h
   258 00003373 E834010000          <1>     call .writeRTC
   259 00003378 88CC                <1>     mov ah, cl  ;Pack minutes
   260 0000337A B082                <1>     mov al, 82h
   261 0000337C E82B010000          <1>     call .writeRTC
   262 00003381 88EC                <1>     mov ah, ch  ;Pack hours
   263 00003383 B084                <1>     mov al, 84h
   264 00003385 E822010000          <1>     call .writeRTC
   265                              <1> 
   266 0000338A B08B                <1>     mov al, 8Bh
   267 0000338C E812010000          <1>     call .readRTC
   268 00003391 247F                <1>     and al, 7Fh ;Clear the top bit
   269 00003393 88C4                <1>     mov ah, al  ;Pack byte to send in ah
   270 00003395 B08B                <1>     mov al, 8Bh
   271 00003397 E810010000          <1>     call .writeRTC  ;Restart RTC
   272                              <1> 
   273 0000339C B00D                <1>     mov al, 0Dh   ;Enable NMI
   274 0000339E E800010000          <1>     call .readRTC
   275                              <1> 
   276 000033A3 58                  <1>     pop rax
   277 000033A4 48CF                <1>     iretq
   278                              <1>     
   279                              <1> .readRTCdate:
   280                              <1> ; ch = Reserved, Century (19/20/21...), fixed 20h for now
   281                              <1> ; cl = Year
   282                              <1> ; dh = Month
   283                              <1> ; dl = Day
   284 000033A6 50                  <1>     push rax
   285 000033A7 51                  <1>     push rcx
   286 000033A8 31C9                <1>     xor ecx, ecx
   287                              <1> .rrd0:
   288 000033AA FFC9                <1>     dec ecx
   289 000033AC 7490                <1>     jz .rrtbad
   290 000033AE B08A                <1>     mov al, 8Ah     ;Disable NMI and and read bit 7. When 0, write
   291 000033B0 E8EE000000          <1>     call .readRTC
   292 000033B5 A880                <1>     test al, 80h    ;Check bit 7 is zero
   293 000033B7 75F1                <1>     jnz .rrd0       ;If zero, fall and read RTC registers
   294                              <1> 
   295 000033B9 59                  <1>     pop rcx
   296 000033BA B087                <1>     mov al, 87h     ;Get Day of the Month
   297 000033BC E8E2000000          <1>     call .readRTC
   298 000033C1 88C2                <1>     mov dl, al      ;Pack Day of the Month
   299 000033C3 B088                <1>     mov al, 88h     ;Get Month of the Year
   300 000033C5 E8D9000000          <1>     call .readRTC
   301 000033CA 88C6                <1>     mov dh, al      ;Pack Month of the Year
   302 000033CC B089                <1>     mov al, 89h     ;Get bottom two digits of year
   303 000033CE E8D0000000          <1>     call .readRTC
   304 000033D3 88C1                <1>     mov cl, al      ;Pack Year
   305 000033D5 B514                <1>     mov ch, 20      ;BCD value for 20
   306                              <1> 
   307 000033D7 58                  <1>     pop rax
   308 000033D8 48CF                <1>     iretq
   309                              <1> 
   310                              <1> .setRTCdate:
   311                              <1> ; ch = Reserved, Century (19/20/21...), fixed 20h for now
   312                              <1> ; cl = Year
   313                              <1> ; dh = Month
   314                              <1> ; dl = Day
   315 000033DA 50                  <1>     push rax
   316 000033DB 51                  <1>     push rcx
   317 000033DC 31C9                <1>     xor ecx, ecx
   318                              <1> .srd0:
   319 000033DE FFC9                <1>     dec ecx
   320 000033E0 0F8458FFFFFF        <1>     jz .rrtbad
   321 000033E6 B08A                <1>     mov al, 8Ah     ;Disable NMI and and read bit 7. When 0, write
   322 000033E8 E8B6000000          <1>     call .readRTC
   323 000033ED A880                <1>     test al, 80h    ;Check bit 7 is zero
   324 000033EF 75ED                <1>     jnz .srd0       ;If zero, fall and write RTC registers
   325                              <1> 
   326 000033F1 59                  <1>     pop rcx
   327 000033F2 B08B                <1>     mov al, 8Bh
   328 000033F4 E8AA000000          <1>     call .readRTC
   329 000033F9 0C80                <1>     or al, 80h      ;Stop RTC updates
   330 000033FB 88C4                <1>     mov ah, al
   331 000033FD B08B                <1>     mov al, 8Bh
   332 000033FF E8A8000000          <1>     call .writeRTC
   333 00003404 88D4                <1>     mov ah, dl      ;Pack Day of the Month
   334 00003406 B087                <1>     mov al, 87h
   335 00003408 E89F000000          <1>     call .writeRTC
   336 0000340D 88F4                <1>     mov ah, dh      ;Pack Month of the Year
   337 0000340F B088                <1>     mov al, 88h
   338 00003411 E896000000          <1>     call .writeRTC
   339 00003416 88CC                <1>     mov ah, cl      ;Pack Year
   340 00003418 B089                <1>     mov al, 89h
   341 0000341A E88D000000          <1>     call .writeRTC
   342                              <1> 
   343 0000341F B08B                <1>     mov al, 8Bh
   344 00003421 E87D000000          <1>     call .readRTC
   345 00003426 247F                <1>     and al, 7Fh ;Clear the top bit
   346 00003428 88C4                <1>     mov ah, al  ;Pack byte to send in ah
   347 0000342A B08B                <1>     mov al, 8Bh
   348 0000342C E87B000000          <1>     call .writeRTC  ;Restart RTC
   349                              <1> 
   350 00003431 B00D                <1>     mov al, 0Dh   ;Enable NMI
   351 00003433 E86B000000          <1>     call .readRTC
   352                              <1> 
   353 00003438 58                  <1>     pop rax
   354 00003439 48CF                <1>     iretq
   355                              <1> 
   356                              <1> .setRTCalarm:
   357                              <1> ; dh = Seconds for alarm
   358                              <1> ; cl = Minutes for alarm
   359                              <1> ; ch = Hours for alarm
   360 0000343B 50                  <1>     push rax
   361 0000343C B08B                <1>     mov al, 8BH ;Get status B
   362 0000343E E860000000          <1>     call .readRTC
   363 00003443 A820                <1>     test al, 20h
   364 00003445 7537                <1>     jnz .srabad ;If The alarm bit is already set, exit CF=CY
   365                              <1> 
   366 00003447 88F4                <1>     mov ah, dh      ;Pack Seconds for alarm
   367 00003449 B081                <1>     mov al, 81h     
   368 0000344B E85C000000          <1>     call .writeRTC
   369 00003450 88CC                <1>     mov ah, cl      ;Pack Minutes for alarm
   370 00003452 B083                <1>     mov al, 83h
   371 00003454 E853000000          <1>     call .writeRTC
   372 00003459 88EC                <1>     mov ah, ch      ;Pack Hours for alarm
   373 0000345B B085                <1>     mov al, 85h
   374 0000345D E84A000000          <1>     call .writeRTC
   375                              <1> 
   376 00003462 B08B                <1>     mov al, 8Bh     ;Get Status B
   377 00003464 E83A000000          <1>     call .readRTC
   378 00003469 0C20                <1>     or al, 20h      ;Set Bit 5 - Alarm Interrupt Enable
   379 0000346B 88C4                <1>     mov ah, al      ;Pack new Status B
   380 0000346D B08B                <1>     mov al, 8Bh
   381 0000346F E838000000          <1>     call .writeRTC 
   382                              <1> 
   383 00003474 B00D                <1>     mov al, 0Dh     ;Enable NMI
   384 00003476 E828000000          <1>     call .readRTC
   385                              <1> 
   386 0000347B 58                  <1>     pop rax
   387 0000347C 48CF                <1>     iretq
   388                              <1> .srabad:
   389 0000347E 58                  <1>     pop rax
   390 0000347F 804C241001          <1>     or byte [rsp + 2*8], 1 ;Set Carry Flag
   391 00003484 48CF                <1>     iretq  
   392                              <1> .resetRTCalarm:
   393 00003486 50                  <1>     push rax
   394 00003487 B08B                <1>     mov al, 8Bh     ;Get Status B
   395 00003489 E815000000          <1>     call .readRTC
   396 0000348E 24DF                <1>     and al, 0DFh    ;Clear Alarm Interrupt Enable
   397 00003490 88C4                <1>     mov ah, al
   398 00003492 B08B                <1>     mov al, 8Bh
   399 00003494 E813000000          <1>     call .writeRTC
   400                              <1> 
   401 00003499 B00D                <1>     mov al, 0Dh     ;Enable NMI
   402 0000349B E803000000          <1>     call .readRTC 
   403 000034A0 58                  <1>     pop rax
   404 000034A1 48CF                <1>     iretq
   405                              <1> 
   406                              <1> .readRTC:
   407                              <1> ;Reads an RTC port, interrupts disabled throughout
   408                              <1> ;Input: al = I/O port to read
   409                              <1> ;Output: al = I/O data
   410 000034A3 FA                  <1>     cli
   411 000034A4 E670                <1>     out cmos_base, al
   412 000034A6 E680                <1>     out waitp, al
   413 000034A8 E471                <1>     in al, cmos_data
   414 000034AA FB                  <1>     sti
   415 000034AB C3                  <1>     ret
   416                              <1> .writeRTC:
   417                              <1> ;Writes to an RTC port, interrupts disabled throughout 
   418                              <1> ;Input: al = I/O port to read, ah = Data byte to send
   419 000034AC FA                  <1>     cli
   420 000034AD E670                <1>     out cmos_base, al
   421 000034AF E680                <1>     out waitp, al
   422 000034B1 88E0                <1>     mov al, ah
   423 000034B3 E671                <1>     out cmos_data, al
   424 000034B5 FB                  <1>     sti
   425 000034B6 C3                  <1>     ret
   426                              <1> ;------------------------End of Interrupt------------------------
   103                                  %include "./Source/Resident/Services/Int3Bh.asm"
   104                              <1> ;-----------------CTRL+BREAK Interrupt Int 3Bh-------------------
   105                              <1> ;CTRL+Break will call this!
   106                              <1> ;----------------------------------------------------------------
   107                              <1> ctrlbreak_io:
   108 000034B7 48CF                <1>     iretq
   109                              <1> ;------------------------End of Interrupt-------------------------
   104                                  %include "./Source/Resident/Services/Int3Dh.asm"
   105                              <1> ;------------Screen Mode Parameters Interrupt Int 3Dh-------------
   106                              <1> ;This Interrupt returns in r8 the pointer to screen mode 
   107                              <1> ; parameters. It replaces the nice pointers in the IVT of yore.
   108                              <1> ;Returns in r8 to not conflict with ported apps
   109                              <1> ;----------------------------------------------------------------
   110                              <1> scr_params_io:
   111 000034B9 49B8-               <1>     mov r8, scr_mode_params
   111 000034BB [6001000000000000]  <1>
   112 000034C3 48CF                <1>     iretq
   113                              <1> ;------------------------End of Interrupt------------------------
   105                                  %include "./Source/Resident/Services/Int3Eh.asm"
   106                              <1> ;-----------------Disk Params Interrupt Int 3Eh------------------
   107                              <1> disk_params_io:
   108 000034C5 4C8B0425[AF010000]  <1>     mov r8, qword [diskDptPtr]    
   109 000034CD 4C8B0C25[B7010000]  <1>     mov r9, qword [fdiskDptPtr]
   110 000034D5 48CF                <1>     iretq
   111                              <1> ;------------------------End of Interrupt------------------------
   106                                  %include "./Source/Resident/Services/Int3Fh.asm"
   107                              <1> ;------------------CGA font Interrupt Int 3Fh--------------------
   108                              <1> ;This Interrupt returns in r8 the pointer to the CGA font.
   109                              <1> ;It replaces the nice pointers in the IVT of yore.
   110                              <1> ;Returns in r8 to not conflict with ported apps
   111                              <1> ;----------------------------------------------------------------
   112                              <1> cga_ret_io: ;Get first pointer in list
   113 000034D7 4C0FB70425-         <1>     movzx r8, word [scr_vga_ptrs]
   113 000034DC [68010000]          <1>
   114 000034E0 49C1E004            <1>     shl r8, 4
   115 000034E4 6644030425-         <1>     add r8w, word [scr_vga_ptrs + 2]
   115 000034E9 [6A010000]          <1>
   116 000034ED 48CF                <1>     iretq
   117                              <1> ;------------------------End of Interrupt------------------------
   107                                  ;========================RESIDENT DRIVERS=====================
   108                                  %include "./Source/Resident/Hardware/ATA/ataDrv.asm"
   109                              <1> ;ATA driver!
   110                              <1> ATA:
   111                              <1> .identifyDevice:
   112                              <1> ;Drive to be identified should be selected already
   113                              <1> ;dx should contain the base register
   114                              <1> ;rdi points to the buffer
   115                              <1> ;Carry set if failed.
   116                              <1> 
   117 000034EF 50                  <1>     push rax
   118 000034F0 53                  <1>     push rbx
   119                              <1> 
   120 000034F1 30C0                <1>     xor al, al
   121 000034F3 81C202000000        <1>     add edx, 2            ;dx at base + 2
   122 000034F9 EE                  <1>     out dx, al
   123 000034FA FFC2                <1>     inc edx               ;dx at base + 3
   124 000034FC EE                  <1>     out dx, al
   125 000034FD FFC2                <1>     inc edx               ;dx at base + 4
   126 000034FF EE                  <1>     out dx, al
   127 00003500 FFC2                <1>     inc edx               ;dx at base + 5
   128 00003502 EE                  <1>     out dx, al
   129 00003503 81C202000000        <1>     add edx, 2           ;dx at base + 7
   130 00003509 B0EC                <1>     mov al, 0ECh         ;ECh = Identify drive command
   131 0000350B EE                  <1>     out dx, al
   132                              <1> 
   133 0000350C EB00                <1>     jmp short $ + 2      ;IO cycle kill
   134 0000350E B30A                <1>     mov bl, 10           ;10 retries ok
   135                              <1> .l2:
   136 00003510 EC                  <1>     in al, dx            ;get status byte
   137 00003511 A808                <1>     test al, 00001000b   ;Check DRQ, to be set for data ready
   138 00003513 7511                <1>     jnz .l3 ;If set we good to go
   139                              <1>     ;Else timeout, wait for 1 ms before reading again
   140 00003515 FECB                <1>     dec bl
   141 00003517 741E                <1>     jz .exitfail
   142 00003519 51                  <1>     push rcx
   143 0000351A B901000000          <1>     mov ecx, 1
   144 0000351F B486                <1>     mov ah, 86h
   145 00003521 CD35                <1>     int 35h
   146 00003523 59                  <1>     pop rcx
   147 00003524 EBEA                <1>     jmp short .l2
   148                              <1> .l3:
   149 00003526 81EA07000000        <1>     sub edx, 7            ;dx at base + 0
   150 0000352C B900010000          <1>     mov ecx, 100h         ;100h words to be copied
   151 00003531 F3666D              <1>     rep insw
   152 00003534 F8                  <1>     clc
   153 00003535 EB01                <1>     jmp short .exit
   154                              <1> 
   155                              <1> .exitfail:
   156 00003537 F9                  <1>     stc
   157                              <1> .exit:
   158 00003538 5B                  <1>     pop rbx
   159 00003539 58                  <1>     pop rax
   160 0000353A C3                  <1>     ret
   161                              <1> .selectDriveFromTable:
   162                              <1> ;Selects the drive pointed to by the table entry in rbp
   163                              <1> ;Input: rbp = Pointer to drive table entry
   164                              <1> ;Output: CF=NC -> All ok, can proceed with writing data
   165                              <1> ;        CF=CY -> drive not set
   166 0000353B 52                  <1>     push rdx
   167 0000353C 50                  <1>     push rax
   168 0000353D 8A4515              <1>     mov al, byte [rbp + fdiskEntry.msBit]
   169 00003540 668B5513            <1>     mov dx, word [rbp + fdiskEntry.ioBase]
   170 00003544 E803000000          <1>     call .selectDrive
   171 00003549 58                  <1>     pop rax
   172 0000354A 5A                  <1>     pop rdx
   173 0000354B C3                  <1>     ret
   174                              <1> .selectDrive:
   175                              <1> ;Selects either master or slave drive
   176                              <1> ;Sets/clears bit 7 of ataXCmdByte 
   177                              <1> ;Bit 7 ataX Clear => Master
   178                              <1> ;Input: dx = ataXbase, 
   179                              <1> ;       ah = al = A0h/B0h (or E0h/F0h for LBA) for master/slave
   180                              <1> ;
   181                              <1> ;Return: If CF=NC, al = the status of the selected drive after selection
   182                              <1> ;        If CF=CY drive not set
   183                              <1> ;ah is preserved
   184                              <1> ;First check if this is the presently active device
   185 0000354C 53                  <1>     push rbx
   186 0000354D 51                  <1>     push rcx
   187                              <1>     ;First find if ata0CmdByte or ata1CmdByte
   188 0000354E 8D0C25[AB010000]    <1>     lea ecx, ata0CmdByte
   189 00003555 8D1C25[AD010000]    <1>     lea ebx, ata1CmdByte
   190 0000355C 81FAF0010000        <1>     cmp edx, ata0_base
   191 00003562 0F45CB              <1>     cmovne ecx, ebx    ;Move ata1CmdByte to ecx
   192                              <1>     ;Now isolate master/slave bit
   193 00003565 88C3                <1>     mov bl, al  ;Save master/slave byte in bl
   194 00003567 C0EB04              <1>     shr bl, 4   ;Bring nybble low
   195 0000356A 80E301              <1>     and bl, 1   ;Save only bottom bit, if set it is slave
   196 0000356D 8A39                <1>     mov bh, byte [rcx]  ;Now get ataXCmdByte
   197 0000356F 80E701              <1>     and bh, 1   ;Only care for the bottom bit
   198                              <1>     ;bh has in memory bit, bl has device bit
   199 00003572 38DF                <1>     cmp bh, bl
   200 00003574 743A                <1>     je .skipSelection   ;If bh and bl are equal, the drive we want is selected
   201                              <1>     ;Now set master/slave on host
   202 00003576 B70B                <1>     mov bh, 11     ;Up to 10 tries to set a device
   203                              <1> .sd0:      
   204 00003578 FECF                <1>     dec bh
   205 0000357A 7437                <1>     jz .driveNotSelected
   206 0000357C 88E0                <1>     mov al, ah     ;Return A0h/B0h to al from ah
   207 0000357E 88C3                <1>     mov bl, al     ;Save shifted-up drive select bit in bl
   208 00003580 81C206000000        <1>     add edx, 6     ;dx at base + 6, drive select register
   209 00003586 EE                  <1>     out dx, al     ;Select here
   210 00003587 81EA06000000        <1>     sub edx, 6     ;dx back at base + 0
   211                              <1>     ;Now wait 400ns for value to settle
   212 0000358D E824000000          <1>     call .driveSelectWait
   213 00003592 81C207000000        <1>     add edx, 7     ;Go to Status Register
   214 00003598 EC                  <1>     in al, dx      ;Get status
   215 00003599 81EA07000000        <1>     sub edx, 7     ;Go back to ataXbase
   216 0000359F A888                <1>     test al, 88h   ;Test if either BSY and DRQ bits set.
   217 000035A1 75D5                <1>     jnz .sd0       ;If either is set, drive setting failed, try set again!
   218                              <1>     ;Here set the bit in ataXCmdByte to confirm drive as selected
   219                              <1>     ;ecx still has the value of the ataXCmdbyte
   220 000035A3 8021FE              <1>     and byte [rcx], 0FEh    ;Clear the bottom bit
   221 000035A6 88E3                <1>     mov bl, ah              ;Bring A0h/B0h to bl
   222 000035A8 C0EB04              <1>     shr bl, 4               ;Shift it down to bl[0]
   223 000035AB 80E301              <1>     and bl, 1   ;Save only bottom bit, if set it is slave
   224 000035AE 0819                <1>     or byte [rcx], bl       ;Set the bit if bl[0] is set
   225                              <1> .skipSelection:
   226 000035B0 59                  <1>     pop rcx
   227 000035B1 5B                  <1>     pop rbx
   228 000035B2 C3                  <1>     ret
   229                              <1> .driveNotSelected:
   230 000035B3 F9                  <1>     stc
   231 000035B4 EBFA                <1>     jmp short .skipSelection
   232                              <1> 
   233                              <1> .driveSelectWait:
   234                              <1> ; Called with dx = ataXbase
   235                              <1> ; Reads the alternate status register 14 times
   236                              <1> ; Returns the alternate status after a 15th read
   237 000035B6 51                  <1>     push rcx
   238 000035B7 81C206020000        <1>     add edx, 206h   ;Move to alt base
   239 000035BD B90E000000          <1>     mov ecx, 14     ;14 iterations for 420ns wait
   240                              <1> .dsw0:
   241 000035C2 EC                  <1>     in al, dx
   242 000035C3 E2FD                <1>     loop .dsw0
   243 000035C5 81EAFF010000        <1>     sub edx, 1FFh   ;Return to ataXbase + 7
   244 000035CB EC                  <1>     in al, dx       ;Get status and clear pending Interrupt
   245 000035CC 81EA07000000        <1>     sub edx, 7      ;Return to ataXbase
   246 000035D2 59                  <1>     pop rcx
   247 000035D3 C3                  <1>     ret
   248                              <1> 
   249                              <1> .wait400ns:
   250                              <1> ;Called with dx pointing to a port to read 14 times
   251 000035D4 51                  <1>     push rcx
   252 000035D5 B90E000000          <1>     mov ecx, 14     ;14 iterations for 420ns wait
   253                              <1> .wns:
   254 000035DA EC                  <1>     in al, dx
   255 000035DB E2FD                <1>     loop .wns
   256 000035DD 59                  <1>     pop rcx
   257 000035DE C3                  <1>     ret
   258                              <1> 
   259                              <1> .getTablePointer:
   260                              <1> ;Given a drive number in dl, put the table pointer in rbp
   261                              <1> ;If entry not valid OR greater than 4, fail with CF=CY
   262 000035DF 52                  <1>     push rdx
   263 000035E0 80E27F              <1>     and dl, 7Fh ;Clear top bit
   264 000035E3 80FA03              <1>     cmp dl, 3   ;Only 4 fixed disks allowed!
   265 000035E6 7720                <1>     ja .gtpBad
   266 000035E8 488D2C25[7B030000]  <1>     lea rbp, fdiskTable ;Point to the fdisktable
   267                              <1> .gtpSearch:
   268 000035F0 84D2                <1>     test dl, dl
   269 000035F2 740B                <1>     jz .gtpVerifyOk
   270 000035F4 FECA                <1>     dec dl
   271 000035F6 4881C516000000      <1>     add rbp, fdiskEntry_size    ;Goto next entry
   272 000035FD EBF1                <1>     jmp short .gtpSearch
   273                              <1> .gtpVerifyOk:
   274 000035FF 807D0001            <1>     cmp byte [rbp + fdiskEntry.signature], 1    ;Configured bit must be set
   275 00003603 7403                <1>     jz .gtpBad 
   276 00003605 5A                  <1>     pop rdx
   277 00003606 F8                  <1>     clc
   278 00003607 C3                  <1>     ret
   279                              <1> .gtpBad:
   280 00003608 F9                  <1>     stc 
   281 00003609 5A                  <1>     pop rdx
   282 0000360A C3                  <1>     ret
   283                              <1> ;==============================:
   284                              <1> ;    ATA primitive functions
   285                              <1> ;==============================:
   286                              <1> .resetChannel:
   287                              <1>     ;Resets a selected ATA channel
   288                              <1>     ;Input: rbp = Fixed Disk Table entry pointer for chosen device
   289                              <1>     ;Output: CF=CY -> Channel did not reset.
   290                              <1>     ;        CF=NC -> Channel reset
   291                              <1>     ;If the channel doesnt reset, the caller will establish an error code
   292                              <1>     ;
   293 0000360B 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   294 0000360F 81C206020000        <1>     add edx, 206h   ;Go to alternate base
   295 00003615 B004                <1>     mov al, 4h      ;Set the SoftwareReSeT (SRST) bit
   296 00003617 EE                  <1>     out dx, al      ;Set the bit
   297 00003618 B90A000000          <1>     mov ecx, 10     ;Wait 10 milliseconds
   298 0000361D B486                <1>     mov ah, 86h
   299 0000361F CD35                <1>     int 35h
   300 00003621 30C0                <1>     xor al, al
   301 00003623 EE                  <1>     out dx, al      ;Clear the SRST bit
   302 00003624 B90A000000          <1>     mov ecx, 10     ;Wait 10 milliseconds
   303 00003629 B486                <1>     mov ah, 86h
   304 0000362B CD35                <1>     int 35h
   305 0000362D EC                  <1>     in al, dx       ;Get one more read
   306 0000362E 81EA06020000        <1>     sub edx, 206h   ;Return to base
   307 00003634 24C0                <1> 	and al, 0xc0    ;Get only BSY and DRDY
   308 00003636 3C40                <1> 	cmp al, 0x40	;Check that BSY is clear and that DRDY is set
   309 00003638 751F                <1>     jne .rcBad
   310                              <1>     ;Here clear the master/slave bit in ataXCmdByte
   311 0000363A 488D1C25[AB010000]  <1>     lea rbx, ata0CmdByte
   312 00003642 488D0C25[AD010000]  <1>     lea rcx, ata1CmdByte
   313 0000364A 66817D13F001        <1>     cmp word [rbp + fdiskEntry.ioBase], ata0_base
   314 00003650 480F45D9            <1>     cmovne rbx, rcx
   315 00003654 8023FE              <1>     and byte [rbx], 0FEh    ;Clear low bit
   316                              <1> 
   317 00003657 F8                  <1>     clc             ;Clear carry
   318 00003658 C3                  <1>     ret
   319                              <1> .rcBad:
   320 00003659 F9                  <1>     stc             ;Set carry
   321 0000365A C3                  <1>     ret
   322                              <1> ;Common functions:
   323                              <1> ;Jumped to with: 
   324                              <1> ; al = Primary function number
   325                              <1> ; cl = Sector count
   326                              <1> ; dx = Command register for drive
   327                              <1> .read:
   328 0000365B EE                  <1>     out dx, al  ;Output the command byte!
   329 0000365C 88C8                <1>     mov al, cl  ;Return sector count into al
   330                              <1> 
   331                              <1>     ;Now we wait for the DRQ bit in the status register to set
   332 0000365E 4889DF              <1>     mov rdi, rbx    ;Move the read buffer pointer to rdi
   333 00003661 88C3                <1>     mov bl, al      ;Save sector count in bl
   334                              <1> .rWait:
   335 00003663 B9FFFFFFFF          <1>     mov ecx, -1  ;Data should be ready within ~67 miliseconds
   336 00003668 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   337 0000366C 81C207000000        <1>     add edx, 7  ;Dummy read on status register
   338                              <1> .rWaitLoop:
   339 00003672 FFC9                <1>     dec ecx
   340 00003674 7440                <1>     jz .rTimeout
   341 00003676 EC                  <1>     in al, dx
   342 00003677 A880                <1>     test al, 80h     ;Is BSY set?
   343 00003679 75F7                <1>     jnz .rWaitLoop   ;If so, keep looping
   344 0000367B A821                <1>     test al, 21h     ;Are error bits set?  
   345 0000367D 753F                <1>     jnz .errorExit   ;If not, must be ok to go
   346 0000367F A808                <1>     test al, 8h      ;Check DRQ, data ready bit is set
   347 00003681 74EF                <1>     jz .rWaitLoop
   348                              <1> ;Now we can read the data
   349 00003683 81EA07000000        <1>     sub edx, 7   ;Point to base=data register
   350 00003689 B900010000          <1>     mov ecx, 256    ;Number of words in a sector
   351                              <1> .r0:
   352 0000368E 666D                <1>     insw    ;Read that many words!
   353 00003690 EB00                <1>     jmp short $ + 2
   354 00003692 E2FA                <1>     loop .r0    ;Read the sector, one word at a time
   355 00003694 FECB                <1>     dec bl      ;Reduce the number of sectors read by 1
   356 00003696 75CB                <1>     jnz .rWait
   357                              <1>     ;Here check status register to ensure error isnt set
   358 00003698 81C207000000        <1>     add edx, 7
   359 0000369E B9FFFFFFFF          <1>     mov ecx, -1
   360                              <1> .readExitloop:
   361 000036A3 FFC9                <1>     dec ecx
   362 000036A5 7417                <1>     jz .errorExit
   363 000036A7 EC                  <1>     in al, dx
   364 000036A8 A880                <1>     test al, 80h        ;Check if BSY bit still set (i.e not ready yet)
   365 000036AA 75F7                <1>     jnz .readExitloop   ;If BSY still set keep looping
   366 000036AC A861                <1>     test al, 61h        ;Check if DSDY bit or Error bits are set
   367 000036AE 74F3                <1>     jz .readExitloop    ;If DSDY not set, wait
   368 000036B0 A821                <1>     test al, 21h    ;Check status bits 0 and 5 (error and drive fault)
   369 000036B2 750A                <1>     jnz .errorExit
   370                              <1> .rExit:
   371 000036B4 F8                  <1>     clc
   372 000036B5 C3                  <1>     ret
   373                              <1> .rTimeout:
   374 000036B6 C60425[A9010000]80  <1>     mov byte [msdStatus], 80h   ;Timeout occured
   375                              <1> .errorExit:
   376 000036BE F9                  <1>     stc
   377 000036BF C3                  <1>     ret
   378                              <1> 
   379                              <1> .write:
   380 000036C0 EE                  <1>     out dx, al  ;Output the command byte!
   381 000036C1 88C8                <1>     mov al, cl  ;Return sector count into al
   382                              <1> 
   383                              <1>     ;Now we wait for the DRQ bit in the status register to set
   384 000036C3 4889DE              <1>     mov rsi, rbx    ;Move the write buffer pointer to rsi
   385 000036C6 88C3                <1>     mov bl, al      ;Save sector count in bl
   386                              <1> .writeWait:
   387 000036C8 B9FFFFFFFF          <1>     mov ecx, -1  ;Data should be ready within ~67 miliseconds
   388 000036CD 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   389 000036D1 81C207000000        <1>     add edx, 7  ;Dummy read on Alt status register
   390                              <1> .writeWaitLoop:
   391 000036D7 FFC9                <1>     dec ecx
   392 000036D9 74DB                <1>     jz .rTimeout
   393 000036DB EC                  <1>     in al, dx
   394 000036DC A880                <1>     test al, 80h     ;Is BSY set?
   395 000036DE 75F7                <1>     jnz .writeWaitLoop   ;If so, keep looping
   396 000036E0 A821                <1>     test al, 21h     ;Are error bits set?  
   397 000036E2 75DA                <1>     jnz .errorExit   ;If not, must be ok to go
   398 000036E4 A808                <1>     test al, 8h      ;Check DRQ, data ready bit is set
   399 000036E6 74EF                <1>     jz .writeWaitLoop
   400                              <1> ;Now we can write the data
   401 000036E8 81EA07000000        <1>     sub edx, 7   ;Point to base=data register
   402 000036EE B900010000          <1>     mov ecx, 256    ;Number of words in a sector
   403                              <1> .w1:
   404 000036F3 666F                <1>     outsw    ;Write that many words!
   405 000036F5 EB00                <1>     jmp short $ + 2
   406 000036F7 E2FA                <1>     loop .w1 ;Write one sector, one word at a time
   407 000036F9 FECB                <1>     dec bl
   408 000036FB 75CB                <1>     jnz .writeWait  ;Keep going up by a sector
   409                              <1>     ;Here wait for device to stop being busy. 
   410                              <1>     ;If it doesnt after ~4 seconds, declare an error
   411                              <1> .formatEP:  ;Where the format routine enters the write routine
   412 000036FD B9FFFFFFFF          <1>     mov ecx, -1 ;About 4 seconds
   413 00003702 81C207000000        <1>     add edx, 7  ;Goto status register
   414                              <1> .wBSYcheck:
   415 00003708 FFC9                <1>     dec ecx
   416 0000370A 74B2                <1>     jz .errorExit   ;If after 4 seconds the device is still BSY, consider it failing
   417 0000370C EC                  <1>     in al, dx   ;Read status reg
   418 0000370D A880                <1>     test al, 80h    ;Check BSY
   419 0000370F 75F7                <1>     jnz .wBSYcheck   ;If it is no longer BSY, check error status
   420 00003711 A861                <1>     test al, 61h        ;Check if DSDY bit or Error bits are set
   421 00003713 74F3                <1>     jz .wBSYcheck    ;If not set, do not send next command
   422                              <1> ;NOW FLUSH THE DISK BUFFERS TO DISK
   423                              <1>     ;Here check status register to ensure error isnt set
   424 00003715 A821                <1>     test al, 21h    ;Test bits 0 and 5 (error and drive fault)
   425 00003717 75A5                <1>     jnz .errorExit
   426                              <1>     ;Now we must flush cache on the device
   427 00003719 B0E7                <1>     mov al, 0E7h    ;FLUSH CACHE COMMAND
   428 0000371B EE                  <1>     out dx, al
   429                              <1>     ;This command can take 30 seconds to complete so we check status 
   430                              <1>     ; every ms to see if BSY is clear yet.
   431 0000371C BB30750000          <1>     mov ebx, 30000   ;30,000 miliseconds in 30 seconds
   432                              <1> .wFlushCheck:
   433 00003721 FFCB                <1>     dec ebx
   434 00003723 7499                <1>     jz .errorExit
   435 00003725 B901000000          <1>     mov ecx, 1
   436 0000372A B486                <1>     mov ah, 86h
   437 0000372C CD35                <1>     int 35h
   438 0000372E EC                  <1>     in al, dx   ;Read the status byte
   439 0000372F A880                <1>     test al, 80h    ;Are we still busy?
   440 00003731 75EE                <1>     jnz .wFlushCheck ;IF yes, loop again
   441 00003733 A861                <1>     test al, 61h    ;Check if DSDY bit or Error bits are set
   442 00003735 74EA                <1>     jz .wFlushCheck  ;Whilst it is not set, keep looping
   443 00003737 A821                <1>     test al, 21h    ;Test bits 0 and 5 (error and drive fault)
   444 00003739 7583                <1>     jnz .errorExit   ;If either are set, return fail
   445 0000373B F8                  <1>     clc
   446 0000373C C3                  <1>     ret
   447                              <1> 
   448                              <1> .verify:
   449 0000373D EE                  <1>     out dx, al  ;Output the command byte!
   450                              <1>     ;Now we wait for BSY to go low and DRDY to go high
   451 0000373E 66B9FFFF            <1>     mov cx, -1  ;Data should be ready within ~67 miliseconds
   452 00003742 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   453 00003746 81C207000000        <1>     add edx, 7  ;Goto status register
   454                              <1> .vLoop:
   455 0000374C 66FFC9              <1>     dec cx
   456 0000374F 0F8469FFFFFF        <1>     jz .errorExit
   457 00003755 EC                  <1>     in al, dx   ;Get status
   458 00003756 A880                <1>     test al, 80h    ;BSY bit set
   459 00003758 75F2                <1>     jnz .vLoop
   460                              <1>     ;Once it clears come here
   461 0000375A A861                <1>     test al, 61h    ;Check if DSDY bit or Error bits are set
   462 0000375C 74EE                <1>     jz .vLoop    ;Whilst it is not set, keep looping
   463 0000375E A821                <1>     test al, 21h    ;Test bits 0 and 5 (error and drive fault)
   464 00003760 0F8558FFFFFF        <1>     jnz .errorExit   ;If either are set, return fail
   465 00003766 F8                  <1>     clc
   466 00003767 C3                  <1>     ret
   467                              <1> 
   468                              <1> .format:
   469                              <1>     ;A write which writes a byte to disk (0E5h for classical reasons)
   470 00003768 EE                  <1>     out dx, al  ;Output the command byte!
   471 00003769 88C8                <1>     mov al, cl  ;Return sector count into al
   472                              <1> 
   473                              <1>     ;Now we wait for the DRQ bit in the status register to set
   474 0000376B 88C3                <1>     mov bl, al     ;Save sector count in bl to use as counter
   475                              <1> .formatWait:
   476 0000376D B9FFFFFFFF          <1>     mov ecx, -1  ;Data should be ready within ~67 miliseconds
   477 00003772 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   478 00003776 81C207000000        <1>     add edx, 7  ;Dummy read on Alt status register
   479                              <1> .formatWaitLoop:
   480 0000377C FFC9                <1>     dec ecx
   481 0000377E 0F8432FFFFFF        <1>     jz .rTimeout
   482 00003784 EC                  <1>     in al, dx
   483 00003785 A880                <1>     test al, 80h     ;Is BSY set?
   484 00003787 75F3                <1>     jnz .formatWaitLoop   ;If so, keep looping
   485 00003789 A821                <1>     test al, 21h     ;Are error bits set?  
   486 0000378B 0F852DFFFFFF        <1>     jnz .errorExit   ;If not, must be ok to go
   487 00003791 A808                <1>     test al, 8h      ;Check DRQ, data ready bit is set
   488 00003793 74E7                <1>     jz .formatWaitLoop
   489                              <1> ;Now we can write the format data
   490 00003795 81EA07000000        <1>     sub edx, 7
   491 0000379B B900010000          <1>     mov ecx, 256    ;Number of words in a sector
   492 000037A0 B8E5E50000          <1>     mov eax, 0E5E5h ;Format Signature Word
   493                              <1> .f1:
   494 000037A5 66EF                <1>     out dx, ax  ;Write E5h to the disk!!
   495 000037A7 EB00                <1>     jmp short $ + 2
   496 000037A9 E2FA                <1>     loop .f1 ;Write one sector, one word at a time
   497 000037AB FECB                <1>     dec bl
   498 000037AD 75BE                <1>     jnz .formatWait  ;Keep going up by a sector
   499 000037AF E949FFFFFF          <1>     jmp .formatEP   ;Goto the format entry point
   500                              <1> 
   501                              <1> ;CHS functions
   502                              <1> .readCHS:
   503                              <1> ;Called with rdi as a free register to use
   504                              <1> ;All other registers have parameters as in Int 33h function ah=02h
   505 000037B4 E87B000000          <1>     call .setupCHS
   506 000037B9 0F82FFFEFFFF        <1>     jc .errorExit
   507                              <1>     ;Send command
   508 000037BF 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   509 000037C3 81C207000000        <1>     add edx, 7  ;Goto command register
   510 000037C9 88C1                <1>     mov cl, al  ;Save sector count in cl
   511 000037CB B020                <1>     mov al, 20h ;ATA READ COMMAND!
   512 000037CD E989FEFFFF          <1>     jmp .read
   513                              <1> 
   514                              <1> .writeCHS:
   515                              <1> ;Called with rsi as a free register to use
   516                              <1> ;All other registers have parameters as in Int 33h function ah=02h
   517 000037D2 E85D000000          <1>     call .setupCHS
   518 000037D7 0F82E1FEFFFF        <1>     jc .errorExit
   519                              <1>     ;Send command
   520 000037DD 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   521 000037E1 81C207000000        <1>     add edx, 7  ;Goto command register
   522 000037E7 88C1                <1>     mov cl, al  ;Save sector count in cl
   523 000037E9 B030                <1>     mov al, 30h ;ATA WRITE COMMAND!
   524 000037EB E9D0FEFFFF          <1>     jmp .write
   525                              <1> 
   526                              <1> .verifyCHS:
   527 000037F0 E83F000000          <1>     call .setupCHS
   528 000037F5 0F82C3FEFFFF        <1>     jc .errorExit
   529                              <1>     ;Send command
   530 000037FB 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   531 000037FF 81C207000000        <1>     add edx, 7  ;Goto command register
   532 00003805 B040                <1>     mov al, 40h ;ATA VERIFY COMMAND!
   533 00003807 E931FFFFFF          <1>     jmp .verify
   534                              <1> 
   535                              <1> .formatCHS:
   536                              <1> ;Ignore al (number of sectors) and cl[5:0] (Starting sector number)
   537 0000380C 668B4505            <1>     mov ax, word [rbp + fdiskEntry.wSecTrc] ;Get sectors in a track to clear
   538                              <1>     ;Sectors per track is always less than 256 so byte is ok!
   539 00003810 80E1C0              <1>     and cl, 0C0h    ;Clear bottom 6 bits. 
   540 00003813 80C901              <1>     or cl, 1        ;All tracks start at sector 1
   541 00003816 E819000000          <1>     call .setupCHS
   542 0000381B 0F829DFEFFFF        <1>     jc .errorExit
   543 00003821 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   544 00003825 81C207000000        <1>     add edx, 7  ;Goto command register
   545 0000382B 88C1                <1>     mov cl, al  ;Save sector count in cl
   546 0000382D B030                <1>     mov al, 30h ;ATA WRITE COMMAND!
   547 0000382F E934FFFFFF          <1>     jmp .format
   548                              <1> 
   549                              <1> .setupCHS:
   550                              <1>     ;First sets the chosen device, then sets all the registers
   551                              <1>     ; except for the command and then returns
   552 00003834 E802FDFFFF          <1>     call .selectDriveFromTable
   553 00003839 722F                <1>     jc .sCHSFailed
   554                              <1>     ;Now the drive has been selected, we can write to it
   555 0000383B 50                  <1>     push rax    ;Only sector count needs to be preserved
   556 0000383C 52                  <1>     push rdx    ;Temporarily save drive head bits to use later
   557 0000383D 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   558 00003841 81C202000000        <1>     add edx, 2  ;Goto base + 2, Sector count
   559 00003847 EE                  <1>     out dx, al
   560 00003848 FFC2                <1>     inc edx     ;Goto base + 3, Starting sector number
   561 0000384A 88C8                <1>     mov al, cl  ;Bits [5:0] have starting sector number
   562 0000384C 243F                <1>     and al, 3Fh ;Clear upper two bits
   563 0000384E EE                  <1>     out dx, al
   564 0000384F FFC2                <1>     inc edx     ;Goto base + 4, Cylinder low bits
   565 00003851 88E8                <1>     mov al, ch  ;Get the low 8 bits of the cylinder number
   566 00003853 EE                  <1>     out dx, al
   567 00003854 FFC2                <1>     inc edx     ;Goto base + 5, Cylinder high bits
   568 00003856 88C8                <1>     mov al, cl  ;Bits [7:6] have top two bits of cylinder number
   569 00003858 C0E806              <1>     shr al, 6   ;Shift them down to clear bottom 6 bits
   570 0000385B EE                  <1>     out dx, al  
   571 0000385C FFC2                <1>     inc edx     ;Goto base + 6, Drive/Head controller register
   572 0000385E 58                  <1>     pop rax     ;Get back the drive head number from dh into ah
   573 0000385F 88E0                <1>     mov al, ah  
   574 00003861 240F                <1>     and al, 0Fh ;Save only bottom nybble
   575 00003863 0A4515              <1>     or al, byte [rbp + fdiskEntry.msBit]    ;Add the MS bits to al
   576 00003866 EE                  <1>     out dx, al
   577 00003867 58                  <1>     pop rax
   578 00003868 F8                  <1>     clc
   579 00003869 C3                  <1>     ret
   580                              <1> .sCHSFailed:
   581 0000386A C60425[A9010000]20  <1>     mov byte [msdStatus], 20h   ;General controller failure
   582 00003872 C3                  <1>     ret ;Carry flag propagated
   583                              <1> 
   584                              <1> ;LBA functions
   585                              <1> .readLBA:
   586 00003873 E873000000          <1>     call .setupLBA
   587 00003878 0F8240FEFFFF        <1>     jc .errorExit
   588                              <1>     ;Send command
   589 0000387E 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   590 00003882 81C207000000        <1>     add edx, 7  ;Goto command register
   591 00003888 88C1                <1>     mov cl, al  ;Save sector count in cl
   592 0000388A B020                <1>     mov al, 20h ;ATA READ COMMAND!
   593 0000388C E9CAFDFFFF          <1>     jmp .read
   594                              <1> 
   595                              <1> .writeLBA:
   596 00003891 E855000000          <1>     call .setupLBA
   597 00003896 0F8222FEFFFF        <1>     jc .errorExit
   598                              <1>     ;Send command
   599 0000389C 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   600 000038A0 81C207000000        <1>     add edx, 7  ;Goto command register
   601 000038A6 88C1                <1>     mov cl, al  ;Save sector count in cl
   602 000038A8 B030                <1>     mov al, 30h ;ATA WRITE COMMAND!
   603 000038AA E911FEFFFF          <1>     jmp .write
   604                              <1> 
   605                              <1> .verifyLBA:
   606 000038AF E837000000          <1>     call .setupLBA
   607 000038B4 0F8204FEFFFF        <1>     jc .errorExit
   608                              <1>     ;Send command
   609 000038BA 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   610 000038BE 81C207000000        <1>     add edx, 7  ;Goto command register
   611 000038C4 88C1                <1>     mov cl, al  ;Save sector count in cl
   612 000038C6 B040                <1>     mov al, 40h ;ATA VERIFY COMMAND!
   613 000038C8 E970FEFFFF          <1>     jmp .verify
   614                              <1> 
   615                              <1> .formatLBA:
   616 000038CD E819000000          <1>     call .setupLBA
   617 000038D2 0F82E6FDFFFF        <1>     jc .errorExit
   618                              <1>     ;Send command
   619 000038D8 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   620 000038DC 81C207000000        <1>     add edx, 7  ;Goto command register
   621 000038E2 88C1                <1>     mov cl, al  ;Save sector count in cl
   622 000038E4 B030                <1>     mov al, 30h ;ATA WRITE COMMAND!
   623 000038E6 E97DFEFFFF          <1>     jmp .format
   624                              <1> 
   625                              <1> .setupLBA:
   626                              <1>     ;First sets the chosen device, then sets all the registers
   627                              <1>     ; except for the command and then returns
   628 000038EB E84BFCFFFF          <1>     call .selectDriveFromTable
   629 000038F0 7233                <1>     jc .sLBAFailed
   630 000038F2 50                  <1>     push rax        ;Save sector count on stack
   631 000038F3 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   632 000038F7 81C202000000        <1>     add edx, 2      ;Goto base + 2, Sector count
   633 000038FD EE                  <1>     out dx, al      ;Output sector number
   634 000038FE FFC2                <1>     inc edx         ;Goto base + 3, LBA low
   635 00003900 88C8                <1>     mov al, cl      ;Get LBA low address
   636 00003902 C1E908              <1>     shr ecx, 8      ;Get second byte low
   637 00003905 EE                  <1>     out dx, al      
   638                              <1> 
   639 00003906 FFC2                <1>     inc edx         ;Goto base + 4, LBA mid
   640 00003908 88C8                <1>     mov al, cl      ;Get LBA second byte
   641 0000390A C1E908              <1>     shr ecx, 8      ;Get third byte low
   642 0000390D EE                  <1>     out dx, al
   643                              <1> 
   644 0000390E FFC2                <1>     inc edx         ;Goto base + 5, LBA high
   645 00003910 88C8                <1>     mov al, cl      ;Get LBA third byte
   646 00003912 C1E908              <1>     shr ecx, 8      ;Get final nybble into cl
   647 00003915 EE                  <1>     out dx, al
   648                              <1> 
   649 00003916 FFC2                <1>     inc edx         ;Goto base + 6, LBA upper bits and drive select
   650 00003918 88C8                <1>     mov al, cl      ;Get final nybble into al
   651 0000391A 240F                <1>     and al, 0Fh     ;Clear extra bits
   652 0000391C 0A4515              <1>     or al, byte [rbp + fdiskEntry.msBit]    ;Add the master/slave bit and fixed bits
   653 0000391F 0C40                <1>     or al, 40h      ;Set LBA bit
   654 00003921 EE                  <1>     out dx, al
   655 00003922 58                  <1>     pop rax  ;Return sector count into al
   656 00003923 F8                  <1>     clc
   657 00003924 C3                  <1>     ret
   658                              <1> .sLBAFailed:
   659 00003925 C60425[A9010000]20  <1>     mov byte [msdStatus], 20h   ;General controller failure
   660 0000392D C3                  <1>     ret ;Carry flag propagated
   661                              <1> 
   662                              <1> ;LBA48 functions
   663                              <1> .readLBA48:
   664 0000392E E873000000          <1>     call .setupLBA48
   665 00003933 0F8285FDFFFF        <1>     jc .errorExit
   666                              <1>     ;Send command
   667 00003939 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   668 0000393D 81C207000000        <1>     add edx, 7  ;Goto command register
   669 00003943 88C1                <1>     mov cl, al  ;Save sector count in cl
   670 00003945 B024                <1>     mov al, 24h ;ATA READ EXT COMMAND!
   671 00003947 E90FFDFFFF          <1>     jmp .read
   672                              <1> 
   673                              <1> .writeLBA48:
   674 0000394C E855000000          <1>     call .setupLBA48
   675 00003951 0F8267FDFFFF        <1>     jc .errorExit
   676                              <1>     ;Send command
   677 00003957 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   678 0000395B 81C207000000        <1>     add edx, 7  ;Goto command register
   679 00003961 88C1                <1>     mov cl, al  ;Save sector count in cl
   680 00003963 B034                <1>     mov al, 34h ;ATA WRITE EXT COMMAND!
   681 00003965 E956FDFFFF          <1>     jmp .write
   682                              <1> 
   683                              <1> .verifyLBA48:
   684 0000396A E837000000          <1>     call .setupLBA48
   685 0000396F 0F8249FDFFFF        <1>     jc .errorExit
   686                              <1>     ;Send command
   687 00003975 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   688 00003979 81C207000000        <1>     add edx, 7  ;Goto command register
   689 0000397F 88C1                <1>     mov cl, al  ;Save sector count in cl
   690 00003981 B042                <1>     mov al, 42h ;ATA VERIFY EXT COMMAND!
   691 00003983 E9B5FDFFFF          <1>     jmp .verify
   692                              <1> 
   693                              <1> .formatLBA48:
   694 00003988 E819000000          <1>     call .setupLBA48
   695 0000398D 0F822BFDFFFF        <1>     jc .errorExit
   696                              <1>     ;Send command
   697 00003993 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   698 00003997 81C207000000        <1>     add edx, 7  ;Goto command register
   699 0000399D 88C1                <1>     mov cl, al  ;Save sector count in cl
   700 0000399F B034                <1>     mov al, 34h ;ATA WRITE EXT COMMAND!
   701 000039A1 E9C2FDFFFF          <1>     jmp .format
   702                              <1> 
   703                              <1> .setupLBA48:
   704                              <1> ;First sets the chosen device, then sets all the registers
   705                              <1>     ; except for the command and then returns
   706 000039A6 E890FBFFFF          <1>     call .selectDriveFromTable
   707 000039AB 0F8274FFFFFF        <1>     jc .sLBAFailed
   708 000039B1 50                  <1>     push rax        ;Save sector count on stack
   709 000039B2 0FB75513            <1>     movzx edx, word [rbp + fdiskEntry.ioBase]
   710 000039B6 81C202000000        <1>     add edx, 2      ;Goto base + 2, Sector count
   711 000039BC 48C1C918            <1>     ror rcx, 24     ;Move the upper three bytes low
   712 000039C0 30C0                <1>     xor al, al      ;High byte of sector count is always 0
   713 000039C2 EE                  <1>     out dx, al
   714                              <1> 
   715 000039C3 FFC2                <1>     inc edx         ;Goto base + 3, Write LBA byte 4
   716 000039C5 88C8                <1>     mov al, cl      ;Get LBA byte 4 into al
   717 000039C7 EE                  <1>     out dx, al
   718 000039C8 48C1E908            <1>     shr rcx, 8      ;Shift bytes down by 1
   719                              <1> 
   720 000039CC FFC2                <1>     inc edx         ;Goto base + 4, Write LBA byte 5
   721 000039CE 88C8                <1>     mov al, cl      ;Get LBA byte 5 into al
   722 000039D0 EE                  <1>     out dx, al
   723 000039D1 48C1E908            <1>     shr rcx, 8      ;Shift bytes down by 1
   724                              <1> 
   725 000039D5 FFC2                <1>     inc edx         ;Goto base + 5, Write LBA byte 6
   726 000039D7 88C8                <1>     mov al, cl      ;Get LBA byte 6 into al
   727 000039D9 EE                  <1>     out dx, al
   728                              <1> 
   729 000039DA 48C1E918            <1>     shr rcx, 24     ;Shift down by an extra two to eliminate two dummy bytes
   730                              <1> ;cl now has LBA byte 1 again
   731 000039DE 81EA03000000        <1>     sub edx, 3      ;Goto base + 2, Write low byte of sector count
   732 000039E4 58                  <1>     pop rax         ;Get back sector count from stack
   733 000039E5 50                  <1>     push rax        ;Push it back onto the stack
   734 000039E6 EE                  <1>     out dx, al
   735                              <1> 
   736 000039E7 FFC2                <1>     inc edx         ;Goto base + 3, Write LBA byte 1
   737 000039E9 88C8                <1>     mov al, cl      ;Get LBA byte 1 into al
   738 000039EB EE                  <1>     out dx, al
   739 000039EC 48C1E908            <1>     shr rcx, 8      ;Shift bytes down by 1
   740                              <1> 
   741 000039F0 FFC2                <1>     inc edx         ;Goto base + 4, Write LBA byte 2
   742 000039F2 88C8                <1>     mov al, cl      ;Get LBA byte 2 into al
   743 000039F4 EE                  <1>     out dx, al
   744 000039F5 48C1E908            <1>     shr rcx, 8
   745                              <1> 
   746 000039F9 FFC2                <1>     inc edx         ;Goto base + 5, Write LBA byte 3
   747 000039FB 88C8                <1>     mov al, cl      ;Get LBA byte 3 into al
   748 000039FD EE                  <1>     out dx, al
   749                              <1> 
   750 000039FE FFC2                <1>     inc edx         ;Goto base + 6, write drive select
   751 00003A00 8A4515              <1>     mov al, byte [rbp + fdiskEntry.msBit]    ;Add the master/slave bit and fixed bits
   752 00003A03 0C40                <1>     or al, 40h      ;Set LBA bit
   753 00003A05 EE                  <1>     out dx, al
   754                              <1> 
   755 00003A06 58                  <1>     pop rax  ;Return sector count into al
   756 00003A07 F8                  <1>     clc
   757 00003A08 C3                  <1>     ret
   109                                  %include "./Source/Resident/Hardware/USB/EHCI/ehciDriv.asm"
   110                              <1> ;--------------------USB Driver and data area--------------------
   111                              <1> ;Note, this needs to be updated.
   112                              <1> ;All SCSI, MSD and HUB related functions are grouped in this file
   113                              <1> ;SCSI functions need to be moved into their own folder
   114                              <1> USB:
   115                              <1> ;------------------------EHCI functions--------------------------
   116                              <1> ;eActiveCtrlr must be set with the offset of the controller
   117                              <1> ; IFF the controller is about to enter a state in which it could
   118                              <1> ; fire an interrupt. These functions must safeguard against it by
   119                              <1> ; checking that this byte is -1 first and then setting the byte
   120                              <1> ; with the selected controller index, ending by resetting this 
   121                              <1> ; byte to -1 (even on fail). 
   122                              <1> ;
   123                              <1> ;Certain functions may be called to act upon the CURRENT ACTIVE
   124                              <1> ; controller, these functions dont need these safeguards, though
   125                              <1> ; they may need to ensure that there is a valid controller number 
   126                              <1> ; in the eActiveCtrlr byte.
   127                              <1> ;----------------------------------------------------------------
   128                              <1> .ehciCriticalErrorWrapper:
   129                              <1> ;Currently just jumps to the installed address.
   130                              <1> ;Conditional error calls MUST call this wrapper to allow for
   131                              <1> ; host operating systems to install their own USB error handlers
   132                              <1> ; and have the system continue working.
   133 00003A09 FF2425[36020000]    <1>     jmp qword [eHCErrorHandler]
   134                              <1> .ehciCriticalErrorHandler:
   135                              <1> ;Currently just halts the system
   136 00003A10 BB07000000          <1>     mov ebx, 07h
   137 00003A15 E8DDC6FFFF          <1>     call cls
   138 00003A1A 48BD-               <1>     mov rbp, .ecehmsg
   138 00003A1C [373A000000000000]  <1>
   139 00003A24 66B80413            <1>     mov ax, 1304h
   140 00003A28 CD30                <1>     int 30h
   141 00003A2A B0FF                <1>     mov al, 0FFh
   142 00003A2C E621                <1>     out pic1data, al
   143 00003A2E E6A1                <1>     out pic2data, al
   144 00003A30 FA                  <1>     cli
   145 00003A31 F4                  <1>     hlt
   146 00003A32 E9F9FFFFFF          <1>     jmp $ - 2
   147 00003A37 454843492043686563- <1> .ecehmsg db "EHCI Check 1", 0
   147 00003A40 6B203100            <1>
   148                              <1> .setupEHCIcontroller:
   149                              <1> ;Resets, initialises variables to default
   150                              <1> ;Input: al = Controller to setup (0 based)
   151                              <1> ;Output: CF=CY - Controller failed to reset
   152                              <1> ;        CF=NC - No problems
   153                              <1> ; al = Controller that was reset
   154 00003A44 51                  <1>     push rcx
   155 00003A45 53                  <1>     push rbx
   156 00003A46 55                  <1>     push rbp
   157 00003A47 E80F010000          <1>     call .ehciResetCtrlr    ;Reset the controller
   158 00003A4C 7215                <1>     jc .secexit
   159 00003A4E 6631DB              <1>     xor bx, bx ;No schedule, no interrupts
   160 00003A51 31C9                <1>     xor ecx, ecx
   161 00003A53 48BD-               <1>     mov rbp, ehciAschedule
   161 00003A55 [0000000000000000]  <1>
   162 00003A5D E8EB010000          <1>     call .ehciInitCtrlrRegs    ;Initialise controller registers
   163 00003A62 F8                  <1>     clc
   164                              <1> .secexit:
   165 00003A63 5D                  <1>     pop rbp
   166 00003A64 5B                  <1>     pop rbx
   167 00003A65 59                  <1>     pop rcx
   168 00003A66 C3                  <1>     ret
   169                              <1> 
   170                              <1> .ehciResetControllerPort:
   171                              <1> ;A function that enacts an EHCI reset on a port.
   172                              <1> ;Works ONLY on the current active controller.
   173                              <1> ;Input:
   174                              <1> ; al = Port number [0,N-1] (Checked against ctrlr struc params entry)
   175                              <1> ;Returns:
   176                              <1> ; CF set if failed, clear if success
   177                              <1> ; ax=Error code, 0h=No active controller
   178                              <1> ;             1h=Invalid port number
   179                              <1> ;             2h=No device on port
   180                              <1> ;             3h=Port not enabled (Low speed device)
   181                              <1> ;             4h=Device not entering reset
   182                              <1> ;             5h=Device not clearing reset
   183                              <1> ;             6h=Port not enabled (Full speed device)
   184                              <1> ; rax destroyed
   185 00003A67 53                  <1>     push rbx
   186 00003A68 51                  <1>     push rcx
   187 00003A69 52                  <1>     push rdx
   188 00003A6A 55                  <1>     push rbp
   189                              <1> 
   190 00003A6B 6631ED              <1>     xor bp, bp
   191 00003A6E 0FB6D0              <1>     movzx edx, al    ;Save port number into dl (edx)
   192 00003A71 0FB61C25[47020000]  <1>     movzx ebx, byte [eActiveCtrlr]
   193 00003A79 80FBFF              <1>     cmp bl, -1
   194 00003A7C 0F84D3000000        <1>     je .ercperr    ;Error, No active controller (ec=0)
   195 00003A82 66FFC5              <1>     inc bp        ;Inc error counter
   196 00003A85 8B1CDD[19020000]    <1>     mov ebx, dword [eControllerList + 4 + 8*rbx]    ;get mmiobase into ebx
   197 00003A8C 678B4304            <1>     mov eax, dword [ebx+ehcistrucparams]    ;Get # of ports in al
   198 00003A90 247F                <1>     and al, 7Fh    ;al contains port number, clear upper bit
   199 00003A92 FEC8                <1>     dec al        ;Zero based port number
   200 00003A94 0FB6C0              <1>     movzx eax, al
   201 00003A97 38C2                <1>     cmp dl, al    ;dl contains called port number
   202 00003A99 0F87B6000000        <1>     ja .ercperr    ;Error, invalid port number (ec=1)
   203 00003A9F 66FFC5              <1>     inc bp        ;Inc error counter
   204                              <1> 
   205                              <1> 
   206 00003AA2 670FB603            <1>     movzx eax, byte [ebx]    ;Byte access for caplength!
   207 00003AA6 01C3                <1>     add ebx, eax    ;eax now points to opregs    
   208 00003AA8 66B90A00            <1>     mov cx, 10
   209                              <1> .erclp0:    ;Remember ebx=opregs, edx=port number    
   210 00003AAC 67814C934400100000  <1>     or dword [ebx+4*edx+ehciportsc], 1000h ;Set power bit
   211                              <1> 
   212 00003AB5 51                  <1>     push rcx
   213 00003AB6 B90A000000          <1>     mov ecx, 10
   214 00003ABB B486                <1>     mov ah, 86h
   215 00003ABD CD35                <1>     int 35h        ;Wait for 10 ms
   216 00003ABF 59                  <1>     pop rcx
   217                              <1> 
   218                              <1> .erclp1:
   219 00003AC0 66FFC9              <1>     dec cx
   220 00003AC3 0F848C000000        <1>     jz .ercperr ;Error, No device on port (ec=2)
   221 00003AC9 67F744934401000000  <1>     test dword [ebx+4*edx+ehciportsc], 1h    ;Test device on port
   222 00003AD2 74D8                <1>     jz .erclp0
   223 00003AD4 66FFC5              <1>     inc bp        ;Inc error counter
   224                              <1> 
   225 00003AD7 678B449344          <1>     mov eax, dword [ebx+4*edx+ehciportsc]
   226 00003ADC 6625000C            <1>     and ax, 0C00h
   227 00003AE0 662D0004            <1>     sub ax, 400h
   228 00003AE4 66FFC8              <1>     dec ax
   229 00003AE7 746C                <1>     jz .ercperr    ;Error, Low speed device (ec=3)
   230 00003AE9 66FFC5              <1>     inc bp        ;Inc error counter
   231                              <1> 
   232 00003AEC 66B90A00            <1>     mov cx, 10
   233                              <1> .erclp2:
   234 00003AF0 66FFC9              <1>     dec cx
   235 00003AF3 7460                <1>     jz .ercperr ;Error, Device not entering reset (ec=4)
   236 00003AF5 67814C934400010000  <1>     or dword [ebx+4*edx+ehciportsc], 100h    ;Set bit 8, port reset bit
   237                              <1>     
   238 00003AFE 51                  <1>     push rcx
   239 00003AFF B90A000000          <1>     mov ecx, 10
   240 00003B04 B486                <1>     mov ah, 86h
   241 00003B06 CD35                <1>     int 35h        ;Wait for 10 ms
   242 00003B08 59                  <1>     pop rcx
   243                              <1> 
   244 00003B09 67F744934400010000  <1>     test dword [ebx+4*edx+ehciportsc], 100h    ;Check if entered reset
   245 00003B12 74DC                <1>     jz .erclp2
   246                              <1> 
   247 00003B14 66FFC5              <1>     inc bp        ;Inc error counter
   248 00003B17 66B90A00            <1>     mov cx, 10
   249 00003B1B 6781649344FFFEFFFF  <1>     and dword [ebx+4*edx+ehciportsc], 0FFFFFEFFh    ;Clear reset bit
   250                              <1> .erclp3:
   251 00003B24 FFC9                <1>     dec ecx
   252 00003B26 742D                <1>     jz .ercperr ;Error, Device not leaving reset (ec=5)
   253                              <1> 
   254 00003B28 51                  <1>     push rcx
   255 00003B29 B90A000000          <1>     mov ecx, 10
   256 00003B2E B486                <1>     mov ah, 86h
   257 00003B30 CD35                <1>     int 35h        ;Wait for 10 ms
   258 00003B32 59                  <1>     pop rcx
   259                              <1> 
   260 00003B33 67F744934400010000  <1>     test dword [ebx+4*edx+ehciportsc], 100h
   261 00003B3C 75E6                <1>     jnz .erclp3
   262 00003B3E 66FFC5              <1>     inc bp        ;Inc error counter
   263                              <1> 
   264 00003B41 67F744934404000000  <1>     test dword [ebx+4*edx+ehciportsc], 4h    ;Bit 2 is the port enabled bit
   265 00003B4A 7409                <1>     jz .ercperr    ;Error, Full speed device (ec=6)
   266                              <1> ;We get here IFF device on port is high speed
   267                              <1>     
   268                              <1> ;High Speed Device successfully reset. Now print message or whatever
   269 00003B4C 4831C0              <1>     xor rax, rax
   270 00003B4F F8                  <1>     clc
   271                              <1> .ercpexit:
   272 00003B50 5D                  <1>     pop rbp
   273 00003B51 5A                  <1>     pop rdx
   274 00003B52 59                  <1>     pop rcx
   275 00003B53 5B                  <1>     pop rbx
   276 00003B54 C3                  <1>     ret
   277                              <1> .ercperr:
   278 00003B55 6689E8              <1>     mov ax, bp    ;Get error code in ax
   279 00003B58 F9                  <1>     stc
   280 00003B59 EBF5                <1>     jmp short .ercpexit
   281                              <1> 
   282                              <1> .ehciResetCtrlr:
   283                              <1> ;A function that resets a controller. 
   284                              <1> ;No other controllers may be running during a ctrlr reset
   285                              <1> ;Input:
   286                              <1> ; al = Offset into the ehci controller table
   287                              <1> ;Returns:
   288                              <1> ; CF=CY if failed, CF=NC if reset
   289                              <1> ;All registers preserved
   290 00003B5B 50                  <1>     push rax
   291 00003B5C 51                  <1>     push rcx
   292                              <1>     ;cmp byte [eActiveCtrlr], -1
   293                              <1>     ;jne .erc2    ;A controller already active, exit fail (ec=0)
   294                              <1>     ;mov byte [eActiveCtrlr], al    ;For added security (may be removed later)
   295 00003B5D E800180000          <1>     call .ehciGetOpBase
   296 00003B62 67C7400800000000    <1>     mov dword [eax + ehciintr], 0h    ;No interrupts
   297 00003B6A 67C740043F000000    <1>     mov dword [eax + ehcists], 3Fh    ;Clear any outstanding interrupts
   298                              <1>     ;Set the reset bit, check to see if run bit has cleared first!
   299 00003B72 31C9                <1>     xor ecx, ecx
   300                              <1> .erc0:
   301 00003B74 678120FEFFFFFF      <1>     and dword [eax + ehcicmd], 0FFFFFFFEh    ;Force stop the controller
   302 00003B7B FFC9                <1>     dec ecx
   303 00003B7D 743D                <1>     jz .erc2    ;Controller not resetting, exit fail  (ec=1)
   304                              <1> 
   305 00003B7F 67F7400400100000    <1>     test dword [eax + ehcists], 1000h    ;Test if bit 12 has been set
   306 00003B87 74EB                <1>     jz .erc0
   307 00003B89 67810802000000      <1>     or dword [eax + ehcicmd], 02h ;Set bit 1, reset HC
   308                              <1>     ;Spin and wait to give device time to respond and reset.
   309 00003B90 6631C9              <1>     xor cx, cx
   310                              <1> .erc1:
   311 00003B93 66FFC9              <1>     dec cx        ;Wait for reset to happen
   312 00003B96 7424                <1>     jz .erc2    ;Not resetting, exit fail (ec=2)
   313                              <1> 
   314 00003B98 50                  <1>     push rax
   315 00003B99 51                  <1>     push rcx
   316 00003B9A B486                <1>     mov ah, 86h
   317 00003B9C B905000000          <1>     mov ecx, 5    ;5ms wait
   318 00003BA1 CD35                <1>     int 35h
   319 00003BA3 59                  <1>     pop rcx
   320 00003BA4 58                  <1>     pop rax
   321                              <1> 
   322 00003BA5 67F70002000000      <1>     test dword [eax + ehcicmd], 2h    ;Whilst this bit is set, keep looping
   323 00003BAC 75E5                <1>     jnz .erc1
   324 00003BAE 31C0                <1>     xor eax, eax
   325 00003BB0 F8                  <1>     clc
   326                              <1> .ercexit:
   327 00003BB1 C60425[47020000]FF  <1>     mov byte [eActiveCtrlr], -1    ;No controllers active
   328 00003BB9 59                  <1>     pop rcx
   329 00003BBA 58                  <1>     pop rax
   330 00003BBB C3                  <1>     ret
   331                              <1> .erc2:
   332 00003BBC F9                  <1>     stc
   333 00003BBD EBF2                <1>     jmp short .ercexit
   334                              <1> 
   335                              <1> .ehciRunCtrlr:
   336                              <1> ;A function that runs a controller to process set schedules
   337                              <1> ;Input:
   338                              <1> ;   al = Offset into the controller table
   339                              <1> ;Returns:
   340                              <1> ; CF = CY if failed, CF = NC if success
   341 00003BBF 50                  <1>     push rax
   342 00003BC0 51                  <1>     push rcx
   343 00003BC1 E89C170000          <1>     call .ehciGetOpBase
   344 00003BC6 67F7400400100000    <1>     test dword [eax + ehcists], 1000h    ;bit 12 must be set to write 1 in cmd
   345 00003BCE 741E                <1>     jz .esc2
   346 00003BD0 67810801000000      <1>     or dword [eax + ehcicmd], 1h ;Set bit 0 to run
   347 00003BD7 31C9                <1>     xor ecx, ecx
   348                              <1> .esc0:
   349 00003BD9 66FFC9              <1>     dec cx
   350 00003BDC 7410                <1>     jz .esc2
   351 00003BDE 67F7400400100000    <1>     test dword [eax + ehcists], 1000h    ;bit 12 must be clear
   352 00003BE6 75F1                <1>     jnz .esc0
   353 00003BE8 31C0                <1>     xor eax, eax
   354 00003BEA F8                  <1>     clc
   355                              <1> .esc1:
   356 00003BEB 59                  <1>     pop rcx
   357 00003BEC 58                  <1>     pop rax
   358 00003BED C3                  <1>     ret
   359                              <1> .esc2:    ;Bad exit
   360 00003BEE F9                  <1>     stc
   361 00003BEF EBFA                <1>     jmp short .esc1
   362                              <1> 
   363                              <1> .ehciStopCtrlr:
   364                              <1> ;A function that stops current active controller from running
   365                              <1> ;Input:
   366                              <1> ; al=Controller to stop processing
   367                              <1> ;Returns:
   368                              <1> ; CF set if failed to stop, clear if success
   369 00003BF1 50                  <1>     push rax
   370 00003BF2 51                  <1>     push rcx
   371 00003BF3 480FB60425-         <1>     movzx rax, byte [eActiveCtrlr]
   371 00003BF8 [47020000]          <1>
   372 00003BFC E861170000          <1>     call .ehciGetOpBase
   373 00003C01 678120FEFFFFFF      <1>     and dword [eax + ehcicmd], 0FFFFFFFEh    ;Stop controller
   374 00003C08 31C9                <1>     xor ecx, ecx
   375                              <1> .estc0:
   376 00003C0A 66FFC9              <1>     dec cx
   377 00003C0D 740E                <1>     jz .estc1
   378 00003C0F 67F7400400100000    <1>     test dword [eax + ehcists], 1000h    ;test hchalted until set
   379 00003C17 74F1                <1>     jz .estc0
   380 00003C19 F8                  <1>     clc
   381                              <1> .estcexit:
   382 00003C1A 59                  <1>     pop rcx
   383 00003C1B 58                  <1>     pop rax
   384 00003C1C C3                  <1>     ret
   385                              <1> .estc1:
   386 00003C1D F9                  <1>     stc
   387 00003C1E EBFA                <1>     jmp short .estcexit
   388                              <1> .ehciAdjustAsyncSchedCtrlr:
   389                              <1> ;This function checks the currently online controller and compares it to
   390                              <1> ; the value provided in al. 
   391                              <1> ;If they are equal, do nothing.
   392                              <1> ;If not, turn off controller, update active ctrlr byte and indicate a new bus 
   393                              <1> ; was activated.
   394                              <1> ;If no controller active, update active ctrlr byte and indicate which bus 
   395                              <1> ; has been activated.
   396                              <1> ;
   397                              <1> ; Input: al = Controller to activate, preserved.
   398                              <1> ; Output: CF=CY: Error, turn off all controllers
   399                              <1> ;         CF=NC: All ok, proceed
   400 00003C20 3A0425[47020000]    <1>     cmp al, byte [eActiveCtrlr]
   401 00003C27 7420                <1>     je .eacOkExit
   402 00003C29 803C25[47020000]FF  <1>     cmp byte [eActiveCtrlr], -1
   403 00003C31 7407                <1>     je .eacStart
   404 00003C33 E8D8020000          <1>     call .ehciStopAsyncSchedule ;Stop currently transacting controller
   405 00003C38 7211                <1>     jc .eacBad
   406                              <1> .eacStart:
   407 00003C3A 880425[47020000]    <1>     mov byte [eActiveCtrlr], al ;Set new active controller
   408 00003C41 C60425[46020000]01  <1>     mov byte [eNewBus], 1   ;Set flag that a new bus has been selected
   409                              <1> .eacOkExit:
   410 00003C49 F8                  <1>     clc
   411 00003C4A C3                  <1>     ret
   412                              <1> .eacBad:
   413 00003C4B F9                  <1>     stc
   414 00003C4C C3                  <1>     ret
   415                              <1> .ehciInitCtrlrRegs:
   416                              <1> ;A function that initialises a given controllers registers as needed.
   417                              <1> ;Controller is left ready to process data start schedules
   418                              <1> ;MUST NOT BE CALLED ON A RUNNING CONTROLLER
   419                              <1> ;Input:
   420                              <1> ; al = Offset into the ehci controller table
   421                              <1> ; bl = ehciintr mask
   422                              <1> ; bh = Schedule mask, bits [7:2] reserved
   423                              <1> ;        00b = No schedule, 01b=Periodic, 10b=Async, 11b=Both
   424                              <1> ; ecx = Frame Index
   425                              <1> ; rbp = Schedule address
   426                              <1> ;Returns:
   427                              <1> ; Nothing
   428 00003C4D 50                  <1>     push rax
   429 00003C4E 53                  <1>     push rbx
   430 00003C4F 51                  <1>     push rcx
   431 00003C50 53                  <1>     push rbx
   432 00003C51 E80C170000          <1>     call .ehciGetOpBase    ;Get opbase 
   433 00003C56 0FB7DB              <1>     movzx ebx, bx
   434 00003C59 67C7400800000000    <1>     mov dword [eax + ehciintr], 0
   435 00003C61 6789480C            <1>     mov dword [eax + ehcifrindex], ecx
   436 00003C65 67896818            <1>     mov dword [eax + ehciasyncaddr], ebp
   437 00003C69 48C1CD20            <1>     ror rbp, 20h    ;Get upper dword low
   438 00003C6D 67896810            <1>     mov dword [eax + ehcictrlseg], ebp
   439 00003C71 5B                  <1>     pop rbx    ;Get back bh
   440 00003C72 30DB                <1>     xor bl, bl    ;Zero lo byte
   441 00003C74 66C1EB04            <1>     shr bx, 4    ;Shift to hi nybble of lo byte
   442 00003C78 678120CF000000      <1>     and dword [eax + ehcicmd], 0CFh    ;Clear schedule enable bits
   443 00003C7F 670B18              <1>     or ebx, dword [eax + ehcicmd]    ;Add ehcicmd to schedule mask
   444 00003C82 81E3F3FF00FF        <1>     and ebx, 0FF00FFF3h    ;Clear the Int Threshold and Frame List bits
   445 00003C88 81CB00000800        <1>     or ebx, 000080000h ;Set 8 microframes (1 ms) per interrupt
   446 00003C8E 678918              <1>     mov dword [eax + ehcicmd], ebx    ;Write back
   447 00003C91 67C7404001000000    <1>     mov dword [eax + ehciconfigflag], 1h    ;Route all ports to EHCI ctrlr
   448 00003C99 59                  <1>     pop rcx
   449 00003C9A 5B                  <1>     pop rbx
   450 00003C9B 58                  <1>     pop rax
   451 00003C9C C3                  <1>     ret
   452                              <1> .ehciCtrlrGetNumberOfPorts:
   453                              <1> ;Gets the number of ports on a Host Controller.
   454                              <1> ;Ports are zero addressed so ports numbers are 0 to NUMBER_OF_PORTS - 1
   455                              <1> ;Input:  al = Offset into the controller table
   456                              <1> ;Output: rax = Number of ports on controller.
   457                              <1> ;Warning, input NOT bounds checked.
   458 00003C9D 0FB6C0              <1>     movzx eax, al
   459 00003CA0 8B04C5[19020000]    <1>     mov eax, dword [eControllerList + 4 + 8*rax]
   460 00003CA7 678B4004            <1>     mov eax, dword [eax + ehcistrucparams]
   461 00003CAB 257F000000          <1>     and eax, 7Fh    ;Clear upper bits
   462 00003CB0 C3                  <1>     ret
   463                              <1> .ehciGetNewQHeadAddr:
   464                              <1> ;Picks which QHead position to put the new Qhead into
   465                              <1> ;Input: Nothing
   466                              <1> ;Output: rdi = Position in RAM for QHead
   467                              <1> ;        r8  = Link to next QHead
   468                              <1> ;           r8 NEEDS to be or'ed with 2 when used as a QHead pointer
   469 00003CB1 49B8-               <1>     mov r8, ehciQHead1
   469 00003CB3 [8000000000000000]  <1>
   470 00003CBB 48BF-               <1>     mov rdi, ehciQHead0
   470 00003CBD [0000000000000000]  <1>
   471 00003CC5 483B3C25[3E020000]  <1>     cmp rdi, qword [eCurrAsyncHead]   ;Compare head to start of buffer
   472 00003CCD 7503                <1>     jne .egnqaexit
   473 00003CCF 4987F8              <1>     xchg rdi, r8
   474                              <1> .egnqaexit:
   475 00003CD2 C3                  <1>     ret
   476                              <1> 
   477                              <1> .ehciToggleTransactingQHead:
   478                              <1> ;Toggles the transacting Qhead position
   479                              <1> ;This is called AFTER the old Qhead has been delinked from the AsynchSchedule
   480 00003CD3 48813C25[3E020000]- <1>     cmp qword [eCurrAsyncHead], ehciQHead0
   480 00003CDB [00000000]          <1>
   481 00003CDF 750D                <1>     jne .ettqh0
   482 00003CE1 48C70425[3E020000]- <1>     mov qword [eCurrAsyncHead], ehciQHead1
   482 00003CE9 [80000000]          <1>
   483 00003CED C3                  <1>     ret
   484                              <1> .ettqh0:
   485 00003CEE 48C70425[3E020000]- <1>     mov qword [eCurrAsyncHead], ehciQHead0
   485 00003CF6 [00000000]          <1>
   486 00003CFA C3                  <1>     ret
   487                              <1> 
   488                              <1> .ehciDelinkOldQHead:
   489                              <1> ;Delinks the old Qhead from the list async list
   490 00003CFB 57                  <1>     push rdi
   491 00003CFC 4150                <1>     push r8
   492 00003CFE E8AEFFFFFF          <1>     call .ehciGetNewQHeadAddr
   493 00003D03 4989F8              <1>     mov r8, rdi
   494 00003D06 4981C802000000      <1>     or r8, 2
   495 00003D0D 448907              <1>     mov dword [rdi], r8d    ;Point the new qhead to itself
   496 00003D10 814F0400800000      <1>     or dword [rdi + 4], 8000h   ;Toggle H-bit in the current transacting QHead
   497 00003D17 4158                <1>     pop r8
   498 00003D19 5F                  <1>     pop rdi
   499 00003D1A C3                  <1>     ret
   500                              <1> 
   501                              <1> .ehciLinkNewQHead:
   502                              <1> ;Links the inserted qhead into the async list
   503 00003D1B 57                  <1>     push rdi
   504 00003D1C 4150                <1>     push r8
   505 00003D1E E88EFFFFFF          <1>     call .ehciGetNewQHeadAddr   ;Get bus addresses
   506 00003D23 803C25[46020000]01  <1>     cmp byte [eNewBus], 1
   507 00003D2B 740F                <1>     je .elnqadjusted   ;If equal, exit
   508 00003D2D 4881CF02000000      <1>     or rdi, 2
   509 00003D34 418938              <1>     mov dword [r8], edi
   510                              <1> .elnqhexit:
   511 00003D37 F8                  <1>     clc
   512 00003D38 4158                <1>     pop r8
   513 00003D3A 5F                  <1>     pop rdi
   514 00003D3B C3                  <1>     ret
   515                              <1> ;Only here if a new bus was Adjusted
   516                              <1> .elnqadjusted:
   517                              <1> ;The first qhead in a new queue must always point to itself and be
   518                              <1> ; the head of the reclaim list.
   519                              <1> ;The same address is provided to the function which writes the qhead
   520                              <1> ; and in the above function call into rdi, thus allowing us to point
   521                              <1> ; the new qhead to itself and set the H-bit on, in ALL instances 
   522 00003D3C 4989F8              <1>     mov r8, rdi
   523 00003D3F 4981C802000000      <1>     or r8, 2
   524 00003D46 448907              <1>     mov dword [rdi], r8d    ;Point the QHead to itself
   525 00003D49 814F0400800000      <1>     or dword [rdi + 4], 8000h   ;Set H bit on
   526 00003D50 50                  <1>     push rax
   527 00003D51 8A0425[47020000]    <1>     mov al, byte [eActiveCtrlr]
   528 00003D58 E805160000          <1>     call .ehciGetOpBase
   529 00003D5D 67897818            <1>     mov dword [eax + ehciasyncaddr], edi ;Set the address in the ctrlr register
   530 00003D61 58                  <1>     pop rax
   531 00003D62 E87D010000          <1>     call .ehciStartAsyncSchedule    ;Start schedule
   532 00003D67 7209                <1>     jc .elnqhbad
   533 00003D69 FE0C25[46020000]    <1>     dec byte [eNewBus]  ;Reset back to zero if successfully onlined
   534 00003D70 EBC5                <1>     jmp short .elnqhexit
   535                              <1> .elnqhbad:  ;If Async fails to start, exit
   536 00003D72 4158                <1>     pop r8
   537 00003D74 5F                  <1>     pop rdi
   538 00003D75 F9                  <1>     stc
   539 00003D76 C3                  <1>     ret
   540                              <1> 
   541                              <1> .ehciSetNoData:
   542                              <1> ;A function that does a set request with no data phase to the device
   543                              <1> ;at address al.
   544                              <1> ;Input:
   545                              <1> ; al = Address number (7 bit value)
   546                              <1> ; rbx = Setup packet
   547                              <1> ; cx = Max Packet Length 
   548                              <1> ;Returns:
   549                              <1> ; CF = NC if no Host error, CF = CY if Host error
   550                              <1> ; Caller MUST check the schedule to ensure that the transfer was successful,
   551                              <1> ; and without transaction errors as these dont constitute Host system errors.
   552                              <1> ;
   553                              <1> ; All registers except for CF preserved
   554 00003D77 57                  <1>     push rdi
   555 00003D78 4150                <1>     push r8
   556 00003D7A 4151                <1>     push r9
   557 00003D7C 4152                <1>     push r10
   558 00003D7E 4153                <1>     push r11
   559 00003D80 51                  <1>     push rcx
   560 00003D81 52                  <1>     push rdx
   561 00003D82 FC                  <1>     cld    ;Set right direction for string ops
   562                              <1>     
   563                              <1>     ;Write setup packet
   564 00003D83 48891C25[80030000]  <1>     mov qword [ehciDataOut], rbx
   565 00003D8B E821FFFFFF          <1>     call .ehciGetNewQHeadAddr
   566 00003D90 4981C802000000      <1>     or r8, 2    ;Process qH TDs
   567 00003D97 41B900600080        <1>     mov r9d, 80006000h  ;Bit 15 not set here!!!!! Important
   568 00003D9D 0FB7C9              <1>     movzx ecx, cx
   569 00003DA0 C1E110              <1>     shl ecx, 8*2
   570 00003DA3 4109C9              <1>     or r9d, ecx
   571 00003DA6 247F                <1>     and al, 7Fh    ;Force clear upper bit of al
   572 00003DA8 4108C1              <1>     or r9b, al    ;Set lower 8 bits of r9 correctly
   573 00003DAB 41BA00000040        <1>     mov r10d, 40000000h    ;1 transaction/ms
   574 00003DB1 49BB-               <1>     mov r11, ehciTDSpace  ;First TD is the head of the buffer
   574 00003DB3 [0001000000000000]  <1>
   575                              <1> 
   576 00003DBB E827080000          <1>     call .ehciWriteQHead
   577                              <1> 
   578 00003DC0 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
   579 00003DC3 4C8D4740            <1>     lea r8, qword [rdi + ehciSizeOfTD]    ;Point to next TD
   580 00003DC7 49B901000000000000- <1>     mov r9, 1
   580 00003DD0 00                  <1>
   581 00003DD1 41BA800E0800        <1>     mov r10d, 00080E80h ;Active TD, SETUP EP, Error ctr = 3, 8 byte transfer
   582 00003DD7 49BB-               <1>     mov r11, ehciDataOut ; Data out buffer
   582 00003DD9 [8003000000000000]  <1>
   583                              <1> 
   584 00003DE1 E826080000          <1>     call .ehciWriteQHeadTD
   585                              <1> 
   586 00003DE6 4881C740000000      <1>     add rdi, ehciSizeOfTD     ;Go to next TD space
   587 00003DED 49B801000000000000- <1>     mov r8, 1
   587 00003DF6 00                  <1>
   588 00003DF7 4D89C1              <1>     mov r9, r8
   589 00003DFA 41BA808D0080        <1>     mov r10d, 80008D80h        ;Status stage opposite direction of last transfer
   590 00003E00 49BB-               <1>     mov r11, msdCSW         ;Nothing should be returned but use this point
   590 00003E02 [C005000000000000]  <1>
   591                              <1> 
   592 00003E0A E8FD070000          <1>     call .ehciWriteQHeadTD
   593 00003E0F B103                <1>     mov cl, 011b   ;Lock out internal buffer
   594 00003E11 E9BD000000          <1>     jmp .egddproceed
   595                              <1> 
   596                              <1> .ehciGetRequest:
   597                              <1> ;A function which does a standard get request from a device at
   598                              <1> ;address al.
   599                              <1> ;Input:
   600                              <1> ; al = Address number (7 bit value)
   601                              <1> ; rbx = Setup packet
   602                              <1> ; ecx = Max Packet Length 
   603                              <1> ;Returns:
   604                              <1> ; CF = NC if no Host error, CF = CY if Host error
   605                              <1> ; Caller MUST check the schedule to ensure that the transfer was successful,
   606                              <1> ; and without transaction errors as these dont constitute Host system errors.
   607                              <1> ;
   608                              <1> ; All registers except for CF preserved
   609 00003E16 57                  <1>     push rdi
   610 00003E17 4150                <1>     push r8
   611 00003E19 4151                <1>     push r9
   612 00003E1B 4152                <1>     push r10
   613 00003E1D 4153                <1>     push r11
   614 00003E1F 51                  <1>     push rcx
   615 00003E20 52                  <1>     push rdx
   616 00003E21 FC                  <1>     cld    ;Ensure right direction
   617                              <1> 
   618                              <1>     ;Write setup packet
   619 00003E22 48891C25[80030000]  <1>     mov qword [ehciDataOut], rbx
   620 00003E2A E882FEFFFF          <1>     call .ehciGetNewQHeadAddr
   621 00003E2F 4981C802000000      <1>     or r8, 2    ;Process qH TDs
   622 00003E36 41B900600080        <1>     mov r9d, 80006000h  ;Bit 15 not set here!!!!! Important
   623 00003E3C 0FB7C9              <1>     movzx ecx, cx
   624 00003E3F C1E110              <1>     shl ecx, 8*2
   625 00003E42 4109C9              <1>     or r9d, ecx
   626 00003E45 247F                <1>     and al, 7Fh    ;Force clear upper bit of al
   627 00003E47 4108C1              <1>     or r9b, al    ;Set lower 8 bits of r9 correctly
   628 00003E4A 41BA00000040        <1>     mov r10d, 40000000h    ;1 transaction/ms
   629 00003E50 49BB-               <1>     mov r11, ehciTDSpace  ;First TD is the head of the buffer
   629 00003E52 [0001000000000000]  <1>
   630                              <1>     
   631 00003E5A E888070000          <1>     call .ehciWriteQHead
   632                              <1> 
   633 00003E5F 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
   634 00003E62 4C8D4740            <1>     lea r8, qword [rdi + ehciSizeOfTD]    ;Point to next TD
   635 00003E66 49B901000000000000- <1>     mov r9, 1
   635 00003E6F 00                  <1>
   636 00003E70 41BA800E0800        <1>     mov r10d, 00080E80h ;Active TD, SETUP EP, Error ctr = 3, 8 byte transfer
   637 00003E76 49BB-               <1>     mov r11, ehciDataOut ; Data out buffer
   637 00003E78 [8003000000000000]  <1>
   638                              <1> 
   639 00003E80 E887070000          <1>     call .ehciWriteQHeadTD
   640                              <1> 
   641 00003E85 4881C740000000      <1>     add rdi, ehciSizeOfTD    ;Go to next TD space
   642 00003E8C 4C8D4740            <1>     lea r8, qword [rdi + ehciSizeOfTD]
   643 00003E90 4D89C1              <1>     mov r9, r8    ;Alt pointer also points to next TD since this is expected!
   644 00003E93 41BA800D4080        <1>     mov r10d, 80400D80h ;Active TD, IN EP, Error ctr = 3, max 64 byte transfer
   645 00003E99 49BB-               <1>     mov r11, ehciDataIn
   645 00003E9B [C003000000000000]  <1>
   646                              <1> 
   647 00003EA3 E864070000          <1>     call .ehciWriteQHeadTD
   648                              <1> 
   649 00003EA8 4881C740000000      <1>     add rdi, ehciSizeOfTD     ;Go to next TD space
   650 00003EAF 49B801000000000000- <1>     mov r8, 1
   650 00003EB8 00                  <1>
   651 00003EB9 4D89C1              <1>     mov r9, r8
   652 00003EBC 41BA808C0080        <1>     mov r10d, 80008C80h
   653 00003EC2 49BB-               <1>     mov r11, msdCSW
   653 00003EC4 [C005000000000000]  <1>
   654                              <1> 
   655 00003ECC E83B070000          <1>     call .ehciWriteQHeadTD
   656                              <1> 
   657 00003ED1 B103                <1>     mov cl, 11b    ;Lock out internal buffer, ignore one interrupt
   658                              <1> ;Now set controller to process the schedule
   659                              <1> .egddproceed:
   660 00003ED3 E867000000          <1>     call .ehciProcessCommand
   661                              <1> ;The carry status of the previous function will propagate
   662                              <1> .egddexit:
   663 00003ED8 5A                  <1>     pop rdx
   664 00003ED9 59                  <1>     pop rcx
   665 00003EDA 415B                <1>     pop r11
   666 00003EDC 415A                <1>     pop r10
   667 00003EDE 4159                <1>     pop r9
   668 00003EE0 4158                <1>     pop r8
   669 00003EE2 5F                  <1>     pop rdi
   670 00003EE3 C3                  <1>     ret
   671                              <1> 
   672                              <1> .ehciStartAsyncSchedule:
   673 00003EE4 50                  <1>     push rax
   674 00003EE5 51                  <1>     push rcx
   675                              <1> 
   676 00003EE6 8A0425[47020000]    <1>     mov al, byte [eActiveCtrlr]    ;Deals with current active controller
   677 00003EED E870140000          <1>     call .ehciGetOpBase            ;Return opregs ADDRESS in eax
   678 00003EF2 67810820000000      <1>     or dword [eax + ehcicmd], 20h    ;Process asyncschedule
   679 00003EF9 31C9                <1>     xor ecx, ecx
   680                              <1> .esas0:
   681 00003EFB FFC9                <1>     dec ecx
   682 00003EFD 740E                <1>     jz .esasfail
   683 00003EFF 67F7400400800000    <1>     test dword [eax + ehcists], 08000h ;Asyncschedule bit should be on
   684 00003F07 74F2                <1>     jz .esas0
   685                              <1> 
   686 00003F09 F8                  <1>     clc
   687                              <1> .esasok:
   688 00003F0A 59                  <1>     pop rcx
   689 00003F0B 58                  <1>     pop rax
   690 00003F0C C3                  <1>     ret
   691                              <1> .esasfail:
   692 00003F0D F9                  <1>     stc
   693 00003F0E EBFA                <1>     jmp short .esasok
   694                              <1> 
   695                              <1> .ehciStopAsyncSchedule:
   696                              <1> ;This function stops the processing of the current active Async Schedule
   697                              <1> ;Output: CF=CY: Failed to stop Async Schedule CF=NC: Stopped Async Schedule
   698 00003F10 50                  <1>     push rax
   699 00003F11 51                  <1>     push rcx
   700 00003F12 8A0425[47020000]    <1>     mov al, byte [eActiveCtrlr]    ;Deals with current active controller
   701 00003F19 E844140000          <1>     call .ehciGetOpBase            ;Return opregs ADDRESS in eax
   702 00003F1E 6631C9              <1>     xor cx, cx
   703 00003F21 678120DFFFFFFF      <1>     and dword [eax + ehcicmd], 0FFFFFFDFh ;Stop processing async
   704                              <1> .espc0:
   705 00003F28 66FFC9              <1>     dec cx
   706 00003F2B 740E                <1>     jz .espcfail
   707 00003F2D 67F7400400800000    <1>     test dword [eax + ehcists], 08000h
   708 00003F35 75F1                <1>     jnz .espc0
   709                              <1> 
   710 00003F37 F8                  <1>     clc
   711 00003F38 59                  <1>     pop rcx
   712 00003F39 58                  <1>     pop rax
   713 00003F3A C3                  <1>     ret
   714                              <1> .espcfail:
   715 00003F3B F9                  <1>     stc
   716 00003F3C 59                  <1>     pop rcx
   717 00003F3D 58                  <1>     pop rax
   718 00003F3E C3                  <1>     ret
   719                              <1> 
   720                              <1> .ehciProcessCommand:
   721                              <1> ; Allows EHCI async schedule to process commands.
   722                              <1> ; Preserves all registers except CF
   723                              <1> ; Returns: CF=CY if error detected 
   724                              <1> ;          CF=NC if no error detected
   725                              <1> ;
   726                              <1> ; If returned with CF=CY, caller must read the msdStatus byte
   727 00003F3F 50                  <1>     push rax
   728 00003F40 53                  <1>     push rbx
   729 00003F41 51                  <1>     push rcx
   730 00003F42 57                  <1>     push rdi
   731                              <1> 
   732 00003F43 880C25[49020000]    <1>     mov byte [eAsyncMutex], cl  ;Set mutex
   733 00003F4A 8A0425[47020000]    <1>     mov al, byte [eActiveCtrlr]    ;Deals with current active controller
   734 00003F51 E80C140000          <1>     call .ehciGetOpBase            ;Return opregs ADDRESS in eax
   735 00003F56 4889C3              <1>     mov rbx, rax
   736 00003F59 66BF8813            <1>     mov di, 5000
   737 00003F5D E8B9FDFFFF          <1>     call .ehciLinkNewQHead
   738 00003F62 0F82A1000000        <1>     jc .epcfailedstart
   739                              <1> .epc1:
   740 00003F68 67F7430413000000    <1>     test dword [ebx + ehcists], 13h
   741 00003F70 7516                <1>     jnz .epc2     ;If bits we care about are set, call IRQ proceedure
   742 00003F72 F390                <1>     pause       
   743 00003F74 66FFCF              <1>     dec di
   744 00003F77 0F849F000000        <1>     jz .epcfailtimeout
   745 00003F7D B486                <1>     mov ah, 86h
   746 00003F7F B901000000          <1>     mov ecx, 1    ;Max 5s in 1ms chunks
   747 00003F84 CD35                <1>     int 35h
   748 00003F86 EBE0                <1>     jmp short .epc1
   749                              <1> .epc2:
   750 00003F88 89D8                <1>     mov eax, ebx    ;Get opreg base into eax before we proceed into IRQ handler
   751 00003F8A E8E9CBFFFF          <1>     call ehci_IRQ.nonIRQep ;Manually call IRQ
   752 00003F8F F60425[48020000]10  <1>     test byte [eActiveInt], 10h ;HC error bit
   753 00003F97 7578                <1>     jnz .epcHostError   ;HC error detected
   754 00003F99 F60425[49020000]00  <1>     test byte [eAsyncMutex], 0
   755 00003FA1 75C5                <1>     jnz .epc1    ;If the mutex isnt cleared, go back to sts check
   756 00003FA3 E853FDFFFF          <1>     call .ehciDelinkOldQHead   ;Perform delink
   757 00003FA8 E826FDFFFF          <1>     call .ehciToggleTransactingQHead    ;Toggle the active Qheads
   758                              <1> ;Now set doorbell
   759 00003FAD 67810B40000000      <1>     or dword [ebx + ehcicmd], 40h   ;Ring Doorbell
   760 00003FB4 66BF8813            <1>     mov di, 5000
   761                              <1> .epc3:
   762 00003FB8 67F7430420000000    <1>     test dword [ebx + ehcists], 20h ;Test for doorbell set high
   763 00003FC0 7512                <1>     jnz .epc4
   764 00003FC2 F390                <1>     pause
   765 00003FC4 66FFCF              <1>     dec di
   766 00003FC7 7440                <1>     jz .epcfaildelinked
   767 00003FC9 B486                <1>     mov ah, 86h
   768 00003FCB B901000000          <1>     mov ecx, 1    ;Max 5s in 1ms chunks
   769 00003FD0 CD35                <1>     int 35h
   770 00003FD2 EBE4                <1>     jmp short .epc3
   771                              <1> .epc4:
   772                              <1> ;Clear once more to clear the doorbell bit
   773 00003FD4 678B4B04            <1>     mov ecx, dword [ebx + ehcists]  
   774 00003FD8 67094B04            <1>     or dword  [ebx + ehcists], ecx    ;WC high bits
   775                              <1> ;Check if it was a stall
   776 00003FDC F60425[48020000]02  <1>     test byte [eActiveInt], 2h  ;Check USBError bit
   777 00003FE4 7509                <1>     jnz .epcexit
   778 00003FE6 C60425[A9010000]00  <1>     mov byte [msdStatus], 00h   ;No error... yet
   779 00003FEE F8                  <1>     clc
   780                              <1> .epcexit:
   781 00003FEF 5F                  <1>     pop rdi
   782 00003FF0 59                  <1>     pop rcx
   783 00003FF1 5B                  <1>     pop rbx
   784 00003FF2 58                  <1>     pop rax
   785 00003FF3 C3                  <1>     ret 
   786                              <1> .epcStall:
   787 00003FF4 C60425[A9010000]21  <1>     mov byte [msdStatus], 21h   ;General Controller Failure - Stall
   788 00003FFC F9                  <1>     stc
   789 00003FFD EBF0                <1>     jmp short .epcexit
   790                              <1> .epcfail:
   791 00003FFF E8F7FCFFFF          <1>     call .ehciDelinkOldQHead   ;Perform delink
   792 00004004 E8CAFCFFFF          <1>     call .ehciToggleTransactingQHead    ;Toggle the active Qheads
   793                              <1> .epcfailedstart: ;No need to delink as that data structure is considered garbage
   794                              <1> .epcfaildelinked:
   795 00004009 678B4B04            <1>     mov ecx, dword [ebx + ehcists]
   796 0000400D 67094B04            <1>     or dword  [ebx + ehcists], ecx    ;WC selected bits
   797                              <1> .epcHostError:  ;Host error detected in interrupt register
   798 00004011 C60425[A9010000]20  <1>     mov byte [msdStatus], 20h   ;General Controller Error
   799 00004019 F9                  <1>     stc
   800 0000401A EBD3                <1>     jmp short .epcexit
   801                              <1> .epcfailtimeout:
   802                              <1> ;Called in the event that the schedule fails to process the QHead.
   803                              <1> ;Emergency stops the currently transacting schedule
   804 0000401C E8DAFCFFFF          <1>     call .ehciDelinkOldQHead   ;Perform delink
   805 00004021 E8ADFCFFFF          <1>     call .ehciToggleTransactingQHead    ;Toggle the active Qheads
   806 00004026 678B4B04            <1>     mov ecx, dword [ebx + ehcists]
   807 0000402A 67094B04            <1>     or dword  [ebx + ehcists], ecx    ;WC selected bits
   808 0000402E C60425[A9010000]80  <1>     mov byte [msdStatus], 80h   ;Timeout Error
   809 00004036 F9                  <1>     stc
   810 00004037 EBB6                <1>     jmp short .epcexit  ;Delink
   811                              <1> 
   812                              <1> .ehciEnumerateRootPort:
   813                              <1> ;This function discovers whether a device is of a valid type
   814                              <1> ;or not.
   815                              <1> ;Input: dl=port number - 1 (0 based), dh = bus [0-3]
   816                              <1> ;       r10b = Host hub address (if the device is on a hub, 0 else)
   817                              <1> ;Output:     CF=CY if error, CF=NC if bus transaction occured 
   818                              <1> ;           ZF=ZR if passed enum: ah = bus number, al = Address number
   819                              <1> ;            ZF=NZ if the device failed enumeration: ax=error code
   820                              <1> ;                ah = Enum stage, al = Sub function stage
   821 00004039 53                  <1>     push rbx
   822 0000403A 51                  <1>     push rcx
   823 0000403B 52                  <1>     push rdx
   824 0000403C 55                  <1>     push rbp
   825 0000403D 4150                <1>     push r8
   826 0000403F 4151                <1>     push r9
   827 00004041 4152                <1>     push r10
   828 00004043 4153                <1>     push r11
   829                              <1> 
   830                              <1> .eebinit:
   831 00004045 6631ED              <1>     xor bp, bp    ;Use as error counter    (Stage 0)
   832 00004048 88D0                <1>     mov al, dl
   833 0000404A E818FAFFFF          <1>     call .ehciResetControllerPort    ;Reset port
   834 0000404F 0F828C010000        <1>     jc .ehciedbadnotimeout
   835                              <1> ;Power on debounce!
   836 00004055 B9C8000000          <1>     mov ecx, debounceperiod    ;debounce period
   837 0000405A B486                <1>     mov ah, 86h
   838 0000405C CD35                <1>     int 35h
   839                              <1> 
   840 0000405E 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 1)
   841                              <1> .eeb0:
   842 00004061 48BB80060001000008- <1>     mov rbx, 00008000001000680h    ;Pass get minimal device descriptor
   842 0000406A 00                  <1>
   843 0000406B 48891C25[80030000]  <1>     mov qword [ehciDataOut], rbx
   844 00004073 66B94000            <1>     mov cx, 40h    ;Pass default endpoint size
   845 00004077 30C0                <1>     xor al, al
   846 00004079 E898FDFFFF          <1>     call .ehciGetRequest
   847 0000407E 0F8245010000        <1>     jc .ehciedexit  ;Fast exit with carry set
   848                              <1> .eeb1:
   849 00004084 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 2)
   850 00004087 30C0                <1>     xor al, al    ;Increment Error subcounter    (Substage 0)
   851 00004089 48BB-               <1>     mov rbx, ehciDataIn
   851 0000408B [C003000000000000]  <1>
   852 00004093 807B0101            <1>     cmp byte [rbx + 1], 01h    ;Verify this is a valid dev descriptor
   853 00004097 0F8539010000        <1>     jne .ehciedbad
   854 0000409D FEC0                <1>     inc al    ;Increment Error subcounter    (Substage 1)
   855 0000409F 66817B020002        <1>     cmp word [rbx + 2], 0200h    ;Verify this is a USB 2.0 device or above
   856 000040A5 0F822B010000        <1>     jb .ehciedbad
   857 000040AB FEC0                <1>     inc al    ;Increment Error subcounter    (Substage 2)
   858 000040AD 807B0400            <1>     cmp byte [rbx + 4], 0    ;Check interfaces
   859 000040B1 7410                <1>     je .eeb2
   860 000040B3 807B0408            <1>     cmp byte [rbx + 4], 08h    ;MSD?
   861 000040B7 740A                <1>     je .eeb2
   862 000040B9 807B0409            <1>     cmp byte [rbx + 4], 09h    ;Hub?
   863 000040BD 0F8513010000        <1>     jne .ehciedbad
   864                              <1> .eeb2:
   865 000040C3 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 3)
   866 000040C6 440FB64307          <1>     movzx r8d, byte [rbx + 7]    ;Byte 7 is MaxPacketSize0, save in r8b
   867 000040CB 88D0                <1>     mov al, dl
   868                              <1> 
   869 000040CD E895F9FFFF          <1>     call .ehciResetControllerPort    ;Reset port again
   870 000040D2 0F82FE000000        <1>     jc .ehciedbad
   871 000040D8 49BB0A000000000000- <1>     mov r11, 10
   871 000040E1 00                  <1>
   872                              <1> .ehciEnumCommonEp:
   873 000040E2 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 4)
   874 000040E5 88F0                <1>     mov al, dh    ;Put bus number into al
   875                              <1> 
   876 000040E7 E825030000          <1>     call .ehciGiveValidAddress    ;Get a valid address for device
   877 000040EC 3C80                <1>     cmp al, 80h    
   878 000040EE 0F83E2000000        <1>     jae .ehciedbad    ;Invalid address
   879                              <1> 
   880 000040F4 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 5)
   881 000040F7 4188C1              <1>     mov r9b, al        ;Save the new device address number in r9b
   882                              <1> .eeb3:
   883 000040FA BB00050000          <1>     mov ebx, 0500h    ;Set address function
   884 000040FF 410FB6C9            <1>     movzx ecx, r9b    ;move new address into ecx
   885 00004103 C1E110              <1>     shl ecx, 8*2
   886 00004106 09CB                <1>     or ebx, ecx    ;Add address number to ebx
   887 00004108 664489C1            <1>     mov cx, r8w    ;Move endpoint size into cx
   888 0000410C 30C0                <1>     xor al, al    ;Device still talks on address 0, ax not preserved
   889 0000410E E864FCFFFF          <1>     call .ehciSetNoData    ;Set address
   890 00004113 0F82B0000000        <1>     jc .ehciedexit  ;Fast exit with carry set
   891                              <1> .eeb4:
   892 00004119 B486                <1>     mov ah, 86h
   893 0000411B 4C89D9              <1>     mov rcx, r11
   894 0000411E CD35                <1>     int 35h
   895                              <1> 
   896 00004120 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 6)
   897                              <1> .eeb5:
   898 00004123 48BB80060001000012- <1>     mov rbx, 00012000001000680h    ;Now get full device descriptor
   898 0000412C 00                  <1>
   899 0000412D 4488C8              <1>     mov al, r9b    ;Get address
   900 00004130 664489C1            <1>     mov cx, r8w
   901 00004134 E8DDFCFFFF          <1>     call .ehciGetRequest    ;Get full device descriptor and discard
   902 00004139 0F828A000000        <1>     jc .ehciedexit  ;Fast exit with carry set
   903 0000413F 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 7/0Bh)
   904                              <1> .eeb6:
   905 00004142 48BB80060002000000- <1>     mov rbx, 00000000002000680h ;Get config descriptor
   905 0000414B 00                  <1>
   906 0000414C 4489C1              <1>     mov ecx, r8d    ;Adjust the packet data with bMaxPacketSize0
   907 0000414F 48C1E130            <1>     shl rcx, 8*6    ;cx contains bMaxPacketSize0
   908 00004153 4809CB              <1>     or rbx, rcx
   909 00004156 4488C8              <1>     mov al, r9b    ;Get address
   910 00004159 664489C1            <1>     mov cx, r8w    ;Move endpoint size into cx
   911 0000415D E8B4FCFFFF          <1>     call .ehciGetRequest
   912 00004162 7265                <1>     jc .ehciedexit  ;Fast exit with carry set
   913                              <1> .eeb7:
   914 00004164 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 8/0Ch)
   915                              <1> ;Find a valid interface in this config
   916 00004167 E8CB020000          <1>     call .ehciFindValidInterface
   917 0000416C 7268                <1>     jc .ehciedbad    ;Dont set config, exit bad
   918                              <1> ;If success, ah has device type (0=msd, 1=hub), al = Interface to use
   919                              <1> ;rbx points to interface descriptor
   920 0000416E 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 9/0Dh)
   921 00004171 E889000000          <1>     call .ehciAddDeviceToTables
   922 00004176 725E                <1>     jc .ehciedbad    ;Failed to be added to internal tables
   923 00004178 FE0425[35020000]    <1>     inc byte [usbDevices]   ;Device added successfully, inc byte
   924                              <1> ;Set configuration 1 (wie OG Windows, consider upgrading soon)
   925 0000417F 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 0Ah/0Ch)
   926                              <1> .eeb8:
   927 00004182 48BB00090100000000- <1>     mov rbx, 00000000000010900h    ;Set configuration 1 (function 09h)
   927 0000418B 00                  <1>
   928 0000418C 4488C8              <1>     mov al, r9b    ;Get address
   929 0000418F 664489C1            <1>     mov cx, r8w    ;Move endpoint size into cx
   930 00004193 E8DFFBFFFF          <1>     call .ehciSetNoData
   931 00004198 722F                <1>     jc .ehciedexit  ;Fast exit with carry set
   932                              <1> .eeb9:
   933 0000419A 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 0Bh/0Dh)
   934                              <1> .eeb10:
   935 0000419D 48BB80080000000001- <1>     mov rbx, 0001000000000880h  ;Get device config (sanity check)
   935 000041A6 00                  <1>
   936 000041A7 410FB7C8            <1>     movzx ecx, r8w              ;bMaxPacketSize0
   937 000041AB 4488C8              <1>     mov al, r9b                 ;Get device address
   938 000041AE E863FCFFFF          <1>     call .ehciGetRequest
   939 000041B3 7214                <1>     jc .ehciedexit  ;Fast exit with carry set
   940                              <1> .eeb11:
   941 000041B5 66FFC5              <1>     inc bp    ;Increment Error Counter    (Stage 0Ch/0Eh)
   942 000041B8 803C25[C0030000]01  <1>     cmp byte [ehciDataIn], 01
   943 000041C0 7531                <1>     jne .ehcibadremtables
   944                              <1> ;Device is now configured and ready to go to set/reset
   945 000041C2 88F4                <1>     mov ah, dh  ;Move bus number
   946 000041C4 4488C8              <1>     mov al, r9b ;Move address number
   947 000041C7 31D2                <1>     xor edx, edx  ;This will always set the zero flag
   948                              <1> .ehciedexit:
   949 000041C9 415B                <1>     pop r11
   950 000041CB 415A                <1>     pop r10
   951 000041CD 4159                <1>     pop r9
   952 000041CF 4158                <1>     pop r8
   953 000041D1 5D                  <1>     pop rbp
   954 000041D2 5A                  <1>     pop rdx
   955 000041D3 59                  <1>     pop rcx
   956 000041D4 5B                  <1>     pop rbx
   957 000041D5 C3                  <1>     ret
   958                              <1> .ehciedbad:
   959                              <1> .ehciedbadnoport:
   960 000041D6 50                  <1>     push rax
   961 000041D7 B486                <1>     mov ah, 86h
   962 000041D9 B9F4010000          <1>     mov ecx, 500    ;500 ms wait between failed attempts
   963 000041DE CD35                <1>     int 35h
   964 000041E0 58                  <1>     pop rax
   965                              <1> .ehciedbadnotimeout:
   966 000041E1 88C4                <1>     mov ah, al    ;Save subproc error code
   967 000041E3 30C0                <1>     xor al, al    ;Zero byte
   968 000041E5 6609E8              <1>     or ax, bp    ;Add proc error stage code into al
   969 000041E8 86E0                <1>     xchg ah, al
   970 000041EA 6631ED              <1>     xor bp, bp
   971 000041ED 66FFC5              <1>     inc bp      ;This will always clear the Zero flag
   972 000041F0 F8                  <1>     clc         ;This will force clear the Carry flag
   973 000041F1 EBD6                <1>     jmp short .ehciedexit
   974                              <1> .ehcibadremtables:
   975 000041F3 4488C8              <1>     mov al, r9b ;Get address low
   976 000041F6 88F4                <1>     mov ah, dh  
   977 000041F8 E87F010000          <1>     call .ehciRemoveDevFromTables
   978 000041FD EBE2                <1>     jmp short .ehciedbadnotimeout
   979                              <1> 
   980                              <1> .ehciAddDeviceToTables:
   981                              <1> ;This function adds a valid device to the internal tables.
   982                              <1> ;Interrupts are off for this to avoid dead entries
   983                              <1> ;Input: ah = device type (0=msd, 1=hub)
   984                              <1> ;       al = Interface Value to use (USB bInterfaceNumber)
   985                              <1> ;       rbx = Ptr to valid Interface descriptor
   986                              <1> ;       r8b = MaxPacketSize0
   987                              <1> ;       r9b = Device Address
   988                              <1> ;       dh = Bus number
   989                              <1> ;       dl = Physical Port number - 1
   990                              <1> ;       r10b = Host hub address
   991 000041FF 4153                <1>     push r11
   992 00004201 55                  <1>     push rbp    ;Error counter
   993 00004202 57                  <1>     push rdi
   994 00004203 53                  <1>     push rbx
   995 00004204 52                  <1>     push rdx
   996 00004205 9C                  <1>     pushfq
   997 00004206 FEC2                <1>     inc dl      ;Add one to the Physical port number (kludge for root hub enum)
   998 00004208 6631ED              <1>     xor bp, bp  ;Zero error counter (Stage 0)
   999 0000420B B90A000000          <1>     mov ecx, usbMaxDevices
  1000 00004210 380C25[35020000]    <1>     cmp byte [usbDevices], cl   ;Max number of devices, check
  1001 00004217 0F8458010000        <1>     je .eadttbad        ;If max, fail
  1002 0000421D 66FFC5              <1>     inc bp      ;Increment error counter (Stage 1)
  1003 00004220 48BF-               <1>     mov rdi, usbDevTbl
  1003 00004222 [4C02000000000000]  <1>
  1004 0000422A B10A                <1>     mov cl, usbDevTblE  ;Within the length of the table
  1005                              <1> ;Write Common table first
  1006                              <1> .eadtt0:
  1007 0000422C 800F00              <1>     or byte [rdi], 0   ;Check if there exists a free entry
  1008 0000422F 7411                <1>     jz .eadtt1
  1009 00004231 4881C703000000      <1>     add rdi, usbDevTblEntrySize ;Go to next entry
  1010 00004238 FEC9                <1>     dec cl
  1011 0000423A 0F8435010000        <1>     jz .eadttbad
  1012 00004240 EBEA                <1>     jmp short .eadtt0
  1013                              <1> .eadtt1:
  1014 00004242 66FFC5              <1>     inc bp      ;Increment error counter (Stage 2)
  1015 00004245 80C408              <1>     add ah, 08h ;hub is 09h
  1016                              <1> ;Add device here, rdi points to entry
  1017 00004248 44880F              <1>     mov byte [rdi], r9b
  1018 0000424B 887701              <1>     mov byte [rdi + 1], dh
  1019 0000424E 886702              <1>     mov byte [rdi + 2], ah
  1020                              <1> ;Entry written
  1021 00004251 66FFC5              <1>     inc bp      ;Increment error counter (Stage 3)
  1022                              <1> ;Individual Device table writing
  1023 00004254 80FC08              <1>     cmp ah, 08h
  1024 00004257 740E                <1>     je .eadttmsd
  1025 00004259 80FC09              <1>     cmp ah, 09h
  1026 0000425C 0F84C9000000        <1>     je .eadtthub
  1027 00004262 E90E010000          <1>     jmp .eadttbad
  1028                              <1> .eadttmsd:
  1029 00004267 48BF-               <1>     mov rdi, msdDevTbl
  1029 00004269 [BA02000000000000]  <1>
  1030 00004271 B10A                <1>     mov cl, msdDevTblE  ;Max entries possible
  1031 00004273 66FFC5              <1>     inc bp      ;Increment error counter (Stage 4)
  1032                              <1> .eadttmsd0:
  1033 00004276 800F00              <1>     or byte [rdi], 0
  1034 00004279 7411                <1>     jz .eadttmsd1
  1035 0000427B 4881C710000000      <1>     add rdi, msdDevTblEntrySize
  1036 00004282 FEC9                <1>     dec cl
  1037 00004284 0F84EB000000        <1>     jz .eadttbad
  1038 0000428A EBEA                <1>     jmp short .eadttmsd0
  1039                              <1> .eadttmsd1:
  1040                              <1> ;rdi points to correct offset into table
  1041                              <1> ;rbx points to interface
  1042 0000428C 8A4B04              <1>     mov cl, byte [rbx + 4]   ;Get number of endpoints to check
  1043 0000428F 88CD                <1>     mov ch, cl
  1044 00004291 66FFC5              <1>     inc bp      ;Increment error counter (Stage 5)
  1045 00004294 4989DB              <1>     mov r11, rbx    ;Save Interface Pointer in r11
  1046 00004297 4881C309000000      <1>     add rbx, 9  ;Go to first IF
  1047                              <1> .eadttmsd11:
  1048 0000429E 50                  <1>     push rax
  1049 0000429F 668B4302            <1>     mov ax, word [rbx + 2]
  1050 000042A3 66C1E804            <1>     shr ax, 4   ;Remove low 4 bits
  1051 000042A7 663D2800            <1>     cmp ax, 28h     ;Bulk/In bits
  1052 000042AB 58                  <1>     pop rax         ;Doesnt ruin flags
  1053 000042AC 7411                <1>     je .eadttmsd2   ;Not zero only if valid
  1054 000042AE 4881C307000000      <1>     add rbx, 7   ;Go to next endpoint
  1055 000042B5 FEC9                <1>     dec cl
  1056 000042B7 0F84B8000000        <1>     jz .eadttbad
  1057 000042BD EBDF                <1>     jmp short .eadttmsd11
  1058                              <1> .eadttmsd2:
  1059 000042BF 44880F              <1>     mov byte [rdi], r9b      ;Device Address
  1060 000042C2 887701              <1>     mov byte [rdi + 1], dh   ;Root hub/bus
  1061 000042C5 44885702            <1>     mov byte [rdi + 2], r10b ;Address of parent device if not root
  1062 000042C9 885703              <1>     mov byte [rdi + 3], dl   ;Port number we are inserted in
  1063 000042CC 884704              <1>     mov byte [rdi + 4], al   ;Save Interface number
  1064 000042CF 418A4306            <1>     mov al, byte [r11 + 6]   ;bInterfaceSubclass is +6
  1065 000042D3 884705              <1>     mov byte [rdi + 5], al
  1066 000042D6 418A4307            <1>     mov al, byte [r11 + 7]   ;Protocol
  1067 000042DA 884706              <1>     mov byte [rdi + 6], al
  1068 000042DD 44884707            <1>     mov byte [rdi + 7], r8b  ;MaxPacketSize0
  1069                              <1> ;Valid In EP found, write table entries
  1070 000042E1 8A4302              <1>     mov al, byte [rbx + 2]  ;Get address
  1071 000042E4 884708              <1>     mov byte [rdi + 8], al
  1072 000042E7 668B4304            <1>     mov ax, word [rbx + 4]  ;Get maxPacketSizeIn
  1073 000042EB 66894709            <1>     mov word [rdi + 9], ax
  1074                              <1> 
  1075 000042EF 498D5B09            <1>     lea rbx, qword [r11 + 9]   ;Return rbx to first IF
  1076 000042F3 66FFC5              <1>     inc bp      ;Increment error counter (Stage 6)
  1077                              <1> .eadttmsd21:
  1078 000042F6 668B4302            <1>     mov ax, word [rbx + 2]  ;Bulk/Out bits
  1079 000042FA 66C1E804            <1>     shr ax, 4
  1080 000042FE 663D2000            <1>     cmp ax, 20h
  1081 00004302 740D                <1>     je .eadttmsd3   ;Not zero only if valid
  1082 00004304 4881C307000000      <1>     add rbx, 7   ;Go to next endpoint
  1083 0000430B FECD                <1>     dec ch
  1084 0000430D 7466                <1>     jz .eadttbad
  1085 0000430F EBE5                <1>     jmp short .eadttmsd21
  1086                              <1> .eadttmsd3:
  1087 00004311 8A4302              <1>     mov al, byte [rbx + 2]  ;Get address
  1088 00004314 88470B              <1>     mov byte [rdi + 11], al
  1089 00004317 668B4304            <1>     mov ax, word [rbx + 4]  ;Get maxPacketSizeIn
  1090 0000431B 6689470C            <1>     mov word [rdi + 12], ax
  1091 0000431F 6631C0              <1>     xor ax, ax  ;Zero ax
  1092 00004322 6689470E            <1>     mov word [rdi + 14], ax ;Make dt bits for I/O EPs zero
  1093                              <1> ;Table entry written for MSD device
  1094 00004326 E93F000000          <1>     jmp .eadttpass
  1095                              <1> .eadtthub:
  1096 0000432B 48BF-               <1>     mov rdi, hubDevTbl
  1096 0000432D [6A02000000000000]  <1>
  1097 00004335 B10A                <1>     mov cl,  hubDevTblE ;Max entries possible
  1098 00004337 66BD0700            <1>     mov bp, 7      ;Increment error counter (Stage 7)
  1099                              <1> .eadtthub0:
  1100 0000433B 800F00              <1>     or byte [rdi], 0
  1101 0000433E 740D                <1>     jz .eadtthub1
  1102 00004340 4881C708000000      <1>     add rdi, hubDevTblEntrySize
  1103 00004347 FEC9                <1>     dec cl
  1104 00004349 742A                <1>     jz .eadttbad
  1105 0000434B EBEE                <1>     jmp short .eadtthub0
  1106                              <1> .eadtthub1:
  1107                              <1> ;Valid table space found
  1108 0000434D 44880F              <1>     mov byte [rdi], r9b      ;Device Address
  1109 00004350 887701              <1>     mov byte [rdi + 1], dh   ;Root hub/bus
  1110 00004353 44885702            <1>     mov byte [rdi + 2], r10b ;Address of parent device if not root
  1111 00004357 885703              <1>     mov byte [rdi + 3], dl   ;Port number we are inserted in
  1112 0000435A 44884704            <1>     mov byte [rdi + 4], r8b  ;MaxPacketSize0
  1113 0000435E 66B800FF            <1>     mov ax, 0FF00h  ;Res byte is 0FFh, Num ports (byte 6) is 0
  1114 00004362 66894705            <1>     mov word [rdi + 5], ax   ;Number of ports and PowerOn2PowerGood
  1115 00004366 C64707FF            <1>     mov byte [rdi + 7], 0FFh    ;EP address, currently reserved
  1116                              <1> .eadttpass:
  1117 0000436A 9D                  <1>     popfq   ;If IF was clear, it will be set clear by popf
  1118 0000436B 6631C0              <1>     xor ax, ax  ;Clear ax and clc
  1119                              <1> .eadttexit:
  1120 0000436E 5A                  <1>     pop rdx
  1121 0000436F 5B                  <1>     pop rbx
  1122 00004370 5F                  <1>     pop rdi
  1123 00004371 5D                  <1>     pop rbp
  1124 00004372 415B                <1>     pop r11
  1125 00004374 C3                  <1>     ret
  1126                              <1> .eadttbad:
  1127 00004375 9D                  <1>     popfq   ;If IF was clear, it will be set clear by popf
  1128 00004376 F9                  <1>     stc
  1129 00004377 6689E8              <1>     mov ax, bp
  1130 0000437A EBF2                <1>     jmp short .eadttexit
  1131                              <1> .ehciRemoveDevFromTables:
  1132                              <1> ;This function removes a function from internal tables
  1133                              <1> ;Input: al = Address number, ah = Bus number
  1134                              <1> ;Output: Internal tables zeroed out, ax destroyed, Carry clear
  1135                              <1> ;    If invalid argument, Carry set
  1136 0000437C 57                  <1>     push rdi
  1137 0000437D 51                  <1>     push rcx
  1138 0000437E 53                  <1>     push rbx
  1139 0000437F 48BF-               <1>     mov rdi, usbDevTbl
  1139 00004381 [4C02000000000000]  <1>
  1140 00004389 B10A                <1>     mov cl, usbDevTblE    ;10 entries possible
  1141                              <1> .erdft0:
  1142 0000438B 66AF                <1>     scasw
  1143 0000438D 7409                <1>     je .erdft1    ;Device signature found
  1144 0000438F 48FFC7              <1>     inc rdi
  1145 00004392 FEC9                <1>     dec cl
  1146 00004394 7478                <1>     jz .erdftbad
  1147 00004396 EBF3                <1>     jmp short .erdft0
  1148                              <1> .erdft1:
  1149 00004398 4881EF02000000      <1>     sub rdi, 2  ;scasw pointers to the next word past the comparison
  1150 0000439F 8A6702              <1>     mov ah, byte [rdi + 2]    ;Save class code in ah
  1151 000043A2 80FC08              <1>     cmp ah, 08h ;USB MSD Class device
  1152 000043A5 7507                <1>     jne .erdft11    ;Skip the dec if it is a hub class device
  1153 000043A7 FE0C25[4B020000]    <1>     dec byte [numMSD]   ;Device is being removed from tables, decrement count
  1154                              <1> .erdft11:
  1155                              <1> ;Clear usbDevTbl entry for usb device
  1156 000043AE 50                  <1>     push rax
  1157 000043AF B903000000          <1>     mov ecx, usbDevTblEntrySize    ;Table entry size
  1158 000043B4 30C0                <1>     xor al, al
  1159 000043B6 F3AA                <1>     rep stosb    ;Store zeros for entry
  1160 000043B8 58                  <1>     pop rax
  1161                              <1> 
  1162 000043B9 48BB-               <1>     mov rbx, hubDevTbl
  1162 000043BB [6A02000000000000]  <1>
  1163 000043C3 48B9-               <1>     mov rcx, msdDevTbl
  1163 000043C5 [BA02000000000000]  <1>
  1164 000043CD 80FC09              <1>     cmp ah, 09h
  1165 000043D0 480F44CB            <1>     cmove rcx, rbx ;If 09h (Hub), change table pointed to by rcx
  1166 000043D4 4889CF              <1>     mov rdi, rcx    ;Point rdi to appropriate table
  1167 000043D7 BB08000000          <1>     mov ebx, hubDevTblEntrySize    ;Size of hub table entry
  1168 000043DC B910000000          <1>     mov ecx, msdDevTblEntrySize    ;Size of msd table entry
  1169 000043E1 80FC09              <1>     cmp ah, 09h
  1170 000043E4 0F44CB              <1>     cmove ecx, ebx    ;If hub, move size into cx
  1171                              <1> ;cx has entry size, rdi points to appropriate table
  1172 000043E7 4889FB              <1>     mov rbx, rdi
  1173 000043EA 31FF                <1>     xor edi, edi
  1174 000043EC 29CF                <1>     sub edi, ecx
  1175 000043EE B411                <1>     mov ah, 11h
  1176                              <1> .erdft2:
  1177 000043F0 FECC                <1>     dec ah
  1178 000043F2 741A                <1>     jz .erdftbad    ;Somehow, address not found
  1179 000043F4 01CF                <1>     add edi, ecx
  1180 000043F6 3A043B              <1>     cmp al, byte [rbx + rdi]
  1181 000043F9 75F5                <1>     jne .erdft2
  1182 000043FB 4801DF              <1>     add rdi, rbx    ;point rdi to table entry
  1183 000043FE 30C0                <1>     xor al, al
  1184 00004400 F3AA                <1>     rep stosb    ;ecx contains table entry size in bytes
  1185 00004402 FE0C25[35020000]    <1>     dec byte [usbDevices]   ;Decrement total usb devices
  1186 00004409 F8                  <1>     clc
  1187                              <1> .erdftexit:
  1188 0000440A 5B                  <1>     pop rbx
  1189 0000440B 59                  <1>     pop rcx
  1190 0000440C 5F                  <1>     pop rdi
  1191 0000440D C3                  <1>     ret
  1192                              <1> .erdftbad:
  1193 0000440E F9                  <1>     stc
  1194 0000440F EBF9                <1>     jmp short .erdftexit 
  1195                              <1> .ehciGiveValidAddress:
  1196                              <1> ;This function will return a valid value to use as an address
  1197                              <1> ;for a new device.
  1198                              <1> ;Input: al = Controller number [0-3]
  1199                              <1> ;Output: al = Address, or 80h => No valid available address
  1200 00004411 57                  <1>     push rdi
  1201 00004412 51                  <1>     push rcx
  1202 00004413 88C4                <1>     mov ah, al    ;Move bus number high
  1203 00004415 B000                <1>     mov al, 0 ;Address 0, start at addr 1
  1204                              <1> .egva0:
  1205 00004417 FEC0                <1>     inc al
  1206 00004419 3C80                <1>     cmp al, 80h
  1207 0000441B 7317                <1>     jae .egvaexit
  1208 0000441D 48BF-               <1>     mov rdi, usbDevTbl
  1208 0000441F [4C02000000000000]  <1>
  1209 00004427 B10A                <1>     mov cl, usbDevTblE    ;10 entries possible
  1210                              <1> .egva1:
  1211 00004429 66AF                <1>     scasw
  1212 0000442B 74EA                <1>     je .egva0
  1213 0000442D 48FFC7              <1>     inc rdi    ;Pass third byte in table entry
  1214 00004430 FEC9                <1>     dec cl
  1215 00004432 75F5                <1>     jnz .egva1    ;Check every entry for any addresses being used
  1216                              <1> .egvaexit:
  1217 00004434 59                  <1>     pop rcx
  1218 00004435 5F                  <1>     pop rdi
  1219 00004436 C3                  <1>     ret 
  1220                              <1> .ehciFindValidInterface:
  1221                              <1> ;A proc to check a valid interface descriptor is present. 
  1222                              <1> ;Input: Nothing [Assumes Get Config was called in standard buffer]
  1223                              <1> ;Output: Carry set if invalid. Carry clear if valid.
  1224                              <1> ;    On success: ah = device type (0 is msd, 1 is hub)
  1225                              <1> ;                al = interface number to set
  1226                              <1> ;               rbx = Pointer to Interface Descriptor
  1227                              <1> ;   On fail: al contains error code, registers rbx, cx, dx destroyed
  1228 00004437 56                  <1>     push rsi
  1229 00004438 57                  <1>     push rdi
  1230 00004439 51                  <1>     push rcx
  1231 0000443A 52                  <1>     push rdx
  1232                              <1> 
  1233 0000443B 48BE-               <1>     mov rsi, ehciDataIn    ;Shift to buffer
  1233 0000443D [C003000000000000]  <1>
  1234 00004445 30D2                <1>     xor dl, dl    ;Error code counter
  1235 00004447 807E0102            <1>     cmp byte [rsi + 1], 02h    ;Check if valid config descriptor
  1236 0000444B 753F                <1>     jne .ecvifail
  1237 0000444D FEC2                <1>     inc dl
  1238                              <1> ;cl counts ep's per interface, ch counts possible interfaces
  1239 0000444F 8A6E05              <1>     mov ch, byte [rsi + 5]        ;Get number of interfaces
  1240                              <1> .ecvi0:
  1241 00004452 84ED                <1>     test ch, ch
  1242 00004454 7436                <1>     jz .ecvifail    ;Zero interfaces is invalid for us
  1243 00004456 FEC2                <1>     inc dl
  1244                              <1> 
  1245 00004458 4889F3              <1>     mov rbx, rsi    ;Save this descriptor in rbx
  1246 0000445B 480FB633            <1>     movzx rsi, byte [rbx]    ;get the size of the config to skip
  1247 0000445F 4801DE              <1>     add rsi, rbx    ;point rsi to head of first interface descriptor
  1248 00004462 807E0104            <1>     cmp byte [rsi + 1], 04h    ;Check if valid interface descriptor
  1249 00004466 7524                <1>     jne .ecvifail
  1250 00004468 FEC2                <1>     inc dl
  1251 0000446A 8A4E04              <1>     mov cl, byte [rsi + 4]
  1252                              <1> ;Cmp IF has valid class/prototcol
  1253 0000446D 4831C0              <1>     xor rax, rax    ;Device signature, 0 is msd, 1 is hub
  1254 00004470 E859000000          <1>     call .ehciCheckMsdIf
  1255 00004475 7309                <1>     jnc    .ecviif    ;Not clear => valid interface
  1256 00004477 FEC4                <1>     inc ah    ;Device signature, 0 is msd, 1 is hub
  1257 00004479 E831000000          <1>     call .ehciCheckHubIf
  1258 0000447E 7213                <1>     jc    .ecvibadif    ;Clear => bad interface
  1259                              <1> .ecviif:    ;Valid interface found
  1260 00004480 8A4602              <1>     mov al, byte [rsi + 2]    ;Get interface number into al
  1261 00004483 4889F3              <1>     mov rbx, rsi    ;Save pointer in rbx for return
  1262 00004486 F8                  <1>     clc ;Clear carry
  1263                              <1> .ecviexit:
  1264 00004487 5A                  <1>     pop rdx
  1265 00004488 59                  <1>     pop rcx
  1266 00004489 5F                  <1>     pop rdi
  1267 0000448A 5E                  <1>     pop rsi
  1268 0000448B C3                  <1>     ret
  1269                              <1> .ecvifail:
  1270 0000448C 31DB                <1>     xor ebx, ebx    ;Zero rbx for bad returns
  1271 0000448E F9                  <1>     stc
  1272 0000448F 88D0                <1>     mov al, dl    ;Move error code
  1273 00004491 EBF4                <1>     jmp short .ecviexit
  1274                              <1> .ecvibadif:    ;Bad interface, goto next interface
  1275 00004493 84C9                <1>     test cl, cl
  1276 00004495 740B                <1>     jz .ecvibadif1
  1277 00004497 FEC9                <1>     dec cl
  1278 00004499 4881C607000000      <1>     add rsi, 7
  1279 000044A0 EBF1                <1>     jmp short .ecvibadif
  1280                              <1> .ecvibadif1:
  1281 000044A2 4881C609000000      <1>     add rsi, 9
  1282 000044A9 FECD                <1>     dec ch
  1283 000044AB B201                <1>     mov dl, 1
  1284 000044AD EBA3                <1>     jmp short .ecvi0
  1285                              <1> .ehciCheckHubIf:
  1286                              <1> ;Input: rsi points to interface descriptor
  1287                              <1> ;Output: All registers preserved, carry set if NOT valid hub
  1288 000044AF 56                  <1>     push rsi
  1289 000044B0 807E0509            <1>     cmp byte [rsi + 5], 09h
  1290 000044B4 7515                <1>     jne .ecdhfail
  1291 000044B6 807E0600            <1>     cmp byte [rsi + 6], 0
  1292 000044BA 750F                <1>     jne .ecdhfail
  1293 000044BC 807E0702            <1>     cmp byte [rsi + 7], 2
  1294 000044C0 7709                <1>     ja .ecdhfail
  1295 000044C2 807E0401            <1>     cmp byte [rsi + 4], 1    ;One endpoint to rule them all
  1296 000044C6 7503                <1>     jne .ecdhfail
  1297 000044C8 F8                  <1>     clc 
  1298                              <1> .ecdhexit:
  1299 000044C9 5E                  <1>     pop rsi
  1300 000044CA C3                  <1>     ret
  1301                              <1> .ecdhfail:
  1302 000044CB F9                  <1>     stc
  1303 000044CC EBFB                <1>     jmp short .ecdhexit
  1304                              <1> .ehciCheckMsdIf:
  1305                              <1> ;Input: rsi points to interface descriptor
  1306                              <1> ;Output: Carry set if fail, ax destroyed
  1307                              <1> ;    rsi points to good descriptor if all ok
  1308                              <1> ;Note we only accept 09/00/50 and 09/06/50
  1309 000044CE 56                  <1>     push rsi
  1310 000044CF 53                  <1>     push rbx
  1311 000044D0 51                  <1>     push rcx
  1312 000044D1 807E0508            <1>     cmp byte [rsi + 5], 08h    ;MSD class
  1313 000044D5 7517                <1>     jne .ecdmfail
  1314                              <1> ;Subclass check
  1315 000044D7 807E0606            <1>     cmp byte [rsi + 6], 06h    ;SCSI actual
  1316 000044DB 7406                <1>     je .ecdmprot
  1317 000044DD 807E0600            <1>     cmp byte [rsi + 6], 00h    ;SCSI defacto
  1318 000044E1 750B                <1>     jne .ecdmfail
  1319                              <1> .ecdmprot:
  1320 000044E3 807E0750            <1>     cmp byte [rsi + 7], 50h    ;BBB
  1321 000044E7 7505                <1>     jne .ecdmfail
  1322                              <1> .ecdmprotUAF:   ;Dummy label to find where to add this later
  1323                              <1> .ecdmpass:
  1324 000044E9 F8                  <1>     clc
  1325                              <1> .ecdmexit:
  1326 000044EA 59                  <1>     pop rcx
  1327 000044EB 5B                  <1>     pop rbx
  1328 000044EC 5E                  <1>     pop rsi
  1329 000044ED C3                  <1>     ret
  1330                              <1> .ecdmfail:
  1331 000044EE F9                  <1>     stc
  1332 000044EF EBF9                <1>     jmp short .ecdmexit
  1333                              <1> .ehciGetDevicePtr:
  1334                              <1> ;Gets address/bus pair and returns in rax a pointer to the data
  1335                              <1> ;structure of the device, in the data table.
  1336                              <1> ;Input: ah = bus number, al = Address number
  1337                              <1> ;Output: ax = Preserved, rsi = Pointer to table structure, bl = USB Class Code
  1338 000044F1 51                  <1>     push rcx
  1339 000044F2 52                  <1>     push rdx
  1340 000044F3 55                  <1>     push rbp
  1341 000044F4 B90A000000          <1>     mov ecx, usbMaxDevices
  1342 000044F9 48BE-               <1>     mov rsi, usbDevTbl
  1342 000044FB [4C02000000000000]  <1>
  1343                              <1> .egdp0:
  1344 00004503 663B06              <1>     cmp ax, word [rsi]
  1345 00004506 740E                <1>     je .egdp1   ;Device found
  1346 00004508 4881C603000000      <1>     add rsi, usbDevTblEntrySize
  1347 0000450F 66FFC9              <1>     dec cx
  1348 00004512 7447                <1>     jz .egdpfail    ;Got to the end with no dev found, exit
  1349 00004514 EBED                <1>     jmp short .egdp0
  1350                              <1> .egdp1:
  1351 00004516 48BD-               <1>     mov rbp, hubDevTbl
  1351 00004518 [6A02000000000000]  <1>
  1352 00004520 B908000000          <1>     mov ecx, hubDevTblEntrySize
  1353 00004525 0FB65E02            <1>     movzx ebx, byte [rsi + 2]  ;Return bl for device type
  1354 00004529 80FB09              <1>     cmp bl, 09h ;Are we hub?
  1355 0000452C 48BE-               <1>     mov rsi, msdDevTbl  ;Set to msd
  1355 0000452E [BA02000000000000]  <1>
  1356 00004536 BA10000000          <1>     mov edx, msdDevTblEntrySize
  1357 0000453B 480F44F5            <1>     cmove rsi, rbp  ;If hub, reload rsi pointer to hub table
  1358 0000453F 0F44D1              <1>     cmove edx, ecx    ;If hub, reload dx with hub table size
  1359 00004542 B90A000000          <1>     mov ecx, usbMaxDevices
  1360                              <1> .egdp2:
  1361 00004547 663B06              <1>     cmp ax, word [rsi]
  1362 0000454A 740A                <1>     je .egdp3
  1363 0000454C 4801D6              <1>     add rsi, rdx    ;rdx contains size of entry for either table
  1364 0000454F 66FFC9              <1>     dec cx
  1365 00004552 7407                <1>     jz .egdpfail
  1366 00004554 EBF1                <1>     jmp short .egdp2
  1367                              <1> .egdp3:
  1368 00004556 F8                  <1>     clc
  1369                              <1> .egdpexit:
  1370 00004557 5D                  <1>     pop rbp
  1371 00004558 5A                  <1>     pop rdx
  1372 00004559 59                  <1>     pop rcx
  1373 0000455A C3                  <1>     ret
  1374                              <1> .egdpfail:
  1375 0000455B 6631DB              <1>     xor bx, bx
  1376 0000455E F9                  <1>     stc
  1377 0000455F EBF6                <1>     jmp short .egdpexit
  1378                              <1> 
  1379                              <1> .ehciProbeQhead:
  1380                              <1> ;A proc that returns a Queue Heads' status byte in bl.
  1381                              <1> ;Input:
  1382                              <1> ;   rbx = Address of QHead to probe
  1383                              <1> ;Output: 
  1384                              <1> ;   bl = Status byte, if 0, successful transfer!
  1385 00004561 8A5B18              <1>     mov bl, byte [rbx + 18h]  ;08h is offset in qTD
  1386 00004564 C3                  <1>     ret
  1387                              <1> .ehciStandardErrorHandler:
  1388                              <1> ;Attempts to verify if something went wrong in previous transaction.
  1389                              <1> ;May only be called if eActiveInt has bit USBSTS bit set
  1390                              <1> ;Input:  al = Device Address
  1391                              <1> ;        cx = Default Endpoint Size
  1392                              <1> ;Output: CF=CY: Host error, Reset host system
  1393                              <1> ;        CF=NC: Proceed with below
  1394                              <1> ;        al = 0 => Benign error, Make request again/Verify data.
  1395                              <1> ;        al = 1 => Stall, Transaction error or Handshake error, corrected.
  1396                              <1> ;        al = 80h => Fatal error, EPClear errored out, but no clear reason why
  1397                              <1> ;        al > 80h => Bits 6-0 give the status byte for the error on EP Clear.
  1398                              <1> ;                  Bit 7 is the fatal error bit. 
  1399                              <1> ;                  If set, recommend device is port reset.
  1400                              <1> ;All other registers preserved
  1401 00004565 53                  <1>     push rbx
  1402 00004566 4150                <1>     push r8
  1403 00004568 4151                <1>     push r9
  1404                              <1> 
  1405 0000456A 4989C0              <1>     mov r8, rax
  1406 0000456D 4989C9              <1>     mov r9, rcx
  1407 00004570 30C0                <1>     xor al, al                  ;Set error counter and clear CF
  1408 00004572 F60425[48020000]02  <1>     test byte [eActiveInt], 2   ;Error Interrupt
  1409 0000457A 744B                <1>     jz .esehexit                ;No error found, should not have been called
  1410 0000457C 488B1C25[3E020000]  <1>     mov rbx, qword [eCurrAsyncHead] ;Get the current transacting QHead address
  1411 00004584 E8D8FFFFFF          <1>     call .ehciProbeQhead    ;Ret in bl status byte
  1412 00004589 80E378              <1>     and bl, 01111000b       ;Check if it is something we should clear EP for
  1413 0000458C 7439                <1>     jz .esehexit            ;If it is not, benign error. al = 0
  1414                              <1> 
  1415 0000458E 488B1C25[3E020000]  <1>     mov rbx, qword [eCurrAsyncHead] ;Get current AsyncHead again
  1416 00004596 4488C0              <1>     mov al, r8b        ;Device Address
  1417 00004599 664489C9            <1>     mov cx, r9w        ;EP size
  1418 0000459D 8A5B05              <1>     mov bl, byte [rbx + 05h]  ;Get Endpoint to reset
  1419 000045A0 80E30F              <1>     and bl, 0Fh ;Lo nybble only
  1420 000045A3 E828000000          <1>     call .ehciClearEpStallHalt
  1421 000045A8 721D                <1>     jc .esehexit        ;HC error!
  1422 000045AA B001                <1>     mov al, 1           ;Stall cleared
  1423 000045AC F60425[48020000]02  <1>     test byte [eActiveInt], 2   ;Check if interrupt returned an error
  1424 000045B4 7411                <1>     jz .esehexit                ;No error found, return al=1, stall cleared
  1425 000045B6 B080                <1>     mov al, 80h                 ;Fatal error indication
  1426 000045B8 488B1C25[3E020000]  <1>     mov rbx, qword [eCurrAsyncHead] ;Get the current transacting QHead address
  1427 000045C0 E89CFFFFFF          <1>     call .ehciProbeQhead   
  1428 000045C5 08D8                <1>     or al, bl          ;Add error bits to al for Fatal error indication.
  1429                              <1> .esehexit:
  1430 000045C7 4C89C9              <1>     mov rcx, r9
  1431 000045CA 4159                <1>     pop r9
  1432 000045CC 4158                <1>     pop r8
  1433 000045CE 5B                  <1>     pop rbx
  1434 000045CF C3                  <1>     ret
  1435                              <1> 
  1436                              <1> .ehciClearEpStallHalt:
  1437                              <1> ;Clears a halt or stall on an endpoint.
  1438                              <1> ;Input: bl=Endpoint (0 for control)
  1439                              <1> ;       al=Device Address
  1440                              <1> ;       cx=Ctrl Endpoint Size
  1441                              <1> ;Output:
  1442                              <1> ;   CF=CY: Host error, Reset host system
  1443                              <1> ;   CF=NC: Transaction succeeded, check interrupt error bit for confirmation
  1444 000045D0 53                  <1>     push rbx
  1445 000045D1 480FB6DB            <1>     movzx rbx, bl
  1446 000045D5 48C1E320            <1>     shl rbx, 2*10h  ;Shift wIndex by two words
  1447 000045D9 4881CB02010000      <1>     or rbx, 0102h   ;01=bRequest(CLEAR_FEATURE) 02h=bmRequestType (Endpoint)
  1448 000045E0 E892F7FFFF          <1>     call .ehciSetNoData
  1449 000045E5 5B                  <1>     pop rbx ;Get original bx
  1450 000045E6 C3                  <1>     ret
  1451                              <1> 
  1452                              <1> .ehciWriteQHead:
  1453                              <1> ;Writes a Queue head at rdi, and clears the space for the transfer descriptor
  1454                              <1> ;rdi points at the head of the qhead on return
  1455                              <1> ;All non argument registers preserved
  1456                              <1> ;r8d=Horizontal Ptr + Typ + T
  1457                              <1> ;r9d=Endpoint Characteristics
  1458                              <1> ;r10d=Endpoint Capabilities
  1459                              <1> ;r11d=Next qTD Pointer
  1460 000045E7 50                  <1>     push rax
  1461 000045E8 51                  <1>     push rcx
  1462 000045E9 57                  <1>     push rdi
  1463 000045EA 31C0                <1>     xor eax, eax
  1464 000045EC 4489C0              <1>     mov eax, r8d
  1465 000045EF AB                  <1>     stosd
  1466 000045F0 4489C8              <1>     mov eax, r9d
  1467 000045F3 AB                  <1>     stosd
  1468 000045F4 4489D0              <1>     mov eax, r10d
  1469 000045F7 AB                  <1>     stosd
  1470 000045F8 31C0                <1>     xor eax, eax
  1471 000045FA AB                  <1>     stosd            ;Enter 0 for the current qTD pointer entry
  1472 000045FB 4489D8              <1>     mov eax, r11d
  1473 000045FE AB                  <1>     stosd
  1474 000045FF B90A000000          <1>     mov ecx, 10
  1475 00004604 31C0                <1>     xor eax, eax
  1476 00004606 F3AB                <1>     rep stosd
  1477 00004608 5F                  <1>     pop rdi
  1478 00004609 59                  <1>     pop rcx
  1479 0000460A 58                  <1>     pop rax
  1480 0000460B C3                  <1>     ret
  1481                              <1> .ehciWriteQHeadTD:
  1482                              <1> ;Writes a transfer descriptor at the location pointed at by rdi
  1483                              <1> ;rdi points at the head of the qheadTD on return
  1484                              <1> ;All registers except passed arguments, preserved
  1485                              <1> ;rdi=location for current linked list element
  1486                              <1> ;r8d=Next qTD ptr
  1487                              <1> ;r9d=Alternate Next qTD ptr
  1488                              <1> ;r10d=Transfer Descriptor Token
  1489                              <1> ;r11=Buffer Ptr 0 + Current Offset
  1490 0000460C 50                  <1>     push rax
  1491 0000460D 57                  <1>     push rdi
  1492 0000460E 4489C0              <1>     mov eax, r8d
  1493 00004611 AB                  <1>     stosd
  1494 00004612 4489C8              <1>     mov eax, r9d
  1495 00004615 AB                  <1>     stosd
  1496 00004616 4489D0              <1>     mov eax, r10d
  1497 00004619 AB                  <1>     stosd
  1498 0000461A 4489D8              <1>     mov eax, r11d
  1499 0000461D AB                  <1>     stosd
  1500 0000461E 2500F0FFFF          <1>     and eax, 0FFFFF000h
  1501 00004623 0500100000          <1>     add eax, 1000h
  1502 00004628 AB                  <1>     stosd
  1503 00004629 0500100000          <1>     add eax, 1000h
  1504 0000462E AB                  <1>     stosd
  1505 0000462F 0500100000          <1>     add eax, 1000h
  1506 00004634 AB                  <1>     stosd
  1507 00004635 0500100000          <1>     add eax, 1000h
  1508 0000463A AB                  <1>     stosd
  1509                              <1> 
  1510 0000463B 4C89D8              <1>     mov rax, r11
  1511 0000463E 48C1C820            <1>     ror rax, 20h
  1512 00004642 AB                  <1>     stosd
  1513 00004643 48C1C820            <1>     ror rax, 20h
  1514 00004647 482500F0FFFF        <1>     and rax, 0FFFFFFFFFFFFF000h
  1515 0000464D 480500100000        <1>     add rax, 1000h
  1516 00004653 48C1C820            <1>     ror rax, 20h
  1517 00004657 AB                  <1>     stosd
  1518 00004658 48C1C820            <1>     ror rax, 20h
  1519 0000465C 480500100000        <1>     add rax, 1000h
  1520 00004662 48C1C820            <1>     ror rax, 20h
  1521 00004666 AB                  <1>     stosd  
  1522 00004667 48C1C820            <1>     ror rax, 20h
  1523 0000466B 480500100000        <1>     add rax, 1000h
  1524 00004671 48C1C820            <1>     ror rax, 20h
  1525 00004675 AB                  <1>     stosd
  1526 00004676 48C1C820            <1>     ror rax, 20h
  1527 0000467A 480500100000        <1>     add rax, 1000h
  1528 00004680 48C1C820            <1>     ror rax, 20h
  1529 00004684 AB                  <1>     stosd
  1530 00004685 5F                  <1>     pop rdi
  1531 00004686 58                  <1>     pop rax
  1532 00004687 C3                  <1>     ret
  1533                              <1> 
  1534                              <1> 
  1535                              <1> .ehciDevSetupHub:
  1536                              <1> ;Device specific setup. Takes rsi as a ptr to the 
  1537                              <1> ; specific device parameter block.
  1538 00004688 53                  <1>     push rbx
  1539 00004689 51                  <1>     push rcx
  1540 0000468A 56                  <1>     push rsi
  1541 0000468B 55                  <1>     push rbp
  1542 0000468C 6631ED              <1>     xor bp, bp    ;Error Stage 0
  1543                              <1> .edshub:
  1544 0000468F E839030000          <1>     call .ehciHubClassDescriptor
  1545 00004694 0F82DA000000        <1>     jc .edsfail
  1546 0000469A 66FFC5              <1>     inc bp  ;Error Stage 1
  1547 0000469D 8A4E05              <1>     mov cl, byte [rsi + 5] ;Get number of ports here
  1548 000046A0 B201                <1>     mov dl, 1   ;Start port number to begin enum on (hub ports start at 1)
  1549                              <1> .edshub1:
  1550 000046A2 49BC03000000000000- <1>     mov r12, 3
  1550 000046AB 00                  <1>
  1551                              <1> .edshub11:
  1552 000046AC E8CB000000          <1>     call .ehciEnumerateHubPort    ;dl for port to scan/enumerate
  1553 000046B1 7413                <1>     jz .edshub13    ;If ZF=ZR, valid device found!
  1554 000046B3 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h  ;General Controller Failure
  1555 000046BB 0F8448F3FFFF        <1>     je USB.ehciCriticalErrorWrapper
  1556 000046C1 49FFCC              <1>     dec r12
  1557 000046C4 75E6                <1>     jnz .edshub11   ;Still not zero but failed, try again.
  1558                              <1> .edshub13:
  1559 000046C6 FEC2                <1>     inc dl  ;Start with port 1
  1560 000046C8 38D1                <1>     cmp cl, dl
  1561 000046CA 73D6                <1>     jae .edshub1
  1562                              <1> .edshub2:
  1563                              <1> ;Need to write bHostHub for any detected devices here
  1564 000046CC F8                  <1>     clc    ;Common success exit
  1565 000046CD 5D                  <1>     pop rbp
  1566 000046CE 5E                  <1>     pop rsi
  1567 000046CF 59                  <1>     pop rcx
  1568 000046D0 5B                  <1>     pop rbx
  1569 000046D1 C3                  <1>     ret
  1570                              <1> 
  1571                              <1> .ehciDeviceSetupMsd:
  1572                              <1> ; Input:  rsi = MSD Device Parameter Block
  1573                              <1> ; Output: CF=CY if catastrophic host error.
  1574                              <1> ;         CF=NC then ax = Return code
  1575                              <1> ;         ax = 0 if successful setup
  1576                              <1> ;         ax = 1 if device did not reset the first time
  1577                              <1> ;         ax = 2 if device did not return a valid LUN
  1578                              <1> ;         ax = 3 if device did not reset the second time
  1579                              <1> ;         Device must me removed from tables and port reset if ax != 0
  1580 000046D2 51                  <1>     push rcx
  1581 000046D3 55                  <1>     push rbp
  1582 000046D4 4150                <1>     push r8
  1583 000046D6 6631ED              <1>     xor bp, bp    ;Error Stage 0
  1584                              <1> .edsmsd:
  1585 000046D9 49B810000000000000- <1>     mov r8, 10h ;Loop counter setup
  1585 000046E2 00                  <1>
  1586                              <1> .edsm1:
  1587 000046E3 E8BD030000          <1>     call .ehciMsdDeviceReset
  1588 000046E8 0F8281000000        <1>     jc .edsexit
  1589                              <1> ;Check eActiveInterrupt for confirmation if we need to handle error
  1590 000046EE F60425[48020000]02  <1>     test byte [eActiveInt], 2   ;If this is set, handle error
  1591 000046F6 7416                <1>     jz .edsms2
  1592 000046F8 668B4E07            <1>     mov cx, word [rsi + 7]    ;Pass endpoint size
  1593 000046FC 8A06                <1>     mov al, byte [rsi]  ;Device address
  1594 000046FE E862FEFFFF          <1>     call .ehciStandardErrorHandler
  1595 00004703 A880                <1>     test al, 80h 
  1596 00004705 756D                <1>     jnz .edsfail   ;If bit 7 is set, something is seriously wrong, fail dev!
  1597 00004707 49FFC8              <1>     dec r8                ;Dec loop counter
  1598 0000470A 7468                <1>     jz .edsfail           ;Fatal error if after 16 goes nothing was resolved
  1599 0000470C EBD5                <1>     jmp short .edsm1
  1600                              <1> .edsms2:
  1601 0000470E 66FFC5              <1>     inc bp  ;Error Stage 1
  1602                              <1> .edsms3:
  1603 00004711 E8B9030000          <1>     call .ehciMsdGetMaxLun  ;If stall, clear endpoint and proceed. No loop
  1604 00004716 7257                <1>     jc .edsexit
  1605 00004718 F60425[48020000]02  <1>     test byte [eActiveInt], 2   ;If this is set, handle error
  1606 00004720 740F                <1>     jz .edsms4
  1607                              <1> 
  1608 00004722 668B4E07            <1>     mov cx, word [rsi + 7]    ;Pass endpoint size
  1609 00004726 8A06                <1>     mov al, byte [rsi]  ;Device address
  1610 00004728 E838FEFFFF          <1>     call .ehciStandardErrorHandler
  1611 0000472D A880                <1>     test al, 80h 
  1612 0000472F 7543                <1>     jnz .edsfail   ;If bit 7 is set, something is seriously wrong, fail dev!
  1613                              <1> .edsms4:
  1614 00004731 66FFC5              <1>     inc bp  ;Error Stage 2
  1615 00004734 49B810000000000000- <1>     mov r8, 10h ;Loop counter setup
  1615 0000473D 00                  <1>
  1616                              <1> .edsms5:
  1617 0000473E E862030000          <1>     call .ehciMsdDeviceReset  ;Reset once again to clear issues
  1618 00004743 722A                <1>     jc .edsexit
  1619 00004745 F60425[48020000]02  <1>     test byte [eActiveInt], 2   ;If this is set, handle error
  1620 0000474D 7416                <1>     jz .edsms6
  1621                              <1> 
  1622 0000474F 668B4E07            <1>     mov cx, word [rsi + 7]    ;Pass endpoint size
  1623 00004753 8A06                <1>     mov al, byte [rsi]  ;Device address
  1624 00004755 E80BFEFFFF          <1>     call .ehciStandardErrorHandler
  1625 0000475A A880                <1>     test al, 80h 
  1626 0000475C 7516                <1>     jnz .edsfail   ;If bit 7 is set, something is seriously wrong, fail dev!
  1627 0000475E 49FFC8              <1>     dec r8                 ;Dec loop counter
  1628 00004761 7411                <1>     jz .edsfail           ;Fatal error if after 16 goes nothing was resolved
  1629 00004763 EBD9                <1>     jmp short .edsms5
  1630                              <1> .edsms6:
  1631 00004765 FE0425[4B020000]    <1>     inc byte [numMSD] 
  1632 0000476C 6631C0              <1>     xor ax, ax  ;Note that xor also clears CF
  1633                              <1> .edsexit:
  1634 0000476F 4158                <1>     pop r8
  1635 00004771 5D                  <1>     pop rbp
  1636 00004772 59                  <1>     pop rcx
  1637 00004773 C3                  <1>     ret
  1638                              <1> .edsfail:
  1639                              <1> ;If a fail occurs, then the entry needs to be removed from the data tables
  1640 00004774 6689E8              <1>     mov ax, bp
  1641 00004777 E9F3FFFFFF          <1>     jmp .edsexit
  1642                              <1> 
  1643                              <1> .ehciEnumerateHubPort:
  1644                              <1> ;Enumerates devices on an external Hub.
  1645                              <1> ;Use rsi to get device properties
  1646                              <1> ;Input: rsi = ptr to hub device block
  1647                              <1> ;       dl = Port number to reset
  1648                              <1> ;Output: None, CF
  1649                              <1> 
  1650 0000477C 53                  <1>     push rbx
  1651 0000477D 51                  <1>     push rcx
  1652 0000477E 52                  <1>     push rdx
  1653 0000477F 55                  <1>     push rbp
  1654 00004780 4150                <1>     push r8
  1655 00004782 4151                <1>     push r9
  1656 00004784 4152                <1>     push r10
  1657 00004786 4153                <1>     push r11
  1658                              <1> 
  1659 00004788 0FB6D2              <1>     movzx edx, dl
  1660 0000478B 48C1E220            <1>     shl rdx, 4*8    ;Shift port number to right bits
  1661                              <1> .eehdeinit:
  1662 0000478F 6631ED              <1>     xor bp, bp  ;Error counter
  1663 00004792 4C0FB70E            <1>     movzx r9, word [rsi]        ;Save hub bus/addr in r9w
  1664 00004796 4C0FB64604          <1>     movzx r8, byte [rsi + 4]    ;Get MaxPacketSize0
  1665                              <1> 
  1666                              <1> .eehde0:
  1667 0000479B 48BB23030800000000- <1>     mov rbx, 0000000000080323h  ;Set port power feature
  1667 000047A4 00                  <1>
  1668 000047A5 4809D3              <1>     or rbx, rdx ;Add port number into descriptor
  1669 000047A8 664489C1            <1>     mov cx, r8w
  1670 000047AC 4488C8              <1>     mov al, r9b
  1671 000047AF E8C3F5FFFF          <1>     call .ehciSetNoData   ;Turn on power to port on device in addr al
  1672 000047B4 0F829F010000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1673                              <1> .eehde1:
  1674                              <1> ;Power on debounce!
  1675 000047BA B486                <1>     mov ah, 86h
  1676 000047BC 0FB64E06            <1>     movzx ecx, byte [rsi + 6]   ;poweron2powergood
  1677 000047C0 D1E1                <1>     shl ecx, 1
  1678 000047C2 CD35                <1>     int 35h
  1679                              <1> 
  1680 000047C4 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 1)
  1681                              <1> .eehde2:
  1682 000047C7 48BB23011000000000- <1>     mov rbx, 0000000000100123h  ;Clear port set connection bit
  1682 000047D0 00                  <1>
  1683 000047D1 4809D3              <1>     or rbx, rdx ;Add port number into descriptor
  1684 000047D4 4488C1              <1>     mov cl, r8b
  1685 000047D7 4488C8              <1>     mov al, r9b
  1686 000047DA E898F5FFFF          <1>     call .ehciSetNoData
  1687 000047DF 0F8274010000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1688                              <1> .eehde3:
  1689                              <1> 
  1690 000047E5 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 2)
  1691                              <1> .eehde31:
  1692 000047E8 48BBA3000000000004- <1>     mov rbx, 00040000000000A3h ;Get port status
  1692 000047F1 00                  <1>
  1693 000047F2 4809D3              <1>     or rbx, rdx
  1694 000047F5 4488C1              <1>     mov cl, r8b
  1695 000047F8 4488C8              <1>     mov al, r9b
  1696 000047FB E816F6FFFF          <1>     call .ehciGetRequest
  1697 00004800 0F8253010000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1698                              <1> .eehde4:
  1699 00004806 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 3)
  1700                              <1> 
  1701 00004809 8A0C25[C0030000]    <1>     mov cl, byte [ehciDataIn]   ;Get the first byte in into cx
  1702 00004810 F6C101              <1>     test cl, 1  ;Check device in port
  1703 00004813 0F8436010000        <1>     jz .eehdebadnotimeout
  1704                              <1> 
  1705                              <1> .eehde41:   ;EP for first port reset state
  1706 00004819 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 4)
  1707 0000481C E83D010000          <1>     call .eehdereset    ;First port reset
  1708 00004821 0F8232010000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1709                              <1> 
  1710 00004827 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 5)
  1711                              <1> 
  1712 0000482A 49BB10000000000000- <1>     mov r11, 10h
  1712 00004833 00                  <1>
  1713                              <1> .eehde5:
  1714 00004834 48BBA3000000000004- <1>     mov rbx, 00040000000000A3h ;Get port status again
  1714 0000483D 00                  <1>
  1715 0000483E 4809D3              <1>     or rbx, rdx
  1716 00004841 4488C1              <1>     mov cl, r8b
  1717 00004844 4488C8              <1>     mov al, r9b
  1718 00004847 E8CAF5FFFF          <1>     call .ehciGetRequest
  1719 0000484C 0F8207010000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1720                              <1> .eehde6:
  1721 00004852 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 6)
  1722                              <1> ;Now check for high speed
  1723                              <1> 
  1724 00004855 668B0C25[C0030000]  <1>     mov cx, word [ehciDataIn]
  1725 0000485D 6681E1FF07          <1>     and cx, 7FFh    ;Zero upper bits
  1726 00004862 66C1E909            <1>     shr cx, 9   ;Bring bits [10:9] low
  1727 00004866 6681F90200          <1>     cmp cx, 2   ;2 is High Speed device
  1728 0000486B 0F85DE000000        <1>     jne .eehdebadnotimeout
  1729 00004871 48C70425[C0030000]- <1>     mov qword [ehciDataIn], 0
  1729 00004879 00000000            <1>
  1730                              <1> 
  1731 0000487D 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 7)
  1732                              <1> 
  1733 00004880 57                  <1>     push rdi
  1734 00004881 48BF-               <1>     mov rdi, ehciDataIn
  1734 00004883 [C003000000000000]  <1>
  1735 0000488B B908000000          <1>     mov ecx, 8
  1736 00004890 31C0                <1>     xor eax, eax
  1737 00004892 F348AB              <1>     rep stosq
  1738 00004895 5F                  <1>     pop rdi
  1739                              <1> .eehde7:
  1740 00004896 48BB23011200000000- <1>     mov rbx, 0000000000120123h  ;Clear port suspend
  1740 0000489F 00                  <1>
  1741 000048A0 4809D3              <1>     or rbx, rdx ;Add port number into descriptor
  1742 000048A3 4488C1              <1>     mov cl, r8b
  1743 000048A6 4488C8              <1>     mov al, r9b
  1744 000048A9 E8C9F4FFFF          <1>     call .ehciSetNoData
  1745 000048AE 0F82A5000000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1746                              <1> 
  1747                              <1> .eehde10:
  1748 000048B4 48BB80060001000008- <1>     mov rbx, 00008000001000680h    ;Pass get minimal device descriptor
  1748 000048BD 00                  <1>
  1749 000048BE 66B94000            <1>     mov cx, 40h    ;Pass default endpoint size
  1750 000048C2 30C0                <1>     xor al, al
  1751 000048C4 E84DF5FFFF          <1>     call .ehciGetRequest
  1752 000048C9 0F828A000000        <1>     jc .eehdecritical  ;Fast exit with carry set
  1753                              <1> .eehde101:
  1754 000048CF 66FFC5              <1>     inc bp      ;Increment Error Counter    (Stage 8)
  1755                              <1> 
  1756 000048D2 803C25[C1030000]01  <1>     cmp byte [ehciDataIn + 1], 01h    ;Verify this is a valid dev descriptor
  1757 000048DA 756E                <1>     jne .eehdebad       ;ehciDataIn contains error signature
  1758                              <1> 
  1759                              <1> ;Sanity check the returned descriptor here
  1760                              <1> .eehde11:
  1761 000048DC 66813C25[C2030000]- <1>     cmp word [ehciDataIn + 2], 0200h    ;Verify this is a USB 2.0+ device or
  1761 000048E4 0002                <1>
  1762 000048E6 7262                <1>     jb .eehdebad
  1763 000048E8 803C25[C4030000]00  <1>     cmp byte [ehciDataIn + 4], 0    ;Check interfaces
  1764 000048F0 7414                <1>     je .eehde12
  1765 000048F2 803C25[C4030000]08  <1>     cmp byte [ehciDataIn + 4], 08h    ;MSD?
  1766 000048FA 740A                <1>     je .eehde12
  1767 000048FC 803C25[C4030000]09  <1>     cmp byte [ehciDataIn + 4], 09h    ;Hub?
  1768 00004904 7544                <1>     jne .eehdebad
  1769                              <1> 
  1770                              <1> .eehde12:    ;Valid device detected
  1771 00004906 440FB60425-         <1>     movzx r8d, byte [ehciDataIn + 7]   ;Save attached device max ep size
  1771 0000490B [C7030000]          <1>
  1772                              <1> .eehde13: 
  1773 0000490F E84A000000          <1>     call .eehdereset    ;Do second reset
  1774 00004914 7243                <1>     jc .eehdecritical  ;Fast exit with carry set
  1775                              <1> ;Clear the data in buffer
  1776 00004916 57                  <1>     push rdi
  1777 00004917 48BF-               <1>     mov rdi, ehciDataIn
  1777 00004919 [C003000000000000]  <1>
  1778 00004921 B908000000          <1>     mov ecx, 8
  1779 00004926 31C0                <1>     xor eax, eax
  1780 00004928 F348AB              <1>     rep stosq
  1781 0000492B 5F                  <1>     pop rdi
  1782                              <1> 
  1783                              <1> ;Device on port now ready to have an address set to it, and be enumerated
  1784 0000492C 48C1EA20            <1>     shr rdx, 4*8    ;Shift port number back down to dl
  1785 00004930 668B06              <1>     mov ax, word [rsi]  ;Get hub bus/addr pair
  1786 00004933 88E6                <1>     mov dh, ah          ;Move the bus number into dh
  1787 00004935 440FB6D0            <1>     movzx r10d, al      ;Move hub address into r10b
  1788                              <1> ;Ensure dl=port number - 1, dh=Root hub (Bus) number, r10b=Host hub number
  1789                              <1> ;       r8b=Max Control EP endpoint size
  1790 00004939 49BB64000000000000- <1>     mov r11, 100    ;Address settle time
  1790 00004942 00                  <1>
  1791 00004943 FECA                <1>     dec dl
  1792 00004945 E998F7FFFF          <1>     jmp .ehciEnumCommonEp
  1793                              <1> 
  1794                              <1> .eehdebad:
  1795                              <1> .eehdebadnoport:    ;EP if done without disabling port
  1796 0000494A E987F8FFFF          <1>     jmp .ehciedbadnoport
  1797                              <1> .eehdebadnotimeout:
  1798 0000494F E98DF8FFFF          <1>     jmp .ehciedbadnotimeout
  1799                              <1> .eehdebadremtables:
  1800 00004954 E99AF8FFFF          <1>     jmp .ehcibadremtables
  1801                              <1> .eehdecritical:
  1802 00004959 E96BF8FFFF          <1>     jmp .ehciedexit  ;Fast exit with carry set
  1803                              <1> .eehdereset:
  1804                              <1> ;rsi must point to valid Hub device block
  1805 0000495E 48BB23030400000000- <1>     mov rbx, 0000000000040323h  ;Reset port 
  1805 00004967 00                  <1>
  1806 00004968 4809D3              <1>     or rbx, rdx ;Add device address
  1807 0000496B 4488C1              <1>     mov cl, r8b
  1808 0000496E 4488C8              <1>     mov al, r9b
  1809 00004971 E801F4FFFF          <1>     call .ehciSetNoData
  1810 00004976 7254                <1>     jc .eehcritexit
  1811                              <1> 
  1812 00004978 49BB88130000000000- <1>     mov r11, 5000 ;Just keep trying
  1812 00004981 00                  <1>
  1813                              <1> .eehder1:
  1814 00004982 B486                <1>     mov ah, 86h
  1815 00004984 B914000000          <1>     mov ecx, 20     ;20 ms is max according to USB 2.0 standard
  1816 00004989 CD35                <1>     int 35h
  1817                              <1> 
  1818 0000498B 48BBA3000000000004- <1>     mov rbx, 00040000000000A3h ;Get port status
  1818 00004994 00                  <1>
  1819 00004995 4809D3              <1>     or rbx, rdx
  1820 00004998 4488C1              <1>     mov cl, r8b
  1821 0000499B 4488C8              <1>     mov al, r9b
  1822 0000499E E873F4FFFF          <1>     call .ehciGetRequest
  1823 000049A3 8A0C25[C0030000]    <1>     mov cl, byte [ehciDataIn]   ;Get low byte of in data
  1824 000049AA F6C110              <1>     test cl, 10h    ;If bit not set, reset over, proceed
  1825 000049AD 7405                <1>     jz .eehder2
  1826 000049AF 49FFCB              <1>     dec r11
  1827 000049B2 75CE                <1>     jnz .eehder1
  1828                              <1> .eehder2:
  1829 000049B4 48BB23011400000000- <1>     mov rbx, 0000000000140123h ;Clear port reset bit
  1829 000049BD 00                  <1>
  1830 000049BE 4809D3              <1>     or rbx, rdx
  1831 000049C1 4488C1              <1>     mov cl, r8b
  1832 000049C4 4488C8              <1>     mov al, r9b
  1833 000049C7 E8ABF3FFFF          <1>     call .ehciSetNoData
  1834                              <1> .eehcritexit:
  1835 000049CC C3                  <1>     ret
  1836                              <1> 
  1837                              <1> .ehciHubClassDescriptor:
  1838                              <1> ;Gets the Hub class descriptor
  1839                              <1> ;Get Hub descriptor for device pointed to by rsi
  1840                              <1> ;If invalid data, returns error
  1841                              <1> ;Input: rsi = Ptr to hub data block
  1842                              <1> ;Output:
  1843                              <1> ;   Carry Clear if success
  1844                              <1> ;   Carry Set if fail, al contains error code
  1845 000049CD 53                  <1>     push rbx
  1846 000049CE 51                  <1>     push rcx
  1847 000049CF 55                  <1>     push rbp
  1848 000049D0 66BD0300            <1>     mov bp, 3
  1849                              <1> 
  1850 000049D4 48BBA0060029000007- <1>     mov rbx, 00070000290006A0h  ;Get Hub descriptor (only first 7 bytes)
  1850 000049DD 00                  <1>
  1851 000049DE 0FB64E04            <1>     movzx ecx, byte [rsi + 4]  ;bMaxPacketSize0
  1852 000049E2 8A06                <1>     mov al, byte [rsi]      ;Get device address
  1853 000049E4 E82DF4FFFF          <1>     call .ehciGetRequest
  1854 000049E9 7226                <1>     jc .ehcdfail    ;Errors 0-2 live here
  1855                              <1> 
  1856 000049EB 66FFC5              <1>     inc bp
  1857 000049EE 803C25[C1030000]29  <1>     cmp byte [ehciDataIn + 1], 29h  ;Is this a valid hub descriptor
  1858 000049F6 7519                <1>     jne .ehcdfail
  1859                              <1> 
  1860 000049F8 8A0C25[C2030000]    <1>     mov cl, byte [ehciDataIn + 2]   ;Get number of downstream ports
  1861 000049FF 884E05              <1>     mov byte [rsi + 5], cl  ;Store in variable, marking device as configured
  1862                              <1> 
  1863 00004A02 8A0C25[C5030000]    <1>     mov cl, byte [ehciDataIn + 5]   ;Get PowerOn2PowerGood
  1864 00004A09 884E06              <1>     mov byte [rsi + 6], cl  ;Store in variable
  1865 00004A0C F8                  <1>     clc
  1866                              <1> .ehcdexit:
  1867 00004A0D 5D                  <1>     pop rbp
  1868 00004A0E 59                  <1>     pop rcx
  1869 00004A0F 5B                  <1>     pop rbx
  1870 00004A10 C3                  <1>     ret
  1871                              <1> .ehcdfail:
  1872 00004A11 4088E8              <1>     mov al, bpl
  1873 00004A14 F9                  <1>     stc
  1874 00004A15 EBF6                <1>     jmp short .ehcdexit
  1875                              <1> ;                        ---------MSD functions---------
  1876                              <1> .ehciMsdInitialise:
  1877                              <1> ;Initialises an MSD device.
  1878                              <1> ;Input: rsi = Valid MSD device block
  1879                              <1> ;Output: CF=CY: Init did not complete
  1880                              <1> ;        al = 0 => Device initialised
  1881                              <1> ;        al = 1 => Host/Schedule error
  1882                              <1> ;        al = 2 => Device failed to initialise
  1883                              <1> ;        CF=NC: Init complete, rsi points to complete USB MSD device block
  1884 00004A17 51                  <1>     push rcx
  1885 00004A18 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the bus number into al
  1886 00004A1B E800F2FFFF          <1>     call .ehciAdjustAsyncSchedCtrlr
  1887 00004A20 B001                <1>     mov al, 1
  1888 00004A22 7249                <1>     jc .ehciMsdInitFail
  1889 00004A24 E8A9FCFFFF          <1>     call .ehciDeviceSetupMsd
  1890 00004A29 B002                <1>     mov al, 2
  1891 00004A2B 7240                <1>     jc .ehciMsdInitFail
  1892 00004A2D E8EB040000          <1>     call .ehciMsdBOTInquiry
  1893 00004A32 7239                <1>     jc .ehciMsdInitFail
  1894 00004A34 B905000000          <1>     mov ecx, 5
  1895                              <1> .emi0:
  1896 00004A39 E82C050000          <1>     call .ehciMsdBOTReadFormatCapacities
  1897 00004A3E 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h   ;Host error
  1898 00004A46 7439                <1>     je .ehciMsdInitialisePfail  ;Protocol fail
  1899 00004A48 E88C010000          <1>     call .ehciMsdBOTCheckTransaction
  1900 00004A4D 6685C0              <1>     test ax, ax
  1901 00004A50 7538                <1>     jnz .emipf0
  1902 00004A52 E8F6060000          <1>     call .ehciMsdBOTModeSense6
  1903 00004A57 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h   ;Host error
  1904 00004A5F 7420                <1>     je .ehciMsdInitialisePfail  ;Protocol fail
  1905 00004A61 E873010000          <1>     call .ehciMsdBOTCheckTransaction
  1906 00004A66 6685C0              <1>     test ax, ax     ;Also clears CF if zero
  1907 00004A69 751F                <1>     jnz .emipf0
  1908                              <1> .ehciMsdInitExit:
  1909 00004A6B 59                  <1>     pop rcx
  1910 00004A6C C3                  <1>     ret
  1911                              <1> .ehciMsdInitFail:
  1912 00004A6D 668B06              <1>     mov ax, word [rsi]
  1913 00004A70 E807F9FFFF          <1>     call .ehciRemoveDevFromTables
  1914 00004A75 FE0C25[4B020000]    <1>     dec byte [numMSD]   ;Device was removed from tables, decrement
  1915 00004A7C F9                  <1>     stc
  1916 00004A7D B002                <1>     mov al, 2
  1917 00004A7F EBEA                <1>     jmp short .ehciMsdInitExit
  1918                              <1> .ehciMsdInitialisePfail:
  1919 00004A81 E873000000          <1>     call .ehciMsdBOTResetRecovery
  1920 00004A86 FFC9                <1>     dec ecx
  1921 00004A88 74E3                <1>     jz .ehciMsdInitFail
  1922                              <1> .emipf0:
  1923 00004A8A E836060000          <1>     call .ehciMsdBOTRequestSense
  1924 00004A8F 803C25[A9010000]20  <1>     cmp byte [msdStatus], 20h
  1925 00004A97 74E8                <1>     je .ehciMsdInitialisePfail
  1926 00004A99 E83B010000          <1>     call .ehciMsdBOTCheckTransaction
  1927 00004A9E 6685C0              <1>     test ax, ax
  1928 00004AA1 7496                <1>     jz .emi0
  1929 00004AA3 EBDC                <1>     jmp short .ehciMsdInitialisePfail
  1930                              <1> 
  1931                              <1> .ehciMsdDeviceReset:
  1932                              <1> ;Reset an MSD device on current active EHCI bus
  1933                              <1> ;Input: rsi = Pointer to table data structure
  1934                              <1> ;Output:
  1935                              <1> ;   CF=CY: Host error, Reset host system
  1936                              <1> ;   CF=NC: Transaction succeeded, check reset occurred successfully 
  1937                              <1> ;          (If eActiveIntr AND 2 != 0, then error in transfer)
  1938 00004AA5 51                  <1>     push rcx
  1939 00004AA6 52                  <1>     push rdx
  1940 00004AA7 53                  <1>     push rbx
  1941 00004AA8 50                  <1>     push rax
  1942                              <1> 
  1943 00004AA9 0FB64E07            <1>     movzx ecx, byte [rsi + 7]  ;Get bMaxPacketSize0
  1944 00004AAD 480FB65604          <1>     movzx rdx, byte [rsi + 4]  ;Get Interface Number
  1945 00004AB2 48C1E228            <1>     shl rdx, 5*8 ;Send to 5th byte
  1946 00004AB6 48BB21FF0000000000- <1>     mov rbx, 0FF21h            ;MSD Reset
  1946 00004ABF 00                  <1>
  1947 00004AC0 4809D3              <1>     or rbx, rdx                ;And those bytes
  1948 00004AC3 8A06                <1>     mov al, byte [rsi]
  1949 00004AC5 E8ADF2FFFF          <1>     call .ehciSetNoData
  1950                              <1> 
  1951 00004ACA 58                  <1>     pop rax
  1952 00004ACB 5B                  <1>     pop rbx
  1953 00004ACC 5A                  <1>     pop rdx
  1954 00004ACD 59                  <1>     pop rcx
  1955 00004ACE C3                  <1>     ret
  1956                              <1> 
  1957                              <1> .ehciMsdGetMaxLun:
  1958                              <1> ;Get max LUN of an MSD device on current active EHCI bus
  1959                              <1> ;Input: rsi = Pointer to table data structure
  1960                              <1> ;       al = Address
  1961                              <1> ;Output:
  1962                              <1> ;   CF=CY: Host error, Reset host system
  1963                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  1964                              <1> ;   Max Lun saved at DataIn Buffer (first byte)
  1965                              <1> ;   Check this was transferred, by checking total data transferred value
  1966 00004ACF 51                  <1>     push rcx
  1967 00004AD0 52                  <1>     push rdx
  1968 00004AD1 53                  <1>     push rbx
  1969 00004AD2 50                  <1>     push rax
  1970                              <1> 
  1971 00004AD3 0FB64E07            <1>     movzx ecx, byte [rsi + 7]  ;Get bMaxPacketSize0
  1972 00004AD7 480FB65604          <1>     movzx rdx, byte [rsi + 4]  ;Get Interface Number
  1973 00004ADC 48C1E228            <1>     shl rdx, 5*8 ;Send to 5th byte
  1974 00004AE0 48BBA1FE0000000001- <1>     mov rbx, 000100000000FEA1h            ;MSD Get Max LUN
  1974 00004AE9 00                  <1>
  1975 00004AEA 4809D3              <1>     or rbx, rdx                ;And those bytes
  1976 00004AED 8A06                <1>     mov al, byte [rsi]
  1977 00004AEF E822F3FFFF          <1>     call .ehciGetRequest
  1978                              <1> 
  1979 00004AF4 58                  <1>     pop rax
  1980 00004AF5 5B                  <1>     pop rbx
  1981 00004AF6 5A                  <1>     pop rdx
  1982 00004AF7 59                  <1>     pop rcx
  1983 00004AF8 C3                  <1>     ret
  1984                              <1> 
  1985                              <1> .ehciMsdBOTResetRecovery:
  1986                              <1> ;----------------------------------------------------------------
  1987                              <1> ;Calls the reset recovery procedure on a device ptd to by rsi   :
  1988                              <1> ;Input:  rsi = Pointer to MSD device parameter block            :
  1989                              <1> ;Output: CF=CY if something went wrong. Else CF=NC              :
  1990                              <1> ;----------------------------------------------------------------
  1991                              <1> ;Calls an MSDBBB reset then calls StandardErrorHandler AFTER    : 
  1992                              <1> ; writing the Qhead for each Bulk EP.                           :
  1993                              <1> ;----------------------------------------------------------------
  1994 00004AF9 50                  <1>     push rax
  1995 00004AFA 53                  <1>     push rbx
  1996 00004AFB 51                  <1>     push rcx
  1997 00004AFC 66C7460E0000        <1>     mov word [rsi + 14], 00h    ;Reset clear both endpoint dt bits 
  1998                              <1> 
  1999 00004B02 E89EFFFFFF          <1>     call .ehciMsdDeviceReset    ;Call the device reset
  2000 00004B07 721E                <1>     jc .embrrexit
  2001                              <1> ;Now clear stall on IN EP
  2002 00004B09 8A06                <1>     mov al, byte [rsi]          ;Get the address
  2003 00004B0B 8A5E08              <1>     mov bl, byte [rsi + 8]      ;Get the 4 byte EP address
  2004 00004B0E 0FB64E07            <1>     movzx ecx, byte [rsi + 7]   ;Get the Max packet size for the ctrl EP
  2005 00004B12 E8B9FAFFFF          <1>     call .ehciClearEpStallHalt
  2006 00004B17 720E                <1>     jc .embrrexit
  2007                              <1> ;Now clear stall on OUT EP
  2008 00004B19 8A06                <1>     mov al, byte [rsi]          ;Get the address
  2009 00004B1B 8A5E0B              <1>     mov bl, byte [rsi + 11]     ;Get the 4 byte EP address
  2010 00004B1E 0FB64E07            <1>     movzx ecx, byte [rsi + 7]   ;Get the Max packet size for the ctrl EP
  2011 00004B22 E8A9FAFFFF          <1>     call .ehciClearEpStallHalt
  2012                              <1> .embrrexit:
  2013 00004B27 59                  <1>     pop rcx
  2014 00004B28 5B                  <1>     pop rbx
  2015 00004B29 58                  <1>     pop rax
  2016 00004B2A C3                  <1>     ret
  2017                              <1> .ehciMsdBOTCheckValidCSW:
  2018                              <1> ; This function checks that the recieved CSW was valid.
  2019                              <1> ; If this function returns a non-zero value in al, 
  2020                              <1> ; a reset recovery of the device is required
  2021                              <1> ; Output: al = 0 : valid CSW
  2022                              <1> ;         If CSW not valid, al contains a bitfield describing what failed
  2023                              <1> ;         al = 1h   : CSW is not 13 bytes in length
  2024                              <1> ;         al = 2h   : dCSWSignature is not equal to 053425355h
  2025                              <1> ;         al = 4h   : dCSWTag does not match the dCBWTag
  2026                              <1> ;         al = 0F8h : Reserved
  2027                              <1> ;   rax destroyed
  2028 00004B2B 53                  <1>     push rbx
  2029 00004B2C 51                  <1>     push rcx
  2030 00004B2D 31C0                <1>     xor eax, eax
  2031 00004B2F 66B90100            <1>     mov cx, 1
  2032 00004B33 668B1C25[8A010000]  <1>     mov bx, word [ehciTDSpace + 2*ehciSizeOfTD + 0Ah]   
  2033                              <1> ;Get total bytes to transfer from third QHeadTD to see if 13h bytes were 
  2034                              <1> ; transferred
  2035 00004B3B 6681E3FF7F          <1>     and bx, 7FFFh   ;Clear upper bit
  2036 00004B40 660F45C1            <1>     cmovnz ax, cx   ;If the result for the and is not zero, <>13 bytes were sent
  2037                              <1> 
  2038 00004B44 66D1E1              <1>     shl cx, 1     
  2039 00004B47 6609C1              <1>     or cx, ax
  2040 00004B4A 813C25[C0050000]55- <1>     cmp dword [msdCSW], CSWSig
  2040 00004B52 534253              <1>
  2041 00004B55 660F45C1            <1>     cmovne ax, cx
  2042                              <1> 
  2043 00004B59 66B90400            <1>     mov cx, 4h
  2044 00004B5D 6609C1              <1>     or cx, ax
  2045 00004B60 0FB61C25[4A020000]  <1>     movzx ebx, byte [cbwTag]
  2046 00004B68 FECB                <1>     dec bl
  2047 00004B6A 3A1C25[C4050000]    <1>     cmp bl, byte [msdCSW + 4h]
  2048 00004B71 660F45C1            <1>     cmovne ax, cx
  2049                              <1> 
  2050 00004B75 59                  <1>     pop rcx
  2051 00004B76 5B                  <1>     pop rbx
  2052 00004B77 C3                  <1>     ret
  2053                              <1> 
  2054                              <1> .ehciMsdBOTCheckMeaningfulCSW:
  2055                              <1> ; This function checks if the CSW was meaningful.
  2056                              <1> ; If this function returns a non-zero value in al, it is up to the
  2057                              <1> ; caller to decide what action to take. The possible set of actions that
  2058                              <1> ; can be taken is outlined in Section 6.7 of the USB MSC BOT Revision 1.0 
  2059                              <1> ; specification.
  2060                              <1> ; Output :  al = 0h  : Invalid
  2061                              <1> ;           al = 1h  : bCSWStatus = 0
  2062                              <1> ;           al = 2h  : bCSWStatus = 1
  2063                              <1> ;           al = 4h  : bCSWStatus = 2
  2064                              <1> ;           al = 8h  : bCSWStatus > 2
  2065                              <1> ;           al = 10h : dCSWDataResidue = 0
  2066                              <1> ;           al = 20h : dCSWDataResidue < dCBWDataTransferLength
  2067                              <1> ;           al = 40h : dCSWDataResidue > dCBWDataTransferLength
  2068                              <1> ;           al = 80h : Reserved
  2069                              <1> ;   rax destroyed
  2070 00004B78 53                  <1>     push rbx
  2071 00004B79 51                  <1>     push rcx
  2072                              <1> 
  2073 00004B7A 31C0                <1>     xor eax, eax  ;In the event that things go completely wrong
  2074 00004B7C 66BB0800            <1>     mov bx, 8h
  2075 00004B80 8A0C25[CC050000]    <1>     mov cl, byte [msdCSW + 0Ch]
  2076                              <1> 
  2077 00004B87 80F902              <1>     cmp cl, 2
  2078 00004B8A 660F47C3            <1>     cmova ax, bx
  2079 00004B8E 7718                <1>     ja .embcmcResidueCheck
  2080                              <1> 
  2081 00004B90 66D1EB              <1>     shr bx, 1       ;Shift it down to 4
  2082 00004B93 660F44C3            <1>     cmove ax, bx    ;If bCSWStatus = 2, move it in
  2083 00004B97 740F                <1>     je .embcmcResidueCheck
  2084                              <1> 
  2085 00004B99 66D1EB              <1>     shr bx, 1       ;Shift down to 2
  2086 00004B9C 80F901              <1>     cmp cl, 1
  2087 00004B9F 660F44C3            <1>     cmove ax, bx    ;If bCSWStatus = 1, move bx into ax
  2088 00004BA3 7403                <1>     je .embcmcResidueCheck
  2089                              <1> 
  2090 00004BA5 66FFC0              <1>     inc ax          ;Otherwise bCSWStatus = 0
  2091                              <1> .embcmcResidueCheck:
  2092 00004BA8 8B0C25[C8050000]    <1>     mov ecx, dword [msdCSW + 8] ;Get dCSWDataResidue
  2093                              <1> 
  2094 00004BAF 66BB1000            <1>     mov bx, 10h
  2095 00004BB3 6609C3              <1>     or bx, ax   
  2096 00004BB6 85C9                <1>     test ecx, ecx
  2097 00004BB8 660F44C3            <1>     cmovz ax, bx    ;If its zero, move bx with added bit from ax into ax
  2098 00004BBC 7418                <1>     jz .embcmcExit
  2099                              <1> 
  2100 00004BBE 66BB2000            <1>     mov bx, 20h
  2101 00004BC2 6609C3              <1>     or bx, ax 
  2102 00004BC5 3B0C25[88030000]    <1>     cmp ecx, dword [ehciDataOut + 8];ehciDataOut + 8 = dCBWDataTransferLength
  2103 00004BCC 660F42C3            <1>     cmovb ax, bx
  2104 00004BD0 7204                <1>     jb .embcmcExit
  2105                              <1> 
  2106 00004BD2 660D4000            <1>     or ax, 40h  ;Else, it must be above, fail
  2107                              <1> .embcmcExit:
  2108 00004BD6 59                  <1>     pop rcx
  2109 00004BD7 5B                  <1>     pop rbx
  2110 00004BD8 C3                  <1>     ret
  2111                              <1> 
  2112                              <1> .ehciMsdBOTCheckTransaction:
  2113                              <1> ;Check successful return data here
  2114                              <1> ;Output: ax = 0                                 : CSW Valid and Meaningful
  2115                              <1> ;        ah = 1, al = CSW Validity bitfield     : CSW NOT valid
  2116                              <1> ;        ah = 2, al = CSW Meaningful bitfield   : CSW NOT meaningful
  2117                              <1> ;   rax destroyed
  2118 00004BD9 30E4                <1>     xor ah, ah
  2119 00004BDB E84BFFFFFF          <1>     call .ehciMsdBOTCheckValidCSW
  2120 00004BE0 84C0                <1>     test al, al
  2121 00004BE2 7407                <1>     jz .embhiehcswmeaningful
  2122 00004BE4 B401                <1>     mov ah, 1       ; CSW Not Valid signature
  2123 00004BE6 E90B000000          <1>     jmp .embhiehexit
  2124                              <1> .embhiehcswmeaningful:
  2125 00004BEB E888FFFFFF          <1>     call .ehciMsdBOTCheckMeaningfulCSW
  2126 00004BF0 244C                <1>     and al, 4Ch     ;Check bad bits first and bCSWStatus=02 40h|08h|04h
  2127 00004BF2 7402                <1>     jz .embhiehexit
  2128 00004BF4 B402                <1>     mov ah, 2       ; CSW Not Meaningful signature
  2129                              <1> .embhiehexit:
  2130 00004BF6 C3                  <1>     ret
  2131                              <1> .ehciMsdBOTOO64I:   ;For devices with 64 byte max packet size
  2132                              <1> .ehciMsdBOTOI64I:   ;For devices with 64 byte max packet size
  2133 00004BF7 C60425[A9010000]BB  <1>     mov byte [msdStatus], 0BBh   ;Undefined error
  2134 00004BFF C3                  <1>     ret
  2135                              <1> .ehciMsdBOTOOI:     ;Out Out In transfer
  2136                              <1> ;Input - rsi = MSD device parameter block
  2137                              <1> ;        rbx = Input buffer for Data In
  2138                              <1> ;        ecx = Number of milliseconds to wait between Out and In packets
  2139                              <1> ;        r8  = Number of bytes to be transferred (for the DATA phase)
  2140                              <1> ;        r10 = LUN Value
  2141                              <1> ;        r11 = Length of CBW command block
  2142 00004C00 57                  <1>     push rdi
  2143 00004C01 4150                <1>     push r8
  2144 00004C03 4151                <1>     push r9
  2145 00004C05 4152                <1>     push r10
  2146 00004C07 4153                <1>     push r11
  2147 00004C09 4154                <1>     push r12
  2148 00004C0B 51                  <1>     push rcx
  2149 00004C0C FC                  <1>     cld
  2150                              <1> 
  2151 00004C0D 4D89C4              <1>     mov r12, r8     ;Save number of bytes to transfer to MSD device
  2152 00004C10 51                  <1>     push rcx
  2153                              <1> ;Write QHead for CBW
  2154 00004C11 49BB-               <1>     mov r11, ehciTDSpace ;First TD is the head of the Out buffer
  2154 00004C13 [0001000000000000]  <1>
  2155 00004C1B E840020000          <1>     call .ehciMsdWriteOutQHead
  2156                              <1> ;Write TD for CBW send
  2157 00004C20 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
  2158 00004C23 49B801000000000000- <1>     mov r8, 1
  2158 00004C2C 00                  <1>
  2159 00004C2D 4D89C1              <1>     mov r9, r8
  2160 00004C30 440FB6560F          <1>     movzx r10d, byte [rsi + 15]   ;Get Out EP dt bit
  2161 00004C35 80760F01            <1>     xor byte [rsi + 15], 1  ;Toggle bit
  2162 00004C39 41D1CA              <1>     ror r10d, 1 ;Roll dt bit to upper bit of dword
  2163 00004C3C 4181CA808C1F00      <1>     or r10d, 001F8C80h 
  2164                              <1> ; Active TD, OUT EP, Error ctr = 3, 01Fh = 31 byte transfer
  2165 00004C43 49BB-               <1>     mov r11, ehciDataOut ; Data out buffer
  2165 00004C45 [8003000000000000]  <1>
  2166 00004C4D E8BAF9FFFF          <1>     call .ehciWriteQHeadTD
  2167                              <1> 
  2168 00004C52 B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2169 00004C54 E8E6F2FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2170 00004C59 59                  <1>     pop rcx    ;Wait ecx ms for "motors to spin up"
  2171 00004C5A 0F824B010000        <1>     jc .emboexit    ;If catastrophic Host system error, exit!
  2172                              <1> 
  2173 00004C60 50                  <1>     push rax
  2174 00004C61 B486                <1>     mov ah, 86h
  2175 00004C63 CD35                <1>     int 35h
  2176 00004C65 58                  <1>     pop rax
  2177                              <1> ;Write Qhead to Send data
  2178 00004C66 49BB80000000000000- <1>     mov r11, ehciSizeOfTD + ehciSizeOfTD
  2178 00004C6F 00                  <1>
  2179 00004C70 E8EB010000          <1>     call .ehciMsdWriteOutQHead
  2180                              <1> ;Write TD for data send
  2181 00004C75 4C89DF              <1>     mov rdi, r11
  2182 00004C78 49B801000000000000- <1>     mov r8, 1
  2182 00004C81 00                  <1>
  2183 00004C82 4D89C1              <1>     mov r9, r8
  2184 00004C85 4D89E2              <1>     mov r10, r12     ;Get back number of bytes to transfer
  2185 00004C88 49C1E210            <1>     shl r10, 8*2    ;Shift into 3rd byte
  2186 00004C8C 4181CA808C0000      <1>     or r10d, 00008C80h ;Add control bits: Active TD, OUT EP, Error ctr = 3
  2187 00004C93 0FB64E0F            <1>     movzx ecx, byte [rsi + 15]  ;Get Out EP dt bit in r9d
  2188 00004C97 80760F01            <1>     xor byte [rsi + 15], 1  ;Toggle bit
  2189 00004C9B D1C9                <1>     ror ecx, 1 ;Roll dt bit to upper bit of dword
  2190 00004C9D 4109CA              <1>     or r10d, ecx    ;Add dt bit to r10d
  2191 00004CA0 4989DB              <1>     mov r11, rbx    ;Get the address of Data buffer
  2192 00004CA3 E864F9FFFF          <1>     call .ehciWriteQHeadTD
  2193                              <1> 
  2194 00004CA8 B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2195 00004CAA E890F2FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2196 00004CAF 0F82F6000000        <1>     jc .emboexit    ;If catastrophic Host system error, exit!
  2197                              <1> ;Write Qhead for CSW
  2198 00004CB5 49BB-               <1>     mov r11, ehciTDSpace + 2*ehciSizeOfTD ;Third TD
  2198 00004CB7 [8001000000000000]  <1>
  2199 00004CBF E8DB010000          <1>     call .ehciMsdWriteInQHead
  2200 00004CC4 4C89DF              <1>     mov rdi, r11
  2201 00004CC7 E9A9000000          <1>     jmp .emboiicommonep
  2202                              <1> .ehciMsdBOTOII: ;Out In In transfer
  2203                              <1> ;Input - rsi = MSD device parameter block
  2204                              <1> ;        rbx = Input buffer for Data In
  2205                              <1> ;        ecx = Number of milliseconds to wait between Out and In packets
  2206                              <1> ;        r8  = Number of bytes to be transferred (for the DATA phase)
  2207                              <1> ;        r10 = LUN Value
  2208                              <1> ;        r11 = Length of CBW command block
  2209                              <1> 
  2210 00004CCC 57                  <1>     push rdi
  2211 00004CCD 4150                <1>     push r8
  2212 00004CCF 4151                <1>     push r9
  2213 00004CD1 4152                <1>     push r10
  2214 00004CD3 4153                <1>     push r11
  2215 00004CD5 4154                <1>     push r12
  2216 00004CD7 51                  <1>     push rcx
  2217 00004CD8 FC                  <1>     cld
  2218                              <1> 
  2219 00004CD9 4D89C4              <1>     mov r12, r8 ;Save the number of bytes to be transferred
  2220 00004CDC 51                  <1>     push rcx
  2221                              <1> 
  2222                              <1> ;Write the OUT Queue Head
  2223 00004CDD 49BB-               <1>     mov r11, ehciTDSpace ;First TD is the head of the Out buffer
  2223 00004CDF [0001000000000000]  <1>
  2224 00004CE7 E874010000          <1>     call .ehciMsdWriteOutQHead
  2225                              <1> 
  2226 00004CEC 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
  2227 00004CEF 49B801000000000000- <1>     mov r8, 1
  2227 00004CF8 00                  <1>
  2228 00004CF9 4D89C1              <1>     mov r9, r8
  2229 00004CFC 440FB6560F          <1>     movzx r10d, byte [rsi + 15]   ;Get Out EP dt bit
  2230 00004D01 80760F01            <1>     xor byte [rsi + 15], 1  ;Toggle bit
  2231 00004D05 41D1CA              <1>     ror r10d, 1 ;Roll dt bit to upper bit of dword
  2232 00004D08 4181CA808C1F00      <1>     or r10d, 001F8C80h 
  2233                              <1> ; Active TD, OUT EP, Error ctr = 3, 01Fh = 31 byte transfer
  2234 00004D0F 49BB-               <1>     mov r11, ehciDataOut ; Data out buffer
  2234 00004D11 [8003000000000000]  <1>
  2235 00004D19 E8EEF8FFFF          <1>     call .ehciWriteQHeadTD
  2236                              <1> 
  2237 00004D1E B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2238 00004D20 E81AF2FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2239 00004D25 59                  <1>     pop rcx    ;Wait ecx ms for "motors to spin up"
  2240 00004D26 0F827F000000        <1>     jc .emboexit    ;If catastrophic Host system error, exit!
  2241                              <1>          
  2242 00004D2C 50                  <1>     push rax
  2243 00004D2D B486                <1>     mov ah, 86h
  2244 00004D2F CD35                <1>     int 35h
  2245 00004D31 58                  <1>     pop rax
  2246                              <1> ;Write the IN Queue Head
  2247 00004D32 49BB-               <1>     mov r11, ehciTDSpace + ehciSizeOfTD ;Move to position 2 to preserve OUT TD
  2247 00004D34 [4001000000000000]  <1>
  2248 00004D3C E85E010000          <1>     call .ehciMsdWriteInQHead
  2249                              <1> 
  2250 00004D41 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
  2251 00004D44 4C8D4740            <1>     lea r8, qword [rdi + ehciSizeOfTD]  ;Point to next TD
  2252 00004D48 4D89C1              <1>     mov r9, r8
  2253 00004D4B 4D89E2              <1>     mov r10, r12     ;Get back number of bytes to transfer from the stack
  2254 00004D4E 49C1E210            <1>     shl r10, 8*2    ;Shift into 3rd byte
  2255 00004D52 4181CA800D0000      <1>     or r10d, 00000D80h ;Add control bits: Active TD, IN EP, Error ctr = 3
  2256 00004D59 0FB64E0E            <1>     movzx ecx, byte [rsi + 14]  ;Get IN EP dt bit in r9d
  2257 00004D5D 80760E01            <1>     xor byte [rsi + 14], 1  ;Toggle bit
  2258 00004D61 D1C9                <1>     ror ecx, 1 ;Roll dt bit to upper bit of dword
  2259 00004D63 4109CA              <1>     or r10d, ecx    ;Add dt bit to r10d
  2260 00004D66 4989DB              <1>     mov r11, rbx ; Data out buffer, default ehciDataIn
  2261 00004D69 E89EF8FFFF          <1>     call .ehciWriteQHeadTD
  2262                              <1> 
  2263 00004D6E 4881C740000000      <1>     add rdi, ehciSizeOfTD     ;Go to next TD space
  2264                              <1> .emboiicommonep:
  2265 00004D75 49B801000000000000- <1>     mov r8, 1
  2265 00004D7E 00                  <1>
  2266 00004D7F 4D89C1              <1>     mov r9, r8
  2267 00004D82 41BA808D0D00        <1>     mov r10d, 000D8D80h     ;Active TD, IN EP, Error ctr = 3, 0Dh = 13 byte CSW
  2268 00004D88 0FB64E0E            <1>     movzx ecx, byte [rsi + 14]  ;Get IN EP dt bit in r9d
  2269 00004D8C 80760E01            <1>     xor byte [rsi + 14], 1  ;Toggle bit
  2270 00004D90 D1C9                <1>     ror ecx, 1 ;Roll dt bit to upper bit of dword
  2271 00004D92 4109CA              <1>     or r10d, ecx    ;Add dt bit to r10d
  2272 00004D95 49BB-               <1>     mov r11, msdCSW
  2272 00004D97 [C005000000000000]  <1>
  2273                              <1> 
  2274 00004D9F E868F8FFFF          <1>     call .ehciWriteQHeadTD
  2275                              <1> 
  2276 00004DA4 B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2277 00004DA6 E894F1FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2278                              <1> .emboexit:
  2279 00004DAB 59                  <1>     pop rcx
  2280 00004DAC 415C                <1>     pop r12
  2281 00004DAE 415B                <1>     pop r11
  2282 00004DB0 415A                <1>     pop r10
  2283 00004DB2 4159                <1>     pop r9
  2284 00004DB4 4158                <1>     pop r8
  2285 00004DB6 5F                  <1>     pop rdi
  2286 00004DB7 C3                  <1>     ret
  2287                              <1> .ehciMsdBOTOI: ;Out In transfer
  2288                              <1> ;Input - rsi = MSD device parameter block
  2289                              <1> ;        rbx = Input buffer for Data In
  2290                              <1> ;        ecx = Number of milliseconds to wait between Out and In packets
  2291                              <1> ;        r8  = Number of bytes to be transferred (for the DATA phase)
  2292                              <1> ;        r10 = LUN Value
  2293                              <1> ;        r11 = Length of CBW command block
  2294                              <1> 
  2295 00004DB8 57                  <1>     push rdi
  2296 00004DB9 4150                <1>     push r8
  2297 00004DBB 4151                <1>     push r9
  2298 00004DBD 4152                <1>     push r10
  2299 00004DBF 4153                <1>     push r11
  2300 00004DC1 51                  <1>     push rcx
  2301 00004DC2 FC                  <1>     cld
  2302                              <1> 
  2303                              <1> 
  2304                              <1> ;Write the OUT Queue Head
  2305 00004DC3 49BB-               <1>     mov r11, ehciTDSpace ;First TD is the head of the Out buffer
  2305 00004DC5 [0001000000000000]  <1>
  2306 00004DCD E88E000000          <1>     call .ehciMsdWriteOutQHead
  2307                              <1> 
  2308 00004DD2 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
  2309 00004DD5 49B801000000000000- <1>     mov r8, 1
  2309 00004DDE 00                  <1>
  2310 00004DDF 4D89C1              <1>     mov r9, r8
  2311 00004DE2 440FB6560F          <1>     movzx r10d, byte [rsi + 15]   ;Get Out EP dt bit
  2312 00004DE7 80760F01            <1>     xor byte [rsi + 15], 1  ;Toggle bit
  2313 00004DEB 41D1CA              <1>     ror r10d, 1 ;Roll dt bit to upper bit of dword
  2314 00004DEE 4181CA808C1F00      <1>     or r10d, 001F8C80h 
  2315                              <1> ; Active TD, OUT EP, Error ctr = 3, 01Fh = 31 byte transfer
  2316 00004DF5 49BB-               <1>     mov r11, ehciDataOut ; Data out buffer
  2316 00004DF7 [8003000000000000]  <1>
  2317 00004DFF E808F8FFFF          <1>     call .ehciWriteQHeadTD
  2318                              <1> 
  2319 00004E04 B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2320 00004E06 E834F1FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2321 00004E0B 7248                <1>     jc .emboiexit    ;If catastrophic Host system error, exit!
  2322                              <1>          
  2323                              <1> ;Write the IN Queue Head
  2324 00004E0D 49BB-               <1>     mov r11, ehciTDSpace + ehciSizeOfTD ;Move to position 2 to preserve OUT TD
  2324 00004E0F [4001000000000000]  <1>
  2325 00004E17 E883000000          <1>     call .ehciMsdWriteInQHead
  2326                              <1> 
  2327 00004E1C 4C89DF              <1>     mov rdi, r11    ;Move pointer to TD buffer head
  2328 00004E1F 49B801000000000000- <1>     mov r8, 1
  2328 00004E28 00                  <1>
  2329 00004E29 4D89C1              <1>     mov r9, r8
  2330 00004E2C 41BA808D0D00        <1>     mov r10d, 000D8D80h     ;Active TD, IN EP, Error ctr = 3, 0Dh = 13 byte CSW
  2331 00004E32 0FB64E0E            <1>     movzx ecx, byte [rsi + 14]  ;Get IN EP dt bit in r9d
  2332 00004E36 80760E01            <1>     xor byte [rsi + 14], 1  ;Toggle bit
  2333 00004E3A D1C9                <1>     ror ecx, 1 ;Roll dt bit to upper bit of dword
  2334 00004E3C 4109CA              <1>     or r10d, ecx    ;Add dt bit to r10d
  2335 00004E3F 49BB-               <1>     mov r11, msdCSW
  2335 00004E41 [C005000000000000]  <1>
  2336                              <1> 
  2337 00004E49 E8BEF7FFFF          <1>     call .ehciWriteQHeadTD
  2338                              <1> 
  2339 00004E4E B103                <1>     mov cl, 11b    ;Lock out internal buffer
  2340 00004E50 E8EAF0FFFF          <1>     call .ehciProcessCommand        ;Run controller
  2341                              <1> .emboiexit:
  2342 00004E55 59                  <1>     pop rcx
  2343 00004E56 415B                <1>     pop r11
  2344 00004E58 415A                <1>     pop r10
  2345 00004E5A 4159                <1>     pop r9
  2346 00004E5C 4158                <1>     pop r8
  2347 00004E5E 5F                  <1>     pop rdi
  2348 00004E5F C3                  <1>     ret
  2349                              <1> .ehciMsdWriteOutQHead:
  2350                              <1> ;Input: rsi = Valid MSD device
  2351                              <1> ;       r11 = Ptr to First QHTD
  2352 00004E60 E84CEEFFFF          <1>     call .ehciGetNewQHeadAddr
  2353 00004E65 4181C802000000      <1>     or r8d, 2    ;Process QHs
  2354 00004E6C 41B900600000        <1>     mov r9d, 00006000h  ;Default mask, no nak counter
  2355 00004E72 0FB74E0C            <1>     movzx ecx, word [rsi + 12]  ;wMaxPacketSizeOut
  2356 00004E76 C1E110              <1>     shl ecx, 8*2
  2357 00004E79 4109C9              <1>     or r9d, ecx
  2358 00004E7C 0FB64E0B            <1>     movzx ecx, byte [rsi + 11]  ;EP address
  2359 00004E80 81E10F000000        <1>     and ecx, 0Fh
  2360 00004E86 C1E108              <1>     shl ecx, 8  ;Shift to second byte 
  2361 00004E89 4109C9              <1>     or r9d, ecx ;Add bits
  2362 00004E8C 8A06                <1>     mov al, byte [rsi]  ;Get device address
  2363 00004E8E 247F                <1>     and al, 7Fh    ;Force clear upper bit of al
  2364 00004E90 4108C1              <1>     or r9b, al    ;Set lower 8 bits of r9 correctly
  2365 00004E93 41BA00000040        <1>     mov r10d, 40000000h    ;1 transaction/ms
  2366 00004E99 E849F7FFFF          <1>     call .ehciWriteQHead
  2367 00004E9E C3                  <1>     ret
  2368                              <1> .ehciMsdWriteInQHead:
  2369                              <1> ;Input: rsi = Valid MSD device
  2370                              <1> ;       r11 = Ptr to First QHTD
  2371 00004E9F E80DEEFFFF          <1>     call .ehciGetNewQHeadAddr
  2372 00004EA4 4981C802000000      <1>     or r8, 2
  2373 00004EAB 41B900600000        <1>     mov r9d, 00006000h  ;Default mask
  2374 00004EB1 0FB74E09            <1>     movzx ecx, word [rsi + 9]  ;wMaxPacketSizeIn
  2375 00004EB5 C1E110              <1>     shl ecx, 8*2
  2376 00004EB8 4109C9              <1>     or r9d, ecx
  2377 00004EBB 0FB64E08            <1>     movzx ecx, byte [rsi + 8]  ;EP address
  2378 00004EBF 81E10F000000        <1>     and ecx, 0Fh
  2379 00004EC5 C1E108              <1>     shl ecx, 8  ;Shift to second byte 
  2380 00004EC8 4109C9              <1>     or r9d, ecx ;Add bits
  2381 00004ECB 8A06                <1>     mov al, byte [rsi]  ;Get device address
  2382 00004ECD 247F                <1>     and al, 7Fh    ;Force clear upper bit of al
  2383 00004ECF 4108C1              <1>     or r9b, al    ;Set lower 8 bits of r9 correctly
  2384 00004ED2 41BA00000040        <1>     mov r10d, 40000000h    ;1 transaction/ms
  2385 00004ED8 E80AF7FFFF          <1>     call .ehciWriteQHead
  2386 00004EDD C3                  <1>     ret
  2387                              <1> .ehciMsdBOTRequest:
  2388                              <1> ;Input: ecx = Number of miliseconds to wait between Out and In requests
  2389                              <1> ;       rbx = Data in Buffer
  2390                              <1> ;       r8  = Number of bytes to be returned by command
  2391                              <1> ;       r11 = Length of SCSI command block
  2392                              <1> ;       r14 = Pointer to EHCI(USB) transaction function
  2393                              <1> ;       r15 = Pointer to SCSI command function
  2394                              <1> ;Output:
  2395                              <1> ;   CF=CY: Host error, Reset host system
  2396                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2397 00004EDE 50                  <1>     push rax
  2398 00004EDF 51                  <1>     push rcx
  2399 00004EE0 57                  <1>     push rdi
  2400 00004EE1 4151                <1>     push r9
  2401 00004EE3 4152                <1>     push r10
  2402                              <1> ;Clear the previous CSW
  2403 00004EE5 48BF-               <1>     mov rdi, msdCSW
  2403 00004EE7 [C005000000000000]  <1>
  2404 00004EEF 30C0                <1>     xor al, al
  2405 00004EF1 B90D000000          <1>     mov ecx, 13
  2406 00004EF6 F3AA                <1>     rep stosb
  2407                              <1> ;Write the CBW
  2408 00004EF8 48BF-               <1>     mov rdi, ehciDataOut    ;Write the CBW at the data out point
  2408 00004EFA [8003000000000000]  <1>
  2409                              <1> 
  2410 00004F02 41B180              <1>     mov r9b, 80h            ;Recieve an IN packet
  2411 00004F05 4D31D2              <1>     xor r10, r10            ;LUN 0
  2412 00004F08 E865030000          <1>     call .msdWriteCBW       ;Write the 15 byte CBW
  2413                              <1> ;Append the Command Block to the CBW
  2414 00004F0D 30C0                <1>     xor al, al              ;LUN 0 device
  2415 00004F0F 41FFD7              <1>     call r15                ;Write the valid CBW Command block
  2416                              <1> ;Enact transaction
  2417 00004F12 41FFD6              <1>     call r14
  2418                              <1> 
  2419 00004F15 415A                <1>     pop r10
  2420 00004F17 4159                <1>     pop r9
  2421 00004F19 5F                  <1>     pop rdi
  2422 00004F1A 59                  <1>     pop rcx
  2423 00004F1B 58                  <1>     pop rax
  2424 00004F1C C3                  <1>     ret
  2425                              <1> 
  2426                              <1> .ehciMsdBOTInquiry:
  2427                              <1> ;Input: 
  2428                              <1> ; rsi = Pointer to MSD table data structure that we want to Inqure
  2429                              <1> ;Output:
  2430                              <1> ;   CF=CY: Host error, Reset host system
  2431                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2432 00004F1D 53                  <1>     push rbx
  2433 00004F1E 51                  <1>     push rcx
  2434 00004F1F 4150                <1>     push r8
  2435 00004F21 4153                <1>     push r11
  2436 00004F23 4156                <1>     push r14
  2437 00004F25 4157                <1>     push r15
  2438 00004F27 48BB-               <1>     mov rbx, ehciDataIn
  2438 00004F29 [C003000000000000]  <1>
  2439 00004F31 B900000000          <1>     mov ecx, 0
  2440 00004F36 41B824000000        <1>     mov r8d, 024h           ;36 bytes to be returned
  2441 00004F3C 49BB0C000000000000- <1>     mov r11, 0Ch            ;The command block is 12 bytes (As per Bootability)
  2441 00004F45 00                  <1>
  2442 00004F46 49BF-               <1>     mov r15, .scsiInquiry
  2442 00004F48 [A352000000000000]  <1>
  2443 00004F50 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2443 00004F52 [CC4C000000000000]  <1>
  2444 00004F5A E87FFFFFFF          <1>     call .ehciMsdBOTRequest
  2445 00004F5F 415F                <1>     pop r15
  2446 00004F61 415E                <1>     pop r14
  2447 00004F63 415B                <1>     pop r11
  2448 00004F65 4158                <1>     pop r8
  2449 00004F67 59                  <1>     pop rcx
  2450 00004F68 5B                  <1>     pop rbx
  2451 00004F69 C3                  <1>     ret
  2452                              <1> 
  2453                              <1> .ehciMsdBOTReadFormatCapacities:
  2454                              <1> ;Input: 
  2455                              <1> ; rsi = Pointer to MSD table data structure
  2456                              <1> ;Output:
  2457                              <1> ;   CF=CY: Host error, Reset host system
  2458                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2459 00004F6A 53                  <1>     push rbx
  2460 00004F6B 51                  <1>     push rcx
  2461 00004F6C 4150                <1>     push r8
  2462 00004F6E 4153                <1>     push r11
  2463 00004F70 4156                <1>     push r14
  2464 00004F72 4157                <1>     push r15
  2465 00004F74 48BB-               <1>     mov rbx, ehciDataIn
  2465 00004F76 [C003000000000000]  <1>
  2466 00004F7E B900000000          <1>     mov ecx, 0
  2467 00004F83 49B8FC000000000000- <1>     mov r8, 0FCh            ;Return 252 bytes
  2467 00004F8C 00                  <1>
  2468 00004F8D 49BB0A000000000000- <1>     mov r11, 0Ah            ;The command block is 10 bytes
  2468 00004F96 00                  <1>
  2469 00004F97 49BF-               <1>     mov r15, .scsiReadFormatCapacities
  2469 00004F99 [0253000000000000]  <1>
  2470 00004FA1 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2470 00004FA3 [CC4C000000000000]  <1>
  2471 00004FAB E82EFFFFFF          <1>     call .ehciMsdBOTRequest
  2472 00004FB0 415F                <1>     pop r15
  2473 00004FB2 415E                <1>     pop r14
  2474 00004FB4 415B                <1>     pop r11
  2475 00004FB6 4158                <1>     pop r8
  2476 00004FB8 59                  <1>     pop rcx
  2477 00004FB9 5B                  <1>     pop rbx
  2478 00004FBA C3                  <1>     ret
  2479                              <1> 
  2480                              <1> .ehciMsdBOTReadCapacity10:
  2481                              <1> ;Input: 
  2482                              <1> ; rsi = Pointer to MSD table data structure that we want to Read Capcities
  2483                              <1> ;Output:
  2484                              <1> ;   CF=CY: Host error, Reset host system
  2485                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2486 00004FBB 53                  <1>     push rbx
  2487 00004FBC 51                  <1>     push rcx
  2488 00004FBD 4150                <1>     push r8
  2489 00004FBF 4153                <1>     push r11
  2490 00004FC1 4156                <1>     push r14
  2491 00004FC3 4157                <1>     push r15
  2492 00004FC5 48BB-               <1>     mov rbx, ehciDataIn
  2492 00004FC7 [C003000000000000]  <1>
  2493 00004FCF B900000000          <1>     mov ecx, 0
  2494 00004FD4 49B808000000000000- <1>     mov r8, 8
  2494 00004FDD 00                  <1>
  2495 00004FDE 49BB0A000000000000- <1>     mov r11, 0Ah
  2495 00004FE7 00                  <1>
  2496 00004FE8 49BF-               <1>     mov r15, .scsiReadCap10
  2496 00004FEA [1253000000000000]  <1>
  2497 00004FF2 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2497 00004FF4 [CC4C000000000000]  <1>
  2498 00004FFC E8DDFEFFFF          <1>     call .ehciMsdBOTRequest
  2499 00005001 415F                <1>     pop r15
  2500 00005003 415E                <1>     pop r14
  2501 00005005 415B                <1>     pop r11
  2502 00005007 4158                <1>     pop r8
  2503 00005009 59                  <1>     pop rcx
  2504 0000500A 5B                  <1>     pop rbx
  2505 0000500B C3                  <1>     ret
  2506                              <1> .ehciMsdBOTFormatUnit:
  2507                              <1> ;Input: 
  2508                              <1> ; rsi = Pointer to MSD table data structure that we want to Format
  2509                              <1> ;Output:
  2510                              <1> ;   CF=CY: Host error, Reset host system
  2511                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2512 0000500C 50                  <1>     push rax
  2513 0000500D 4150                <1>     push r8
  2514 0000500F 4153                <1>     push r11
  2515 00005011 4156                <1>     push r14
  2516 00005013 4157                <1>     push r15
  2517 00005015 4D31C0              <1>     xor r8, r8  ;Request no data
  2518 00005018 49BB06000000000000- <1>     mov r11, 06h  ;Command length is 6 bytes
  2518 00005021 00                  <1>
  2519 00005022 49BE-               <1>     mov r14, .ehciMsdBOTOI
  2519 00005024 [B84D000000000000]  <1>
  2520 0000502C 49BF-               <1>     mov r15, .scsiFormatUnit
  2520 0000502E [1C53000000000000]  <1>
  2521 00005036 E8A3FEFFFF          <1>     call .ehciMsdBOTRequest
  2522 0000503B 7236                <1>     jc .embfuerror
  2523 0000503D E897FBFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2524 00005042 6685C0              <1>     test ax, ax
  2525 00005045 752C                <1>     jnz .embfuerror
  2526                              <1> .embfu0:
  2527 00005047 E8CA000000          <1>     call .ehciMsdBOTTestReady
  2528 0000504C 7225                <1>     jc .embfuerror
  2529 0000504E E886FBFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2530 00005053 6685C0              <1>     test ax, ax
  2531 00005056 7411                <1>     jz .embfuexit
  2532 00005058 E868000000          <1>     call .ehciMsdBOTRequestSense
  2533 0000505D 7214                <1>     jc .embfuerror
  2534 0000505F E875FBFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2535 00005064 6685C0              <1>     test ax, ax
  2536 00005067 75DE                <1>     jnz .embfu0
  2537                              <1> .embfuexit:
  2538 00005069 415F                <1>     pop r15
  2539 0000506B 415E                <1>     pop r14
  2540 0000506D 415B                <1>     pop r11
  2541 0000506F 4158                <1>     pop r8
  2542 00005071 58                  <1>     pop rax
  2543 00005072 C3                  <1>     ret
  2544                              <1> .embfuerror:
  2545 00005073 F9                  <1>     stc
  2546 00005074 EBF3                <1>     jmp short .embfuexit
  2547                              <1> .ehciMsdBOTVerify:
  2548                              <1> ;Input: 
  2549                              <1> ; rsi = Pointer to MSD table data structure that we want to Verify Sectors
  2550                              <1> ; edx = Starting LBA to verify
  2551                              <1> ;Output:
  2552                              <1> ;   CF=CY: Host error, Reset host system
  2553                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2554 00005076 50                  <1>     push rax
  2555 00005077 4150                <1>     push r8
  2556 00005079 4153                <1>     push r11
  2557 0000507B 4154                <1>     push r12
  2558 0000507D 4156                <1>     push r14
  2559 0000507F 4157                <1>     push r15
  2560 00005081 4D31C0              <1>     xor r8, r8  ;Request no data
  2561 00005084 49BB0A000000000000- <1>     mov r11, 0Ah  ;Command length is 10 bytes
  2561 0000508D 00                  <1>
  2562 0000508E 4189D4              <1>     mov r12d, edx
  2563 00005091 49BE-               <1>     mov r14, .ehciMsdBOTOI
  2563 00005093 [B84D000000000000]  <1>
  2564 0000509B 49BF-               <1>     mov r15, .scsiVerify
  2564 0000509D [3153000000000000]  <1>
  2565 000050A5 E834FEFFFF          <1>     call .ehciMsdBOTRequest
  2566 000050AA 7216                <1>     jc .embvbad
  2567 000050AC E828FBFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2568 000050B1 6685C0              <1>     test ax, ax
  2569 000050B4 750C                <1>     jnz .embvbad
  2570                              <1> .embvexit:
  2571 000050B6 415F                <1>     pop r15
  2572 000050B8 415E                <1>     pop r14
  2573 000050BA 415C                <1>     pop r12
  2574 000050BC 415B                <1>     pop r11
  2575 000050BE 4158                <1>     pop r8
  2576 000050C0 59                  <1>     pop rcx
  2577 000050C1 C3                  <1>     ret
  2578                              <1> .embvbad:
  2579 000050C2 F9                  <1>     stc
  2580 000050C3 EBF1                <1>     jmp short .embvexit
  2581                              <1> .ehciMsdBOTRequestSense:
  2582                              <1> ;Input: 
  2583                              <1> ; rsi = Pointer to device MSD table data structure
  2584                              <1> ;Output:
  2585                              <1> ;   CF=CY: Host error, Reset host system
  2586                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2587 000050C5 53                  <1>     push rbx
  2588 000050C6 51                  <1>     push rcx
  2589 000050C7 4150                <1>     push r8
  2590 000050C9 4153                <1>     push r11
  2591 000050CB 4156                <1>     push r14
  2592 000050CD 4157                <1>     push r15
  2593 000050CF 48BB-               <1>     mov rbx, ehciDataIn
  2593 000050D1 [C003000000000000]  <1>
  2594 000050D9 B900000000          <1>     mov ecx, 0
  2595 000050DE 49B812000000000000- <1>     mov r8, 12h         ;Request 18 bytes
  2595 000050E7 00                  <1>
  2596 000050E8 49BB06000000000000- <1>     mov r11, 6          ;Command length is 6
  2596 000050F1 00                  <1>
  2597 000050F2 49BF-               <1>     mov r15, .scsiRequestSense
  2597 000050F4 [E552000000000000]  <1>
  2598 000050FC 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2598 000050FE [CC4C000000000000]  <1>
  2599 00005106 E8D3FDFFFF          <1>     call .ehciMsdBOTRequest
  2600 0000510B 415F                <1>     pop r15
  2601 0000510D 415E                <1>     pop r14
  2602 0000510F 415B                <1>     pop r11
  2603 00005111 4158                <1>     pop r8
  2604 00005113 59                  <1>     pop rcx
  2605 00005114 5B                  <1>     pop rbx
  2606 00005115 C3                  <1>     ret
  2607                              <1> 
  2608                              <1> .ehciMsdBOTTestReady:
  2609                              <1> ;Input: 
  2610                              <1> ; rsi = Pointer to MSD table data structure that we want to Test Ready
  2611                              <1> ;Output:
  2612                              <1> ;   CF=CY: Host error, Reset host system
  2613                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2614 00005116 4150                <1>     push r8
  2615 00005118 4153                <1>     push r11
  2616 0000511A 4156                <1>     push r14
  2617 0000511C 4157                <1>     push r15
  2618 0000511E 4D31C0              <1>     xor r8, r8  ;Request no data
  2619 00005121 49BB06000000000000- <1>     mov r11, 6  ;Command length is 6
  2619 0000512A 00                  <1>
  2620 0000512B 49BE-               <1>     mov r14, .ehciMsdBOTOI
  2620 0000512D [B84D000000000000]  <1>
  2621 00005135 49BF-               <1>     mov r15, .scsiTestUnitReady
  2621 00005137 [F852000000000000]  <1>
  2622 0000513F E89AFDFFFF          <1>     call .ehciMsdBOTRequest
  2623 00005144 415F                <1>     pop r15
  2624 00005146 415E                <1>     pop r14
  2625 00005148 415B                <1>     pop r11
  2626 0000514A 4158                <1>     pop r8
  2627 0000514C C3                  <1>     ret
  2628                              <1> .ehciMsdBOTModeSense6:
  2629                              <1> ;Input: 
  2630                              <1> ; rsi = Pointer to MSD table data structure that we want to Test Ready
  2631                              <1> ;Output:
  2632                              <1> ;   CF=CY: Host error, Reset host system
  2633                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2634 0000514D 53                  <1>     push rbx
  2635 0000514E 51                  <1>     push rcx
  2636 0000514F 4150                <1>     push r8
  2637 00005151 4153                <1>     push r11
  2638 00005153 4156                <1>     push r14
  2639 00005155 4157                <1>     push r15
  2640 00005157 48BB-               <1>     mov rbx, ehciDataIn
  2640 00005159 [C003000000000000]  <1>
  2641 00005161 B900000000          <1>     mov ecx, 0
  2642 00005166 49B8C0000000000000- <1>     mov r8, 0C0h        ;Request 192 bytes
  2642 0000516F 00                  <1>
  2643 00005170 49BB06000000000000- <1>     mov r11, 6          ;Command length is 6
  2643 00005179 00                  <1>
  2644 0000517A 49BF-               <1>     mov r15, .scsiModeSense6
  2644 0000517C [5253000000000000]  <1>
  2645 00005184 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2645 00005186 [CC4C000000000000]  <1>
  2646 0000518E E84BFDFFFF          <1>     call .ehciMsdBOTRequest
  2647 00005193 415F                <1>     pop r15
  2648 00005195 415E                <1>     pop r14
  2649 00005197 415B                <1>     pop r11
  2650 00005199 4158                <1>     pop r8
  2651 0000519B 59                  <1>     pop rcx
  2652 0000519C 5B                  <1>     pop rbx
  2653 0000519D C3                  <1>     ret
  2654                              <1> 
  2655                              <1> ;.ehciMsdBOTOutSector64:
  2656                              <1> .ehciMsdBOTOutSector512:
  2657                              <1> ;Input: 
  2658                              <1> ; rsi = Pointer to MSD table data structure that we want to read
  2659                              <1> ; rbx = Address of the buffer to read the segment from
  2660                              <1> ; edx = Starting LBA to read to
  2661                              <1> ;Output:
  2662                              <1> ;   CF=CY: Host error, Reset host system
  2663                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2664 0000519E 4151                <1>     push r9
  2665 000051A0 4156                <1>     push r14
  2666 000051A2 4157                <1>     push r15
  2667 000051A4 50                  <1>     push rax
  2668 000051A5 4D31C9              <1>     xor r9, r9 ;Send an OUT packet
  2669 000051A8 49BE-               <1>     mov r14, .ehciMsdBOTOOI
  2669 000051AA [004C000000000000]  <1>
  2670 000051B2 49BF-               <1>     mov r15, .scsiWrite10
  2670 000051B4 [BE52000000000000]  <1>
  2671 000051BC E860000000          <1>     call .ehciMsdBOTSector512
  2672 000051C1 7223                <1>     jc .emboseerror
  2673 000051C3 E811FAFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2674 000051C8 6685C0              <1>     test ax, ax
  2675 000051CB 7519                <1>     jnz .emboseerror
  2676 000051CD E844FFFFFF          <1>     call .ehciMsdBOTTestReady   ;Seems to flush data onto disk
  2677 000051D2 7212                <1>     jc .emboseerror
  2678 000051D4 E800FAFFFF          <1>     call .ehciMsdBOTCheckTransaction
  2679 000051D9 6685C0              <1>     test ax, ax
  2680 000051DC 7508                <1>     jnz .emboseerror
  2681                              <1> .embosexit:
  2682 000051DE 58                  <1>     pop rax
  2683 000051DF 415F                <1>     pop r15
  2684 000051E1 415E                <1>     pop r14
  2685 000051E3 4159                <1>     pop r9
  2686 000051E5 C3                  <1>     ret
  2687                              <1> .emboseerror:
  2688 000051E6 F9                  <1>     stc
  2689 000051E7 EBF5                <1>     jmp short .embosexit
  2690                              <1> ;.ehciMsdBOTInSector64:
  2691                              <1> .ehciMsdBOTInSector512:
  2692                              <1> ;Input: 
  2693                              <1> ; rsi = Pointer to MSD table data structure that we want to read
  2694                              <1> ; rbx = Address of the buffer to read the segment into
  2695                              <1> ; edx = Starting LBA to read from
  2696                              <1> ;Output:
  2697                              <1> ;   CF=CY: Host error, Reset host system
  2698                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2699 000051E9 4151                <1>     push r9
  2700 000051EB 4156                <1>     push r14
  2701 000051ED 4157                <1>     push r15
  2702 000051EF 50                  <1>     push rax
  2703 000051F0 49B980000000000000- <1>     mov r9, 80h ;Recieve an IN packet
  2703 000051F9 00                  <1>
  2704 000051FA 49BE-               <1>     mov r14, .ehciMsdBOTOII
  2704 000051FC [CC4C000000000000]  <1>
  2705 00005204 49BF-               <1>     mov r15, .scsiRead10
  2705 00005206 [C252000000000000]  <1>
  2706 0000520E E80E000000          <1>     call .ehciMsdBOTSector512
  2707 00005213 72D1                <1>     jc .emboseerror
  2708 00005215 E8BFF9FFFF          <1>     call .ehciMsdBOTCheckTransaction
  2709 0000521A 6685C0              <1>     test ax, ax
  2710 0000521D 75C7                <1>     jnz .emboseerror
  2711 0000521F EBBD                <1>     jmp short .embosexit
  2712                              <1> .ehciMsdBOTSector512:
  2713                              <1> ;Input: 
  2714                              <1> ; rsi = Pointer to MSD table data structure that we want to read
  2715                              <1> ; rbx = Address of the buffer to read the segment into
  2716                              <1> ; edx = Starting LBA to read to/from
  2717                              <1> ; r9  = CBW flag (IN or OUT transaction)
  2718                              <1> ; r15 = SCSI function
  2719                              <1> ;Output:
  2720                              <1> ;   CF=CY: Host error, Reset host system
  2721                              <1> ;   CF=NC: Transaction succeeded, check data transferred successfully
  2722 00005221 57                  <1>     push rdi
  2723 00005222 4150                <1>     push r8
  2724 00005224 4152                <1>     push r10
  2725 00005226 4153                <1>     push r11
  2726                              <1> 
  2727 00005228 48BF-               <1>     mov rdi, ehciDataOut    ;Write the CBW at the data out point
  2727 0000522A [8003000000000000]  <1>
  2728 00005232 41B800020000        <1>     mov r8d, 200h           ;512 bytes to be transferred
  2729 00005238 4D31D2              <1>     xor r10, r10            ;LUN 0
  2730 0000523B 49BB0C000000000000- <1>     mov r11, 0Ch            ;The command block is 10 bytes long
  2730 00005244 00                  <1>
  2731 00005245 E828000000          <1>     call .msdWriteCBW     ;Write the CBW
  2732                              <1> 
  2733 0000524A 50                  <1>     push rax                ;Temp push ax
  2734 0000524B 4150                <1>     push r8                 ;Temp save # of bytes for transfer
  2735 0000524D 30C0                <1>     xor al, al              ;LUN 0 device
  2736 0000524F 4189D0              <1>     mov r8d, edx            ;Starting LBA to read from
  2737 00005252 49B901000000000000- <1>     mov r9, 1               ;Number of LBAs to read
  2737 0000525B 00                  <1>
  2738 0000525C 41FFD7              <1>     call r15                ;Write the valid CBW Command block
  2739 0000525F 4158                <1>     pop r8
  2740 00005261 58                  <1>     pop rax
  2741                              <1> 
  2742 00005262 B90A000000          <1>     mov ecx, 10              ;Wait for data preparation, 10ms
  2743 00005267 41FFD6              <1>     call r14
  2744                              <1> 
  2745 0000526A 415B                <1>     pop r11
  2746 0000526C 415A                <1>     pop r10
  2747 0000526E 4158                <1>     pop r8
  2748 00005270 5F                  <1>     pop rdi
  2749 00005271 C3                  <1>     ret
  2750                              <1> .msdWriteCBW:
  2751                              <1> ;Writes a Command Block Wrapper at the location pointed to by rdi
  2752                              <1> ; without a functional command block. Must be appended by user.
  2753                              <1> ; Input:  rdi=Pointer to CBW buffer
  2754                              <1> ;         r8d=Command Block Wrapper Data Transfer Length
  2755                              <1> ;         r9b=Command Block Wrapper Flags
  2756                              <1> ;         r10b=Command Block Wrapper LUN nybble
  2757                              <1> ;         r11b=Command Block Wrapper Command Block Length
  2758                              <1> ; Output: rdi = Pointer to CBW's (SCSI) Command Descriptor Block buffer
  2759 00005272 50                  <1>     push rax
  2760 00005273 B855534243          <1>     mov eax, CBWSig
  2761 00005278 AB                  <1>     stosd
  2762 00005279 0FB60425[4A020000]  <1>     movzx eax, byte [cbwTag]
  2763 00005281 FE0425[4A020000]    <1>     inc byte [cbwTag]
  2764 00005288 AB                  <1>     stosd
  2765 00005289 4489C0              <1>     mov eax, r8d
  2766 0000528C AB                  <1>     stosd
  2767 0000528D 4488C8              <1>     mov al, r9b
  2768 00005290 AA                  <1>     stosb
  2769 00005291 4488D0              <1>     mov al, r10b
  2770 00005294 AA                  <1>     stosb
  2771 00005295 4488D8              <1>     mov al, r11b
  2772 00005298 AA                  <1>     stosb
  2773 00005299 31C0                <1>     xor eax, eax
  2774 0000529B 57                  <1>     push rdi
  2775 0000529C 48AB                <1>     stosq   ;16 bytes in csw command block
  2776 0000529E 48AB                <1>     stosq   ;Clear memory
  2777 000052A0 5F                  <1>     pop rdi
  2778 000052A1 58                  <1>     pop rax
  2779 000052A2 C3                  <1>     ret
  2780                              <1> 
  2781                              <1> ;                        --------SCSI functions---------
  2782                              <1> 
  2783                              <1> .scsiInquiry:
  2784                              <1> ;Writes an inquiry scsi command block to the location pointed to by rdi
  2785                              <1> ;al contains the LUN of the device we are accessing. (lower 3 bits considered)
  2786                              <1> ;al not preserved
  2787 000052A3 B412                <1>     mov ah, 12h        ;Move inquiry command value high
  2788 000052A5 C0E005              <1>     shl al, 5        ;Shift left by five to align LUN properly
  2789 000052A8 86E0                <1>     xchg ah, al        ;swap ah and al
  2790 000052AA 66AB                <1>     stosw            ;Store command and shifted LUN together
  2791 000052AC 4831C0              <1>     xor rax, rax
  2792 000052AF 66AB                <1>     stosw            ;Store two zeros (reserved fields)
  2793 000052B1 48B824000000000000- <1>     mov rax, 24h    ;Allocation length (36 bytes)
  2793 000052BA 00                  <1>
  2794 000052BB 48AB                <1>     stosq
  2795 000052BD C3                  <1>     ret
  2796                              <1> ;NOTE! Using read/write 10 means can't read beyond the first 4 Gb of Medium.
  2797                              <1> .scsiWrite10:
  2798                              <1> ;Writes a scsi write 10 transfer command to the location pointed at by rdi
  2799                              <1> ;al contains the LUN of the device we are accessing
  2800                              <1> ;r8d contains the LBA start address
  2801                              <1> ;r9w contains the Verification Length
  2802 000052BE B42A                <1>     mov ah, 2Ah        ;Operation code for command
  2803 000052C0 EB02                <1>     jmp short .scsirw
  2804                              <1> .scsiRead10:
  2805                              <1> ;Writes a scsi Read 10 command to the location pointed to by rdi
  2806                              <1> ;al contains the LUN of the device we are accessing.
  2807                              <1> ;r8d contains the LBA to read from
  2808                              <1> ;r9w contains the number of contiguous blocks to read (should be 1 for us)
  2809 000052C2 B428                <1>     mov ah, 28h        ;Move read(10) command value high
  2810                              <1> .scsirw:
  2811 000052C4 C0E005              <1>     shl al, 5        ;Shift left by five to align LUN properly
  2812 000052C7 86E0                <1>     xchg ah, al        ;swap ah and al
  2813 000052C9 66AB                <1>     stosw            ;Store command and shifted LUN together
  2814 000052CB 410FC8              <1>     bswap r8d        ;swap endianness of r8d
  2815 000052CE 4489C0              <1>     mov eax, r8d
  2816 000052D1 AB                  <1>     stosd
  2817 000052D2 4831C0              <1>     xor rax, rax    ;Clear for a Reserved byte
  2818 000052D5 AA                  <1>     stosb
  2819 000052D6 664489C8            <1>     mov ax, r9w        ;move into ax to use xchg on upper and lower bytes
  2820 000052DA 86C4                <1>     xchg al, ah        ;MSB first, yuck yuck yuck
  2821 000052DC 66AB                <1>     stosw
  2822 000052DE C1E810              <1>     shr eax, 16        ;Bring zeros down onto lower word
  2823 000052E1 66AB                <1>     stosw            ;Store one reserved byte and two padding bytes
  2824 000052E3 AA                  <1>     stosb            
  2825 000052E4 C3                  <1>     ret
  2826                              <1> .scsiRequestSense:
  2827                              <1> ;Writes a scsi Request Sense command to the location pointer to by rdi
  2828                              <1> ;al contains the LUN of the device we are accessing.
  2829 000052E5 B403                <1>     mov ah, 03h        ;Move reqsense command value high
  2830 000052E7 C0E005              <1>     shl al, 5        ;Shift left by five to align LUN properly
  2831 000052EA 86E0                <1>     xchg ah, al        ;swap ah and al
  2832 000052EC 66AB                <1>     stosw            ;Store command and shifted LUN together
  2833 000052EE 4831C0              <1>     xor rax, rax    
  2834 000052F1 66AB                <1>     stosw            ;Reserved word
  2835 000052F3 B012                <1>     mov al, 12h    ;Move alloc length byte into al
  2836 000052F5 48AB                <1>     stosq
  2837 000052F7 C3                  <1>     ret
  2838                              <1> .scsiTestUnitReady:
  2839                              <1> ;Writes a scsi test unit ready command to the location pointed to by rdi
  2840                              <1> ;al contains the LUN of the device we are accessing.
  2841 000052F8 30E4                <1>     xor ah, ah        ;Operation code zero
  2842 000052FA C0E005              <1>     shl al, 5
  2843 000052FD 86E0                <1>     xchg ah, al
  2844 000052FF 66AB                <1>     stosw            ;Store shifted LUN and command code
  2845 00005301 C3                  <1>     ret
  2846                              <1> .scsiReadFormatCapacities:
  2847                              <1> ;al contains the LUN of the device
  2848 00005302 88C4                <1>     mov ah, al
  2849 00005304 B023                <1>     mov al, 23h        ;Operation code for command
  2850 00005306 66AB                <1>     stosw            ;Store shifted LUN and command code
  2851 00005308 4831C0              <1>     xor rax, rax
  2852 0000530B AB                  <1>     stosd          ;Reserved dword    
  2853 0000530C 66AB                <1>     stosw           ;Reserved word
  2854 0000530E B0FC                <1>     mov al, 0FCh    ;Move alloc length byte into al
  2855 00005310 AA                  <1>     stosb
  2856 00005311 C3                  <1>     ret
  2857                              <1> .scsiReadCap10:
  2858                              <1> ;Writes a scsi read capacity command to the location pointed to by rdi
  2859                              <1> ;al contains the LUN of the device we are accessing
  2860 00005312 B425                <1>     mov ah, 25h        ;Operation code for command
  2861 00005314 C0E005              <1>     shl al, 5
  2862 00005317 86E0                <1>     xchg ah, al
  2863 00005319 66AB                <1>     stosw            ;Store shifted LUN and command code
  2864 0000531B C3                  <1>     ret
  2865                              <1> .scsiFormatUnit:
  2866                              <1> ;Writes a scsi format unit command to the location pointed to by rdi
  2867                              <1> ;al contains the LUN of the device we are accessing
  2868 0000531C B404                <1>     mov ah, 04h        ;Operation code for format command
  2869 0000531E C0E005              <1>     shl al, 5
  2870 00005321 0C17                <1>     or al, 17h      ;Set bits [3:0] and 5, keep bit 4 clear
  2871 00005323 86E0                <1>     xchg ah, al
  2872 00005325 66AB                <1>     stosw
  2873 00005327 30C0                <1>     xor al, al
  2874 00005329 66AB                <1>     stosw            ;Vender specific, set to 0!!
  2875 0000532B 4831C0              <1>     xor rax, rax
  2876 0000532E 48AB                <1>     stosq            ;Store LSB byte and all the 0 padding
  2877 00005330 C3                  <1>     ret
  2878                              <1> .scsiVerify:
  2879                              <1> ;Writes a scsi verify transfer command to the location pointed at by rdi
  2880                              <1> ;al contains the LUN of the device we are accessing
  2881                              <1> ;r12d contains the LBA for the sector address
  2882                              <1> ;Verifies one sector
  2883 00005331 B42F                <1>     mov ah, 2Fh        ;Operation code for command
  2884 00005333 C0E005              <1>     shl al, 5        ;Hardcode bytecheck (byte [1]) to 0
  2885 00005336 86E0                <1>     xchg ah, al
  2886 00005338 66AB                <1>     stosw            ;Store shifted LUN and command code
  2887 0000533A 410FCC              <1>     bswap r12d        ;swap endianness of r12d
  2888 0000533D 4489E0              <1>     mov eax, r12d
  2889 00005340 AB                  <1>     stosd
  2890 00005341 4831C0              <1>     xor rax, rax    ;Clear for a Reserved byte
  2891 00005344 AA                  <1>     stosb
  2892 00005345 66B80001            <1>     mov ax, 0100h    ;Write the number 1 in Big endian
  2893 00005349 66AB                <1>     stosw
  2894 0000534B C1E810              <1>     shr eax, 16        ;Bring zeros down onto lower word
  2895 0000534E 66AB                <1>     stosw            ;Store one reserved byte and two padding bytes
  2896 00005350 AA                  <1>     stosb        
  2897 00005351 C3                  <1>     ret
  2898                              <1> .scsiModeSense6:
  2899                              <1> ;al contains the LUN of the device we are accessing
  2900 00005352 B41A                <1>     mov ah, 1Ah     ;Operation code for Mode Sense 6
  2901 00005354 C0E005              <1>     shl al, 5       ;Move LUN
  2902 00005357 86E0                <1>     xchg ah, al
  2903 00005359 66AB                <1>     stosw
  2904 0000535B B83F00C000          <1>     mov eax, 0C0003Fh    
  2905                              <1>     ;Request all pages, reserve byte, 192 bytes and 0 end byte
  2906 00005360 AB                  <1>     stosd
  2907 00005361 C3                  <1>     ret
  2908                              <1> ;                    -------------------------------
  2909                              <1> .ehciGetOpBase:
  2910                              <1> ;Gets opbase from mmio base (aka adds caplength) into eax
  2911                              <1> ;Input:
  2912                              <1> ; al = offset into ehci table
  2913                              <1> ;Return:
  2914                              <1> ; eax = opbase (low 4Gb)
  2915 00005362 53                  <1>     push rbx
  2916 00005363 4831DB              <1>     xor rbx, rbx
  2917 00005366 480FB6C0            <1>     movzx rax, al
  2918 0000536A 8B04C5[19020000]    <1>     mov eax, dword [eControllerList + 4 + 8*rax]    ;get mmiobase into eax
  2919 00005371 85C0                <1>     test eax, eax             ;addrress of 0 means no controller
  2920 00005373 7406                <1>     jz .egob1
  2921 00005375 670FB618            <1>     movzx ebx, byte [eax]    ;get the offset to opbase into ebx
  2922 00005379 01D8                <1>     add eax, ebx            ;add this offset to mmiobase to get opbase
  2923                              <1> .egob1:
  2924 0000537B 5B                  <1>     pop rbx
  2925 0000537C C3                  <1>     ret
   110                                  ;====================================CPU Interrupts=============================
   111                                  %include "./Source/Resident/Hardware/CPU/xception.asm"
   112                              <1> i0:
   113 0000537D 4831C0              <1>     xor rax, rax
   114 00005380 E936010000          <1>     jmp cpu_2args
   115                              <1> i1:
   116 00005385 48B801000000000000- <1>     mov rax, 1
   116 0000538E 00                  <1>
   117 0000538F E927010000          <1>     jmp cpu_2args
   118                              <1> i2:
   119 00005394 48B802000000000000- <1>     mov rax, 2
   119 0000539D 00                  <1>
   120 0000539E E918010000          <1>     jmp cpu_2args
   121                              <1> i3:
   122 000053A3 48B803000000000000- <1>     mov rax, 3
   122 000053AC 00                  <1>
   123 000053AD E909010000          <1>     jmp cpu_2args
   124                              <1> i4:
   125 000053B2 48B804000000000000- <1>     mov rax, 4
   125 000053BB 00                  <1>
   126 000053BC E9FA000000          <1>     jmp cpu_2args
   127                              <1> i5:
   128 000053C1 48B805000000000000- <1>     mov rax, 5
   128 000053CA 00                  <1>
   129 000053CB E9EB000000          <1>     jmp cpu_2args
   130                              <1> i6:
   131 000053D0 48B806000000000000- <1>     mov rax, 6
   131 000053D9 00                  <1>
   132 000053DA E9DC000000          <1>     jmp cpu_2args
   133                              <1> i7:
   134 000053DF 48B807000000000000- <1>     mov rax, 7
   134 000053E8 00                  <1>
   135 000053E9 E9CD000000          <1>     jmp cpu_2args
   136                              <1> i8:
   137 000053EE 48B808000000000000- <1>     mov rax, 8
   137 000053F7 00                  <1>
   138 000053F8 E9B2000000          <1>     jmp cpu_3args
   139                              <1> i9:
   140 000053FD 48B809000000000000- <1>     mov rax, 9
   140 00005406 00                  <1>
   141 00005407 E9AF000000          <1>     jmp cpu_2args
   142                              <1> i10:
   143 0000540C 48B80A000000000000- <1>     mov rax, 0Ah
   143 00005415 00                  <1>
   144 00005416 E994000000          <1>     jmp cpu_3args
   145                              <1> i11:
   146 0000541B 48B80B000000000000- <1>     mov rax, 0Bh
   146 00005424 00                  <1>
   147 00005425 E985000000          <1>     jmp cpu_3args
   148                              <1> i12:
   149 0000542A 48B80C000000000000- <1>     mov rax, 0Ch
   149 00005433 00                  <1>
   150 00005434 E976000000          <1>     jmp cpu_3args
   151                              <1> i13:
   152 00005439 48B80D000000000000- <1>     mov rax, 0Dh
   152 00005442 00                  <1>
   153 00005443 EB6A                <1>     jmp short cpu_3args
   154                              <1> i14:
   155 00005445 48B80E000000000000- <1>     mov rax, 0Eh
   155 0000544E 00                  <1>
   156 0000544F EB52                <1>     jmp short cpu_4args
   157                              <1> i15:
   158 00005451 48B80F000000000000- <1>     mov rax, 0Fh
   158 0000545A 00                  <1>
   159 0000545B EB5E                <1>     jmp short cpu_2args
   160                              <1> i16:
   161 0000545D 48B810000000000000- <1>     mov rax, 10h
   161 00005466 00                  <1>
   162 00005467 EB52                <1>     jmp short cpu_2args
   163                              <1> i17:
   164 00005469 48B811000000000000- <1>     mov rax, 11h
   164 00005472 00                  <1>
   165 00005473 EB3A                <1>     jmp short cpu_3args
   166                              <1> i18:
   167 00005475 48B812000000000000- <1>     mov rax, 12h
   167 0000547E 00                  <1>
   168 0000547F EB3A                <1>     jmp short cpu_2args
   169                              <1> i19:
   170 00005481 48B813000000000000- <1>     mov rax, 13h
   170 0000548A 00                  <1>
   171 0000548B EB2E                <1>     jmp short cpu_2args
   172                              <1> i20:
   173 0000548D 48B814000000000000- <1>     mov rax, 14h
   173 00005496 00                  <1>
   174 00005497 EB22                <1>     jmp short cpu_2args
   175                              <1> i21:
   176 00005499 48B815000000000000- <1>     mov rax, 15h
   176 000054A2 00                  <1>
   177                              <1> cpu_4args:
   178 000054A3 48B903000000000000- <1>     mov rcx, 3
   178 000054AC 00                  <1>
   179 000054AD EB16                <1>     jmp short cpu_exception
   180                              <1> cpu_3args:
   181 000054AF 48B902000000000000- <1>     mov rcx, 2
   181 000054B8 00                  <1>
   182 000054B9 EB0A                <1>     jmp short cpu_exception
   183                              <1> cpu_2args:
   184 000054BB 48B901000000000000- <1>     mov rcx, 1
   184 000054C4 00                  <1>
   185                              <1> cpu_exception:
   186 000054C5 50                  <1>     push rax
   187 000054C6 51                  <1>     push rcx
   188 000054C7 66BB1F00            <1>     mov bx, 001Fh    ;cls attribs
   189 000054CB E827ACFFFF          <1>     call cls
   190                              <1> 
   191 000054D0 48B800020000000000- <1>     mov rax, 0200h
   191 000054D9 00                  <1>
   192 000054DA 4831DB              <1>     xor rbx, rbx
   193 000054DD 48BA22070000000000- <1>     mov rdx, 0722h    ;7 Rows down, 24 columns across
   193 000054E6 00                  <1>
   194 000054E7 48BD-               <1>     mov rbp, .fatalt0
   194 000054E9 [3256000000000000]  <1>
   195 000054F1 66BB7100            <1>     mov bx, 0071h     ;blue grey attribs, page 0
   196 000054F5 66B80113            <1>     mov ax, 1301h     ;print zero 8 chars, with bh attrib
   197 000054F9 48B908000000000000- <1>     mov rcx, 8
   197 00005502 00                  <1>
   198 00005503 CD30                <1>     int 30h
   199                              <1> 
   200 00005505 48B800020000000000- <1>     mov rax, 0200h
   200 0000550E 00                  <1>
   201 0000550F 30FF                <1>     xor bh, bh
   202 00005511 48BA040A0000000000- <1>     mov rdx, 0A04h    ;11 Rows down, 24 columns across
   202 0000551A 00                  <1>
   203 0000551B CD30                <1>     int 30h
   204 0000551D 48BD-               <1>     mov rbp, .fatal1
   204 0000551F [3A56000000000000]  <1>
   205 00005527 30FF                <1>     xor bh, bh        ;blue grey attribs, page 0
   206 00005529 66B80413            <1>     mov ax, 1304h            ;print zero terminated string
   207 0000552D CD30                <1>     int 30h
   208                              <1> 
   209 0000552F 59                  <1>     pop rcx
   210 00005530 58                  <1>     pop rax                ;pop the exception number back into rax
   211 00005531 E8DF000000          <1>     call .printbyte
   212                              <1> 
   213 00005536 48B804130000000000- <1>     mov rax, 1304h
   213 0000553F 00                  <1>
   214 00005540 30FF                <1>     xor bh, bh
   215 00005542 48BD-               <1>     mov rbp, .fatal2
   215 00005544 [7B57000000000000]  <1>
   216 0000554C CD30                <1>     int 30h
   217                              <1> 
   218 0000554E 80F901              <1>     cmp cl, 1
   219 00005551 773A                <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   220                              <1> .cpurollprint:
   221 00005553 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   222                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   223 00005557 B108                <1>     mov cl, 8    ;8 bytes
   224                              <1> .cpurollprint1:
   225 00005559 48C1C208            <1>     rol rdx, 8
   226 0000555D 88D0                <1>     mov al, dl
   227 0000555F 52                  <1>     push rdx
   228 00005560 E8B0000000          <1>     call .printbyte
   229 00005565 5A                  <1>     pop rdx
   230 00005566 FEC9                <1>     dec cl
   231 00005568 75EF                <1>     jnz .cpurollprint1
   232                              <1> 
   233                              <1> .cpuexendloop:
   234 0000556A 6631C0              <1>     xor ax, ax
   235 0000556D CD36                <1>     int 36h
   236 0000556F 3C1B                <1>     cmp al, 1Bh    ;Check for escape pressed (unlikely?)
   237 00005571 740F                <1>     je .cpu_exception_appret
   238 00005573 3C0D                <1>     cmp al, 0Dh ;Check for enter pressed
   239 00005575 75F3                <1>     jne .cpuexendloop
   240                              <1> 
   241 00005577 66BB0700            <1>     mov bx, 0007h    ;cls attribs
   242 0000557B E877ABFFFF          <1>     call cls
   243 00005580 CD38                <1>     int 38h    ;Jump to debugger
   244                              <1> .cpu_exception_appret:
   245 00005582 66BB0700            <1>     mov bx, 0007h    ;cls attribs
   246 00005586 E86CABFFFF          <1>     call cls
   247 0000558B 48CF                <1>     iretq ;Return to address on stack
   248                              <1> 
   249                              <1> .cpuextendederror:
   250 0000558D 5A                  <1>     pop rdx
   251 0000558E 48FFC9              <1>     dec rcx
   252 00005591 51                  <1>     push rcx
   253 00005592 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   254                              <1> .pr1:
   255 00005594 C1C208              <1>     rol edx, 8    ;Print just edx
   256 00005597 88D0                <1>     mov al, dl
   257 00005599 52                  <1>     push rdx
   258 0000559A E876000000          <1>     call .printbyte
   259 0000559F 5A                  <1>     pop rdx
   260 000055A0 FEC9                <1>     dec cl
   261 000055A2 75F0                <1>     jnz .pr1
   262                              <1> 
   263 000055A4 48B804130000000000- <1>     mov rax, 1304h
   263 000055AD 00                  <1>
   264 000055AE 48BB17000000000000- <1>     mov rbx, 17h
   264 000055B7 00                  <1>
   265 000055B8 48BD-               <1>     mov rbp, .fatal2
   265 000055BA [7B57000000000000]  <1>
   266 000055C2 CD30                <1>     int 30h
   267 000055C4 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   268                              <1>     
   269 000055C5 48FFC9              <1>     dec rcx
   270 000055C8 7489                <1>     jz .cpurollprint
   271                              <1> 
   272 000055CA B108                <1>     mov cl, 8
   273 000055CC 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   274                              <1> .pr2:
   275 000055CF 48C1C208            <1>     rol rdx, 8    ;Print rdx
   276 000055D3 88D0                <1>     mov al, dl
   277 000055D5 52                  <1>     push rdx
   278 000055D6 E83A000000          <1>     call .printbyte
   279 000055DB 5A                  <1>     pop rdx
   280 000055DC FEC9                <1>     dec cl
   281 000055DE 75EF                <1>     jnz .pr2
   282                              <1> 
   283 000055E0 48B804130000000000- <1>     mov rax, 1304h
   283 000055E9 00                  <1>
   284 000055EA 48BB17000000000000- <1>     mov rbx, 17h
   284 000055F3 00                  <1>
   285 000055F4 48BD-               <1>     mov rbp, .fatal2
   285 000055F6 [7B57000000000000]  <1>
   286 000055FE CD30                <1>     int 30h
   287                              <1>     
   288 00005600 E94EFFFFFF          <1>     jmp .cpurollprint
   289                              <1> 
   290                              <1> 
   291                              <1> .char:    ;Print a single character
   292 00005605 48BB-               <1>     mov rbx, .ascii
   292 00005607 [7F57000000000000]  <1>
   293 0000560F D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   294                              <1>     ;xor bh, bh
   295 00005610 B40E                <1>     mov ah, 0Eh
   296 00005612 CD30                <1>     int 30h    ;print char
   297 00005614 C3                  <1>     ret
   298                              <1> .printbyte:
   299 00005615 88C2                <1>     mov dl, al            ;save byte in dl
   300 00005617 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   301 0000561B 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   302 00005620 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   303 00005624 E8DCFFFFFF          <1>     call .char
   304 00005629 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   305 0000562C E8D4FFFFFF          <1>     call .char
   306 00005631 C3                  <1>     ret    
   307 00005632 5343502F42494F53    <1> .fatalt0:  db "SCP/BIOS"
   308 0000563A 4120706F74656E7469- <1> .fatal1:   db "A potentially fatal error has occured. To continue: ",0Ah,0Ah,0Dh
   308 00005643 616C6C792066617461- <1>
   308 0000564C 6C206572726F722068- <1>
   308 00005655 6173206F6363757265- <1>
   308 0000565E 642E20546F20636F6E- <1>
   308 00005667 74696E75653A200A0A- <1>
   308 00005670 0D                  <1>
   309 00005671 202020205072657373- <1> db "    Press Enter to launch SYSDEBUG, or",0Ah,0Ah,0Dh 
   309 0000567A 20456E74657220746F- <1>
   309 00005683 206C61756E63682053- <1>
   309 0000568C 595344454255472C20- <1>
   309 00005695 6F720A0A0D          <1>
   310 0000569A 202020205072657373- <1> db "    Press ESC to try and return to the application which caused the error," 
   310 000056A3 2045534320746F2074- <1>
   310 000056AC 727920616E64207265- <1>
   310 000056B5 7475726E20746F2074- <1>
   310 000056BE 6865206170706C6963- <1>
   310 000056C7 6174696F6E20776869- <1>
   310 000056D0 636820636175736564- <1>
   310 000056D9 20746865206572726F- <1>
   310 000056E2 722C                <1>
   311 000056E4 6F720A0A0D          <1> db "or", 0Ah, 0Ah,0Dh,
   312 000056E9 202020205072657373- <1> db "    Press CTRL+ALT+DEL to restart your system. If you do this,",0Ah,0Dh
   312 000056F2 204354524C2B414C54- <1>
   312 000056FB 2B44454C20746F2072- <1>
   312 00005704 65737461727420796F- <1>
   312 0000570D 75722073797374656D- <1>
   312 00005716 2E20496620796F7520- <1>
   312 0000571F 646F20746869732C0A- <1>
   312 00005728 0D                  <1>
   313 00005729 20202020796F752077- <1> db "    you will lose any unsaved information in all open applications.",0Ah, 
   313 00005732 696C6C206C6F736520- <1>
   313 0000573B 616E7920756E736176- <1>
   313 00005744 656420696E666F726D- <1>
   313 0000574D 6174696F6E20696E20- <1>
   313 00005756 616C6C206F70656E20- <1>
   313 0000575F 6170706C6963617469- <1>
   313 00005768 6F6E732E0A          <1>
   314 0000576D 0A0D                <1> db 0Ah, 0Dh
   315 0000576F 202020204572726F72- <1> db "    Error: ",0
   315 00005778 3A2000              <1>
   316 0000577B 203A2000            <1> .fatal2:   db " : ",0
   317 0000577F 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   317 00005788 39414243444546      <1>
   112                                  ;==========================Dummy Interrupts======================
   113                                  %include "./Source/Resident/Hardware/dummyInt.asm"
   114                              <1> dummy_interrupt:
   115                              <1> .pic2:
   116 0000578F 50                  <1>     push rax
   117 00005790 B020                <1>     mov al, EOI
   118 00005792 E6A0                <1>     out pic2command, al    ;EOI to pic2
   119 00005794 EB01                <1>     jmp short .p1
   120                              <1> .pic1:
   121 00005796 50                  <1>     push rax
   122                              <1> .p1:
   123 00005797 B020                <1>     mov al, EOI
   124 00005799 E620                <1>     out pic1command, al    ;EOI to pic2
   125 0000579B 58                  <1>     pop rax
   126                              <1> dummy_return_64:
   127 0000579C 48CF                <1>     iretq
   114                                  %include "./Source/Resident/Misc/version.asm"
   115                              <1> ;----------------------------------------------------------------
   116 0000579E 76302E392053435042- <1> signature:    db "v0.9 SCPBIOS"    ;12 byte signature
   116 000057A7 494F53              <1>
   117 000057AA 436F70797269676874- <1> signature2:   db "Copyright (C) Yll Buzoku"
   117 000057B3 2028432920596C6C20- <1>
   117 000057BC 42757A6F6B75        <1>
   118 000057C2 30332F31322F323032- <1>               db "03/12/2021"
   118 000057CB 31                  <1>
   115                                  codeResidentEndPtr:
   116                                  residentLength  equ $-$$
